
bus_reseau_tp1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4f4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  0800a6c8  0800a6c8  0000b6c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ada8  0800ada8  0000c1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ada8  0800ada8  0000bda8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800adb0  0800adb0  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adb0  0800adb0  0000bdb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800adb4  0800adb4  0000bdb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800adb8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  200001d8  0800af90  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  0800af90  0000c4ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec83  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000240d  00000000  00000000  0001ae8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  0001d298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009de  00000000  00000000  0001df38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022fb5  00000000  00000000  0001e916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001006d  00000000  00000000  000418cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfa16  00000000  00000000  00051938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012134e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004af0  00000000  00000000  00121394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  00125e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a6ac 	.word	0x0800a6ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800a6ac 	.word	0x0800a6ac

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_ldivmod>:
 8000ce8:	b97b      	cbnz	r3, 8000d0a <__aeabi_ldivmod+0x22>
 8000cea:	b972      	cbnz	r2, 8000d0a <__aeabi_ldivmod+0x22>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bfbe      	ittt	lt
 8000cf0:	2000      	movlt	r0, #0
 8000cf2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cf6:	e006      	blt.n	8000d06 <__aeabi_ldivmod+0x1e>
 8000cf8:	bf08      	it	eq
 8000cfa:	2800      	cmpeq	r0, #0
 8000cfc:	bf1c      	itt	ne
 8000cfe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000d02:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d06:	f000 b9eb 	b.w	80010e0 <__aeabi_idiv0>
 8000d0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d12:	2900      	cmp	r1, #0
 8000d14:	db09      	blt.n	8000d2a <__aeabi_ldivmod+0x42>
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db1a      	blt.n	8000d50 <__aeabi_ldivmod+0x68>
 8000d1a:	f000 f883 	bl	8000e24 <__udivmoddi4>
 8000d1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d26:	b004      	add	sp, #16
 8000d28:	4770      	bx	lr
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db1b      	blt.n	8000d6c <__aeabi_ldivmod+0x84>
 8000d34:	f000 f876 	bl	8000e24 <__udivmoddi4>
 8000d38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d40:	b004      	add	sp, #16
 8000d42:	4240      	negs	r0, r0
 8000d44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d48:	4252      	negs	r2, r2
 8000d4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d4e:	4770      	bx	lr
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	f000 f865 	bl	8000e24 <__udivmoddi4>
 8000d5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d62:	b004      	add	sp, #16
 8000d64:	4240      	negs	r0, r0
 8000d66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d6a:	4770      	bx	lr
 8000d6c:	4252      	negs	r2, r2
 8000d6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d72:	f000 f857 	bl	8000e24 <__udivmoddi4>
 8000d76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d7e:	b004      	add	sp, #16
 8000d80:	4252      	negs	r2, r2
 8000d82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_uldivmod>:
 8000d88:	b953      	cbnz	r3, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8a:	b94a      	cbnz	r2, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	bf08      	it	eq
 8000d90:	2800      	cmpeq	r0, #0
 8000d92:	bf1c      	itt	ne
 8000d94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000d98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d9c:	f000 b9a0 	b.w	80010e0 <__aeabi_idiv0>
 8000da0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000da8:	f000 f83c 	bl	8000e24 <__udivmoddi4>
 8000dac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db4:	b004      	add	sp, #16
 8000db6:	4770      	bx	lr

08000db8 <__aeabi_d2lz>:
 8000db8:	b538      	push	{r3, r4, r5, lr}
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	460d      	mov	r5, r1
 8000dc2:	f7ff febb 	bl	8000b3c <__aeabi_dcmplt>
 8000dc6:	b928      	cbnz	r0, 8000dd4 <__aeabi_d2lz+0x1c>
 8000dc8:	4620      	mov	r0, r4
 8000dca:	4629      	mov	r1, r5
 8000dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dd0:	f000 b80a 	b.w	8000de8 <__aeabi_d2ulz>
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000dda:	f000 f805 	bl	8000de8 <__aeabi_d2ulz>
 8000dde:	4240      	negs	r0, r0
 8000de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de4:	bd38      	pop	{r3, r4, r5, pc}
 8000de6:	bf00      	nop

08000de8 <__aeabi_d2ulz>:
 8000de8:	b5d0      	push	{r4, r6, r7, lr}
 8000dea:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <__aeabi_d2ulz+0x34>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	4606      	mov	r6, r0
 8000df0:	460f      	mov	r7, r1
 8000df2:	f7ff fc31 	bl	8000658 <__aeabi_dmul>
 8000df6:	f7ff ff07 	bl	8000c08 <__aeabi_d2uiz>
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	f7ff fbb2 	bl	8000564 <__aeabi_ui2d>
 8000e00:	4b07      	ldr	r3, [pc, #28]	@ (8000e20 <__aeabi_d2ulz+0x38>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	f7ff fc28 	bl	8000658 <__aeabi_dmul>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	4639      	mov	r1, r7
 8000e10:	f7ff fa6a 	bl	80002e8 <__aeabi_dsub>
 8000e14:	f7ff fef8 	bl	8000c08 <__aeabi_d2uiz>
 8000e18:	4621      	mov	r1, r4
 8000e1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e1c:	3df00000 	.word	0x3df00000
 8000e20:	41f00000 	.word	0x41f00000

08000e24 <__udivmoddi4>:
 8000e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e28:	9d08      	ldr	r5, [sp, #32]
 8000e2a:	460c      	mov	r4, r1
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d14e      	bne.n	8000ece <__udivmoddi4+0xaa>
 8000e30:	4694      	mov	ip, r2
 8000e32:	458c      	cmp	ip, r1
 8000e34:	4686      	mov	lr, r0
 8000e36:	fab2 f282 	clz	r2, r2
 8000e3a:	d962      	bls.n	8000f02 <__udivmoddi4+0xde>
 8000e3c:	b14a      	cbz	r2, 8000e52 <__udivmoddi4+0x2e>
 8000e3e:	f1c2 0320 	rsb	r3, r2, #32
 8000e42:	4091      	lsls	r1, r2
 8000e44:	fa20 f303 	lsr.w	r3, r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	4319      	orrs	r1, r3
 8000e4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e56:	fa1f f68c 	uxth.w	r6, ip
 8000e5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e62:	fb07 1114 	mls	r1, r7, r4, r1
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb04 f106 	mul.w	r1, r4, r6
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	d90a      	bls.n	8000e88 <__udivmoddi4+0x64>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000e7a:	f080 8112 	bcs.w	80010a2 <__udivmoddi4+0x27e>
 8000e7e:	4299      	cmp	r1, r3
 8000e80:	f240 810f 	bls.w	80010a2 <__udivmoddi4+0x27e>
 8000e84:	3c02      	subs	r4, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1a59      	subs	r1, r3, r1
 8000e8a:	fa1f f38e 	uxth.w	r3, lr
 8000e8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e92:	fb07 1110 	mls	r1, r7, r0, r1
 8000e96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e9a:	fb00 f606 	mul.w	r6, r0, r6
 8000e9e:	429e      	cmp	r6, r3
 8000ea0:	d90a      	bls.n	8000eb8 <__udivmoddi4+0x94>
 8000ea2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000eaa:	f080 80fc 	bcs.w	80010a6 <__udivmoddi4+0x282>
 8000eae:	429e      	cmp	r6, r3
 8000eb0:	f240 80f9 	bls.w	80010a6 <__udivmoddi4+0x282>
 8000eb4:	4463      	add	r3, ip
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	1b9b      	subs	r3, r3, r6
 8000eba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	b11d      	cbz	r5, 8000eca <__udivmoddi4+0xa6>
 8000ec2:	40d3      	lsrs	r3, r2
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	e9c5 3200 	strd	r3, r2, [r5]
 8000eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d905      	bls.n	8000ede <__udivmoddi4+0xba>
 8000ed2:	b10d      	cbz	r5, 8000ed8 <__udivmoddi4+0xb4>
 8000ed4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4608      	mov	r0, r1
 8000edc:	e7f5      	b.n	8000eca <__udivmoddi4+0xa6>
 8000ede:	fab3 f183 	clz	r1, r3
 8000ee2:	2900      	cmp	r1, #0
 8000ee4:	d146      	bne.n	8000f74 <__udivmoddi4+0x150>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d302      	bcc.n	8000ef0 <__udivmoddi4+0xcc>
 8000eea:	4290      	cmp	r0, r2
 8000eec:	f0c0 80f0 	bcc.w	80010d0 <__udivmoddi4+0x2ac>
 8000ef0:	1a86      	subs	r6, r0, r2
 8000ef2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	2d00      	cmp	r5, #0
 8000efa:	d0e6      	beq.n	8000eca <__udivmoddi4+0xa6>
 8000efc:	e9c5 6300 	strd	r6, r3, [r5]
 8000f00:	e7e3      	b.n	8000eca <__udivmoddi4+0xa6>
 8000f02:	2a00      	cmp	r2, #0
 8000f04:	f040 8090 	bne.w	8001028 <__udivmoddi4+0x204>
 8000f08:	eba1 040c 	sub.w	r4, r1, ip
 8000f0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f10:	fa1f f78c 	uxth.w	r7, ip
 8000f14:	2101      	movs	r1, #1
 8000f16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000f22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f26:	fb07 f006 	mul.w	r0, r7, r6
 8000f2a:	4298      	cmp	r0, r3
 8000f2c:	d908      	bls.n	8000f40 <__udivmoddi4+0x11c>
 8000f2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f32:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000f36:	d202      	bcs.n	8000f3e <__udivmoddi4+0x11a>
 8000f38:	4298      	cmp	r0, r3
 8000f3a:	f200 80cd 	bhi.w	80010d8 <__udivmoddi4+0x2b4>
 8000f3e:	4626      	mov	r6, r4
 8000f40:	1a1c      	subs	r4, r3, r0
 8000f42:	fa1f f38e 	uxth.w	r3, lr
 8000f46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f52:	fb00 f707 	mul.w	r7, r0, r7
 8000f56:	429f      	cmp	r7, r3
 8000f58:	d908      	bls.n	8000f6c <__udivmoddi4+0x148>
 8000f5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f5e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000f62:	d202      	bcs.n	8000f6a <__udivmoddi4+0x146>
 8000f64:	429f      	cmp	r7, r3
 8000f66:	f200 80b0 	bhi.w	80010ca <__udivmoddi4+0x2a6>
 8000f6a:	4620      	mov	r0, r4
 8000f6c:	1bdb      	subs	r3, r3, r7
 8000f6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f72:	e7a5      	b.n	8000ec0 <__udivmoddi4+0x9c>
 8000f74:	f1c1 0620 	rsb	r6, r1, #32
 8000f78:	408b      	lsls	r3, r1
 8000f7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f7e:	431f      	orrs	r7, r3
 8000f80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f84:	fa04 f301 	lsl.w	r3, r4, r1
 8000f88:	ea43 030c 	orr.w	r3, r3, ip
 8000f8c:	40f4      	lsrs	r4, r6
 8000f8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f92:	0c38      	lsrs	r0, r7, #16
 8000f94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f98:	fbb4 fef0 	udiv	lr, r4, r0
 8000f9c:	fa1f fc87 	uxth.w	ip, r7
 8000fa0:	fb00 441e 	mls	r4, r0, lr, r4
 8000fa4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fa8:	fb0e f90c 	mul.w	r9, lr, ip
 8000fac:	45a1      	cmp	r9, r4
 8000fae:	fa02 f201 	lsl.w	r2, r2, r1
 8000fb2:	d90a      	bls.n	8000fca <__udivmoddi4+0x1a6>
 8000fb4:	193c      	adds	r4, r7, r4
 8000fb6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000fba:	f080 8084 	bcs.w	80010c6 <__udivmoddi4+0x2a2>
 8000fbe:	45a1      	cmp	r9, r4
 8000fc0:	f240 8081 	bls.w	80010c6 <__udivmoddi4+0x2a2>
 8000fc4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fc8:	443c      	add	r4, r7
 8000fca:	eba4 0409 	sub.w	r4, r4, r9
 8000fce:	fa1f f983 	uxth.w	r9, r3
 8000fd2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fd6:	fb00 4413 	mls	r4, r0, r3, r4
 8000fda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fde:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fe2:	45a4      	cmp	ip, r4
 8000fe4:	d907      	bls.n	8000ff6 <__udivmoddi4+0x1d2>
 8000fe6:	193c      	adds	r4, r7, r4
 8000fe8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000fec:	d267      	bcs.n	80010be <__udivmoddi4+0x29a>
 8000fee:	45a4      	cmp	ip, r4
 8000ff0:	d965      	bls.n	80010be <__udivmoddi4+0x29a>
 8000ff2:	3b02      	subs	r3, #2
 8000ff4:	443c      	add	r4, r7
 8000ff6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ffa:	fba0 9302 	umull	r9, r3, r0, r2
 8000ffe:	eba4 040c 	sub.w	r4, r4, ip
 8001002:	429c      	cmp	r4, r3
 8001004:	46ce      	mov	lr, r9
 8001006:	469c      	mov	ip, r3
 8001008:	d351      	bcc.n	80010ae <__udivmoddi4+0x28a>
 800100a:	d04e      	beq.n	80010aa <__udivmoddi4+0x286>
 800100c:	b155      	cbz	r5, 8001024 <__udivmoddi4+0x200>
 800100e:	ebb8 030e 	subs.w	r3, r8, lr
 8001012:	eb64 040c 	sbc.w	r4, r4, ip
 8001016:	fa04 f606 	lsl.w	r6, r4, r6
 800101a:	40cb      	lsrs	r3, r1
 800101c:	431e      	orrs	r6, r3
 800101e:	40cc      	lsrs	r4, r1
 8001020:	e9c5 6400 	strd	r6, r4, [r5]
 8001024:	2100      	movs	r1, #0
 8001026:	e750      	b.n	8000eca <__udivmoddi4+0xa6>
 8001028:	f1c2 0320 	rsb	r3, r2, #32
 800102c:	fa20 f103 	lsr.w	r1, r0, r3
 8001030:	fa0c fc02 	lsl.w	ip, ip, r2
 8001034:	fa24 f303 	lsr.w	r3, r4, r3
 8001038:	4094      	lsls	r4, r2
 800103a:	430c      	orrs	r4, r1
 800103c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001040:	fa00 fe02 	lsl.w	lr, r0, r2
 8001044:	fa1f f78c 	uxth.w	r7, ip
 8001048:	fbb3 f0f8 	udiv	r0, r3, r8
 800104c:	fb08 3110 	mls	r1, r8, r0, r3
 8001050:	0c23      	lsrs	r3, r4, #16
 8001052:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001056:	fb00 f107 	mul.w	r1, r0, r7
 800105a:	4299      	cmp	r1, r3
 800105c:	d908      	bls.n	8001070 <__udivmoddi4+0x24c>
 800105e:	eb1c 0303 	adds.w	r3, ip, r3
 8001062:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8001066:	d22c      	bcs.n	80010c2 <__udivmoddi4+0x29e>
 8001068:	4299      	cmp	r1, r3
 800106a:	d92a      	bls.n	80010c2 <__udivmoddi4+0x29e>
 800106c:	3802      	subs	r0, #2
 800106e:	4463      	add	r3, ip
 8001070:	1a5b      	subs	r3, r3, r1
 8001072:	b2a4      	uxth	r4, r4
 8001074:	fbb3 f1f8 	udiv	r1, r3, r8
 8001078:	fb08 3311 	mls	r3, r8, r1, r3
 800107c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001080:	fb01 f307 	mul.w	r3, r1, r7
 8001084:	42a3      	cmp	r3, r4
 8001086:	d908      	bls.n	800109a <__udivmoddi4+0x276>
 8001088:	eb1c 0404 	adds.w	r4, ip, r4
 800108c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8001090:	d213      	bcs.n	80010ba <__udivmoddi4+0x296>
 8001092:	42a3      	cmp	r3, r4
 8001094:	d911      	bls.n	80010ba <__udivmoddi4+0x296>
 8001096:	3902      	subs	r1, #2
 8001098:	4464      	add	r4, ip
 800109a:	1ae4      	subs	r4, r4, r3
 800109c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010a0:	e739      	b.n	8000f16 <__udivmoddi4+0xf2>
 80010a2:	4604      	mov	r4, r0
 80010a4:	e6f0      	b.n	8000e88 <__udivmoddi4+0x64>
 80010a6:	4608      	mov	r0, r1
 80010a8:	e706      	b.n	8000eb8 <__udivmoddi4+0x94>
 80010aa:	45c8      	cmp	r8, r9
 80010ac:	d2ae      	bcs.n	800100c <__udivmoddi4+0x1e8>
 80010ae:	ebb9 0e02 	subs.w	lr, r9, r2
 80010b2:	eb63 0c07 	sbc.w	ip, r3, r7
 80010b6:	3801      	subs	r0, #1
 80010b8:	e7a8      	b.n	800100c <__udivmoddi4+0x1e8>
 80010ba:	4631      	mov	r1, r6
 80010bc:	e7ed      	b.n	800109a <__udivmoddi4+0x276>
 80010be:	4603      	mov	r3, r0
 80010c0:	e799      	b.n	8000ff6 <__udivmoddi4+0x1d2>
 80010c2:	4630      	mov	r0, r6
 80010c4:	e7d4      	b.n	8001070 <__udivmoddi4+0x24c>
 80010c6:	46d6      	mov	lr, sl
 80010c8:	e77f      	b.n	8000fca <__udivmoddi4+0x1a6>
 80010ca:	4463      	add	r3, ip
 80010cc:	3802      	subs	r0, #2
 80010ce:	e74d      	b.n	8000f6c <__udivmoddi4+0x148>
 80010d0:	4606      	mov	r6, r0
 80010d2:	4623      	mov	r3, r4
 80010d4:	4608      	mov	r0, r1
 80010d6:	e70f      	b.n	8000ef8 <__udivmoddi4+0xd4>
 80010d8:	3e02      	subs	r6, #2
 80010da:	4463      	add	r3, ip
 80010dc:	e730      	b.n	8000f40 <__udivmoddi4+0x11c>
 80010de:	bf00      	nop

080010e0 <__aeabi_idiv0>:
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop

080010e4 <BMP280_checkID>:
//HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 1, -1);

//HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, 1, -1);
//printf("Idreg: 0x%x\r\n", buf[0]); 

int BMP280_checkID(void) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af02      	add	r7, sp, #8


	//FOnctionnel au 23 oct 18h59 <<<<<<< aussi 9 nov 19h34 organisé

	uint8_t buf[10];
	buf[0]=BMP280_ID_REG;
 80010ea:	23d0      	movs	r3, #208	@ 0xd0
 80010ec:	713b      	strb	r3, [r7, #4]

	retour = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 1, -1);
 80010ee:	23ee      	movs	r3, #238	@ 0xee
 80010f0:	4619      	mov	r1, r3
 80010f2:	1d3a      	adds	r2, r7, #4
 80010f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	2301      	movs	r3, #1
 80010fc:	4815      	ldr	r0, [pc, #84]	@ (8001154 <BMP280_checkID+0x70>)
 80010fe:	f002 fa09 	bl	8003514 <HAL_I2C_Master_Transmit>
 8001102:	4603      	mov	r3, r0
 8001104:	461a      	mov	r2, r3
 8001106:	4b14      	ldr	r3, [pc, #80]	@ (8001158 <BMP280_checkID+0x74>)
 8001108:	701a      	strb	r2, [r3, #0]

	//printf("checkID : transmission in progress\r\n");

	if(retour != HAL_OK){
 800110a:	4b13      	ldr	r3, [pc, #76]	@ (8001158 <BMP280_checkID+0x74>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d004      	beq.n	800111c <BMP280_checkID+0x38>

		printf(" \n checkID : problem during transmission \r\n");
 8001112:	4812      	ldr	r0, [pc, #72]	@ (800115c <BMP280_checkID+0x78>)
 8001114:	f005 fe88 	bl	8006e28 <puts>

		return 1;
 8001118:	2301      	movs	r3, #1
 800111a:	e016      	b.n	800114a <BMP280_checkID+0x66>
	else{
		//%%printf("no problem during transmission ... transmission complete -> reception in progress\r\n");
	}


	retour = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, 1, -1);
 800111c:	23ee      	movs	r3, #238	@ 0xee
 800111e:	4619      	mov	r1, r3
 8001120:	1d3a      	adds	r2, r7, #4
 8001122:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	2301      	movs	r3, #1
 800112a:	480a      	ldr	r0, [pc, #40]	@ (8001154 <BMP280_checkID+0x70>)
 800112c:	f002 faf0 	bl	8003710 <HAL_I2C_Master_Receive>
 8001130:	4603      	mov	r3, r0
 8001132:	461a      	mov	r2, r3
 8001134:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <BMP280_checkID+0x74>)
 8001136:	701a      	strb	r2, [r3, #0]
	if(retour != HAL_OK){
 8001138:	4b07      	ldr	r3, [pc, #28]	@ (8001158 <BMP280_checkID+0x74>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d004      	beq.n	800114a <BMP280_checkID+0x66>

		printf(" \n checkID : problem during reception I2C\r\n");
 8001140:	4807      	ldr	r0, [pc, #28]	@ (8001160 <BMP280_checkID+0x7c>)
 8001142:	f005 fe71 	bl	8006e28 <puts>

		return 1;
 8001146:	2301      	movs	r3, #1
 8001148:	e7ff      	b.n	800114a <BMP280_checkID+0x66>
	else{

		//printf("\n reception complete ...  : Register Id content : 0x%x\r\n", buf[0]);
	}

}
 800114a:	4618      	mov	r0, r3
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000274 	.word	0x20000274
 8001158:	200001f4 	.word	0x200001f4
 800115c:	0800a6c8 	.word	0x0800a6c8
 8001160:	0800a6f4 	.word	0x0800a6f4

08001164 <BMP280_config>:




void BMP280_config(void) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af02      	add	r7, sp, #8
	uint8_t part1 = 0b010 << 5;  // Décalage de 5 bits
 800116a:	2340      	movs	r3, #64	@ 0x40
 800116c:	71fb      	strb	r3, [r7, #7]
	uint8_t part2 = 0b101 << 2;  // Décalage de 2 bits
 800116e:	2314      	movs	r3, #20
 8001170:	71bb      	strb	r3, [r7, #6]
	uint8_t part3 = 0b11;        // Pas de décalage
 8001172:	2303      	movs	r3, #3
 8001174:	717b      	strb	r3, [r7, #5]
	printf("Part3 (0b11)       = %u\r\n", part3);   // Affiche 3



	 */
	uint8_t sumPart=part1+part2+part3;
 8001176:	79fa      	ldrb	r2, [r7, #7]
 8001178:	79bb      	ldrb	r3, [r7, #6]
 800117a:	4413      	add	r3, r2
 800117c:	b2da      	uxtb	r2, r3
 800117e:	797b      	ldrb	r3, [r7, #5]
 8001180:	4413      	add	r3, r2
 8001182:	713b      	strb	r3, [r7, #4]
	//^^printf(" sum of parts = Part1+Part2+Part3 = %u \r\n",sumPart);   // Affiche 3
	uint8_t config = part1 | part2 | part3;
 8001184:	79fa      	ldrb	r2, [r7, #7]
 8001186:	79bb      	ldrb	r3, [r7, #6]
 8001188:	4313      	orrs	r3, r2
 800118a:	b2da      	uxtb	r2, r3
 800118c:	797b      	ldrb	r3, [r7, #5]
 800118e:	4313      	orrs	r3, r2
 8001190:	70fb      	strb	r3, [r7, #3]


	uint8_t buf[2];


	buf[0] = ctrl_meas;
 8001192:	4b20      	ldr	r3, [pc, #128]	@ (8001214 <BMP280_config+0xb0>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	703b      	strb	r3, [r7, #0]

	buf[1] = config;  //mot binaire a ecrire pour conf correctement 
 8001198:	78fb      	ldrb	r3, [r7, #3]
 800119a:	707b      	strb	r3, [r7, #1]

	retour = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 2,HAL_MAX_DELAY);
 800119c:	23ee      	movs	r3, #238	@ 0xee
 800119e:	4619      	mov	r1, r3
 80011a0:	463a      	mov	r2, r7
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2302      	movs	r3, #2
 80011aa:	481b      	ldr	r0, [pc, #108]	@ (8001218 <BMP280_config+0xb4>)
 80011ac:	f002 f9b2 	bl	8003514 <HAL_I2C_Master_Transmit>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461a      	mov	r2, r3
 80011b4:	4b19      	ldr	r3, [pc, #100]	@ (800121c <BMP280_config+0xb8>)
 80011b6:	701a      	strb	r2, [r3, #0]

	//%%printf("configuration : transmission in progress\r\n");

	if (retour != HAL_OK) {
 80011b8:	4b18      	ldr	r3, [pc, #96]	@ (800121c <BMP280_config+0xb8>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <BMP280_config+0x64>

		printf("\n config: problem during transmission \r\n\r\n");
 80011c0:	4817      	ldr	r0, [pc, #92]	@ (8001220 <BMP280_config+0xbc>)
 80011c2:	f005 fe31 	bl	8006e28 <puts>
 80011c6:	e002      	b.n	80011ce <BMP280_config+0x6a>

	}

	else{
		printf("config : no problem during transmission ... transmission complete -> reception in progress\r\n");
 80011c8:	4816      	ldr	r0, [pc, #88]	@ (8001224 <BMP280_config+0xc0>)
 80011ca:	f005 fe2d 	bl	8006e28 <puts>
	}

	retour = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 80011ce:	23ee      	movs	r3, #238	@ 0xee
 80011d0:	4619      	mov	r1, r3
 80011d2:	463a      	mov	r2, r7
 80011d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	480e      	ldr	r0, [pc, #56]	@ (8001218 <BMP280_config+0xb4>)
 80011de:	f002 fa97 	bl	8003710 <HAL_I2C_Master_Receive>
 80011e2:	4603      	mov	r3, r0
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b0d      	ldr	r3, [pc, #52]	@ (800121c <BMP280_config+0xb8>)
 80011e8:	701a      	strb	r2, [r3, #0]

	if (retour != HAL_OK) {
 80011ea:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <BMP280_config+0xb8>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d002      	beq.n	80011f8 <BMP280_config+0x94>

		printf("\n config : problem during reception I2C\r\n");
 80011f2:	480d      	ldr	r0, [pc, #52]	@ (8001228 <BMP280_config+0xc4>)
 80011f4:	f005 fe18 	bl	8006e28 <puts>

	}
	//^^^printf("config = %u\r\n",config);
	if (buf[0] == config) {
 80011f8:	783b      	ldrb	r3, [r7, #0]
 80011fa:	78fa      	ldrb	r2, [r7, #3]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d104      	bne.n	800120a <BMP280_config+0xa6>

		printf("\nconfig : well configured - configuration value = hexadecimal : 0x%x | decimal  : 0d%u\r\n", buf[0]);
 8001200:	783b      	ldrb	r3, [r7, #0]
 8001202:	4619      	mov	r1, r3
 8001204:	4809      	ldr	r0, [pc, #36]	@ (800122c <BMP280_config+0xc8>)
 8001206:	f005 fda7 	bl	8006d58 <iprintf>

	}



}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000000 	.word	0x20000000
 8001218:	20000274 	.word	0x20000274
 800121c:	200001f4 	.word	0x200001f4
 8001220:	0800a720 	.word	0x0800a720
 8001224:	0800a74c 	.word	0x0800a74c
 8001228:	0800a7a8 	.word	0x0800a7a8
 800122c:	0800a7d4 	.word	0x0800a7d4

08001230 <BMP280_calib>:

void BMP280_calib(void) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	@ 0x28
 8001234:	af02      	add	r7, sp, #8
	//on demande la lecture avec le transmit

	//BMP280_TRIM_REG_MSB  est déclarée dans BMP280_vincent.h

	// l'adresse de la variable BMP280_TRIM_REG_MSB est passée a la fonction qui attends une adresse en paramètre (celle sur laquelle pointerait le pointeur pData)
	retour = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &BMP280_TRIM_REG_MSB,1, HAL_MAX_DELAY);
 8001236:	23ee      	movs	r3, #238	@ 0xee
 8001238:	4619      	mov	r1, r3
 800123a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2301      	movs	r3, #1
 8001242:	4a4b      	ldr	r2, [pc, #300]	@ (8001370 <BMP280_calib+0x140>)
 8001244:	484b      	ldr	r0, [pc, #300]	@ (8001374 <BMP280_calib+0x144>)
 8001246:	f002 f965 	bl	8003514 <HAL_I2C_Master_Transmit>
 800124a:	4603      	mov	r3, r0
 800124c:	461a      	mov	r2, r3
 800124e:	4b4a      	ldr	r3, [pc, #296]	@ (8001378 <BMP280_calib+0x148>)
 8001250:	701a      	strb	r2, [r3, #0]

	if (retour != HAL_OK) {
 8001252:	4b49      	ldr	r3, [pc, #292]	@ (8001378 <BMP280_calib+0x148>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	f040 8085 	bne.w	8001366 <BMP280_calib+0x136>
		//printf("Probleme calib I2C\r\n");
		return;
	}
	//on lit la réponse qu'on stocke dans le buffer buf_data
	retour = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf_data, 24,HAL_MAX_DELAY);
 800125c:	23ee      	movs	r3, #238	@ 0xee
 800125e:	4619      	mov	r1, r3
 8001260:	1d3a      	adds	r2, r7, #4
 8001262:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2318      	movs	r3, #24
 800126a:	4842      	ldr	r0, [pc, #264]	@ (8001374 <BMP280_calib+0x144>)
 800126c:	f002 fa50 	bl	8003710 <HAL_I2C_Master_Receive>
 8001270:	4603      	mov	r3, r0
 8001272:	461a      	mov	r2, r3
 8001274:	4b40      	ldr	r3, [pc, #256]	@ (8001378 <BMP280_calib+0x148>)
 8001276:	701a      	strb	r2, [r3, #0]

	}
	else {	//on affiche les données d'étallonage reçues

	}
	dig_T1 = buf_data[0] | (buf_data[1] << 8);
 8001278:	793b      	ldrb	r3, [r7, #4]
 800127a:	b21a      	sxth	r2, r3
 800127c:	797b      	ldrb	r3, [r7, #5]
 800127e:	021b      	lsls	r3, r3, #8
 8001280:	b21b      	sxth	r3, r3
 8001282:	4313      	orrs	r3, r2
 8001284:	b21b      	sxth	r3, r3
 8001286:	b29a      	uxth	r2, r3
 8001288:	4b3c      	ldr	r3, [pc, #240]	@ (800137c <BMP280_calib+0x14c>)
 800128a:	801a      	strh	r2, [r3, #0]
	dig_T2 = buf_data[2] | (buf_data[3] << 8);
 800128c:	79bb      	ldrb	r3, [r7, #6]
 800128e:	b21a      	sxth	r2, r3
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	b21b      	sxth	r3, r3
 8001296:	4313      	orrs	r3, r2
 8001298:	b21a      	sxth	r2, r3
 800129a:	4b39      	ldr	r3, [pc, #228]	@ (8001380 <BMP280_calib+0x150>)
 800129c:	801a      	strh	r2, [r3, #0]
	dig_T3 = buf_data[4] | (buf_data[5] << 8);
 800129e:	7a3b      	ldrb	r3, [r7, #8]
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	7a7b      	ldrb	r3, [r7, #9]
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	4313      	orrs	r3, r2
 80012aa:	b21a      	sxth	r2, r3
 80012ac:	4b35      	ldr	r3, [pc, #212]	@ (8001384 <BMP280_calib+0x154>)
 80012ae:	801a      	strh	r2, [r3, #0]

	dig_P1 = buf_data[6] | (buf_data[7] << 8);
 80012b0:	7abb      	ldrb	r3, [r7, #10]
 80012b2:	b21a      	sxth	r2, r3
 80012b4:	7afb      	ldrb	r3, [r7, #11]
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	b21b      	sxth	r3, r3
 80012ba:	4313      	orrs	r3, r2
 80012bc:	b21a      	sxth	r2, r3
 80012be:	4b32      	ldr	r3, [pc, #200]	@ (8001388 <BMP280_calib+0x158>)
 80012c0:	801a      	strh	r2, [r3, #0]
	dig_P2 = buf_data[8] | (buf_data[9] << 8);
 80012c2:	7b3b      	ldrb	r3, [r7, #12]
 80012c4:	b21a      	sxth	r2, r3
 80012c6:	7b7b      	ldrb	r3, [r7, #13]
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	b21b      	sxth	r3, r3
 80012cc:	4313      	orrs	r3, r2
 80012ce:	b21a      	sxth	r2, r3
 80012d0:	4b2e      	ldr	r3, [pc, #184]	@ (800138c <BMP280_calib+0x15c>)
 80012d2:	801a      	strh	r2, [r3, #0]
	dig_P3 = buf_data[10] | (buf_data[11] << 8);
 80012d4:	7bbb      	ldrb	r3, [r7, #14]
 80012d6:	b21a      	sxth	r2, r3
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	021b      	lsls	r3, r3, #8
 80012dc:	b21b      	sxth	r3, r3
 80012de:	4313      	orrs	r3, r2
 80012e0:	b21a      	sxth	r2, r3
 80012e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001390 <BMP280_calib+0x160>)
 80012e4:	801a      	strh	r2, [r3, #0]
	dig_P4 = buf_data[12] | (buf_data[13] << 8);
 80012e6:	7c3b      	ldrb	r3, [r7, #16]
 80012e8:	b21a      	sxth	r2, r3
 80012ea:	7c7b      	ldrb	r3, [r7, #17]
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	4313      	orrs	r3, r2
 80012f2:	b21a      	sxth	r2, r3
 80012f4:	4b27      	ldr	r3, [pc, #156]	@ (8001394 <BMP280_calib+0x164>)
 80012f6:	801a      	strh	r2, [r3, #0]
	dig_P5 = buf_data[14] | (buf_data[15] << 8);
 80012f8:	7cbb      	ldrb	r3, [r7, #18]
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	7cfb      	ldrb	r3, [r7, #19]
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	b21b      	sxth	r3, r3
 8001302:	4313      	orrs	r3, r2
 8001304:	b21a      	sxth	r2, r3
 8001306:	4b24      	ldr	r3, [pc, #144]	@ (8001398 <BMP280_calib+0x168>)
 8001308:	801a      	strh	r2, [r3, #0]
	dig_P6 = buf_data[16] | (buf_data[17] << 8);
 800130a:	7d3b      	ldrb	r3, [r7, #20]
 800130c:	b21a      	sxth	r2, r3
 800130e:	7d7b      	ldrb	r3, [r7, #21]
 8001310:	021b      	lsls	r3, r3, #8
 8001312:	b21b      	sxth	r3, r3
 8001314:	4313      	orrs	r3, r2
 8001316:	b21a      	sxth	r2, r3
 8001318:	4b20      	ldr	r3, [pc, #128]	@ (800139c <BMP280_calib+0x16c>)
 800131a:	801a      	strh	r2, [r3, #0]
	dig_P7 = buf_data[18] | (buf_data[19] << 8);
 800131c:	7dbb      	ldrb	r3, [r7, #22]
 800131e:	b21a      	sxth	r2, r3
 8001320:	7dfb      	ldrb	r3, [r7, #23]
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	b21b      	sxth	r3, r3
 8001326:	4313      	orrs	r3, r2
 8001328:	b21a      	sxth	r2, r3
 800132a:	4b1d      	ldr	r3, [pc, #116]	@ (80013a0 <BMP280_calib+0x170>)
 800132c:	801a      	strh	r2, [r3, #0]
	dig_P8 = buf_data[20] | (buf_data[21] << 8);
 800132e:	7e3b      	ldrb	r3, [r7, #24]
 8001330:	b21a      	sxth	r2, r3
 8001332:	7e7b      	ldrb	r3, [r7, #25]
 8001334:	021b      	lsls	r3, r3, #8
 8001336:	b21b      	sxth	r3, r3
 8001338:	4313      	orrs	r3, r2
 800133a:	b21a      	sxth	r2, r3
 800133c:	4b19      	ldr	r3, [pc, #100]	@ (80013a4 <BMP280_calib+0x174>)
 800133e:	801a      	strh	r2, [r3, #0]
	dig_P9 = buf_data[22] | (buf_data[23] << 8);
 8001340:	7ebb      	ldrb	r3, [r7, #26]
 8001342:	b21a      	sxth	r2, r3
 8001344:	7efb      	ldrb	r3, [r7, #27]
 8001346:	021b      	lsls	r3, r3, #8
 8001348:	b21b      	sxth	r3, r3
 800134a:	4313      	orrs	r3, r2
 800134c:	b21a      	sxth	r2, r3
 800134e:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <BMP280_calib+0x178>)
 8001350:	801a      	strh	r2, [r3, #0]



	for (int i = 0; i < 24; i++) {
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
 8001356:	e002      	b.n	800135e <BMP280_calib+0x12e>
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	3301      	adds	r3, #1
 800135c:	61fb      	str	r3, [r7, #28]
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	2b17      	cmp	r3, #23
 8001362:	ddf9      	ble.n	8001358 <BMP280_calib+0x128>
 8001364:	e000      	b.n	8001368 <BMP280_calib+0x138>
		return;
 8001366:	bf00      	nop
		//printf("dans boucle for //registre d'etallonage calib= 0x%x soit %d \r\n ", buf_data[i],buf_data[i]);


	}

}
 8001368:	3720      	adds	r7, #32
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	0800a95e 	.word	0x0800a95e
 8001374:	20000274 	.word	0x20000274
 8001378:	200001f4 	.word	0x200001f4
 800137c:	20000230 	.word	0x20000230
 8001380:	20000232 	.word	0x20000232
 8001384:	20000234 	.word	0x20000234
 8001388:	20000236 	.word	0x20000236
 800138c:	20000238 	.word	0x20000238
 8001390:	2000023a 	.word	0x2000023a
 8001394:	2000023c 	.word	0x2000023c
 8001398:	2000023e 	.word	0x2000023e
 800139c:	20000240 	.word	0x20000240
 80013a0:	20000242 	.word	0x20000242
 80013a4:	20000244 	.word	0x20000244
 80013a8:	20000246 	.word	0x20000246

080013ac <BMP280_get_temperature>:

BMP280_S32_t BMP280_get_temperature() {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af02      	add	r7, sp, #8
	//on demande la lecture avec le transmit

	//BMP280_TEMP_REG_MSB   est déclarée dans BMP280_vincent.h

	// l'adresse de la variable BMP280_TEMP_REG_MSB  est passée a la fonction qui attend une adresse en paramètre (celle sur laquelle pointerait le pointeur pData)
	retour = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &BMP280_TEMP_REG_MSB, 1,
 80013b2:	23ee      	movs	r3, #238	@ 0xee
 80013b4:	4619      	mov	r1, r3
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	2301      	movs	r3, #1
 80013be:	4a15      	ldr	r2, [pc, #84]	@ (8001414 <BMP280_get_temperature+0x68>)
 80013c0:	4815      	ldr	r0, [pc, #84]	@ (8001418 <BMP280_get_temperature+0x6c>)
 80013c2:	f002 f8a7 	bl	8003514 <HAL_I2C_Master_Transmit>
 80013c6:	4603      	mov	r3, r0
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b14      	ldr	r3, [pc, #80]	@ (800141c <BMP280_get_temperature+0x70>)
 80013cc:	701a      	strb	r2, [r3, #0]

	if (retour != HAL_OK) {
		//^printf("Probleme I2C\r\n");
	}
	//on lit la réponse qu'on stocke dans le buffer buf_data
	retour = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf_data, 3,HAL_MAX_DELAY);
 80013ce:	23ee      	movs	r3, #238	@ 0xee
 80013d0:	4619      	mov	r1, r3
 80013d2:	463a      	mov	r2, r7
 80013d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	2303      	movs	r3, #3
 80013dc:	480e      	ldr	r0, [pc, #56]	@ (8001418 <BMP280_get_temperature+0x6c>)
 80013de:	f002 f997 	bl	8003710 <HAL_I2C_Master_Receive>
 80013e2:	4603      	mov	r3, r0
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b0d      	ldr	r3, [pc, #52]	@ (800141c <BMP280_get_temperature+0x70>)
 80013e8:	701a      	strb	r2, [r3, #0]

	if (retour != HAL_OK) {
 80013ea:	4b0c      	ldr	r3, [pc, #48]	@ (800141c <BMP280_get_temperature+0x70>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <BMP280_get_temperature+0x4a>

		//^printf("problem i2c");

		return 1;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00a      	b.n	800140c <BMP280_get_temperature+0x60>
	}

	adc_T = ((BMP280_S32_t) (buf_data[0]) << 12)| ( (BMP280_S32_t) (buf_data[1]) << 4)| ( (BMP280_S32_t) (buf_data[2]) >> 4);
 80013f6:	783b      	ldrb	r3, [r7, #0]
 80013f8:	031a      	lsls	r2, r3, #12
 80013fa:	787b      	ldrb	r3, [r7, #1]
 80013fc:	011b      	lsls	r3, r3, #4
 80013fe:	4313      	orrs	r3, r2
 8001400:	78ba      	ldrb	r2, [r7, #2]
 8001402:	0912      	lsrs	r2, r2, #4
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	4313      	orrs	r3, r2
 8001408:	607b      	str	r3, [r7, #4]

	//printf("%05lX", adc_T);

	//^printf("%d \r\n", adc_T);

	return adc_T;
 800140a:	687b      	ldr	r3, [r7, #4]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	0800a95f 	.word	0x0800a95f
 8001418:	20000274 	.word	0x20000274
 800141c:	200001f4 	.word	0x200001f4

08001420 <BMP280_get_pressure>:

BMP280_S32_t BMP280_get_pressure() {
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af02      	add	r7, sp, #8
	//on demande la lecture avec le transmit

	//BMP280_PRES_REG_MSB est déclarée dans BMP280_vincent.h

	// l'adresse de la variable BMP280_PRES_REG_MSB est passée a la fonction qui attend une adresse en paramètre (celle sur laquelle pointerait le pointeur pData)
	retour = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &BMP280_PRES_REG_MSB, 1,HAL_MAX_DELAY);
 8001426:	23ee      	movs	r3, #238	@ 0xee
 8001428:	4619      	mov	r1, r3
 800142a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	2301      	movs	r3, #1
 8001432:	4a15      	ldr	r2, [pc, #84]	@ (8001488 <BMP280_get_pressure+0x68>)
 8001434:	4815      	ldr	r0, [pc, #84]	@ (800148c <BMP280_get_pressure+0x6c>)
 8001436:	f002 f86d 	bl	8003514 <HAL_I2C_Master_Transmit>
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	4b14      	ldr	r3, [pc, #80]	@ (8001490 <BMP280_get_pressure+0x70>)
 8001440:	701a      	strb	r2, [r3, #0]

	if (retour != HAL_OK) {
		//printf("problem i2c\r\n");
	}
	//on lit la réponse qu'on stocke dans le buffer buf_data
	retour = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf_data, 3,HAL_MAX_DELAY);
 8001442:	23ee      	movs	r3, #238	@ 0xee
 8001444:	4619      	mov	r1, r3
 8001446:	463a      	mov	r2, r7
 8001448:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2303      	movs	r3, #3
 8001450:	480e      	ldr	r0, [pc, #56]	@ (800148c <BMP280_get_pressure+0x6c>)
 8001452:	f002 f95d 	bl	8003710 <HAL_I2C_Master_Receive>
 8001456:	4603      	mov	r3, r0
 8001458:	461a      	mov	r2, r3
 800145a:	4b0d      	ldr	r3, [pc, #52]	@ (8001490 <BMP280_get_pressure+0x70>)
 800145c:	701a      	strb	r2, [r3, #0]

	if (retour != HAL_OK) {
 800145e:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <BMP280_get_pressure+0x70>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <BMP280_get_pressure+0x4a>

		//^printf("problem i2c \r\n");

		return 1;
 8001466:	2301      	movs	r3, #1
 8001468:	e009      	b.n	800147e <BMP280_get_pressure+0x5e>
	}

	adc_P = ((BMP280_S32_t) (buf_data[0]) << 12) | ((BMP280_S32_t) (buf_data[1]) << 4) | ((BMP280_S32_t) (buf_data[2]) >> 4);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	031a      	lsls	r2, r3, #12
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	011b      	lsls	r3, r3, #4
 8001472:	431a      	orrs	r2, r3
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	111b      	asrs	r3, r3, #4
 8001478:	4313      	orrs	r3, r2
 800147a:	60fb      	str	r3, [r7, #12]

	//^printf("%d\r\n", adc_P);



	return adc_P;
 800147c:	68fb      	ldr	r3, [r7, #12]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	0800a960 	.word	0x0800a960
 800148c:	20000274 	.word	0x20000274
 8001490:	200001f4 	.word	0x200001f4

08001494 <bmp280_compensate_T_int32>:

// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// t_fine carries fine temperature as global value
BMP280_S32_t t_fine;
BMP280_S32_t bmp280_compensate_T_int32(BMP280_S32_t adc_T)
{
 8001494:	b480      	push	{r7}
 8001496:	b087      	sub	sp, #28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	BMP280_S32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((BMP280_S32_t)dig_T1<<1))) * ((BMP280_S32_t)dig_T2)) >> 11;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	10da      	asrs	r2, r3, #3
 80014a0:	4b19      	ldr	r3, [pc, #100]	@ (8001508 <bmp280_compensate_T_int32+0x74>)
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	4a18      	ldr	r2, [pc, #96]	@ (800150c <bmp280_compensate_T_int32+0x78>)
 80014aa:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014ae:	fb02 f303 	mul.w	r3, r2, r3
 80014b2:	12db      	asrs	r3, r3, #11
 80014b4:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((BMP280_S32_t)dig_T1)) * ((adc_T>>4) - ((BMP280_S32_t)dig_T1))) >> 12) *((BMP280_S32_t)dig_T3)) >> 14;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	111b      	asrs	r3, r3, #4
 80014ba:	4a13      	ldr	r2, [pc, #76]	@ (8001508 <bmp280_compensate_T_int32+0x74>)
 80014bc:	8812      	ldrh	r2, [r2, #0]
 80014be:	1a9b      	subs	r3, r3, r2
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	1112      	asrs	r2, r2, #4
 80014c4:	4910      	ldr	r1, [pc, #64]	@ (8001508 <bmp280_compensate_T_int32+0x74>)
 80014c6:	8809      	ldrh	r1, [r1, #0]
 80014c8:	1a52      	subs	r2, r2, r1
 80014ca:	fb02 f303 	mul.w	r3, r2, r3
 80014ce:	131b      	asrs	r3, r3, #12
 80014d0:	4a0f      	ldr	r2, [pc, #60]	@ (8001510 <bmp280_compensate_T_int32+0x7c>)
 80014d2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014d6:	fb02 f303 	mul.w	r3, r2, r3
 80014da:	139b      	asrs	r3, r3, #14
 80014dc:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	4413      	add	r3, r2
 80014e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001514 <bmp280_compensate_T_int32+0x80>)
 80014e6:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80014e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001514 <bmp280_compensate_T_int32+0x80>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4613      	mov	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	3380      	adds	r3, #128	@ 0x80
 80014f4:	121b      	asrs	r3, r3, #8
 80014f6:	60fb      	str	r3, [r7, #12]
	return T;
 80014f8:	68fb      	ldr	r3, [r7, #12]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	371c      	adds	r7, #28
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000230 	.word	0x20000230
 800150c:	20000232 	.word	0x20000232
 8001510:	20000234 	.word	0x20000234
 8001514:	20000248 	.word	0x20000248

08001518 <bmp280_compensate_P_int64>:
 *
 *
 *
 */

{
 8001518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800151c:	b0ca      	sub	sp, #296	@ 0x128
 800151e:	af00      	add	r7, sp, #0
 8001520:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	BMP280_S64_t var1, var2, p;
	var1 = ((BMP280_S64_t)t_fine) - 128000;
 8001524:	4baf      	ldr	r3, [pc, #700]	@ (80017e4 <bmp280_compensate_P_int64+0x2cc>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	17da      	asrs	r2, r3, #31
 800152a:	461c      	mov	r4, r3
 800152c:	4615      	mov	r5, r2
 800152e:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8001532:	f145 3bff 	adc.w	fp, r5, #4294967295	@ 0xffffffff
 8001536:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (BMP280_S64_t)dig_P6;
 800153a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800153e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001542:	fb03 f102 	mul.w	r1, r3, r2
 8001546:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800154a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800154e:	fb02 f303 	mul.w	r3, r2, r3
 8001552:	18ca      	adds	r2, r1, r3
 8001554:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001558:	fba3 8903 	umull	r8, r9, r3, r3
 800155c:	eb02 0309 	add.w	r3, r2, r9
 8001560:	4699      	mov	r9, r3
 8001562:	4ba1      	ldr	r3, [pc, #644]	@ (80017e8 <bmp280_compensate_P_int64+0x2d0>)
 8001564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001568:	b21b      	sxth	r3, r3
 800156a:	17da      	asrs	r2, r3, #31
 800156c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001570:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001574:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001578:	4603      	mov	r3, r0
 800157a:	fb03 f209 	mul.w	r2, r3, r9
 800157e:	460b      	mov	r3, r1
 8001580:	fb08 f303 	mul.w	r3, r8, r3
 8001584:	4413      	add	r3, r2
 8001586:	4602      	mov	r2, r0
 8001588:	fba8 1202 	umull	r1, r2, r8, r2
 800158c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001590:	460a      	mov	r2, r1
 8001592:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8001596:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800159a:	4413      	add	r3, r2
 800159c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80015a0:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80015a4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 80015a8:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(BMP280_S64_t)dig_P5)<<17);
 80015ac:	4b8f      	ldr	r3, [pc, #572]	@ (80017ec <bmp280_compensate_P_int64+0x2d4>)
 80015ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b2:	b21b      	sxth	r3, r3
 80015b4:	17da      	asrs	r2, r3, #31
 80015b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80015ba:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80015be:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015c2:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80015c6:	462a      	mov	r2, r5
 80015c8:	fb02 f203 	mul.w	r2, r2, r3
 80015cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80015d0:	4621      	mov	r1, r4
 80015d2:	fb01 f303 	mul.w	r3, r1, r3
 80015d6:	441a      	add	r2, r3
 80015d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015dc:	4621      	mov	r1, r4
 80015de:	fba3 1301 	umull	r1, r3, r3, r1
 80015e2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80015e6:	460b      	mov	r3, r1
 80015e8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80015ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80015f0:	18d3      	adds	r3, r2, r3
 80015f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80015f6:	f04f 0000 	mov.w	r0, #0
 80015fa:	f04f 0100 	mov.w	r1, #0
 80015fe:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001602:	462b      	mov	r3, r5
 8001604:	0459      	lsls	r1, r3, #17
 8001606:	4623      	mov	r3, r4
 8001608:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 800160c:	4623      	mov	r3, r4
 800160e:	0458      	lsls	r0, r3, #17
 8001610:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001614:	1814      	adds	r4, r2, r0
 8001616:	643c      	str	r4, [r7, #64]	@ 0x40
 8001618:	414b      	adcs	r3, r1
 800161a:	647b      	str	r3, [r7, #68]	@ 0x44
 800161c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001620:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((BMP280_S64_t)dig_P4)<<35);
 8001624:	4b72      	ldr	r3, [pc, #456]	@ (80017f0 <bmp280_compensate_P_int64+0x2d8>)
 8001626:	f9b3 3000 	ldrsh.w	r3, [r3]
 800162a:	b21b      	sxth	r3, r3
 800162c:	17da      	asrs	r2, r3, #31
 800162e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001632:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001636:	f04f 0000 	mov.w	r0, #0
 800163a:	f04f 0100 	mov.w	r1, #0
 800163e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001642:	00d9      	lsls	r1, r3, #3
 8001644:	2000      	movs	r0, #0
 8001646:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800164a:	1814      	adds	r4, r2, r0
 800164c:	63bc      	str	r4, [r7, #56]	@ 0x38
 800164e:	414b      	adcs	r3, r1
 8001650:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001652:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001656:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (BMP280_S64_t)dig_P3)>>8) + ((var1 * (BMP280_S64_t)dig_P2)<<12);
 800165a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800165e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001662:	fb03 f102 	mul.w	r1, r3, r2
 8001666:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800166a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800166e:	fb02 f303 	mul.w	r3, r2, r3
 8001672:	18ca      	adds	r2, r1, r3
 8001674:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001678:	fba3 1303 	umull	r1, r3, r3, r3
 800167c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001680:	460b      	mov	r3, r1
 8001682:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800168a:	18d3      	adds	r3, r2, r3
 800168c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001690:	4b58      	ldr	r3, [pc, #352]	@ (80017f4 <bmp280_compensate_P_int64+0x2dc>)
 8001692:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001696:	b21b      	sxth	r3, r3
 8001698:	17da      	asrs	r2, r3, #31
 800169a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800169e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80016a2:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80016a6:	462b      	mov	r3, r5
 80016a8:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80016ac:	4642      	mov	r2, r8
 80016ae:	fb02 f203 	mul.w	r2, r2, r3
 80016b2:	464b      	mov	r3, r9
 80016b4:	4621      	mov	r1, r4
 80016b6:	fb01 f303 	mul.w	r3, r1, r3
 80016ba:	4413      	add	r3, r2
 80016bc:	4622      	mov	r2, r4
 80016be:	4641      	mov	r1, r8
 80016c0:	fba2 1201 	umull	r1, r2, r2, r1
 80016c4:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80016c8:	460a      	mov	r2, r1
 80016ca:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80016ce:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80016d2:	4413      	add	r3, r2
 80016d4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80016d8:	f04f 0000 	mov.w	r0, #0
 80016dc:	f04f 0100 	mov.w	r1, #0
 80016e0:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80016e4:	4623      	mov	r3, r4
 80016e6:	0a18      	lsrs	r0, r3, #8
 80016e8:	462b      	mov	r3, r5
 80016ea:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80016ee:	462b      	mov	r3, r5
 80016f0:	1219      	asrs	r1, r3, #8
 80016f2:	4b41      	ldr	r3, [pc, #260]	@ (80017f8 <bmp280_compensate_P_int64+0x2e0>)
 80016f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f8:	b21b      	sxth	r3, r3
 80016fa:	17da      	asrs	r2, r3, #31
 80016fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001700:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001704:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001708:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 800170c:	464a      	mov	r2, r9
 800170e:	fb02 f203 	mul.w	r2, r2, r3
 8001712:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001716:	4644      	mov	r4, r8
 8001718:	fb04 f303 	mul.w	r3, r4, r3
 800171c:	441a      	add	r2, r3
 800171e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001722:	4644      	mov	r4, r8
 8001724:	fba3 4304 	umull	r4, r3, r3, r4
 8001728:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800172c:	4623      	mov	r3, r4
 800172e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001732:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001736:	18d3      	adds	r3, r2, r3
 8001738:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8001748:	464c      	mov	r4, r9
 800174a:	0323      	lsls	r3, r4, #12
 800174c:	4644      	mov	r4, r8
 800174e:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001752:	4644      	mov	r4, r8
 8001754:	0322      	lsls	r2, r4, #12
 8001756:	1884      	adds	r4, r0, r2
 8001758:	633c      	str	r4, [r7, #48]	@ 0x30
 800175a:	eb41 0303 	adc.w	r3, r1, r3
 800175e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001760:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001764:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((BMP280_S64_t)1)<<47)+var1))*((BMP280_S64_t)dig_P1)>>33;
 8001768:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800176c:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001770:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8001774:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001778:	4b20      	ldr	r3, [pc, #128]	@ (80017fc <bmp280_compensate_P_int64+0x2e4>)
 800177a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177e:	b21b      	sxth	r3, r3
 8001780:	17da      	asrs	r2, r3, #31
 8001782:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001786:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800178a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800178e:	462b      	mov	r3, r5
 8001790:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001794:	4642      	mov	r2, r8
 8001796:	fb02 f203 	mul.w	r2, r2, r3
 800179a:	464b      	mov	r3, r9
 800179c:	4621      	mov	r1, r4
 800179e:	fb01 f303 	mul.w	r3, r1, r3
 80017a2:	4413      	add	r3, r2
 80017a4:	4622      	mov	r2, r4
 80017a6:	4641      	mov	r1, r8
 80017a8:	fba2 1201 	umull	r1, r2, r2, r1
 80017ac:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80017b0:	460a      	mov	r2, r1
 80017b2:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80017b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80017ba:	4413      	add	r3, r2
 80017bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80017c0:	f04f 0200 	mov.w	r2, #0
 80017c4:	f04f 0300 	mov.w	r3, #0
 80017c8:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80017cc:	4629      	mov	r1, r5
 80017ce:	104a      	asrs	r2, r1, #1
 80017d0:	4629      	mov	r1, r5
 80017d2:	17cb      	asrs	r3, r1, #31
 80017d4:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0){
 80017d8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80017dc:	4313      	orrs	r3, r2
 80017de:	d10f      	bne.n	8001800 <bmp280_compensate_P_int64+0x2e8>
		return 0; // avoid exception caused by division by zero
 80017e0:	2300      	movs	r3, #0
 80017e2:	e153      	b.n	8001a8c <bmp280_compensate_P_int64+0x574>
 80017e4:	20000248 	.word	0x20000248
 80017e8:	20000240 	.word	0x20000240
 80017ec:	2000023e 	.word	0x2000023e
 80017f0:	2000023c 	.word	0x2000023c
 80017f4:	2000023a 	.word	0x2000023a
 80017f8:	20000238 	.word	0x20000238
 80017fc:	20000236 	.word	0x20000236
	}
	p = 1048576-adc_P;
 8001800:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001804:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001808:	17da      	asrs	r2, r3, #31
 800180a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800180c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800180e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001812:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8001816:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800181a:	105b      	asrs	r3, r3, #1
 800181c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001820:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001824:	07db      	lsls	r3, r3, #31
 8001826:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800182a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800182e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001832:	4621      	mov	r1, r4
 8001834:	1a89      	subs	r1, r1, r2
 8001836:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001838:	4629      	mov	r1, r5
 800183a:	eb61 0303 	sbc.w	r3, r1, r3
 800183e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001840:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001844:	4622      	mov	r2, r4
 8001846:	462b      	mov	r3, r5
 8001848:	1891      	adds	r1, r2, r2
 800184a:	6239      	str	r1, [r7, #32]
 800184c:	415b      	adcs	r3, r3
 800184e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001850:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001854:	4621      	mov	r1, r4
 8001856:	1851      	adds	r1, r2, r1
 8001858:	61b9      	str	r1, [r7, #24]
 800185a:	4629      	mov	r1, r5
 800185c:	414b      	adcs	r3, r1
 800185e:	61fb      	str	r3, [r7, #28]
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	f04f 0300 	mov.w	r3, #0
 8001868:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800186c:	4649      	mov	r1, r9
 800186e:	018b      	lsls	r3, r1, #6
 8001870:	4641      	mov	r1, r8
 8001872:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001876:	4641      	mov	r1, r8
 8001878:	018a      	lsls	r2, r1, #6
 800187a:	4641      	mov	r1, r8
 800187c:	1889      	adds	r1, r1, r2
 800187e:	6139      	str	r1, [r7, #16]
 8001880:	4649      	mov	r1, r9
 8001882:	eb43 0101 	adc.w	r1, r3, r1
 8001886:	6179      	str	r1, [r7, #20]
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	f04f 0300 	mov.w	r3, #0
 8001890:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001894:	4649      	mov	r1, r9
 8001896:	008b      	lsls	r3, r1, #2
 8001898:	4641      	mov	r1, r8
 800189a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800189e:	4641      	mov	r1, r8
 80018a0:	008a      	lsls	r2, r1, #2
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	4603      	mov	r3, r0
 80018a8:	4622      	mov	r2, r4
 80018aa:	189b      	adds	r3, r3, r2
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	460b      	mov	r3, r1
 80018b0:	462a      	mov	r2, r5
 80018b2:	eb42 0303 	adc.w	r3, r2, r3
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80018c4:	4649      	mov	r1, r9
 80018c6:	008b      	lsls	r3, r1, #2
 80018c8:	4641      	mov	r1, r8
 80018ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018ce:	4641      	mov	r1, r8
 80018d0:	008a      	lsls	r2, r1, #2
 80018d2:	4610      	mov	r0, r2
 80018d4:	4619      	mov	r1, r3
 80018d6:	4603      	mov	r3, r0
 80018d8:	4622      	mov	r2, r4
 80018da:	189b      	adds	r3, r3, r2
 80018dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80018de:	462b      	mov	r3, r5
 80018e0:	460a      	mov	r2, r1
 80018e2:	eb42 0303 	adc.w	r3, r2, r3
 80018e6:	677b      	str	r3, [r7, #116]	@ 0x74
 80018e8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80018ec:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80018f0:	f7ff f9fa 	bl	8000ce8 <__aeabi_ldivmod>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((BMP280_S64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 80018fc:	4b66      	ldr	r3, [pc, #408]	@ (8001a98 <bmp280_compensate_P_int64+0x580>)
 80018fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001902:	b21b      	sxth	r3, r3
 8001904:	17da      	asrs	r2, r3, #31
 8001906:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001908:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800190a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800190e:	f04f 0000 	mov.w	r0, #0
 8001912:	f04f 0100 	mov.w	r1, #0
 8001916:	0b50      	lsrs	r0, r2, #13
 8001918:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800191c:	1359      	asrs	r1, r3, #13
 800191e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001922:	462b      	mov	r3, r5
 8001924:	fb00 f203 	mul.w	r2, r0, r3
 8001928:	4623      	mov	r3, r4
 800192a:	fb03 f301 	mul.w	r3, r3, r1
 800192e:	4413      	add	r3, r2
 8001930:	4622      	mov	r2, r4
 8001932:	fba2 1200 	umull	r1, r2, r2, r0
 8001936:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800193a:	460a      	mov	r2, r1
 800193c:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001940:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001944:	4413      	add	r3, r2
 8001946:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800194a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800194e:	f04f 0000 	mov.w	r0, #0
 8001952:	f04f 0100 	mov.w	r1, #0
 8001956:	0b50      	lsrs	r0, r2, #13
 8001958:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800195c:	1359      	asrs	r1, r3, #13
 800195e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001962:	462b      	mov	r3, r5
 8001964:	fb00 f203 	mul.w	r2, r0, r3
 8001968:	4623      	mov	r3, r4
 800196a:	fb03 f301 	mul.w	r3, r3, r1
 800196e:	4413      	add	r3, r2
 8001970:	4622      	mov	r2, r4
 8001972:	fba2 1200 	umull	r1, r2, r2, r0
 8001976:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800197a:	460a      	mov	r2, r1
 800197c:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001980:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001984:	4413      	add	r3, r2
 8001986:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	f04f 0300 	mov.w	r3, #0
 8001992:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001996:	4621      	mov	r1, r4
 8001998:	0e4a      	lsrs	r2, r1, #25
 800199a:	4629      	mov	r1, r5
 800199c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80019a0:	4629      	mov	r1, r5
 80019a2:	164b      	asrs	r3, r1, #25
 80019a4:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((BMP280_S64_t)dig_P8) * p) >> 19; p = ((p + var1 + var2) >> 8) + (((BMP280_S64_t)dig_P7)<<4);
 80019a8:	4b3c      	ldr	r3, [pc, #240]	@ (8001a9c <bmp280_compensate_P_int64+0x584>)
 80019aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ae:	b21b      	sxth	r3, r3
 80019b0:	17da      	asrs	r2, r3, #31
 80019b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80019b4:	667a      	str	r2, [r7, #100]	@ 0x64
 80019b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80019ba:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80019be:	462a      	mov	r2, r5
 80019c0:	fb02 f203 	mul.w	r2, r2, r3
 80019c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80019c8:	4621      	mov	r1, r4
 80019ca:	fb01 f303 	mul.w	r3, r1, r3
 80019ce:	4413      	add	r3, r2
 80019d0:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80019d4:	4621      	mov	r1, r4
 80019d6:	fba2 1201 	umull	r1, r2, r2, r1
 80019da:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80019de:	460a      	mov	r2, r1
 80019e0:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80019e4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80019e8:	4413      	add	r3, r2
 80019ea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 80019fa:	4621      	mov	r1, r4
 80019fc:	0cca      	lsrs	r2, r1, #19
 80019fe:	4629      	mov	r1, r5
 8001a00:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a04:	4629      	mov	r1, r5
 8001a06:	14cb      	asrs	r3, r1, #19
 8001a08:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
 8001a0c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001a10:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001a14:	1884      	adds	r4, r0, r2
 8001a16:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001a18:	eb41 0303 	adc.w	r3, r1, r3
 8001a1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001a1e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a22:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001a26:	4621      	mov	r1, r4
 8001a28:	1889      	adds	r1, r1, r2
 8001a2a:	6539      	str	r1, [r7, #80]	@ 0x50
 8001a2c:	4629      	mov	r1, r5
 8001a2e:	eb43 0101 	adc.w	r1, r3, r1
 8001a32:	6579      	str	r1, [r7, #84]	@ 0x54
 8001a34:	f04f 0000 	mov.w	r0, #0
 8001a38:	f04f 0100 	mov.w	r1, #0
 8001a3c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001a40:	4623      	mov	r3, r4
 8001a42:	0a18      	lsrs	r0, r3, #8
 8001a44:	462b      	mov	r3, r5
 8001a46:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a4a:	462b      	mov	r3, r5
 8001a4c:	1219      	asrs	r1, r3, #8
 8001a4e:	4b14      	ldr	r3, [pc, #80]	@ (8001aa0 <bmp280_compensate_P_int64+0x588>)
 8001a50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a54:	b21b      	sxth	r3, r3
 8001a56:	17da      	asrs	r2, r3, #31
 8001a58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a5a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	f04f 0300 	mov.w	r3, #0
 8001a64:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001a68:	464c      	mov	r4, r9
 8001a6a:	0123      	lsls	r3, r4, #4
 8001a6c:	4644      	mov	r4, r8
 8001a6e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001a72:	4644      	mov	r4, r8
 8001a74:	0122      	lsls	r2, r4, #4
 8001a76:	1884      	adds	r4, r0, r2
 8001a78:	603c      	str	r4, [r7, #0]
 8001a7a:	eb41 0303 	adc.w	r3, r1, r3
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001a84:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (BMP280_U32_t)p;
 8001a88:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8001a92:	46bd      	mov	sp, r7
 8001a94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a98:	20000246 	.word	0x20000246
 8001a9c:	20000244 	.word	0x20000244
 8001aa0:	20000242 	.word	0x20000242

08001aa4 <tx_can>:





HAL_StatusTypeDef tx_can(CAN_TxHeaderTypeDef pHeader2,uint8_t* aData2,uint32_t pTxMailbox2){
 8001aa4:	b084      	sub	sp, #16
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	f107 0c10 	add.w	ip, r7, #16
 8001ab0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_StatusTypeDef error_out;
	//uint32_t pTxMailbox; // Variable pour stocker l'indice de la boîte aux lettres CAN

	// Envoi du message CAN avec l'angle de 90°
	HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(&hcan1, &pHeader2, aData2, &pTxMailbox2);
 8001ab4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ab8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001aba:	f107 0110 	add.w	r1, r7, #16
 8001abe:	480c      	ldr	r0, [pc, #48]	@ (8001af0 <tx_can+0x4c>)
 8001ac0:	f000 ffc1 	bl	8002a46 <HAL_CAN_AddTxMessage>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	71fb      	strb	r3, [r7, #7]
	error_out=status;
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	71bb      	strb	r3, [r7, #6]
	// Vérification du statut d'envoi
	if (status != HAL_OK) {
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <tx_can+0x36>
		// Gérer l'erreur d'envoi
		printf("erreur HAL_CAN_AddTxMessageCAN\r\n");
 8001ad2:	4808      	ldr	r0, [pc, #32]	@ (8001af4 <tx_can+0x50>)
 8001ad4:	f005 f9a8 	bl	8006e28 <puts>
 8001ad8:	e002      	b.n	8001ae0 <tx_can+0x3c>
	}
	else{
		printf("[tx_can]  envoi reussi\r\n");
 8001ada:	4807      	ldr	r0, [pc, #28]	@ (8001af8 <tx_can+0x54>)
 8001adc:	f005 f9a4 	bl	8006e28 <puts>
	}

	return error_out;
 8001ae0:	79bb      	ldrb	r3, [r7, #6]


}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001aec:	b004      	add	sp, #16
 8001aee:	4770      	bx	lr
 8001af0:	2000024c 	.word	0x2000024c
 8001af4:	0800a830 	.word	0x0800a830
 8001af8:	0800a850 	.word	0x0800a850

08001afc <enable_can>:

void enable_can(){
 8001afc:	b590      	push	{r4, r7, lr}
 8001afe:	b087      	sub	sp, #28
 8001b00:	af04      	add	r7, sp, #16

	//********************Activer le module can***************************************************
	HAL_StatusTypeDef start_can= HAL_CAN_Start(&hcan1);
 8001b02:	4822      	ldr	r0, [pc, #136]	@ (8001b8c <enable_can+0x90>)
 8001b04:	f000 ff5b 	bl	80029be <HAL_CAN_Start>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	71fb      	strb	r3, [r7, #7]
	if(start_can!= HAL_OK) {
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <enable_can+0x1e>

		// Gérer l'erreur de démarrage
		printf("erreur start can_config CAN\r\n");
 8001b12:	481f      	ldr	r0, [pc, #124]	@ (8001b90 <enable_can+0x94>)
 8001b14:	f005 f988 	bl	8006e28 <puts>
 8001b18:	e002      	b.n	8001b20 <enable_can+0x24>

	}
	else{
		printf("[enable_can] start  CAN OK\r\n");
 8001b1a:	481e      	ldr	r0, [pc, #120]	@ (8001b94 <enable_can+0x98>)
 8001b1c:	f005 f984 	bl	8006e28 <puts>

	//CAN_TxHeaderTypeDef pHeader;
	//uint8_t aData[3];  // Tableau pour les données à transmettre

	// Configuration du champ pHeader
	pHeader.StdId = 0x61;          // Identifiant standard pour la commande "Angle"
 8001b20:	4b1d      	ldr	r3, [pc, #116]	@ (8001b98 <enable_can+0x9c>)
 8001b22:	2261      	movs	r2, #97	@ 0x61
 8001b24:	601a      	str	r2, [r3, #0]
	pHeader.IDE = CAN_ID_STD;      //(0x00000000U)  !< Standard Id
 8001b26:	4b1c      	ldr	r3, [pc, #112]	@ (8001b98 <enable_can+0x9c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
	pHeader.RTR = CAN_RTR_DATA;    //(0x00000000U)  !< Data frame
 8001b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001b98 <enable_can+0x9c>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	60da      	str	r2, [r3, #12]
	pHeader.DLC = 2;
 8001b32:	4b19      	ldr	r3, [pc, #100]	@ (8001b98 <enable_can+0x9c>)
 8001b34:	2202      	movs	r2, #2
 8001b36:	611a      	str	r2, [r3, #16]
	pHeader.TransmitGlobalTime = DISABLE;
 8001b38:	4b17      	ldr	r3, [pc, #92]	@ (8001b98 <enable_can+0x9c>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	751a      	strb	r2, [r3, #20]

	aData[0] = 90;  // D0 : 90° en hexadécimal (0x5A)
 8001b3e:	4b17      	ldr	r3, [pc, #92]	@ (8001b9c <enable_can+0xa0>)
 8001b40:	225a      	movs	r2, #90	@ 0x5a
 8001b42:	701a      	strb	r2, [r3, #0]
	aData[1] = 0x00;  // D1 : Angle positif
 8001b44:	4b15      	ldr	r3, [pc, #84]	@ (8001b9c <enable_can+0xa0>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	705a      	strb	r2, [r3, #1]

	//*************************************transmission au can de la configuration**********************************
	HAL_StatusTypeDef conf_errout=tx_can(pHeader, aData, pTxMailbox);
 8001b4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ba0 <enable_can+0xa4>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	4b12      	ldr	r3, [pc, #72]	@ (8001b98 <enable_can+0x9c>)
 8001b50:	9203      	str	r2, [sp, #12]
 8001b52:	4a12      	ldr	r2, [pc, #72]	@ (8001b9c <enable_can+0xa0>)
 8001b54:	9202      	str	r2, [sp, #8]
 8001b56:	466c      	mov	r4, sp
 8001b58:	f103 0210 	add.w	r2, r3, #16
 8001b5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b60:	e884 0003 	stmia.w	r4, {r0, r1}
 8001b64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b66:	f7ff ff9d 	bl	8001aa4 <tx_can>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71bb      	strb	r3, [r7, #6]
	// Vérification du statut d'envoi
	if (conf_errout != HAL_OK) {
 8001b6e:	79bb      	ldrb	r3, [r7, #6]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <enable_can+0x80>
		// Gérer l'erreur d'envoi
		printf("erreur config_base_ CAN\r\n");
 8001b74:	480b      	ldr	r0, [pc, #44]	@ (8001ba4 <enable_can+0xa8>)
 8001b76:	f005 f957 	bl	8006e28 <puts>
	}
	else{
		printf("config base  envoi reussi\r\n");
	}

}
 8001b7a:	e002      	b.n	8001b82 <enable_can+0x86>
		printf("config base  envoi reussi\r\n");
 8001b7c:	480a      	ldr	r0, [pc, #40]	@ (8001ba8 <enable_can+0xac>)
 8001b7e:	f005 f953 	bl	8006e28 <puts>
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd90      	pop	{r4, r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	2000024c 	.word	0x2000024c
 8001b90:	0800a868 	.word	0x0800a868
 8001b94:	0800a888 	.word	0x0800a888
 8001b98:	20000200 	.word	0x20000200
 8001b9c:	20000218 	.word	0x20000218
 8001ba0:	2000021c 	.word	0x2000021c
 8001ba4:	0800a8a4 	.word	0x0800a8a4
 8001ba8:	0800a8c0 	.word	0x0800a8c0

08001bac <can_change_temp>:


}


void can_change_temp(BMP280_U32_t temp_comp){
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]


	enable_can();
 8001bb4:	f7ff ffa2 	bl	8001afc <enable_can>


//********temp_comp = temperature *******************************************


	if(fabs(temp_comp-old_temp)>2){
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d92d      	bls.n	8001c1e <can_change_temp+0x72>

		if(temp_comp>old_temp){//On bouge dans le sens 0x00 +
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d916      	bls.n	8001bf8 <can_change_temp+0x4c>

			aData[1]=0x00;
 8001bca:	4b17      	ldr	r3, [pc, #92]	@ (8001c28 <can_change_temp+0x7c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	705a      	strb	r2, [r3, #1]
			aData[0]=(int)(10*(temp_comp-old_temp));
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	461a      	mov	r2, r3
 8001bda:	0092      	lsls	r2, r2, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4b11      	ldr	r3, [pc, #68]	@ (8001c28 <can_change_temp+0x7c>)
 8001be4:	701a      	strb	r2, [r3, #0]
			HAL_CAN_AddTxMessage(&hcan1, &pHeader, aData, &pTxMailbox);
 8001be6:	4b11      	ldr	r3, [pc, #68]	@ (8001c2c <can_change_temp+0x80>)
 8001be8:	4a0f      	ldr	r2, [pc, #60]	@ (8001c28 <can_change_temp+0x7c>)
 8001bea:	4911      	ldr	r1, [pc, #68]	@ (8001c30 <can_change_temp+0x84>)
 8001bec:	4811      	ldr	r0, [pc, #68]	@ (8001c34 <can_change_temp+0x88>)
 8001bee:	f000 ff2a 	bl	8002a46 <HAL_CAN_AddTxMessage>
			//printf("adata0= %d\r\n",aData[0]);

			old_temp=temp_comp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	60fb      	str	r3, [r7, #12]


	//old_temp = temp_comp;//mise à jour de la température


}
 8001bf6:	e012      	b.n	8001c1e <can_change_temp+0x72>
			aData[1]=0x01;
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c28 <can_change_temp+0x7c>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	705a      	strb	r2, [r3, #1]
			aData[0]=(int)((old_temp-temp_comp));
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4b07      	ldr	r3, [pc, #28]	@ (8001c28 <can_change_temp+0x7c>)
 8001c0c:	701a      	strb	r2, [r3, #0]
			HAL_CAN_AddTxMessage(&hcan1, &pHeader, aData, &pTxMailbox);
 8001c0e:	4b07      	ldr	r3, [pc, #28]	@ (8001c2c <can_change_temp+0x80>)
 8001c10:	4a05      	ldr	r2, [pc, #20]	@ (8001c28 <can_change_temp+0x7c>)
 8001c12:	4907      	ldr	r1, [pc, #28]	@ (8001c30 <can_change_temp+0x84>)
 8001c14:	4807      	ldr	r0, [pc, #28]	@ (8001c34 <can_change_temp+0x88>)
 8001c16:	f000 ff16 	bl	8002a46 <HAL_CAN_AddTxMessage>
			old_temp=temp_comp;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	60fb      	str	r3, [r7, #12]
}
 8001c1e:	bf00      	nop
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000218 	.word	0x20000218
 8001c2c:	2000021c 	.word	0x2000021c
 8001c30:	20000200 	.word	0x20000200
 8001c34:	2000024c 	.word	0x2000024c

08001c38 <dial_pi>:

//*********************************************************************************************

void dial_pi(){
 8001c38:	b5b0      	push	{r4, r5, r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af02      	add	r7, sp, #8

	if(strncmp(RxBuff, "GET_T", 5)==0) {
 8001c3e:	2205      	movs	r2, #5
 8001c40:	494c      	ldr	r1, [pc, #304]	@ (8001d74 <dial_pi+0x13c>)
 8001c42:	484d      	ldr	r0, [pc, #308]	@ (8001d78 <dial_pi+0x140>)
 8001c44:	f005 f9f8 	bl	8007038 <strncmp>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d148      	bne.n	8001ce0 <dial_pi+0xa8>


		//déclaration des variables contenant la température non compensée
		temp_uncompen= BMP280_get_temperature(); //récupérer la température
 8001c4e:	f7ff fbad 	bl	80013ac <BMP280_get_temperature>
 8001c52:	4603      	mov	r3, r0
 8001c54:	4a49      	ldr	r2, [pc, #292]	@ (8001d7c <dial_pi+0x144>)
 8001c56:	6013      	str	r3, [r2, #0]

		//déclaration des variables contenant la température  compensée
		BMP280_U32_t temp_comp;


		temp_comp=bmp280_compensate_T_int32(temp_uncompen); //récupérer la température compensé
 8001c58:	4b48      	ldr	r3, [pc, #288]	@ (8001d7c <dial_pi+0x144>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fc19 	bl	8001494 <bmp280_compensate_T_int32>
 8001c62:	4603      	mov	r3, r0
 8001c64:	607b      	str	r3, [r7, #4]

		//ancien printf
		//printf("%u \r\n",temp_comp);// AFFICHÉ TEMPÉRATURE compensée sur l'usart


		printf("T=%ld%ld.%ld%ld_C\r\n",(temp_comp/1000)%10,(temp_comp/100)%10,(temp_comp/10)%10,temp_comp%10);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a45      	ldr	r2, [pc, #276]	@ (8001d80 <dial_pi+0x148>)
 8001c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6e:	099a      	lsrs	r2, r3, #6
 8001c70:	4b44      	ldr	r3, [pc, #272]	@ (8001d84 <dial_pi+0x14c>)
 8001c72:	fba3 1302 	umull	r1, r3, r3, r2
 8001c76:	08d9      	lsrs	r1, r3, #3
 8001c78:	460b      	mov	r3, r1
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	1ad1      	subs	r1, r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a40      	ldr	r2, [pc, #256]	@ (8001d88 <dial_pi+0x150>)
 8001c86:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8a:	095a      	lsrs	r2, r3, #5
 8001c8c:	4b3d      	ldr	r3, [pc, #244]	@ (8001d84 <dial_pi+0x14c>)
 8001c8e:	fba3 0302 	umull	r0, r3, r3, r2
 8001c92:	08d8      	lsrs	r0, r3, #3
 8001c94:	4603      	mov	r3, r0
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4403      	add	r3, r0
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	1ad0      	subs	r0, r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a38      	ldr	r2, [pc, #224]	@ (8001d84 <dial_pi+0x14c>)
 8001ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca6:	08da      	lsrs	r2, r3, #3
 8001ca8:	4b36      	ldr	r3, [pc, #216]	@ (8001d84 <dial_pi+0x14c>)
 8001caa:	fba3 4302 	umull	r4, r3, r3, r2
 8001cae:	08dc      	lsrs	r4, r3, #3
 8001cb0:	4623      	mov	r3, r4
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4423      	add	r3, r4
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	1ad4      	subs	r4, r2, r3
 8001cba:	687d      	ldr	r5, [r7, #4]
 8001cbc:	4b31      	ldr	r3, [pc, #196]	@ (8001d84 <dial_pi+0x14c>)
 8001cbe:	fba3 2305 	umull	r2, r3, r3, r5
 8001cc2:	08da      	lsrs	r2, r3, #3
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	1aea      	subs	r2, r5, r3
 8001cce:	9200      	str	r2, [sp, #0]
 8001cd0:	4623      	mov	r3, r4
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	482d      	ldr	r0, [pc, #180]	@ (8001d8c <dial_pi+0x154>)
 8001cd6:	f005 f83f 	bl	8006d58 <iprintf>
		//T=+12.50_C 	Température compensée sur 10 cafficher aractères
		//GET_P 	P=102300Pa

		//HAL_Delay(1000);
		//interaction sur le moteur de la température
		can_change_temp(temp_comp);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff ff66 	bl	8001bac <can_change_temp>


	}

	if (strncmp(RxBuff,"GET_P",5)==0){
 8001ce0:	2205      	movs	r2, #5
 8001ce2:	492b      	ldr	r1, [pc, #172]	@ (8001d90 <dial_pi+0x158>)
 8001ce4:	4824      	ldr	r0, [pc, #144]	@ (8001d78 <dial_pi+0x140>)
 8001ce6:	f005 f9a7 	bl	8007038 <strncmp>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d11c      	bne.n	8001d2a <dial_pi+0xf2>

		//déclaration des variables contenant la pression  compensée
		BMP280_U32_t pres_comp;


		pres_uncompen=BMP280_get_pressure(); //récupérer la pression non compensée
 8001cf0:	f7ff fb96 	bl	8001420 <BMP280_get_pressure>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	4a27      	ldr	r2, [pc, #156]	@ (8001d94 <dial_pi+0x15c>)
 8001cf8:	6013      	str	r3, [r2, #0]

		pres_comp=bmp280_compensate_P_int64(pres_uncompen); //compenser la pression
 8001cfa:	4b26      	ldr	r3, [pc, #152]	@ (8001d94 <dial_pi+0x15c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fc0a 	bl	8001518 <bmp280_compensate_P_int64>
 8001d04:	6038      	str	r0, [r7, #0]
		//printf("%u \r\n",pres_comp);
		//printf("div 256 *10⁵ %u \r\n", ((pres_comp) / (25600000) ));



		printf("P=%f_Pa  \r\n",((float)(pres_comp))/256);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	ee07 3a90 	vmov	s15, r3
 8001d0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d10:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001d98 <dial_pi+0x160>
 8001d14:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001d18:	ee16 0a90 	vmov	r0, s13
 8001d1c:	f7fe fc44 	bl	80005a8 <__aeabi_f2d>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	481d      	ldr	r0, [pc, #116]	@ (8001d9c <dial_pi+0x164>)
 8001d26:	f005 f817 	bl	8006d58 <iprintf>


	}

	if (strncmp(RxBuff,"SET_K=",10)==0){
 8001d2a:	491d      	ldr	r1, [pc, #116]	@ (8001da0 <dial_pi+0x168>)
 8001d2c:	4812      	ldr	r0, [pc, #72]	@ (8001d78 <dial_pi+0x140>)
 8001d2e:	f7fe fa6f 	bl	8000210 <strcmp>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d108      	bne.n	8001d4a <dial_pi+0x112>
		//K_pid=RxBuff[7];
		K_pid=0;
 8001d38:	4b1a      	ldr	r3, [pc, #104]	@ (8001da4 <dial_pi+0x16c>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]

		printf("K %d",K_pid);
 8001d3e:	4b19      	ldr	r3, [pc, #100]	@ (8001da4 <dial_pi+0x16c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4619      	mov	r1, r3
 8001d44:	4818      	ldr	r0, [pc, #96]	@ (8001da8 <dial_pi+0x170>)
 8001d46:	f005 f807 	bl	8006d58 <iprintf>

	}



	if(strncmp(RxBuff,"GET_A",5)==0){
 8001d4a:	2205      	movs	r2, #5
 8001d4c:	4917      	ldr	r1, [pc, #92]	@ (8001dac <dial_pi+0x174>)
 8001d4e:	480a      	ldr	r0, [pc, #40]	@ (8001d78 <dial_pi+0x140>)
 8001d50:	f005 f972 	bl	8007038 <strncmp>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d108      	bne.n	8001d6c <dial_pi+0x134>
		a_pid=145;
 8001d5a:	4b15      	ldr	r3, [pc, #84]	@ (8001db0 <dial_pi+0x178>)
 8001d5c:	2291      	movs	r2, #145	@ 0x91
 8001d5e:	601a      	str	r2, [r3, #0]
		printf("A=%d\r\n",a_pid);
 8001d60:	4b13      	ldr	r3, [pc, #76]	@ (8001db0 <dial_pi+0x178>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4619      	mov	r1, r3
 8001d66:	4813      	ldr	r0, [pc, #76]	@ (8001db4 <dial_pi+0x17c>)
 8001d68:	f004 fff6 	bl	8006d58 <iprintf>
	}

	// Réinitialiser RxBuff après chaque commande
	//memset(RxBuff, 0, RX_BUFF_SIZE);

}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bdb0      	pop	{r4, r5, r7, pc}
 8001d74:	0800a908 	.word	0x0800a908
 8001d78:	200001f8 	.word	0x200001f8
 8001d7c:	20000228 	.word	0x20000228
 8001d80:	10624dd3 	.word	0x10624dd3
 8001d84:	cccccccd 	.word	0xcccccccd
 8001d88:	51eb851f 	.word	0x51eb851f
 8001d8c:	0800a910 	.word	0x0800a910
 8001d90:	0800a924 	.word	0x0800a924
 8001d94:	2000022c 	.word	0x2000022c
 8001d98:	43800000 	.word	0x43800000
 8001d9c:	0800a92c 	.word	0x0800a92c
 8001da0:	0800a938 	.word	0x0800a938
 8001da4:	20000220 	.word	0x20000220
 8001da8:	0800a940 	.word	0x0800a940
 8001dac:	0800a948 	.word	0x0800a948
 8001db0:	20000224 	.word	0x20000224
 8001db4:	0800a950 	.word	0x0800a950

08001db8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]

	dial_pi();
 8001dc0:	f7ff ff3a 	bl	8001c38 <dial_pi>
	HAL_UART_Receive_IT(&huart1, RxBuff, RX_BUFF_SIZE);
 8001dc4:	2207      	movs	r2, #7
 8001dc6:	4904      	ldr	r1, [pc, #16]	@ (8001dd8 <HAL_UART_RxCpltCallback+0x20>)
 8001dc8:	4804      	ldr	r0, [pc, #16]	@ (8001ddc <HAL_UART_RxCpltCallback+0x24>)
 8001dca:	f003 f91c 	bl	8005006 <HAL_UART_Receive_IT>


}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	200001f8 	.word	0x200001f8
 8001ddc:	200002c8 	.word	0x200002c8

08001de0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001de4:	f000 fc5a 	bl	800269c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001de8:	f000 f824 	bl	8001e34 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001dec:	f000 f946 	bl	800207c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001df0:	f000 f91a 	bl	8002028 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8001df4:	f000 f8c0 	bl	8001f78 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8001df8:	f000 f8ec 	bl	8001fd4 <MX_USART1_UART_Init>
	MX_CAN1_Init();
 8001dfc:	f000 f886 	bl	8001f0c <MX_CAN1_Init>
	/* USER CODE BEGIN 2 */



	HAL_UART_Receive_IT(&huart1, RxBuff,RX_BUFF_SIZE);
 8001e00:	2207      	movs	r2, #7
 8001e02:	4909      	ldr	r1, [pc, #36]	@ (8001e28 <main+0x48>)
 8001e04:	4809      	ldr	r0, [pc, #36]	@ (8001e2c <main+0x4c>)
 8001e06:	f003 f8fe 	bl	8005006 <HAL_UART_Receive_IT>

	//déclaration des variables contenant la température non compensée
	BMP280_U32_t temp_comp;
	BMP280_U32_t pres_comp;

	BMP280_checkID();
 8001e0a:	f7ff f96b 	bl	80010e4 <BMP280_checkID>
	BMP280_config();
 8001e0e:	f7ff f9a9 	bl	8001164 <BMP280_config>
	BMP280_calib(); //récupère données étallonnage
 8001e12:	f7ff fa0d 	bl	8001230 <BMP280_calib>

	printf("main\r\n");
 8001e16:	4806      	ldr	r0, [pc, #24]	@ (8001e30 <main+0x50>)
 8001e18:	f005 f806 	bl	8006e28 <puts>

		//can_change_temp(temp_comp);

		//faire bouger le moteur en fonction de la température

		HAL_Delay(1000);
 8001e1c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e20:	f000 fcae 	bl	8002780 <HAL_Delay>
 8001e24:	e7fa      	b.n	8001e1c <main+0x3c>
 8001e26:	bf00      	nop
 8001e28:	200001f8 	.word	0x200001f8
 8001e2c:	200002c8 	.word	0x200002c8
 8001e30:	0800a958 	.word	0x0800a958

08001e34 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b094      	sub	sp, #80	@ 0x50
 8001e38:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e3a:	f107 031c 	add.w	r3, r7, #28
 8001e3e:	2234      	movs	r2, #52	@ 0x34
 8001e40:	2100      	movs	r1, #0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f005 f8f0 	bl	8007028 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e48:	f107 0308 	add.w	r3, r7, #8
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001e58:	2300      	movs	r3, #0
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	4b29      	ldr	r3, [pc, #164]	@ (8001f04 <SystemClock_Config+0xd0>)
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e60:	4a28      	ldr	r2, [pc, #160]	@ (8001f04 <SystemClock_Config+0xd0>)
 8001e62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e66:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e68:	4b26      	ldr	r3, [pc, #152]	@ (8001f04 <SystemClock_Config+0xd0>)
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e70:	607b      	str	r3, [r7, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e74:	2300      	movs	r3, #0
 8001e76:	603b      	str	r3, [r7, #0]
 8001e78:	4b23      	ldr	r3, [pc, #140]	@ (8001f08 <SystemClock_Config+0xd4>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001e80:	4a21      	ldr	r2, [pc, #132]	@ (8001f08 <SystemClock_Config+0xd4>)
 8001e82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	4b1f      	ldr	r3, [pc, #124]	@ (8001f08 <SystemClock_Config+0xd4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e90:	603b      	str	r3, [r7, #0]
 8001e92:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e94:	2302      	movs	r3, #2
 8001e96:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e9c:	2310      	movs	r3, #16
 8001e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001ea8:	2308      	movs	r3, #8
 8001eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 80;
 8001eac:	2350      	movs	r3, #80	@ 0x50
 8001eae:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ebc:	f107 031c 	add.w	r3, r7, #28
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f002 fd27 	bl	8004914 <HAL_RCC_OscConfig>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8001ecc:	f000 f956 	bl	800217c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ed0:	230f      	movs	r3, #15
 8001ed2:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001edc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ee0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ee6:	f107 0308 	add.w	r3, r7, #8
 8001eea:	2102      	movs	r1, #2
 8001eec:	4618      	mov	r0, r3
 8001eee:	f002 f9c7 	bl	8004280 <HAL_RCC_ClockConfig>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <SystemClock_Config+0xc8>
	{
		Error_Handler();
 8001ef8:	f000 f940 	bl	800217c <Error_Handler>
	}
}
 8001efc:	bf00      	nop
 8001efe:	3750      	adds	r7, #80	@ 0x50
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40007000 	.word	0x40007000

08001f0c <MX_CAN1_Init>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8001f10:	4b17      	ldr	r3, [pc, #92]	@ (8001f70 <MX_CAN1_Init+0x64>)
 8001f12:	4a18      	ldr	r2, [pc, #96]	@ (8001f74 <MX_CAN1_Init+0x68>)
 8001f14:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 5;
 8001f16:	4b16      	ldr	r3, [pc, #88]	@ (8001f70 <MX_CAN1_Init+0x64>)
 8001f18:	2205      	movs	r2, #5
 8001f1a:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001f1c:	4b14      	ldr	r3, [pc, #80]	@ (8001f70 <MX_CAN1_Init+0x64>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001f22:	4b13      	ldr	r3, [pc, #76]	@ (8001f70 <MX_CAN1_Init+0x64>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001f28:	4b11      	ldr	r3, [pc, #68]	@ (8001f70 <MX_CAN1_Init+0x64>)
 8001f2a:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8001f2e:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001f30:	4b0f      	ldr	r3, [pc, #60]	@ (8001f70 <MX_CAN1_Init+0x64>)
 8001f32:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001f36:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8001f38:	4b0d      	ldr	r3, [pc, #52]	@ (8001f70 <MX_CAN1_Init+0x64>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8001f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f70 <MX_CAN1_Init+0x64>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8001f44:	4b0a      	ldr	r3, [pc, #40]	@ (8001f70 <MX_CAN1_Init+0x64>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8001f4a:	4b09      	ldr	r3, [pc, #36]	@ (8001f70 <MX_CAN1_Init+0x64>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001f50:	4b07      	ldr	r3, [pc, #28]	@ (8001f70 <MX_CAN1_Init+0x64>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8001f56:	4b06      	ldr	r3, [pc, #24]	@ (8001f70 <MX_CAN1_Init+0x64>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001f5c:	4804      	ldr	r0, [pc, #16]	@ (8001f70 <MX_CAN1_Init+0x64>)
 8001f5e:	f000 fc33 	bl	80027c8 <HAL_CAN_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_CAN1_Init+0x60>
	{
		Error_Handler();
 8001f68:	f000 f908 	bl	800217c <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	2000024c 	.word	0x2000024c
 8001f74:	40006400 	.word	0x40006400

08001f78 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001f7c:	4b12      	ldr	r3, [pc, #72]	@ (8001fc8 <MX_I2C1_Init+0x50>)
 8001f7e:	4a13      	ldr	r2, [pc, #76]	@ (8001fcc <MX_I2C1_Init+0x54>)
 8001f80:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001f82:	4b11      	ldr	r3, [pc, #68]	@ (8001fc8 <MX_I2C1_Init+0x50>)
 8001f84:	4a12      	ldr	r2, [pc, #72]	@ (8001fd0 <MX_I2C1_Init+0x58>)
 8001f86:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f88:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc8 <MX_I2C1_Init+0x50>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc8 <MX_I2C1_Init+0x50>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f94:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc8 <MX_I2C1_Init+0x50>)
 8001f96:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f9a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc8 <MX_I2C1_Init+0x50>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001fa2:	4b09      	ldr	r3, [pc, #36]	@ (8001fc8 <MX_I2C1_Init+0x50>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fa8:	4b07      	ldr	r3, [pc, #28]	@ (8001fc8 <MX_I2C1_Init+0x50>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fae:	4b06      	ldr	r3, [pc, #24]	@ (8001fc8 <MX_I2C1_Init+0x50>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fb4:	4804      	ldr	r0, [pc, #16]	@ (8001fc8 <MX_I2C1_Init+0x50>)
 8001fb6:	f001 f969 	bl	800328c <HAL_I2C_Init>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8001fc0:	f000 f8dc 	bl	800217c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001fc4:	bf00      	nop
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	20000274 	.word	0x20000274
 8001fcc:	40005400 	.word	0x40005400
 8001fd0:	000186a0 	.word	0x000186a0

08001fd4 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001fd8:	4b11      	ldr	r3, [pc, #68]	@ (8002020 <MX_USART1_UART_Init+0x4c>)
 8001fda:	4a12      	ldr	r2, [pc, #72]	@ (8002024 <MX_USART1_UART_Init+0x50>)
 8001fdc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001fde:	4b10      	ldr	r3, [pc, #64]	@ (8002020 <MX_USART1_UART_Init+0x4c>)
 8001fe0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fe4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8002020 <MX_USART1_UART_Init+0x4c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001fec:	4b0c      	ldr	r3, [pc, #48]	@ (8002020 <MX_USART1_UART_Init+0x4c>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8002020 <MX_USART1_UART_Init+0x4c>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001ff8:	4b09      	ldr	r3, [pc, #36]	@ (8002020 <MX_USART1_UART_Init+0x4c>)
 8001ffa:	220c      	movs	r2, #12
 8001ffc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ffe:	4b08      	ldr	r3, [pc, #32]	@ (8002020 <MX_USART1_UART_Init+0x4c>)
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002004:	4b06      	ldr	r3, [pc, #24]	@ (8002020 <MX_USART1_UART_Init+0x4c>)
 8002006:	2200      	movs	r2, #0
 8002008:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800200a:	4805      	ldr	r0, [pc, #20]	@ (8002020 <MX_USART1_UART_Init+0x4c>)
 800200c:	f002 ff20 	bl	8004e50 <HAL_UART_Init>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8002016:	f000 f8b1 	bl	800217c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	200002c8 	.word	0x200002c8
 8002024:	40011000 	.word	0x40011000

08002028 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800202c:	4b11      	ldr	r3, [pc, #68]	@ (8002074 <MX_USART2_UART_Init+0x4c>)
 800202e:	4a12      	ldr	r2, [pc, #72]	@ (8002078 <MX_USART2_UART_Init+0x50>)
 8002030:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002032:	4b10      	ldr	r3, [pc, #64]	@ (8002074 <MX_USART2_UART_Init+0x4c>)
 8002034:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002038:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800203a:	4b0e      	ldr	r3, [pc, #56]	@ (8002074 <MX_USART2_UART_Init+0x4c>)
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002040:	4b0c      	ldr	r3, [pc, #48]	@ (8002074 <MX_USART2_UART_Init+0x4c>)
 8002042:	2200      	movs	r2, #0
 8002044:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002046:	4b0b      	ldr	r3, [pc, #44]	@ (8002074 <MX_USART2_UART_Init+0x4c>)
 8002048:	2200      	movs	r2, #0
 800204a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800204c:	4b09      	ldr	r3, [pc, #36]	@ (8002074 <MX_USART2_UART_Init+0x4c>)
 800204e:	220c      	movs	r2, #12
 8002050:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002052:	4b08      	ldr	r3, [pc, #32]	@ (8002074 <MX_USART2_UART_Init+0x4c>)
 8002054:	2200      	movs	r2, #0
 8002056:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002058:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <MX_USART2_UART_Init+0x4c>)
 800205a:	2200      	movs	r2, #0
 800205c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800205e:	4805      	ldr	r0, [pc, #20]	@ (8002074 <MX_USART2_UART_Init+0x4c>)
 8002060:	f002 fef6 	bl	8004e50 <HAL_UART_Init>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 800206a:	f000 f887 	bl	800217c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000310 	.word	0x20000310
 8002078:	40004400 	.word	0x40004400

0800207c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08a      	sub	sp, #40	@ 0x28
 8002080:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002082:	f107 0314 	add.w	r3, r7, #20
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	609a      	str	r2, [r3, #8]
 800208e:	60da      	str	r2, [r3, #12]
 8002090:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	4b36      	ldr	r3, [pc, #216]	@ (8002170 <MX_GPIO_Init+0xf4>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209a:	4a35      	ldr	r2, [pc, #212]	@ (8002170 <MX_GPIO_Init+0xf4>)
 800209c:	f043 0304 	orr.w	r3, r3, #4
 80020a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020a2:	4b33      	ldr	r3, [pc, #204]	@ (8002170 <MX_GPIO_Init+0xf4>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	4b2f      	ldr	r3, [pc, #188]	@ (8002170 <MX_GPIO_Init+0xf4>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b6:	4a2e      	ldr	r2, [pc, #184]	@ (8002170 <MX_GPIO_Init+0xf4>)
 80020b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020be:	4b2c      	ldr	r3, [pc, #176]	@ (8002170 <MX_GPIO_Init+0xf4>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	4b28      	ldr	r3, [pc, #160]	@ (8002170 <MX_GPIO_Init+0xf4>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d2:	4a27      	ldr	r2, [pc, #156]	@ (8002170 <MX_GPIO_Init+0xf4>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020da:	4b25      	ldr	r3, [pc, #148]	@ (8002170 <MX_GPIO_Init+0xf4>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	607b      	str	r3, [r7, #4]
 80020ea:	4b21      	ldr	r3, [pc, #132]	@ (8002170 <MX_GPIO_Init+0xf4>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ee:	4a20      	ldr	r2, [pc, #128]	@ (8002170 <MX_GPIO_Init+0xf4>)
 80020f0:	f043 0302 	orr.w	r3, r3, #2
 80020f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002170 <MX_GPIO_Init+0xf4>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	607b      	str	r3, [r7, #4]
 8002100:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002102:	2200      	movs	r2, #0
 8002104:	2120      	movs	r1, #32
 8002106:	481b      	ldr	r0, [pc, #108]	@ (8002174 <MX_GPIO_Init+0xf8>)
 8002108:	f001 f8a6 	bl	8003258 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800210c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002110:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002112:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002116:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	4619      	mov	r1, r3
 8002122:	4815      	ldr	r0, [pc, #84]	@ (8002178 <MX_GPIO_Init+0xfc>)
 8002124:	f000 ff04 	bl	8002f30 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8002128:	2320      	movs	r3, #32
 800212a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212c:	2301      	movs	r3, #1
 800212e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002134:	2300      	movs	r3, #0
 8002136:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	4619      	mov	r1, r3
 800213e:	480d      	ldr	r0, [pc, #52]	@ (8002174 <MX_GPIO_Init+0xf8>)
 8002140:	f000 fef6 	bl	8002f30 <HAL_GPIO_Init>

	/*Configure GPIO pins : RASPBERRY_USART3_TX_Pin RASPBERRY_USART3_RX_Pin */
	GPIO_InitStruct.Pin = RASPBERRY_USART3_TX_Pin|RASPBERRY_USART3_RX_Pin;
 8002144:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002148:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214a:	2302      	movs	r3, #2
 800214c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002152:	2303      	movs	r3, #3
 8002154:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002156:	2307      	movs	r3, #7
 8002158:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800215a:	f107 0314 	add.w	r3, r7, #20
 800215e:	4619      	mov	r1, r3
 8002160:	4805      	ldr	r0, [pc, #20]	@ (8002178 <MX_GPIO_Init+0xfc>)
 8002162:	f000 fee5 	bl	8002f30 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002166:	bf00      	nop
 8002168:	3728      	adds	r7, #40	@ 0x28
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800
 8002174:	40020000 	.word	0x40020000
 8002178:	40020800 	.word	0x40020800

0800217c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002180:	b672      	cpsid	i
}
 8002182:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002184:	bf00      	nop
 8002186:	e7fd      	b.n	8002184 <Error_Handler+0x8>

08002188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	607b      	str	r3, [r7, #4]
 8002192:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <HAL_MspInit+0x4c>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002196:	4a0f      	ldr	r2, [pc, #60]	@ (80021d4 <HAL_MspInit+0x4c>)
 8002198:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800219c:	6453      	str	r3, [r2, #68]	@ 0x44
 800219e:	4b0d      	ldr	r3, [pc, #52]	@ (80021d4 <HAL_MspInit+0x4c>)
 80021a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021a6:	607b      	str	r3, [r7, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	603b      	str	r3, [r7, #0]
 80021ae:	4b09      	ldr	r3, [pc, #36]	@ (80021d4 <HAL_MspInit+0x4c>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b2:	4a08      	ldr	r2, [pc, #32]	@ (80021d4 <HAL_MspInit+0x4c>)
 80021b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80021ba:	4b06      	ldr	r3, [pc, #24]	@ (80021d4 <HAL_MspInit+0x4c>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021c2:	603b      	str	r3, [r7, #0]
 80021c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80021c6:	2007      	movs	r0, #7
 80021c8:	f000 fdde 	bl	8002d88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40023800 	.word	0x40023800

080021d8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08a      	sub	sp, #40	@ 0x28
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e0:	f107 0314 	add.w	r3, r7, #20
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	60da      	str	r2, [r3, #12]
 80021ee:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a19      	ldr	r2, [pc, #100]	@ (800225c <HAL_CAN_MspInit+0x84>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d12c      	bne.n	8002254 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	4b18      	ldr	r3, [pc, #96]	@ (8002260 <HAL_CAN_MspInit+0x88>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002202:	4a17      	ldr	r2, [pc, #92]	@ (8002260 <HAL_CAN_MspInit+0x88>)
 8002204:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002208:	6413      	str	r3, [r2, #64]	@ 0x40
 800220a:	4b15      	ldr	r3, [pc, #84]	@ (8002260 <HAL_CAN_MspInit+0x88>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	4b11      	ldr	r3, [pc, #68]	@ (8002260 <HAL_CAN_MspInit+0x88>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221e:	4a10      	ldr	r2, [pc, #64]	@ (8002260 <HAL_CAN_MspInit+0x88>)
 8002220:	f043 0302 	orr.w	r3, r3, #2
 8002224:	6313      	str	r3, [r2, #48]	@ 0x30
 8002226:	4b0e      	ldr	r3, [pc, #56]	@ (8002260 <HAL_CAN_MspInit+0x88>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002232:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002238:	2302      	movs	r3, #2
 800223a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002240:	2303      	movs	r3, #3
 8002242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002244:	2309      	movs	r3, #9
 8002246:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002248:	f107 0314 	add.w	r3, r7, #20
 800224c:	4619      	mov	r1, r3
 800224e:	4805      	ldr	r0, [pc, #20]	@ (8002264 <HAL_CAN_MspInit+0x8c>)
 8002250:	f000 fe6e 	bl	8002f30 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8002254:	bf00      	nop
 8002256:	3728      	adds	r7, #40	@ 0x28
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40006400 	.word	0x40006400
 8002260:	40023800 	.word	0x40023800
 8002264:	40020400 	.word	0x40020400

08002268 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08a      	sub	sp, #40	@ 0x28
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002270:	f107 0314 	add.w	r3, r7, #20
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a19      	ldr	r2, [pc, #100]	@ (80022ec <HAL_I2C_MspInit+0x84>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d12b      	bne.n	80022e2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	4b18      	ldr	r3, [pc, #96]	@ (80022f0 <HAL_I2C_MspInit+0x88>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002292:	4a17      	ldr	r2, [pc, #92]	@ (80022f0 <HAL_I2C_MspInit+0x88>)
 8002294:	f043 0302 	orr.w	r3, r3, #2
 8002298:	6313      	str	r3, [r2, #48]	@ 0x30
 800229a:	4b15      	ldr	r3, [pc, #84]	@ (80022f0 <HAL_I2C_MspInit+0x88>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022a6:	23c0      	movs	r3, #192	@ 0xc0
 80022a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022aa:	2312      	movs	r3, #18
 80022ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b2:	2303      	movs	r3, #3
 80022b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022b6:	2304      	movs	r3, #4
 80022b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ba:	f107 0314 	add.w	r3, r7, #20
 80022be:	4619      	mov	r1, r3
 80022c0:	480c      	ldr	r0, [pc, #48]	@ (80022f4 <HAL_I2C_MspInit+0x8c>)
 80022c2:	f000 fe35 	bl	8002f30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	4b09      	ldr	r3, [pc, #36]	@ (80022f0 <HAL_I2C_MspInit+0x88>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ce:	4a08      	ldr	r2, [pc, #32]	@ (80022f0 <HAL_I2C_MspInit+0x88>)
 80022d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80022d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022d6:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <HAL_I2C_MspInit+0x88>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80022e2:	bf00      	nop
 80022e4:	3728      	adds	r7, #40	@ 0x28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40005400 	.word	0x40005400
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40020400 	.word	0x40020400

080022f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08c      	sub	sp, #48	@ 0x30
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002300:	f107 031c 	add.w	r3, r7, #28
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a36      	ldr	r2, [pc, #216]	@ (80023f0 <HAL_UART_MspInit+0xf8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d135      	bne.n	8002386 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	61bb      	str	r3, [r7, #24]
 800231e:	4b35      	ldr	r3, [pc, #212]	@ (80023f4 <HAL_UART_MspInit+0xfc>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002322:	4a34      	ldr	r2, [pc, #208]	@ (80023f4 <HAL_UART_MspInit+0xfc>)
 8002324:	f043 0310 	orr.w	r3, r3, #16
 8002328:	6453      	str	r3, [r2, #68]	@ 0x44
 800232a:	4b32      	ldr	r3, [pc, #200]	@ (80023f4 <HAL_UART_MspInit+0xfc>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232e:	f003 0310 	and.w	r3, r3, #16
 8002332:	61bb      	str	r3, [r7, #24]
 8002334:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	4b2e      	ldr	r3, [pc, #184]	@ (80023f4 <HAL_UART_MspInit+0xfc>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233e:	4a2d      	ldr	r2, [pc, #180]	@ (80023f4 <HAL_UART_MspInit+0xfc>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	6313      	str	r3, [r2, #48]	@ 0x30
 8002346:	4b2b      	ldr	r3, [pc, #172]	@ (80023f4 <HAL_UART_MspInit+0xfc>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RASPBERRY_USART1_TX_Pin|RASPBERRY_USART1_RX_Pin;
 8002352:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002358:	2302      	movs	r3, #2
 800235a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002360:	2303      	movs	r3, #3
 8002362:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002364:	2307      	movs	r3, #7
 8002366:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002368:	f107 031c 	add.w	r3, r7, #28
 800236c:	4619      	mov	r1, r3
 800236e:	4822      	ldr	r0, [pc, #136]	@ (80023f8 <HAL_UART_MspInit+0x100>)
 8002370:	f000 fdde 	bl	8002f30 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002374:	2200      	movs	r2, #0
 8002376:	2100      	movs	r1, #0
 8002378:	2025      	movs	r0, #37	@ 0x25
 800237a:	f000 fd10 	bl	8002d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800237e:	2025      	movs	r0, #37	@ 0x25
 8002380:	f000 fd29 	bl	8002dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002384:	e030      	b.n	80023e8 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a1c      	ldr	r2, [pc, #112]	@ (80023fc <HAL_UART_MspInit+0x104>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d12b      	bne.n	80023e8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002390:	2300      	movs	r3, #0
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	4b17      	ldr	r3, [pc, #92]	@ (80023f4 <HAL_UART_MspInit+0xfc>)
 8002396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002398:	4a16      	ldr	r2, [pc, #88]	@ (80023f4 <HAL_UART_MspInit+0xfc>)
 800239a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800239e:	6413      	str	r3, [r2, #64]	@ 0x40
 80023a0:	4b14      	ldr	r3, [pc, #80]	@ (80023f4 <HAL_UART_MspInit+0xfc>)
 80023a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ac:	2300      	movs	r3, #0
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	4b10      	ldr	r3, [pc, #64]	@ (80023f4 <HAL_UART_MspInit+0xfc>)
 80023b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b4:	4a0f      	ldr	r2, [pc, #60]	@ (80023f4 <HAL_UART_MspInit+0xfc>)
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80023bc:	4b0d      	ldr	r3, [pc, #52]	@ (80023f4 <HAL_UART_MspInit+0xfc>)
 80023be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = nucleo_USART2_TX_Pin|nucleo_USART2_RX_Pin;
 80023c8:	230c      	movs	r3, #12
 80023ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023cc:	2302      	movs	r3, #2
 80023ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d4:	2303      	movs	r3, #3
 80023d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023d8:	2307      	movs	r3, #7
 80023da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023dc:	f107 031c 	add.w	r3, r7, #28
 80023e0:	4619      	mov	r1, r3
 80023e2:	4805      	ldr	r0, [pc, #20]	@ (80023f8 <HAL_UART_MspInit+0x100>)
 80023e4:	f000 fda4 	bl	8002f30 <HAL_GPIO_Init>
}
 80023e8:	bf00      	nop
 80023ea:	3730      	adds	r7, #48	@ 0x30
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40011000 	.word	0x40011000
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40020000 	.word	0x40020000
 80023fc:	40004400 	.word	0x40004400

08002400 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  //HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);//transmission à la nucleo
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF); //transmission à la pi zero
 8002408:	1d39      	adds	r1, r7, #4
 800240a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800240e:	2201      	movs	r2, #1
 8002410:	4803      	ldr	r0, [pc, #12]	@ (8002420 <__io_putchar+0x20>)
 8002412:	f002 fd6d 	bl	8004ef0 <HAL_UART_Transmit>
  return ch;
 8002416:	687b      	ldr	r3, [r7, #4]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	200002c8 	.word	0x200002c8

08002424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002428:	bf00      	nop
 800242a:	e7fd      	b.n	8002428 <NMI_Handler+0x4>

0800242c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002430:	bf00      	nop
 8002432:	e7fd      	b.n	8002430 <HardFault_Handler+0x4>

08002434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002438:	bf00      	nop
 800243a:	e7fd      	b.n	8002438 <MemManage_Handler+0x4>

0800243c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002440:	bf00      	nop
 8002442:	e7fd      	b.n	8002440 <BusFault_Handler+0x4>

08002444 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002448:	bf00      	nop
 800244a:	e7fd      	b.n	8002448 <UsageFault_Handler+0x4>

0800244c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800245a:	b480      	push	{r7}
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800247a:	f000 f961 	bl	8002740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002488:	4802      	ldr	r0, [pc, #8]	@ (8002494 <USART1_IRQHandler+0x10>)
 800248a:	f002 fde1 	bl	8005050 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	200002c8 	.word	0x200002c8

08002498 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return 1;
 800249c:	2301      	movs	r3, #1
}
 800249e:	4618      	mov	r0, r3
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <_kill>:

int _kill(int pid, int sig)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024b2:	f004 fe1d 	bl	80070f0 <__errno>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2216      	movs	r2, #22
 80024ba:	601a      	str	r2, [r3, #0]
  return -1;
 80024bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <_exit>:

void _exit (int status)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff ffe7 	bl	80024a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024da:	bf00      	nop
 80024dc:	e7fd      	b.n	80024da <_exit+0x12>

080024de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b086      	sub	sp, #24
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	60f8      	str	r0, [r7, #12]
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	e00a      	b.n	8002506 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024f0:	f3af 8000 	nop.w
 80024f4:	4601      	mov	r1, r0
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	60ba      	str	r2, [r7, #8]
 80024fc:	b2ca      	uxtb	r2, r1
 80024fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	3301      	adds	r3, #1
 8002504:	617b      	str	r3, [r7, #20]
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	429a      	cmp	r2, r3
 800250c:	dbf0      	blt.n	80024f0 <_read+0x12>
  }

  return len;
 800250e:	687b      	ldr	r3, [r7, #4]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	e009      	b.n	800253e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	60ba      	str	r2, [r7, #8]
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff ff64 	bl	8002400 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	3301      	adds	r3, #1
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	429a      	cmp	r2, r3
 8002544:	dbf1      	blt.n	800252a <_write+0x12>
  }
  return len;
 8002546:	687b      	ldr	r3, [r7, #4]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <_close>:

int _close(int file)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002558:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002578:	605a      	str	r2, [r3, #4]
  return 0;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <_isatty>:

int _isatty(int file)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002590:	2301      	movs	r3, #1
}
 8002592:	4618      	mov	r0, r3
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800259e:	b480      	push	{r7}
 80025a0:	b085      	sub	sp, #20
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	60f8      	str	r0, [r7, #12]
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025c0:	4a14      	ldr	r2, [pc, #80]	@ (8002614 <_sbrk+0x5c>)
 80025c2:	4b15      	ldr	r3, [pc, #84]	@ (8002618 <_sbrk+0x60>)
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025cc:	4b13      	ldr	r3, [pc, #76]	@ (800261c <_sbrk+0x64>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d102      	bne.n	80025da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025d4:	4b11      	ldr	r3, [pc, #68]	@ (800261c <_sbrk+0x64>)
 80025d6:	4a12      	ldr	r2, [pc, #72]	@ (8002620 <_sbrk+0x68>)
 80025d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025da:	4b10      	ldr	r3, [pc, #64]	@ (800261c <_sbrk+0x64>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d207      	bcs.n	80025f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025e8:	f004 fd82 	bl	80070f0 <__errno>
 80025ec:	4603      	mov	r3, r0
 80025ee:	220c      	movs	r2, #12
 80025f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80025f6:	e009      	b.n	800260c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025f8:	4b08      	ldr	r3, [pc, #32]	@ (800261c <_sbrk+0x64>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025fe:	4b07      	ldr	r3, [pc, #28]	@ (800261c <_sbrk+0x64>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4413      	add	r3, r2
 8002606:	4a05      	ldr	r2, [pc, #20]	@ (800261c <_sbrk+0x64>)
 8002608:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800260a:	68fb      	ldr	r3, [r7, #12]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20020000 	.word	0x20020000
 8002618:	00000400 	.word	0x00000400
 800261c:	20000358 	.word	0x20000358
 8002620:	200004b0 	.word	0x200004b0

08002624 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002628:	4b06      	ldr	r3, [pc, #24]	@ (8002644 <SystemInit+0x20>)
 800262a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800262e:	4a05      	ldr	r2, [pc, #20]	@ (8002644 <SystemInit+0x20>)
 8002630:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002634:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002648:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002680 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800264c:	f7ff ffea 	bl	8002624 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002650:	480c      	ldr	r0, [pc, #48]	@ (8002684 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002652:	490d      	ldr	r1, [pc, #52]	@ (8002688 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002654:	4a0d      	ldr	r2, [pc, #52]	@ (800268c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002658:	e002      	b.n	8002660 <LoopCopyDataInit>

0800265a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800265a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800265c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800265e:	3304      	adds	r3, #4

08002660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002664:	d3f9      	bcc.n	800265a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002666:	4a0a      	ldr	r2, [pc, #40]	@ (8002690 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002668:	4c0a      	ldr	r4, [pc, #40]	@ (8002694 <LoopFillZerobss+0x22>)
  movs r3, #0
 800266a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800266c:	e001      	b.n	8002672 <LoopFillZerobss>

0800266e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800266e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002670:	3204      	adds	r2, #4

08002672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002674:	d3fb      	bcc.n	800266e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002676:	f004 fd41 	bl	80070fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800267a:	f7ff fbb1 	bl	8001de0 <main>
  bx  lr    
 800267e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002680:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002688:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800268c:	0800adb8 	.word	0x0800adb8
  ldr r2, =_sbss
 8002690:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002694:	200004ac 	.word	0x200004ac

08002698 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002698:	e7fe      	b.n	8002698 <ADC_IRQHandler>
	...

0800269c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026a0:	4b0e      	ldr	r3, [pc, #56]	@ (80026dc <HAL_Init+0x40>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a0d      	ldr	r2, [pc, #52]	@ (80026dc <HAL_Init+0x40>)
 80026a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026ac:	4b0b      	ldr	r3, [pc, #44]	@ (80026dc <HAL_Init+0x40>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a0a      	ldr	r2, [pc, #40]	@ (80026dc <HAL_Init+0x40>)
 80026b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026b8:	4b08      	ldr	r3, [pc, #32]	@ (80026dc <HAL_Init+0x40>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a07      	ldr	r2, [pc, #28]	@ (80026dc <HAL_Init+0x40>)
 80026be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026c4:	2003      	movs	r0, #3
 80026c6:	f000 fb5f 	bl	8002d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026ca:	2000      	movs	r0, #0
 80026cc:	f000 f808 	bl	80026e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026d0:	f7ff fd5a 	bl	8002188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40023c00 	.word	0x40023c00

080026e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026e8:	4b12      	ldr	r3, [pc, #72]	@ (8002734 <HAL_InitTick+0x54>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	4b12      	ldr	r3, [pc, #72]	@ (8002738 <HAL_InitTick+0x58>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	4619      	mov	r1, r3
 80026f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 fb77 	bl	8002df2 <HAL_SYSTICK_Config>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e00e      	b.n	800272c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b0f      	cmp	r3, #15
 8002712:	d80a      	bhi.n	800272a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002714:	2200      	movs	r2, #0
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800271c:	f000 fb3f 	bl	8002d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002720:	4a06      	ldr	r2, [pc, #24]	@ (800273c <HAL_InitTick+0x5c>)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	e000      	b.n	800272c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
}
 800272c:	4618      	mov	r0, r3
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	20000004 	.word	0x20000004
 8002738:	2000000c 	.word	0x2000000c
 800273c:	20000008 	.word	0x20000008

08002740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002744:	4b06      	ldr	r3, [pc, #24]	@ (8002760 <HAL_IncTick+0x20>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	461a      	mov	r2, r3
 800274a:	4b06      	ldr	r3, [pc, #24]	@ (8002764 <HAL_IncTick+0x24>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4413      	add	r3, r2
 8002750:	4a04      	ldr	r2, [pc, #16]	@ (8002764 <HAL_IncTick+0x24>)
 8002752:	6013      	str	r3, [r2, #0]
}
 8002754:	bf00      	nop
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	2000000c 	.word	0x2000000c
 8002764:	2000035c 	.word	0x2000035c

08002768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return uwTick;
 800276c:	4b03      	ldr	r3, [pc, #12]	@ (800277c <HAL_GetTick+0x14>)
 800276e:	681b      	ldr	r3, [r3, #0]
}
 8002770:	4618      	mov	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	2000035c 	.word	0x2000035c

08002780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002788:	f7ff ffee 	bl	8002768 <HAL_GetTick>
 800278c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002798:	d005      	beq.n	80027a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800279a:	4b0a      	ldr	r3, [pc, #40]	@ (80027c4 <HAL_Delay+0x44>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4413      	add	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027a6:	bf00      	nop
 80027a8:	f7ff ffde 	bl	8002768 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d8f7      	bhi.n	80027a8 <HAL_Delay+0x28>
  {
  }
}
 80027b8:	bf00      	nop
 80027ba:	bf00      	nop
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	2000000c 	.word	0x2000000c

080027c8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e0ed      	b.n	80029b6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d102      	bne.n	80027ec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff fcf6 	bl	80021d8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0201 	orr.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027fc:	f7ff ffb4 	bl	8002768 <HAL_GetTick>
 8002800:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002802:	e012      	b.n	800282a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002804:	f7ff ffb0 	bl	8002768 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b0a      	cmp	r3, #10
 8002810:	d90b      	bls.n	800282a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002816:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2205      	movs	r2, #5
 8002822:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e0c5      	b.n	80029b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0e5      	beq.n	8002804 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0202 	bic.w	r2, r2, #2
 8002846:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002848:	f7ff ff8e 	bl	8002768 <HAL_GetTick>
 800284c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800284e:	e012      	b.n	8002876 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002850:	f7ff ff8a 	bl	8002768 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b0a      	cmp	r3, #10
 800285c:	d90b      	bls.n	8002876 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002862:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2205      	movs	r2, #5
 800286e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e09f      	b.n	80029b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1e5      	bne.n	8002850 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	7e1b      	ldrb	r3, [r3, #24]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d108      	bne.n	800289e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	e007      	b.n	80028ae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	7e5b      	ldrb	r3, [r3, #25]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d108      	bne.n	80028c8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	e007      	b.n	80028d8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	7e9b      	ldrb	r3, [r3, #26]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d108      	bne.n	80028f2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0220 	orr.w	r2, r2, #32
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	e007      	b.n	8002902 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0220 	bic.w	r2, r2, #32
 8002900:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	7edb      	ldrb	r3, [r3, #27]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d108      	bne.n	800291c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 0210 	bic.w	r2, r2, #16
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	e007      	b.n	800292c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0210 	orr.w	r2, r2, #16
 800292a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	7f1b      	ldrb	r3, [r3, #28]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d108      	bne.n	8002946 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0208 	orr.w	r2, r2, #8
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	e007      	b.n	8002956 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0208 	bic.w	r2, r2, #8
 8002954:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	7f5b      	ldrb	r3, [r3, #29]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d108      	bne.n	8002970 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f042 0204 	orr.w	r2, r2, #4
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	e007      	b.n	8002980 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0204 	bic.w	r2, r2, #4
 800297e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	431a      	orrs	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	ea42 0103 	orr.w	r1, r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	1e5a      	subs	r2, r3, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b084      	sub	sp, #16
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d12e      	bne.n	8002a30 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2202      	movs	r2, #2
 80029d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0201 	bic.w	r2, r2, #1
 80029e8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80029ea:	f7ff febd 	bl	8002768 <HAL_GetTick>
 80029ee:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80029f0:	e012      	b.n	8002a18 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029f2:	f7ff feb9 	bl	8002768 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b0a      	cmp	r3, #10
 80029fe:	d90b      	bls.n	8002a18 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a04:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2205      	movs	r2, #5
 8002a10:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e012      	b.n	8002a3e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1e5      	bne.n	80029f2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	e006      	b.n	8002a3e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a34:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
  }
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b089      	sub	sp, #36	@ 0x24
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	60f8      	str	r0, [r7, #12]
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	607a      	str	r2, [r7, #4]
 8002a52:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a64:	7ffb      	ldrb	r3, [r7, #31]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d003      	beq.n	8002a72 <HAL_CAN_AddTxMessage+0x2c>
 8002a6a:	7ffb      	ldrb	r3, [r7, #31]
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	f040 80ad 	bne.w	8002bcc <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10a      	bne.n	8002a92 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d105      	bne.n	8002a92 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 8095 	beq.w	8002bbc <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	0e1b      	lsrs	r3, r3, #24
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	409a      	lsls	r2, r3
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10d      	bne.n	8002aca <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002ab8:	68f9      	ldr	r1, [r7, #12]
 8002aba:	6809      	ldr	r1, [r1, #0]
 8002abc:	431a      	orrs	r2, r3
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	3318      	adds	r3, #24
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	440b      	add	r3, r1
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	e00f      	b.n	8002aea <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ad4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ada:	68f9      	ldr	r1, [r7, #12]
 8002adc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002ade:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	3318      	adds	r3, #24
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	440b      	add	r3, r1
 8002ae8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6819      	ldr	r1, [r3, #0]
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	691a      	ldr	r2, [r3, #16]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	3318      	adds	r3, #24
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	440b      	add	r3, r1
 8002afa:	3304      	adds	r3, #4
 8002afc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	7d1b      	ldrb	r3, [r3, #20]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d111      	bne.n	8002b2a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	3318      	adds	r3, #24
 8002b0e:	011b      	lsls	r3, r3, #4
 8002b10:	4413      	add	r3, r2
 8002b12:	3304      	adds	r3, #4
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	6811      	ldr	r1, [r2, #0]
 8002b1a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	3318      	adds	r3, #24
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	440b      	add	r3, r1
 8002b26:	3304      	adds	r3, #4
 8002b28:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3307      	adds	r3, #7
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	061a      	lsls	r2, r3, #24
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3306      	adds	r3, #6
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	041b      	lsls	r3, r3, #16
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3305      	adds	r3, #5
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	021b      	lsls	r3, r3, #8
 8002b44:	4313      	orrs	r3, r2
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	3204      	adds	r2, #4
 8002b4a:	7812      	ldrb	r2, [r2, #0]
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	6811      	ldr	r1, [r2, #0]
 8002b52:	ea43 0200 	orr.w	r2, r3, r0
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	440b      	add	r3, r1
 8002b5c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002b60:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3303      	adds	r3, #3
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	061a      	lsls	r2, r3, #24
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3302      	adds	r3, #2
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	041b      	lsls	r3, r3, #16
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3301      	adds	r3, #1
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	021b      	lsls	r3, r3, #8
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	7812      	ldrb	r2, [r2, #0]
 8002b82:	4610      	mov	r0, r2
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	6811      	ldr	r1, [r2, #0]
 8002b88:	ea43 0200 	orr.w	r2, r3, r0
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	011b      	lsls	r3, r3, #4
 8002b90:	440b      	add	r3, r1
 8002b92:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002b96:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	3318      	adds	r3, #24
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	4413      	add	r3, r2
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	6811      	ldr	r1, [r2, #0]
 8002baa:	f043 0201 	orr.w	r2, r3, #1
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	3318      	adds	r3, #24
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	440b      	add	r3, r1
 8002bb6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	e00e      	b.n	8002bda <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e006      	b.n	8002bda <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
  }
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3724      	adds	r7, #36	@ 0x24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
	...

08002be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8002c2c <__NVIC_SetPriorityGrouping+0x44>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c04:	4013      	ands	r3, r2
 8002c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c1a:	4a04      	ldr	r2, [pc, #16]	@ (8002c2c <__NVIC_SetPriorityGrouping+0x44>)
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	60d3      	str	r3, [r2, #12]
}
 8002c20:	bf00      	nop
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	e000ed00 	.word	0xe000ed00

08002c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c34:	4b04      	ldr	r3, [pc, #16]	@ (8002c48 <__NVIC_GetPriorityGrouping+0x18>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	0a1b      	lsrs	r3, r3, #8
 8002c3a:	f003 0307 	and.w	r3, r3, #7
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	e000ed00 	.word	0xe000ed00

08002c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	db0b      	blt.n	8002c76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	f003 021f 	and.w	r2, r3, #31
 8002c64:	4907      	ldr	r1, [pc, #28]	@ (8002c84 <__NVIC_EnableIRQ+0x38>)
 8002c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	2001      	movs	r0, #1
 8002c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	e000e100 	.word	0xe000e100

08002c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	6039      	str	r1, [r7, #0]
 8002c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	db0a      	blt.n	8002cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	490c      	ldr	r1, [pc, #48]	@ (8002cd4 <__NVIC_SetPriority+0x4c>)
 8002ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca6:	0112      	lsls	r2, r2, #4
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	440b      	add	r3, r1
 8002cac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cb0:	e00a      	b.n	8002cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	4908      	ldr	r1, [pc, #32]	@ (8002cd8 <__NVIC_SetPriority+0x50>)
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	3b04      	subs	r3, #4
 8002cc0:	0112      	lsls	r2, r2, #4
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	761a      	strb	r2, [r3, #24]
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	e000e100 	.word	0xe000e100
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b089      	sub	sp, #36	@ 0x24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f1c3 0307 	rsb	r3, r3, #7
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	bf28      	it	cs
 8002cfa:	2304      	movcs	r3, #4
 8002cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	3304      	adds	r3, #4
 8002d02:	2b06      	cmp	r3, #6
 8002d04:	d902      	bls.n	8002d0c <NVIC_EncodePriority+0x30>
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3b03      	subs	r3, #3
 8002d0a:	e000      	b.n	8002d0e <NVIC_EncodePriority+0x32>
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43da      	mvns	r2, r3
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	401a      	ands	r2, r3
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d24:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2e:	43d9      	mvns	r1, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d34:	4313      	orrs	r3, r2
         );
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3724      	adds	r7, #36	@ 0x24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
	...

08002d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d54:	d301      	bcc.n	8002d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d56:	2301      	movs	r3, #1
 8002d58:	e00f      	b.n	8002d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d84 <SysTick_Config+0x40>)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d62:	210f      	movs	r1, #15
 8002d64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d68:	f7ff ff8e 	bl	8002c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d6c:	4b05      	ldr	r3, [pc, #20]	@ (8002d84 <SysTick_Config+0x40>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d72:	4b04      	ldr	r3, [pc, #16]	@ (8002d84 <SysTick_Config+0x40>)
 8002d74:	2207      	movs	r2, #7
 8002d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	e000e010 	.word	0xe000e010

08002d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7ff ff29 	bl	8002be8 <__NVIC_SetPriorityGrouping>
}
 8002d96:	bf00      	nop
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b086      	sub	sp, #24
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	4603      	mov	r3, r0
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
 8002daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002db0:	f7ff ff3e 	bl	8002c30 <__NVIC_GetPriorityGrouping>
 8002db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	68b9      	ldr	r1, [r7, #8]
 8002dba:	6978      	ldr	r0, [r7, #20]
 8002dbc:	f7ff ff8e 	bl	8002cdc <NVIC_EncodePriority>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff ff5d 	bl	8002c88 <__NVIC_SetPriority>
}
 8002dce:	bf00      	nop
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b082      	sub	sp, #8
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	4603      	mov	r3, r0
 8002dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff ff31 	bl	8002c4c <__NVIC_EnableIRQ>
}
 8002dea:	bf00      	nop
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b082      	sub	sp, #8
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7ff ffa2 	bl	8002d44 <SysTick_Config>
 8002e00:	4603      	mov	r3, r0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b084      	sub	sp, #16
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e16:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e18:	f7ff fca6 	bl	8002768 <HAL_GetTick>
 8002e1c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d008      	beq.n	8002e3c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2280      	movs	r2, #128	@ 0x80
 8002e2e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e052      	b.n	8002ee2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0216 	bic.w	r2, r2, #22
 8002e4a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695a      	ldr	r2, [r3, #20]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e5a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d103      	bne.n	8002e6c <HAL_DMA_Abort+0x62>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d007      	beq.n	8002e7c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0208 	bic.w	r2, r2, #8
 8002e7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0201 	bic.w	r2, r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e8c:	e013      	b.n	8002eb6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e8e:	f7ff fc6b 	bl	8002768 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b05      	cmp	r3, #5
 8002e9a:	d90c      	bls.n	8002eb6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2203      	movs	r2, #3
 8002ea6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e015      	b.n	8002ee2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1e4      	bne.n	8002e8e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec8:	223f      	movs	r2, #63	@ 0x3f
 8002eca:	409a      	lsls	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d004      	beq.n	8002f08 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2280      	movs	r2, #128	@ 0x80
 8002f02:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e00c      	b.n	8002f22 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2205      	movs	r2, #5
 8002f0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0201 	bic.w	r2, r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
	...

08002f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b089      	sub	sp, #36	@ 0x24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f46:	2300      	movs	r3, #0
 8002f48:	61fb      	str	r3, [r7, #28]
 8002f4a:	e165      	b.n	8003218 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	f040 8154 	bne.w	8003212 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d005      	beq.n	8002f82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d130      	bne.n	8002fe4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	2203      	movs	r2, #3
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43db      	mvns	r3, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fb8:	2201      	movs	r2, #1
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	f003 0201 	and.w	r2, r3, #1
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 0303 	and.w	r3, r3, #3
 8002fec:	2b03      	cmp	r3, #3
 8002fee:	d017      	beq.n	8003020 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	2203      	movs	r2, #3
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4313      	orrs	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d123      	bne.n	8003074 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	08da      	lsrs	r2, r3, #3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3208      	adds	r2, #8
 8003034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003038:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	220f      	movs	r2, #15
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	691a      	ldr	r2, [r3, #16]
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	08da      	lsrs	r2, r3, #3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	3208      	adds	r2, #8
 800306e:	69b9      	ldr	r1, [r7, #24]
 8003070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	2203      	movs	r2, #3
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4013      	ands	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 0203 	and.w	r2, r3, #3
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 80ae 	beq.w	8003212 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	4b5d      	ldr	r3, [pc, #372]	@ (8003230 <HAL_GPIO_Init+0x300>)
 80030bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030be:	4a5c      	ldr	r2, [pc, #368]	@ (8003230 <HAL_GPIO_Init+0x300>)
 80030c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80030c6:	4b5a      	ldr	r3, [pc, #360]	@ (8003230 <HAL_GPIO_Init+0x300>)
 80030c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030d2:	4a58      	ldr	r2, [pc, #352]	@ (8003234 <HAL_GPIO_Init+0x304>)
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	089b      	lsrs	r3, r3, #2
 80030d8:	3302      	adds	r3, #2
 80030da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	220f      	movs	r2, #15
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43db      	mvns	r3, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4013      	ands	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a4f      	ldr	r2, [pc, #316]	@ (8003238 <HAL_GPIO_Init+0x308>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d025      	beq.n	800314a <HAL_GPIO_Init+0x21a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a4e      	ldr	r2, [pc, #312]	@ (800323c <HAL_GPIO_Init+0x30c>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d01f      	beq.n	8003146 <HAL_GPIO_Init+0x216>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a4d      	ldr	r2, [pc, #308]	@ (8003240 <HAL_GPIO_Init+0x310>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d019      	beq.n	8003142 <HAL_GPIO_Init+0x212>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a4c      	ldr	r2, [pc, #304]	@ (8003244 <HAL_GPIO_Init+0x314>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d013      	beq.n	800313e <HAL_GPIO_Init+0x20e>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a4b      	ldr	r2, [pc, #300]	@ (8003248 <HAL_GPIO_Init+0x318>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d00d      	beq.n	800313a <HAL_GPIO_Init+0x20a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a4a      	ldr	r2, [pc, #296]	@ (800324c <HAL_GPIO_Init+0x31c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d007      	beq.n	8003136 <HAL_GPIO_Init+0x206>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a49      	ldr	r2, [pc, #292]	@ (8003250 <HAL_GPIO_Init+0x320>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d101      	bne.n	8003132 <HAL_GPIO_Init+0x202>
 800312e:	2306      	movs	r3, #6
 8003130:	e00c      	b.n	800314c <HAL_GPIO_Init+0x21c>
 8003132:	2307      	movs	r3, #7
 8003134:	e00a      	b.n	800314c <HAL_GPIO_Init+0x21c>
 8003136:	2305      	movs	r3, #5
 8003138:	e008      	b.n	800314c <HAL_GPIO_Init+0x21c>
 800313a:	2304      	movs	r3, #4
 800313c:	e006      	b.n	800314c <HAL_GPIO_Init+0x21c>
 800313e:	2303      	movs	r3, #3
 8003140:	e004      	b.n	800314c <HAL_GPIO_Init+0x21c>
 8003142:	2302      	movs	r3, #2
 8003144:	e002      	b.n	800314c <HAL_GPIO_Init+0x21c>
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <HAL_GPIO_Init+0x21c>
 800314a:	2300      	movs	r3, #0
 800314c:	69fa      	ldr	r2, [r7, #28]
 800314e:	f002 0203 	and.w	r2, r2, #3
 8003152:	0092      	lsls	r2, r2, #2
 8003154:	4093      	lsls	r3, r2
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4313      	orrs	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800315c:	4935      	ldr	r1, [pc, #212]	@ (8003234 <HAL_GPIO_Init+0x304>)
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	089b      	lsrs	r3, r3, #2
 8003162:	3302      	adds	r3, #2
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800316a:	4b3a      	ldr	r3, [pc, #232]	@ (8003254 <HAL_GPIO_Init+0x324>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	43db      	mvns	r3, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4013      	ands	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800318e:	4a31      	ldr	r2, [pc, #196]	@ (8003254 <HAL_GPIO_Init+0x324>)
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003194:	4b2f      	ldr	r3, [pc, #188]	@ (8003254 <HAL_GPIO_Init+0x324>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	43db      	mvns	r3, r3
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4013      	ands	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031b8:	4a26      	ldr	r2, [pc, #152]	@ (8003254 <HAL_GPIO_Init+0x324>)
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031be:	4b25      	ldr	r3, [pc, #148]	@ (8003254 <HAL_GPIO_Init+0x324>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	43db      	mvns	r3, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4013      	ands	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	4313      	orrs	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003254 <HAL_GPIO_Init+0x324>)
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031e8:	4b1a      	ldr	r3, [pc, #104]	@ (8003254 <HAL_GPIO_Init+0x324>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	43db      	mvns	r3, r3
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	4013      	ands	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800320c:	4a11      	ldr	r2, [pc, #68]	@ (8003254 <HAL_GPIO_Init+0x324>)
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	3301      	adds	r3, #1
 8003216:	61fb      	str	r3, [r7, #28]
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	2b0f      	cmp	r3, #15
 800321c:	f67f ae96 	bls.w	8002f4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003220:	bf00      	nop
 8003222:	bf00      	nop
 8003224:	3724      	adds	r7, #36	@ 0x24
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40023800 	.word	0x40023800
 8003234:	40013800 	.word	0x40013800
 8003238:	40020000 	.word	0x40020000
 800323c:	40020400 	.word	0x40020400
 8003240:	40020800 	.word	0x40020800
 8003244:	40020c00 	.word	0x40020c00
 8003248:	40021000 	.word	0x40021000
 800324c:	40021400 	.word	0x40021400
 8003250:	40021800 	.word	0x40021800
 8003254:	40013c00 	.word	0x40013c00

08003258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	460b      	mov	r3, r1
 8003262:	807b      	strh	r3, [r7, #2]
 8003264:	4613      	mov	r3, r2
 8003266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003268:	787b      	ldrb	r3, [r7, #1]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800326e:	887a      	ldrh	r2, [r7, #2]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003274:	e003      	b.n	800327e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003276:	887b      	ldrh	r3, [r7, #2]
 8003278:	041a      	lsls	r2, r3, #16
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	619a      	str	r2, [r3, #24]
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
	...

0800328c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e12b      	b.n	80034f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d106      	bne.n	80032b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7fe ffd8 	bl	8002268 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2224      	movs	r2, #36	@ 0x24
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0201 	bic.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032f0:	f001 f8b8 	bl	8004464 <HAL_RCC_GetPCLK1Freq>
 80032f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	4a81      	ldr	r2, [pc, #516]	@ (8003500 <HAL_I2C_Init+0x274>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d807      	bhi.n	8003310 <HAL_I2C_Init+0x84>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4a80      	ldr	r2, [pc, #512]	@ (8003504 <HAL_I2C_Init+0x278>)
 8003304:	4293      	cmp	r3, r2
 8003306:	bf94      	ite	ls
 8003308:	2301      	movls	r3, #1
 800330a:	2300      	movhi	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	e006      	b.n	800331e <HAL_I2C_Init+0x92>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4a7d      	ldr	r2, [pc, #500]	@ (8003508 <HAL_I2C_Init+0x27c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	bf94      	ite	ls
 8003318:	2301      	movls	r3, #1
 800331a:	2300      	movhi	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e0e7      	b.n	80034f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4a78      	ldr	r2, [pc, #480]	@ (800350c <HAL_I2C_Init+0x280>)
 800332a:	fba2 2303 	umull	r2, r3, r2, r3
 800332e:	0c9b      	lsrs	r3, r3, #18
 8003330:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	430a      	orrs	r2, r1
 8003344:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	4a6a      	ldr	r2, [pc, #424]	@ (8003500 <HAL_I2C_Init+0x274>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d802      	bhi.n	8003360 <HAL_I2C_Init+0xd4>
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	3301      	adds	r3, #1
 800335e:	e009      	b.n	8003374 <HAL_I2C_Init+0xe8>
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003366:	fb02 f303 	mul.w	r3, r2, r3
 800336a:	4a69      	ldr	r2, [pc, #420]	@ (8003510 <HAL_I2C_Init+0x284>)
 800336c:	fba2 2303 	umull	r2, r3, r2, r3
 8003370:	099b      	lsrs	r3, r3, #6
 8003372:	3301      	adds	r3, #1
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6812      	ldr	r2, [r2, #0]
 8003378:	430b      	orrs	r3, r1
 800337a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003386:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	495c      	ldr	r1, [pc, #368]	@ (8003500 <HAL_I2C_Init+0x274>)
 8003390:	428b      	cmp	r3, r1
 8003392:	d819      	bhi.n	80033c8 <HAL_I2C_Init+0x13c>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	1e59      	subs	r1, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	fbb1 f3f3 	udiv	r3, r1, r3
 80033a2:	1c59      	adds	r1, r3, #1
 80033a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80033a8:	400b      	ands	r3, r1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <HAL_I2C_Init+0x138>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	1e59      	subs	r1, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80033bc:	3301      	adds	r3, #1
 80033be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c2:	e051      	b.n	8003468 <HAL_I2C_Init+0x1dc>
 80033c4:	2304      	movs	r3, #4
 80033c6:	e04f      	b.n	8003468 <HAL_I2C_Init+0x1dc>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d111      	bne.n	80033f4 <HAL_I2C_Init+0x168>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	1e58      	subs	r0, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6859      	ldr	r1, [r3, #4]
 80033d8:	460b      	mov	r3, r1
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	440b      	add	r3, r1
 80033de:	fbb0 f3f3 	udiv	r3, r0, r3
 80033e2:	3301      	adds	r3, #1
 80033e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf0c      	ite	eq
 80033ec:	2301      	moveq	r3, #1
 80033ee:	2300      	movne	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	e012      	b.n	800341a <HAL_I2C_Init+0x18e>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	1e58      	subs	r0, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6859      	ldr	r1, [r3, #4]
 80033fc:	460b      	mov	r3, r1
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	0099      	lsls	r1, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	fbb0 f3f3 	udiv	r3, r0, r3
 800340a:	3301      	adds	r3, #1
 800340c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003410:	2b00      	cmp	r3, #0
 8003412:	bf0c      	ite	eq
 8003414:	2301      	moveq	r3, #1
 8003416:	2300      	movne	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_I2C_Init+0x196>
 800341e:	2301      	movs	r3, #1
 8003420:	e022      	b.n	8003468 <HAL_I2C_Init+0x1dc>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10e      	bne.n	8003448 <HAL_I2C_Init+0x1bc>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1e58      	subs	r0, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6859      	ldr	r1, [r3, #4]
 8003432:	460b      	mov	r3, r1
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	440b      	add	r3, r1
 8003438:	fbb0 f3f3 	udiv	r3, r0, r3
 800343c:	3301      	adds	r3, #1
 800343e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003442:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003446:	e00f      	b.n	8003468 <HAL_I2C_Init+0x1dc>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	1e58      	subs	r0, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6859      	ldr	r1, [r3, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	0099      	lsls	r1, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	fbb0 f3f3 	udiv	r3, r0, r3
 800345e:	3301      	adds	r3, #1
 8003460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003464:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	6809      	ldr	r1, [r1, #0]
 800346c:	4313      	orrs	r3, r2
 800346e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69da      	ldr	r2, [r3, #28]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003496:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6911      	ldr	r1, [r2, #16]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	68d2      	ldr	r2, [r2, #12]
 80034a2:	4311      	orrs	r1, r2
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6812      	ldr	r2, [r2, #0]
 80034a8:	430b      	orrs	r3, r1
 80034aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	695a      	ldr	r2, [r3, #20]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0201 	orr.w	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2220      	movs	r2, #32
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	000186a0 	.word	0x000186a0
 8003504:	001e847f 	.word	0x001e847f
 8003508:	003d08ff 	.word	0x003d08ff
 800350c:	431bde83 	.word	0x431bde83
 8003510:	10624dd3 	.word	0x10624dd3

08003514 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b088      	sub	sp, #32
 8003518:	af02      	add	r7, sp, #8
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	607a      	str	r2, [r7, #4]
 800351e:	461a      	mov	r2, r3
 8003520:	460b      	mov	r3, r1
 8003522:	817b      	strh	r3, [r7, #10]
 8003524:	4613      	mov	r3, r2
 8003526:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003528:	f7ff f91e 	bl	8002768 <HAL_GetTick>
 800352c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b20      	cmp	r3, #32
 8003538:	f040 80e0 	bne.w	80036fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	2319      	movs	r3, #25
 8003542:	2201      	movs	r2, #1
 8003544:	4970      	ldr	r1, [pc, #448]	@ (8003708 <HAL_I2C_Master_Transmit+0x1f4>)
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 fc64 	bl	8003e14 <I2C_WaitOnFlagUntilTimeout>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003552:	2302      	movs	r3, #2
 8003554:	e0d3      	b.n	80036fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800355c:	2b01      	cmp	r3, #1
 800355e:	d101      	bne.n	8003564 <HAL_I2C_Master_Transmit+0x50>
 8003560:	2302      	movs	r3, #2
 8003562:	e0cc      	b.n	80036fe <HAL_I2C_Master_Transmit+0x1ea>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b01      	cmp	r3, #1
 8003578:	d007      	beq.n	800358a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f042 0201 	orr.w	r2, r2, #1
 8003588:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003598:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2221      	movs	r2, #33	@ 0x21
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2210      	movs	r2, #16
 80035a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	893a      	ldrh	r2, [r7, #8]
 80035ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	4a50      	ldr	r2, [pc, #320]	@ (800370c <HAL_I2C_Master_Transmit+0x1f8>)
 80035ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035cc:	8979      	ldrh	r1, [r7, #10]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	6a3a      	ldr	r2, [r7, #32]
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 face 	bl	8003b74 <I2C_MasterRequestWrite>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e08d      	b.n	80036fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035e2:	2300      	movs	r3, #0
 80035e4:	613b      	str	r3, [r7, #16]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	613b      	str	r3, [r7, #16]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	613b      	str	r3, [r7, #16]
 80035f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80035f8:	e066      	b.n	80036c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	6a39      	ldr	r1, [r7, #32]
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 fd22 	bl	8004048 <I2C_WaitOnTXEFlagUntilTimeout>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00d      	beq.n	8003626 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360e:	2b04      	cmp	r3, #4
 8003610:	d107      	bne.n	8003622 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003620:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e06b      	b.n	80036fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362a:	781a      	ldrb	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003640:	b29b      	uxth	r3, r3
 8003642:	3b01      	subs	r3, #1
 8003644:	b29a      	uxth	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b04      	cmp	r3, #4
 8003662:	d11b      	bne.n	800369c <HAL_I2C_Master_Transmit+0x188>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003668:	2b00      	cmp	r3, #0
 800366a:	d017      	beq.n	800369c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003670:	781a      	ldrb	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367c:	1c5a      	adds	r2, r3, #1
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003686:	b29b      	uxth	r3, r3
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003694:	3b01      	subs	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	6a39      	ldr	r1, [r7, #32]
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 fd19 	bl	80040d8 <I2C_WaitOnBTFFlagUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00d      	beq.n	80036c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d107      	bne.n	80036c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e01a      	b.n	80036fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d194      	bne.n	80035fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	e000      	b.n	80036fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80036fc:	2302      	movs	r3, #2
  }
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	00100002 	.word	0x00100002
 800370c:	ffff0000 	.word	0xffff0000

08003710 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08c      	sub	sp, #48	@ 0x30
 8003714:	af02      	add	r7, sp, #8
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	461a      	mov	r2, r3
 800371c:	460b      	mov	r3, r1
 800371e:	817b      	strh	r3, [r7, #10]
 8003720:	4613      	mov	r3, r2
 8003722:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003724:	f7ff f820 	bl	8002768 <HAL_GetTick>
 8003728:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b20      	cmp	r3, #32
 8003734:	f040 8217 	bne.w	8003b66 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	2319      	movs	r3, #25
 800373e:	2201      	movs	r2, #1
 8003740:	497c      	ldr	r1, [pc, #496]	@ (8003934 <HAL_I2C_Master_Receive+0x224>)
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 fb66 	bl	8003e14 <I2C_WaitOnFlagUntilTimeout>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800374e:	2302      	movs	r3, #2
 8003750:	e20a      	b.n	8003b68 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003758:	2b01      	cmp	r3, #1
 800375a:	d101      	bne.n	8003760 <HAL_I2C_Master_Receive+0x50>
 800375c:	2302      	movs	r3, #2
 800375e:	e203      	b.n	8003b68 <HAL_I2C_Master_Receive+0x458>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b01      	cmp	r3, #1
 8003774:	d007      	beq.n	8003786 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f042 0201 	orr.w	r2, r2, #1
 8003784:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003794:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2222      	movs	r2, #34	@ 0x22
 800379a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2210      	movs	r2, #16
 80037a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	893a      	ldrh	r2, [r7, #8]
 80037b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037bc:	b29a      	uxth	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4a5c      	ldr	r2, [pc, #368]	@ (8003938 <HAL_I2C_Master_Receive+0x228>)
 80037c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80037c8:	8979      	ldrh	r1, [r7, #10]
 80037ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 fa52 	bl	8003c78 <I2C_MasterRequestRead>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e1c4      	b.n	8003b68 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d113      	bne.n	800380e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037e6:	2300      	movs	r3, #0
 80037e8:	623b      	str	r3, [r7, #32]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	623b      	str	r3, [r7, #32]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	623b      	str	r3, [r7, #32]
 80037fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	e198      	b.n	8003b40 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003812:	2b01      	cmp	r3, #1
 8003814:	d11b      	bne.n	800384e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003824:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003826:	2300      	movs	r3, #0
 8003828:	61fb      	str	r3, [r7, #28]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	61fb      	str	r3, [r7, #28]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	61fb      	str	r3, [r7, #28]
 800383a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	e178      	b.n	8003b40 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003852:	2b02      	cmp	r3, #2
 8003854:	d11b      	bne.n	800388e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003864:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003874:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003876:	2300      	movs	r3, #0
 8003878:	61bb      	str	r3, [r7, #24]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	61bb      	str	r3, [r7, #24]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	61bb      	str	r3, [r7, #24]
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	e158      	b.n	8003b40 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800389c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800389e:	2300      	movs	r3, #0
 80038a0:	617b      	str	r3, [r7, #20]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	617b      	str	r3, [r7, #20]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	617b      	str	r3, [r7, #20]
 80038b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80038b4:	e144      	b.n	8003b40 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ba:	2b03      	cmp	r3, #3
 80038bc:	f200 80f1 	bhi.w	8003aa2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d123      	bne.n	8003910 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 fc4b 	bl	8004168 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e145      	b.n	8003b68 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691a      	ldr	r2, [r3, #16]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003904:	b29b      	uxth	r3, r3
 8003906:	3b01      	subs	r3, #1
 8003908:	b29a      	uxth	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800390e:	e117      	b.n	8003b40 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003914:	2b02      	cmp	r3, #2
 8003916:	d14e      	bne.n	80039b6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800391e:	2200      	movs	r2, #0
 8003920:	4906      	ldr	r1, [pc, #24]	@ (800393c <HAL_I2C_Master_Receive+0x22c>)
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 fa76 	bl	8003e14 <I2C_WaitOnFlagUntilTimeout>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d008      	beq.n	8003940 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e11a      	b.n	8003b68 <HAL_I2C_Master_Receive+0x458>
 8003932:	bf00      	nop
 8003934:	00100002 	.word	0x00100002
 8003938:	ffff0000 	.word	0xffff0000
 800393c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800394e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	691a      	ldr	r2, [r3, #16]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395a:	b2d2      	uxtb	r2, r2
 800395c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003978:	b29b      	uxth	r3, r3
 800397a:	3b01      	subs	r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	691a      	ldr	r2, [r3, #16]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398c:	b2d2      	uxtb	r2, r2
 800398e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039b4:	e0c4      	b.n	8003b40 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039bc:	2200      	movs	r2, #0
 80039be:	496c      	ldr	r1, [pc, #432]	@ (8003b70 <HAL_I2C_Master_Receive+0x460>)
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 fa27 	bl	8003e14 <I2C_WaitOnFlagUntilTimeout>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e0cb      	b.n	8003b68 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	691a      	ldr	r2, [r3, #16]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f2:	1c5a      	adds	r2, r3, #1
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a18:	2200      	movs	r2, #0
 8003a1a:	4955      	ldr	r1, [pc, #340]	@ (8003b70 <HAL_I2C_Master_Receive+0x460>)
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 f9f9 	bl	8003e14 <I2C_WaitOnFlagUntilTimeout>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e09d      	b.n	8003b68 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	691a      	ldr	r2, [r3, #16]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4e:	1c5a      	adds	r2, r3, #1
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a78:	b2d2      	uxtb	r2, r2
 8003a7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003aa0:	e04e      	b.n	8003b40 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aa4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 fb5e 	bl	8004168 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e058      	b.n	8003b68 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	691a      	ldr	r2, [r3, #16]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac0:	b2d2      	uxtb	r2, r2
 8003ac2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	f003 0304 	and.w	r3, r3, #4
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d124      	bne.n	8003b40 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	d107      	bne.n	8003b0e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b0c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b18:	b2d2      	uxtb	r2, r2
 8003b1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f47f aeb6 	bne.w	80038b6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	e000      	b.n	8003b68 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003b66:	2302      	movs	r3, #2
  }
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3728      	adds	r7, #40	@ 0x28
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	00010004 	.word	0x00010004

08003b74 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b088      	sub	sp, #32
 8003b78:	af02      	add	r7, sp, #8
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	607a      	str	r2, [r7, #4]
 8003b7e:	603b      	str	r3, [r7, #0]
 8003b80:	460b      	mov	r3, r1
 8003b82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b88:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d006      	beq.n	8003b9e <I2C_MasterRequestWrite+0x2a>
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d003      	beq.n	8003b9e <I2C_MasterRequestWrite+0x2a>
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b9c:	d108      	bne.n	8003bb0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	e00b      	b.n	8003bc8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb4:	2b12      	cmp	r3, #18
 8003bb6:	d107      	bne.n	8003bc8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bc6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 f91d 	bl	8003e14 <I2C_WaitOnFlagUntilTimeout>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00d      	beq.n	8003bfc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bee:	d103      	bne.n	8003bf8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bf6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e035      	b.n	8003c68 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c04:	d108      	bne.n	8003c18 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c06:	897b      	ldrh	r3, [r7, #10]
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c14:	611a      	str	r2, [r3, #16]
 8003c16:	e01b      	b.n	8003c50 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c18:	897b      	ldrh	r3, [r7, #10]
 8003c1a:	11db      	asrs	r3, r3, #7
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	f003 0306 	and.w	r3, r3, #6
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	f063 030f 	orn	r3, r3, #15
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	490e      	ldr	r1, [pc, #56]	@ (8003c70 <I2C_MasterRequestWrite+0xfc>)
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 f966 	bl	8003f08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e010      	b.n	8003c68 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c46:	897b      	ldrh	r3, [r7, #10]
 8003c48:	b2da      	uxtb	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	4907      	ldr	r1, [pc, #28]	@ (8003c74 <I2C_MasterRequestWrite+0x100>)
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f000 f956 	bl	8003f08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	00010008 	.word	0x00010008
 8003c74:	00010002 	.word	0x00010002

08003c78 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b088      	sub	sp, #32
 8003c7c:	af02      	add	r7, sp, #8
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	607a      	str	r2, [r7, #4]
 8003c82:	603b      	str	r3, [r7, #0]
 8003c84:	460b      	mov	r3, r1
 8003c86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c8c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c9c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	d006      	beq.n	8003cb2 <I2C_MasterRequestRead+0x3a>
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d003      	beq.n	8003cb2 <I2C_MasterRequestRead+0x3a>
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003cb0:	d108      	bne.n	8003cc4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cc0:	601a      	str	r2, [r3, #0]
 8003cc2:	e00b      	b.n	8003cdc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc8:	2b11      	cmp	r3, #17
 8003cca:	d107      	bne.n	8003cdc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cda:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 f893 	bl	8003e14 <I2C_WaitOnFlagUntilTimeout>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00d      	beq.n	8003d10 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d02:	d103      	bne.n	8003d0c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d0a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e079      	b.n	8003e04 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d18:	d108      	bne.n	8003d2c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d1a:	897b      	ldrh	r3, [r7, #10]
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	f043 0301 	orr.w	r3, r3, #1
 8003d22:	b2da      	uxtb	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	611a      	str	r2, [r3, #16]
 8003d2a:	e05f      	b.n	8003dec <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d2c:	897b      	ldrh	r3, [r7, #10]
 8003d2e:	11db      	asrs	r3, r3, #7
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	f003 0306 	and.w	r3, r3, #6
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	f063 030f 	orn	r3, r3, #15
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	4930      	ldr	r1, [pc, #192]	@ (8003e0c <I2C_MasterRequestRead+0x194>)
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f000 f8dc 	bl	8003f08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e054      	b.n	8003e04 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d5a:	897b      	ldrh	r3, [r7, #10]
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	4929      	ldr	r1, [pc, #164]	@ (8003e10 <I2C_MasterRequestRead+0x198>)
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 f8cc 	bl	8003f08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e044      	b.n	8003e04 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	613b      	str	r3, [r7, #16]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	613b      	str	r3, [r7, #16]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	613b      	str	r3, [r7, #16]
 8003d8e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d9e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 f831 	bl	8003e14 <I2C_WaitOnFlagUntilTimeout>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00d      	beq.n	8003dd4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dc6:	d103      	bne.n	8003dd0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dce:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e017      	b.n	8003e04 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003dd4:	897b      	ldrh	r3, [r7, #10]
 8003dd6:	11db      	asrs	r3, r3, #7
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	f003 0306 	and.w	r3, r3, #6
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	f063 030e 	orn	r3, r3, #14
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	4907      	ldr	r1, [pc, #28]	@ (8003e10 <I2C_MasterRequestRead+0x198>)
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f000 f888 	bl	8003f08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e000      	b.n	8003e04 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3718      	adds	r7, #24
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	00010008 	.word	0x00010008
 8003e10:	00010002 	.word	0x00010002

08003e14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	603b      	str	r3, [r7, #0]
 8003e20:	4613      	mov	r3, r2
 8003e22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e24:	e048      	b.n	8003eb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e2c:	d044      	beq.n	8003eb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e2e:	f7fe fc9b 	bl	8002768 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d302      	bcc.n	8003e44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d139      	bne.n	8003eb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	0c1b      	lsrs	r3, r3, #16
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d10d      	bne.n	8003e6a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	43da      	mvns	r2, r3
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	bf0c      	ite	eq
 8003e60:	2301      	moveq	r3, #1
 8003e62:	2300      	movne	r3, #0
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	461a      	mov	r2, r3
 8003e68:	e00c      	b.n	8003e84 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	43da      	mvns	r2, r3
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	4013      	ands	r3, r2
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	bf0c      	ite	eq
 8003e7c:	2301      	moveq	r3, #1
 8003e7e:	2300      	movne	r3, #0
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	461a      	mov	r2, r3
 8003e84:	79fb      	ldrb	r3, [r7, #7]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d116      	bne.n	8003eb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2220      	movs	r2, #32
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea4:	f043 0220 	orr.w	r2, r3, #32
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e023      	b.n	8003f00 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	0c1b      	lsrs	r3, r3, #16
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d10d      	bne.n	8003ede <I2C_WaitOnFlagUntilTimeout+0xca>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	43da      	mvns	r2, r3
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	bf0c      	ite	eq
 8003ed4:	2301      	moveq	r3, #1
 8003ed6:	2300      	movne	r3, #0
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	461a      	mov	r2, r3
 8003edc:	e00c      	b.n	8003ef8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	43da      	mvns	r2, r3
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	bf0c      	ite	eq
 8003ef0:	2301      	moveq	r3, #1
 8003ef2:	2300      	movne	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	79fb      	ldrb	r3, [r7, #7]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d093      	beq.n	8003e26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
 8003f14:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f16:	e071      	b.n	8003ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f26:	d123      	bne.n	8003f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f36:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5c:	f043 0204 	orr.w	r2, r3, #4
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e067      	b.n	8004040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f76:	d041      	beq.n	8003ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f78:	f7fe fbf6 	bl	8002768 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d302      	bcc.n	8003f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d136      	bne.n	8003ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	0c1b      	lsrs	r3, r3, #16
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d10c      	bne.n	8003fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	43da      	mvns	r2, r3
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	bf14      	ite	ne
 8003faa:	2301      	movne	r3, #1
 8003fac:	2300      	moveq	r3, #0
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	e00b      	b.n	8003fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	43da      	mvns	r2, r3
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	bf14      	ite	ne
 8003fc4:	2301      	movne	r3, #1
 8003fc6:	2300      	moveq	r3, #0
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d016      	beq.n	8003ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe8:	f043 0220 	orr.w	r2, r3, #32
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e021      	b.n	8004040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	0c1b      	lsrs	r3, r3, #16
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b01      	cmp	r3, #1
 8004004:	d10c      	bne.n	8004020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	43da      	mvns	r2, r3
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	4013      	ands	r3, r2
 8004012:	b29b      	uxth	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	bf14      	ite	ne
 8004018:	2301      	movne	r3, #1
 800401a:	2300      	moveq	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	e00b      	b.n	8004038 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	43da      	mvns	r2, r3
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	4013      	ands	r3, r2
 800402c:	b29b      	uxth	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	bf14      	ite	ne
 8004032:	2301      	movne	r3, #1
 8004034:	2300      	moveq	r3, #0
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	f47f af6d 	bne.w	8003f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004054:	e034      	b.n	80040c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f000 f8e3 	bl	8004222 <I2C_IsAcknowledgeFailed>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e034      	b.n	80040d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800406c:	d028      	beq.n	80040c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800406e:	f7fe fb7b 	bl	8002768 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	429a      	cmp	r2, r3
 800407c:	d302      	bcc.n	8004084 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d11d      	bne.n	80040c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800408e:	2b80      	cmp	r3, #128	@ 0x80
 8004090:	d016      	beq.n	80040c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2220      	movs	r2, #32
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ac:	f043 0220 	orr.w	r2, r3, #32
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e007      	b.n	80040d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ca:	2b80      	cmp	r3, #128	@ 0x80
 80040cc:	d1c3      	bne.n	8004056 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040e4:	e034      	b.n	8004150 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 f89b 	bl	8004222 <I2C_IsAcknowledgeFailed>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e034      	b.n	8004160 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040fc:	d028      	beq.n	8004150 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040fe:	f7fe fb33 	bl	8002768 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	429a      	cmp	r2, r3
 800410c:	d302      	bcc.n	8004114 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d11d      	bne.n	8004150 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	f003 0304 	and.w	r3, r3, #4
 800411e:	2b04      	cmp	r3, #4
 8004120:	d016      	beq.n	8004150 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2220      	movs	r2, #32
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413c:	f043 0220 	orr.w	r2, r3, #32
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e007      	b.n	8004160 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	f003 0304 	and.w	r3, r3, #4
 800415a:	2b04      	cmp	r3, #4
 800415c:	d1c3      	bne.n	80040e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004174:	e049      	b.n	800420a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	f003 0310 	and.w	r3, r3, #16
 8004180:	2b10      	cmp	r3, #16
 8004182:	d119      	bne.n	80041b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f06f 0210 	mvn.w	r2, #16
 800418c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2220      	movs	r2, #32
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e030      	b.n	800421a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041b8:	f7fe fad6 	bl	8002768 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d302      	bcc.n	80041ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d11d      	bne.n	800420a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041d8:	2b40      	cmp	r3, #64	@ 0x40
 80041da:	d016      	beq.n	800420a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2220      	movs	r2, #32
 80041e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f6:	f043 0220 	orr.w	r2, r3, #32
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e007      	b.n	800421a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004214:	2b40      	cmp	r3, #64	@ 0x40
 8004216:	d1ae      	bne.n	8004176 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004234:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004238:	d11b      	bne.n	8004272 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004242:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425e:	f043 0204 	orr.w	r2, r3, #4
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e000      	b.n	8004274 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e0cc      	b.n	800442e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004294:	4b68      	ldr	r3, [pc, #416]	@ (8004438 <HAL_RCC_ClockConfig+0x1b8>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 030f 	and.w	r3, r3, #15
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d90c      	bls.n	80042bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042a2:	4b65      	ldr	r3, [pc, #404]	@ (8004438 <HAL_RCC_ClockConfig+0x1b8>)
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042aa:	4b63      	ldr	r3, [pc, #396]	@ (8004438 <HAL_RCC_ClockConfig+0x1b8>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 030f 	and.w	r3, r3, #15
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d001      	beq.n	80042bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e0b8      	b.n	800442e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d020      	beq.n	800430a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d005      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042d4:	4b59      	ldr	r3, [pc, #356]	@ (800443c <HAL_RCC_ClockConfig+0x1bc>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	4a58      	ldr	r2, [pc, #352]	@ (800443c <HAL_RCC_ClockConfig+0x1bc>)
 80042da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80042de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0308 	and.w	r3, r3, #8
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d005      	beq.n	80042f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042ec:	4b53      	ldr	r3, [pc, #332]	@ (800443c <HAL_RCC_ClockConfig+0x1bc>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	4a52      	ldr	r2, [pc, #328]	@ (800443c <HAL_RCC_ClockConfig+0x1bc>)
 80042f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80042f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042f8:	4b50      	ldr	r3, [pc, #320]	@ (800443c <HAL_RCC_ClockConfig+0x1bc>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	494d      	ldr	r1, [pc, #308]	@ (800443c <HAL_RCC_ClockConfig+0x1bc>)
 8004306:	4313      	orrs	r3, r2
 8004308:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b00      	cmp	r3, #0
 8004314:	d044      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d107      	bne.n	800432e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800431e:	4b47      	ldr	r3, [pc, #284]	@ (800443c <HAL_RCC_ClockConfig+0x1bc>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d119      	bne.n	800435e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e07f      	b.n	800442e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b02      	cmp	r3, #2
 8004334:	d003      	beq.n	800433e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800433a:	2b03      	cmp	r3, #3
 800433c:	d107      	bne.n	800434e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800433e:	4b3f      	ldr	r3, [pc, #252]	@ (800443c <HAL_RCC_ClockConfig+0x1bc>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d109      	bne.n	800435e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e06f      	b.n	800442e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800434e:	4b3b      	ldr	r3, [pc, #236]	@ (800443c <HAL_RCC_ClockConfig+0x1bc>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e067      	b.n	800442e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800435e:	4b37      	ldr	r3, [pc, #220]	@ (800443c <HAL_RCC_ClockConfig+0x1bc>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f023 0203 	bic.w	r2, r3, #3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	4934      	ldr	r1, [pc, #208]	@ (800443c <HAL_RCC_ClockConfig+0x1bc>)
 800436c:	4313      	orrs	r3, r2
 800436e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004370:	f7fe f9fa 	bl	8002768 <HAL_GetTick>
 8004374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004376:	e00a      	b.n	800438e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004378:	f7fe f9f6 	bl	8002768 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004386:	4293      	cmp	r3, r2
 8004388:	d901      	bls.n	800438e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e04f      	b.n	800442e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800438e:	4b2b      	ldr	r3, [pc, #172]	@ (800443c <HAL_RCC_ClockConfig+0x1bc>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 020c 	and.w	r2, r3, #12
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	429a      	cmp	r2, r3
 800439e:	d1eb      	bne.n	8004378 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043a0:	4b25      	ldr	r3, [pc, #148]	@ (8004438 <HAL_RCC_ClockConfig+0x1b8>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 030f 	and.w	r3, r3, #15
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d20c      	bcs.n	80043c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ae:	4b22      	ldr	r3, [pc, #136]	@ (8004438 <HAL_RCC_ClockConfig+0x1b8>)
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	b2d2      	uxtb	r2, r2
 80043b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043b6:	4b20      	ldr	r3, [pc, #128]	@ (8004438 <HAL_RCC_ClockConfig+0x1b8>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d001      	beq.n	80043c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e032      	b.n	800442e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0304 	and.w	r3, r3, #4
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d008      	beq.n	80043e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043d4:	4b19      	ldr	r3, [pc, #100]	@ (800443c <HAL_RCC_ClockConfig+0x1bc>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	4916      	ldr	r1, [pc, #88]	@ (800443c <HAL_RCC_ClockConfig+0x1bc>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d009      	beq.n	8004406 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043f2:	4b12      	ldr	r3, [pc, #72]	@ (800443c <HAL_RCC_ClockConfig+0x1bc>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	00db      	lsls	r3, r3, #3
 8004400:	490e      	ldr	r1, [pc, #56]	@ (800443c <HAL_RCC_ClockConfig+0x1bc>)
 8004402:	4313      	orrs	r3, r2
 8004404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004406:	f000 f855 	bl	80044b4 <HAL_RCC_GetSysClockFreq>
 800440a:	4602      	mov	r2, r0
 800440c:	4b0b      	ldr	r3, [pc, #44]	@ (800443c <HAL_RCC_ClockConfig+0x1bc>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	091b      	lsrs	r3, r3, #4
 8004412:	f003 030f 	and.w	r3, r3, #15
 8004416:	490a      	ldr	r1, [pc, #40]	@ (8004440 <HAL_RCC_ClockConfig+0x1c0>)
 8004418:	5ccb      	ldrb	r3, [r1, r3]
 800441a:	fa22 f303 	lsr.w	r3, r2, r3
 800441e:	4a09      	ldr	r2, [pc, #36]	@ (8004444 <HAL_RCC_ClockConfig+0x1c4>)
 8004420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004422:	4b09      	ldr	r3, [pc, #36]	@ (8004448 <HAL_RCC_ClockConfig+0x1c8>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f7fe f95a 	bl	80026e0 <HAL_InitTick>

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	40023c00 	.word	0x40023c00
 800443c:	40023800 	.word	0x40023800
 8004440:	0800a964 	.word	0x0800a964
 8004444:	20000004 	.word	0x20000004
 8004448:	20000008 	.word	0x20000008

0800444c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004450:	4b03      	ldr	r3, [pc, #12]	@ (8004460 <HAL_RCC_GetHCLKFreq+0x14>)
 8004452:	681b      	ldr	r3, [r3, #0]
}
 8004454:	4618      	mov	r0, r3
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	20000004 	.word	0x20000004

08004464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004468:	f7ff fff0 	bl	800444c <HAL_RCC_GetHCLKFreq>
 800446c:	4602      	mov	r2, r0
 800446e:	4b05      	ldr	r3, [pc, #20]	@ (8004484 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	0a9b      	lsrs	r3, r3, #10
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	4903      	ldr	r1, [pc, #12]	@ (8004488 <HAL_RCC_GetPCLK1Freq+0x24>)
 800447a:	5ccb      	ldrb	r3, [r1, r3]
 800447c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004480:	4618      	mov	r0, r3
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40023800 	.word	0x40023800
 8004488:	0800a974 	.word	0x0800a974

0800448c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004490:	f7ff ffdc 	bl	800444c <HAL_RCC_GetHCLKFreq>
 8004494:	4602      	mov	r2, r0
 8004496:	4b05      	ldr	r3, [pc, #20]	@ (80044ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	0b5b      	lsrs	r3, r3, #13
 800449c:	f003 0307 	and.w	r3, r3, #7
 80044a0:	4903      	ldr	r1, [pc, #12]	@ (80044b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044a2:	5ccb      	ldrb	r3, [r1, r3]
 80044a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40023800 	.word	0x40023800
 80044b0:	0800a974 	.word	0x0800a974

080044b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044b8:	b0ae      	sub	sp, #184	@ 0xb8
 80044ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80044c2:	2300      	movs	r3, #0
 80044c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80044ce:	2300      	movs	r3, #0
 80044d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044da:	4bcb      	ldr	r3, [pc, #812]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x354>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 030c 	and.w	r3, r3, #12
 80044e2:	2b0c      	cmp	r3, #12
 80044e4:	f200 8206 	bhi.w	80048f4 <HAL_RCC_GetSysClockFreq+0x440>
 80044e8:	a201      	add	r2, pc, #4	@ (adr r2, 80044f0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80044ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ee:	bf00      	nop
 80044f0:	08004525 	.word	0x08004525
 80044f4:	080048f5 	.word	0x080048f5
 80044f8:	080048f5 	.word	0x080048f5
 80044fc:	080048f5 	.word	0x080048f5
 8004500:	0800452d 	.word	0x0800452d
 8004504:	080048f5 	.word	0x080048f5
 8004508:	080048f5 	.word	0x080048f5
 800450c:	080048f5 	.word	0x080048f5
 8004510:	08004535 	.word	0x08004535
 8004514:	080048f5 	.word	0x080048f5
 8004518:	080048f5 	.word	0x080048f5
 800451c:	080048f5 	.word	0x080048f5
 8004520:	08004725 	.word	0x08004725
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004524:	4bb9      	ldr	r3, [pc, #740]	@ (800480c <HAL_RCC_GetSysClockFreq+0x358>)
 8004526:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800452a:	e1e7      	b.n	80048fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800452c:	4bb8      	ldr	r3, [pc, #736]	@ (8004810 <HAL_RCC_GetSysClockFreq+0x35c>)
 800452e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004532:	e1e3      	b.n	80048fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004534:	4bb4      	ldr	r3, [pc, #720]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x354>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800453c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004540:	4bb1      	ldr	r3, [pc, #708]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x354>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d071      	beq.n	8004630 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800454c:	4bae      	ldr	r3, [pc, #696]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x354>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	099b      	lsrs	r3, r3, #6
 8004552:	2200      	movs	r2, #0
 8004554:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004558:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800455c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004564:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004568:	2300      	movs	r3, #0
 800456a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800456e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004572:	4622      	mov	r2, r4
 8004574:	462b      	mov	r3, r5
 8004576:	f04f 0000 	mov.w	r0, #0
 800457a:	f04f 0100 	mov.w	r1, #0
 800457e:	0159      	lsls	r1, r3, #5
 8004580:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004584:	0150      	lsls	r0, r2, #5
 8004586:	4602      	mov	r2, r0
 8004588:	460b      	mov	r3, r1
 800458a:	4621      	mov	r1, r4
 800458c:	1a51      	subs	r1, r2, r1
 800458e:	6439      	str	r1, [r7, #64]	@ 0x40
 8004590:	4629      	mov	r1, r5
 8004592:	eb63 0301 	sbc.w	r3, r3, r1
 8004596:	647b      	str	r3, [r7, #68]	@ 0x44
 8004598:	f04f 0200 	mov.w	r2, #0
 800459c:	f04f 0300 	mov.w	r3, #0
 80045a0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80045a4:	4649      	mov	r1, r9
 80045a6:	018b      	lsls	r3, r1, #6
 80045a8:	4641      	mov	r1, r8
 80045aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045ae:	4641      	mov	r1, r8
 80045b0:	018a      	lsls	r2, r1, #6
 80045b2:	4641      	mov	r1, r8
 80045b4:	1a51      	subs	r1, r2, r1
 80045b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80045b8:	4649      	mov	r1, r9
 80045ba:	eb63 0301 	sbc.w	r3, r3, r1
 80045be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045c0:	f04f 0200 	mov.w	r2, #0
 80045c4:	f04f 0300 	mov.w	r3, #0
 80045c8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80045cc:	4649      	mov	r1, r9
 80045ce:	00cb      	lsls	r3, r1, #3
 80045d0:	4641      	mov	r1, r8
 80045d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045d6:	4641      	mov	r1, r8
 80045d8:	00ca      	lsls	r2, r1, #3
 80045da:	4610      	mov	r0, r2
 80045dc:	4619      	mov	r1, r3
 80045de:	4603      	mov	r3, r0
 80045e0:	4622      	mov	r2, r4
 80045e2:	189b      	adds	r3, r3, r2
 80045e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80045e6:	462b      	mov	r3, r5
 80045e8:	460a      	mov	r2, r1
 80045ea:	eb42 0303 	adc.w	r3, r2, r3
 80045ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80045f0:	f04f 0200 	mov.w	r2, #0
 80045f4:	f04f 0300 	mov.w	r3, #0
 80045f8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80045fc:	4629      	mov	r1, r5
 80045fe:	024b      	lsls	r3, r1, #9
 8004600:	4621      	mov	r1, r4
 8004602:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004606:	4621      	mov	r1, r4
 8004608:	024a      	lsls	r2, r1, #9
 800460a:	4610      	mov	r0, r2
 800460c:	4619      	mov	r1, r3
 800460e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004612:	2200      	movs	r2, #0
 8004614:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004618:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800461c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004620:	f7fc fbb2 	bl	8000d88 <__aeabi_uldivmod>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	4613      	mov	r3, r2
 800462a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800462e:	e067      	b.n	8004700 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004630:	4b75      	ldr	r3, [pc, #468]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x354>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	099b      	lsrs	r3, r3, #6
 8004636:	2200      	movs	r2, #0
 8004638:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800463c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004640:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004648:	67bb      	str	r3, [r7, #120]	@ 0x78
 800464a:	2300      	movs	r3, #0
 800464c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800464e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004652:	4622      	mov	r2, r4
 8004654:	462b      	mov	r3, r5
 8004656:	f04f 0000 	mov.w	r0, #0
 800465a:	f04f 0100 	mov.w	r1, #0
 800465e:	0159      	lsls	r1, r3, #5
 8004660:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004664:	0150      	lsls	r0, r2, #5
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	4621      	mov	r1, r4
 800466c:	1a51      	subs	r1, r2, r1
 800466e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004670:	4629      	mov	r1, r5
 8004672:	eb63 0301 	sbc.w	r3, r3, r1
 8004676:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004678:	f04f 0200 	mov.w	r2, #0
 800467c:	f04f 0300 	mov.w	r3, #0
 8004680:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004684:	4649      	mov	r1, r9
 8004686:	018b      	lsls	r3, r1, #6
 8004688:	4641      	mov	r1, r8
 800468a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800468e:	4641      	mov	r1, r8
 8004690:	018a      	lsls	r2, r1, #6
 8004692:	4641      	mov	r1, r8
 8004694:	ebb2 0a01 	subs.w	sl, r2, r1
 8004698:	4649      	mov	r1, r9
 800469a:	eb63 0b01 	sbc.w	fp, r3, r1
 800469e:	f04f 0200 	mov.w	r2, #0
 80046a2:	f04f 0300 	mov.w	r3, #0
 80046a6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046aa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046b2:	4692      	mov	sl, r2
 80046b4:	469b      	mov	fp, r3
 80046b6:	4623      	mov	r3, r4
 80046b8:	eb1a 0303 	adds.w	r3, sl, r3
 80046bc:	623b      	str	r3, [r7, #32]
 80046be:	462b      	mov	r3, r5
 80046c0:	eb4b 0303 	adc.w	r3, fp, r3
 80046c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80046c6:	f04f 0200 	mov.w	r2, #0
 80046ca:	f04f 0300 	mov.w	r3, #0
 80046ce:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80046d2:	4629      	mov	r1, r5
 80046d4:	028b      	lsls	r3, r1, #10
 80046d6:	4621      	mov	r1, r4
 80046d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046dc:	4621      	mov	r1, r4
 80046de:	028a      	lsls	r2, r1, #10
 80046e0:	4610      	mov	r0, r2
 80046e2:	4619      	mov	r1, r3
 80046e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80046e8:	2200      	movs	r2, #0
 80046ea:	673b      	str	r3, [r7, #112]	@ 0x70
 80046ec:	677a      	str	r2, [r7, #116]	@ 0x74
 80046ee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80046f2:	f7fc fb49 	bl	8000d88 <__aeabi_uldivmod>
 80046f6:	4602      	mov	r2, r0
 80046f8:	460b      	mov	r3, r1
 80046fa:	4613      	mov	r3, r2
 80046fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004700:	4b41      	ldr	r3, [pc, #260]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x354>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	0c1b      	lsrs	r3, r3, #16
 8004706:	f003 0303 	and.w	r3, r3, #3
 800470a:	3301      	adds	r3, #1
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004712:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004716:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800471a:	fbb2 f3f3 	udiv	r3, r2, r3
 800471e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004722:	e0eb      	b.n	80048fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004724:	4b38      	ldr	r3, [pc, #224]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x354>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800472c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004730:	4b35      	ldr	r3, [pc, #212]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x354>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d06b      	beq.n	8004814 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800473c:	4b32      	ldr	r3, [pc, #200]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x354>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	099b      	lsrs	r3, r3, #6
 8004742:	2200      	movs	r2, #0
 8004744:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004746:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004748:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800474a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800474e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004750:	2300      	movs	r3, #0
 8004752:	667b      	str	r3, [r7, #100]	@ 0x64
 8004754:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004758:	4622      	mov	r2, r4
 800475a:	462b      	mov	r3, r5
 800475c:	f04f 0000 	mov.w	r0, #0
 8004760:	f04f 0100 	mov.w	r1, #0
 8004764:	0159      	lsls	r1, r3, #5
 8004766:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800476a:	0150      	lsls	r0, r2, #5
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	4621      	mov	r1, r4
 8004772:	1a51      	subs	r1, r2, r1
 8004774:	61b9      	str	r1, [r7, #24]
 8004776:	4629      	mov	r1, r5
 8004778:	eb63 0301 	sbc.w	r3, r3, r1
 800477c:	61fb      	str	r3, [r7, #28]
 800477e:	f04f 0200 	mov.w	r2, #0
 8004782:	f04f 0300 	mov.w	r3, #0
 8004786:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800478a:	4659      	mov	r1, fp
 800478c:	018b      	lsls	r3, r1, #6
 800478e:	4651      	mov	r1, sl
 8004790:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004794:	4651      	mov	r1, sl
 8004796:	018a      	lsls	r2, r1, #6
 8004798:	4651      	mov	r1, sl
 800479a:	ebb2 0801 	subs.w	r8, r2, r1
 800479e:	4659      	mov	r1, fp
 80047a0:	eb63 0901 	sbc.w	r9, r3, r1
 80047a4:	f04f 0200 	mov.w	r2, #0
 80047a8:	f04f 0300 	mov.w	r3, #0
 80047ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047b8:	4690      	mov	r8, r2
 80047ba:	4699      	mov	r9, r3
 80047bc:	4623      	mov	r3, r4
 80047be:	eb18 0303 	adds.w	r3, r8, r3
 80047c2:	613b      	str	r3, [r7, #16]
 80047c4:	462b      	mov	r3, r5
 80047c6:	eb49 0303 	adc.w	r3, r9, r3
 80047ca:	617b      	str	r3, [r7, #20]
 80047cc:	f04f 0200 	mov.w	r2, #0
 80047d0:	f04f 0300 	mov.w	r3, #0
 80047d4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80047d8:	4629      	mov	r1, r5
 80047da:	024b      	lsls	r3, r1, #9
 80047dc:	4621      	mov	r1, r4
 80047de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047e2:	4621      	mov	r1, r4
 80047e4:	024a      	lsls	r2, r1, #9
 80047e6:	4610      	mov	r0, r2
 80047e8:	4619      	mov	r1, r3
 80047ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80047ee:	2200      	movs	r2, #0
 80047f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047f2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80047f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80047f8:	f7fc fac6 	bl	8000d88 <__aeabi_uldivmod>
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	4613      	mov	r3, r2
 8004802:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004806:	e065      	b.n	80048d4 <HAL_RCC_GetSysClockFreq+0x420>
 8004808:	40023800 	.word	0x40023800
 800480c:	00f42400 	.word	0x00f42400
 8004810:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004814:	4b3d      	ldr	r3, [pc, #244]	@ (800490c <HAL_RCC_GetSysClockFreq+0x458>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	099b      	lsrs	r3, r3, #6
 800481a:	2200      	movs	r2, #0
 800481c:	4618      	mov	r0, r3
 800481e:	4611      	mov	r1, r2
 8004820:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004824:	653b      	str	r3, [r7, #80]	@ 0x50
 8004826:	2300      	movs	r3, #0
 8004828:	657b      	str	r3, [r7, #84]	@ 0x54
 800482a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800482e:	4642      	mov	r2, r8
 8004830:	464b      	mov	r3, r9
 8004832:	f04f 0000 	mov.w	r0, #0
 8004836:	f04f 0100 	mov.w	r1, #0
 800483a:	0159      	lsls	r1, r3, #5
 800483c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004840:	0150      	lsls	r0, r2, #5
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	4641      	mov	r1, r8
 8004848:	1a51      	subs	r1, r2, r1
 800484a:	60b9      	str	r1, [r7, #8]
 800484c:	4649      	mov	r1, r9
 800484e:	eb63 0301 	sbc.w	r3, r3, r1
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	f04f 0200 	mov.w	r2, #0
 8004858:	f04f 0300 	mov.w	r3, #0
 800485c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004860:	4659      	mov	r1, fp
 8004862:	018b      	lsls	r3, r1, #6
 8004864:	4651      	mov	r1, sl
 8004866:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800486a:	4651      	mov	r1, sl
 800486c:	018a      	lsls	r2, r1, #6
 800486e:	4651      	mov	r1, sl
 8004870:	1a54      	subs	r4, r2, r1
 8004872:	4659      	mov	r1, fp
 8004874:	eb63 0501 	sbc.w	r5, r3, r1
 8004878:	f04f 0200 	mov.w	r2, #0
 800487c:	f04f 0300 	mov.w	r3, #0
 8004880:	00eb      	lsls	r3, r5, #3
 8004882:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004886:	00e2      	lsls	r2, r4, #3
 8004888:	4614      	mov	r4, r2
 800488a:	461d      	mov	r5, r3
 800488c:	4643      	mov	r3, r8
 800488e:	18e3      	adds	r3, r4, r3
 8004890:	603b      	str	r3, [r7, #0]
 8004892:	464b      	mov	r3, r9
 8004894:	eb45 0303 	adc.w	r3, r5, r3
 8004898:	607b      	str	r3, [r7, #4]
 800489a:	f04f 0200 	mov.w	r2, #0
 800489e:	f04f 0300 	mov.w	r3, #0
 80048a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048a6:	4629      	mov	r1, r5
 80048a8:	028b      	lsls	r3, r1, #10
 80048aa:	4621      	mov	r1, r4
 80048ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048b0:	4621      	mov	r1, r4
 80048b2:	028a      	lsls	r2, r1, #10
 80048b4:	4610      	mov	r0, r2
 80048b6:	4619      	mov	r1, r3
 80048b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048bc:	2200      	movs	r2, #0
 80048be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048c0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80048c2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80048c6:	f7fc fa5f 	bl	8000d88 <__aeabi_uldivmod>
 80048ca:	4602      	mov	r2, r0
 80048cc:	460b      	mov	r3, r1
 80048ce:	4613      	mov	r3, r2
 80048d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80048d4:	4b0d      	ldr	r3, [pc, #52]	@ (800490c <HAL_RCC_GetSysClockFreq+0x458>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	0f1b      	lsrs	r3, r3, #28
 80048da:	f003 0307 	and.w	r3, r3, #7
 80048de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80048e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80048e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80048ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80048f2:	e003      	b.n	80048fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048f4:	4b06      	ldr	r3, [pc, #24]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x45c>)
 80048f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80048fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004900:	4618      	mov	r0, r3
 8004902:	37b8      	adds	r7, #184	@ 0xb8
 8004904:	46bd      	mov	sp, r7
 8004906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800490a:	bf00      	nop
 800490c:	40023800 	.word	0x40023800
 8004910:	00f42400 	.word	0x00f42400

08004914 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e28d      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 8083 	beq.w	8004a3a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004934:	4b94      	ldr	r3, [pc, #592]	@ (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 030c 	and.w	r3, r3, #12
 800493c:	2b04      	cmp	r3, #4
 800493e:	d019      	beq.n	8004974 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004940:	4b91      	ldr	r3, [pc, #580]	@ (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f003 030c 	and.w	r3, r3, #12
        || \
 8004948:	2b08      	cmp	r3, #8
 800494a:	d106      	bne.n	800495a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800494c:	4b8e      	ldr	r3, [pc, #568]	@ (8004b88 <HAL_RCC_OscConfig+0x274>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004954:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004958:	d00c      	beq.n	8004974 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800495a:	4b8b      	ldr	r3, [pc, #556]	@ (8004b88 <HAL_RCC_OscConfig+0x274>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004962:	2b0c      	cmp	r3, #12
 8004964:	d112      	bne.n	800498c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004966:	4b88      	ldr	r3, [pc, #544]	@ (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800496e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004972:	d10b      	bne.n	800498c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004974:	4b84      	ldr	r3, [pc, #528]	@ (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d05b      	beq.n	8004a38 <HAL_RCC_OscConfig+0x124>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d157      	bne.n	8004a38 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e25a      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004994:	d106      	bne.n	80049a4 <HAL_RCC_OscConfig+0x90>
 8004996:	4b7c      	ldr	r3, [pc, #496]	@ (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a7b      	ldr	r2, [pc, #492]	@ (8004b88 <HAL_RCC_OscConfig+0x274>)
 800499c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	e01d      	b.n	80049e0 <HAL_RCC_OscConfig+0xcc>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049ac:	d10c      	bne.n	80049c8 <HAL_RCC_OscConfig+0xb4>
 80049ae:	4b76      	ldr	r3, [pc, #472]	@ (8004b88 <HAL_RCC_OscConfig+0x274>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a75      	ldr	r2, [pc, #468]	@ (8004b88 <HAL_RCC_OscConfig+0x274>)
 80049b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	4b73      	ldr	r3, [pc, #460]	@ (8004b88 <HAL_RCC_OscConfig+0x274>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a72      	ldr	r2, [pc, #456]	@ (8004b88 <HAL_RCC_OscConfig+0x274>)
 80049c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	e00b      	b.n	80049e0 <HAL_RCC_OscConfig+0xcc>
 80049c8:	4b6f      	ldr	r3, [pc, #444]	@ (8004b88 <HAL_RCC_OscConfig+0x274>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a6e      	ldr	r2, [pc, #440]	@ (8004b88 <HAL_RCC_OscConfig+0x274>)
 80049ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	4b6c      	ldr	r3, [pc, #432]	@ (8004b88 <HAL_RCC_OscConfig+0x274>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a6b      	ldr	r2, [pc, #428]	@ (8004b88 <HAL_RCC_OscConfig+0x274>)
 80049da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d013      	beq.n	8004a10 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e8:	f7fd febe 	bl	8002768 <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049f0:	f7fd feba 	bl	8002768 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b64      	cmp	r3, #100	@ 0x64
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e21f      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a02:	4b61      	ldr	r3, [pc, #388]	@ (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0f0      	beq.n	80049f0 <HAL_RCC_OscConfig+0xdc>
 8004a0e:	e014      	b.n	8004a3a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a10:	f7fd feaa 	bl	8002768 <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a16:	e008      	b.n	8004a2a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a18:	f7fd fea6 	bl	8002768 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b64      	cmp	r3, #100	@ 0x64
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e20b      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a2a:	4b57      	ldr	r3, [pc, #348]	@ (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1f0      	bne.n	8004a18 <HAL_RCC_OscConfig+0x104>
 8004a36:	e000      	b.n	8004a3a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d06f      	beq.n	8004b26 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004a46:	4b50      	ldr	r3, [pc, #320]	@ (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 030c 	and.w	r3, r3, #12
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d017      	beq.n	8004a82 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004a52:	4b4d      	ldr	r3, [pc, #308]	@ (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 030c 	and.w	r3, r3, #12
        || \
 8004a5a:	2b08      	cmp	r3, #8
 8004a5c:	d105      	bne.n	8004a6a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004a5e:	4b4a      	ldr	r3, [pc, #296]	@ (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00b      	beq.n	8004a82 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a6a:	4b47      	ldr	r3, [pc, #284]	@ (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004a72:	2b0c      	cmp	r3, #12
 8004a74:	d11c      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a76:	4b44      	ldr	r3, [pc, #272]	@ (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d116      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a82:	4b41      	ldr	r3, [pc, #260]	@ (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d005      	beq.n	8004a9a <HAL_RCC_OscConfig+0x186>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d001      	beq.n	8004a9a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e1d3      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a9a:	4b3b      	ldr	r3, [pc, #236]	@ (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	4937      	ldr	r1, [pc, #220]	@ (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aae:	e03a      	b.n	8004b26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d020      	beq.n	8004afa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ab8:	4b34      	ldr	r3, [pc, #208]	@ (8004b8c <HAL_RCC_OscConfig+0x278>)
 8004aba:	2201      	movs	r2, #1
 8004abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004abe:	f7fd fe53 	bl	8002768 <HAL_GetTick>
 8004ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ac4:	e008      	b.n	8004ad8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ac6:	f7fd fe4f 	bl	8002768 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d901      	bls.n	8004ad8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e1b4      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad8:	4b2b      	ldr	r3, [pc, #172]	@ (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d0f0      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae4:	4b28      	ldr	r3, [pc, #160]	@ (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	00db      	lsls	r3, r3, #3
 8004af2:	4925      	ldr	r1, [pc, #148]	@ (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	600b      	str	r3, [r1, #0]
 8004af8:	e015      	b.n	8004b26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004afa:	4b24      	ldr	r3, [pc, #144]	@ (8004b8c <HAL_RCC_OscConfig+0x278>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b00:	f7fd fe32 	bl	8002768 <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b08:	f7fd fe2e 	bl	8002768 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e193      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1f0      	bne.n	8004b08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0308 	and.w	r3, r3, #8
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d036      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d016      	beq.n	8004b68 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b3a:	4b15      	ldr	r3, [pc, #84]	@ (8004b90 <HAL_RCC_OscConfig+0x27c>)
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b40:	f7fd fe12 	bl	8002768 <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b48:	f7fd fe0e 	bl	8002768 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e173      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004b5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0f0      	beq.n	8004b48 <HAL_RCC_OscConfig+0x234>
 8004b66:	e01b      	b.n	8004ba0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b68:	4b09      	ldr	r3, [pc, #36]	@ (8004b90 <HAL_RCC_OscConfig+0x27c>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6e:	f7fd fdfb 	bl	8002768 <HAL_GetTick>
 8004b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b74:	e00e      	b.n	8004b94 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b76:	f7fd fdf7 	bl	8002768 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d907      	bls.n	8004b94 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e15c      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
 8004b88:	40023800 	.word	0x40023800
 8004b8c:	42470000 	.word	0x42470000
 8004b90:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b94:	4b8a      	ldr	r3, [pc, #552]	@ (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004b96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1ea      	bne.n	8004b76 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 8097 	beq.w	8004cdc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bb2:	4b83      	ldr	r3, [pc, #524]	@ (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10f      	bne.n	8004bde <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	60bb      	str	r3, [r7, #8]
 8004bc2:	4b7f      	ldr	r3, [pc, #508]	@ (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc6:	4a7e      	ldr	r2, [pc, #504]	@ (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004bc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bce:	4b7c      	ldr	r3, [pc, #496]	@ (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bd6:	60bb      	str	r3, [r7, #8]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bde:	4b79      	ldr	r3, [pc, #484]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b0>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d118      	bne.n	8004c1c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bea:	4b76      	ldr	r3, [pc, #472]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b0>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a75      	ldr	r2, [pc, #468]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b0>)
 8004bf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bf6:	f7fd fdb7 	bl	8002768 <HAL_GetTick>
 8004bfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bfc:	e008      	b.n	8004c10 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bfe:	f7fd fdb3 	bl	8002768 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e118      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c10:	4b6c      	ldr	r3, [pc, #432]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b0>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d0f0      	beq.n	8004bfe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d106      	bne.n	8004c32 <HAL_RCC_OscConfig+0x31e>
 8004c24:	4b66      	ldr	r3, [pc, #408]	@ (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c28:	4a65      	ldr	r2, [pc, #404]	@ (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004c2a:	f043 0301 	orr.w	r3, r3, #1
 8004c2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c30:	e01c      	b.n	8004c6c <HAL_RCC_OscConfig+0x358>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	2b05      	cmp	r3, #5
 8004c38:	d10c      	bne.n	8004c54 <HAL_RCC_OscConfig+0x340>
 8004c3a:	4b61      	ldr	r3, [pc, #388]	@ (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c3e:	4a60      	ldr	r2, [pc, #384]	@ (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004c40:	f043 0304 	orr.w	r3, r3, #4
 8004c44:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c46:	4b5e      	ldr	r3, [pc, #376]	@ (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c4a:	4a5d      	ldr	r2, [pc, #372]	@ (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004c4c:	f043 0301 	orr.w	r3, r3, #1
 8004c50:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c52:	e00b      	b.n	8004c6c <HAL_RCC_OscConfig+0x358>
 8004c54:	4b5a      	ldr	r3, [pc, #360]	@ (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c58:	4a59      	ldr	r2, [pc, #356]	@ (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004c5a:	f023 0301 	bic.w	r3, r3, #1
 8004c5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c60:	4b57      	ldr	r3, [pc, #348]	@ (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004c62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c64:	4a56      	ldr	r2, [pc, #344]	@ (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004c66:	f023 0304 	bic.w	r3, r3, #4
 8004c6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d015      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c74:	f7fd fd78 	bl	8002768 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c7a:	e00a      	b.n	8004c92 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c7c:	f7fd fd74 	bl	8002768 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e0d7      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c92:	4b4b      	ldr	r3, [pc, #300]	@ (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0ee      	beq.n	8004c7c <HAL_RCC_OscConfig+0x368>
 8004c9e:	e014      	b.n	8004cca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca0:	f7fd fd62 	bl	8002768 <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ca6:	e00a      	b.n	8004cbe <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ca8:	f7fd fd5e 	bl	8002768 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e0c1      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cbe:	4b40      	ldr	r3, [pc, #256]	@ (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1ee      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004cca:	7dfb      	ldrb	r3, [r7, #23]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d105      	bne.n	8004cdc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cd0:	4b3b      	ldr	r3, [pc, #236]	@ (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd4:	4a3a      	ldr	r2, [pc, #232]	@ (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004cd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cda:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 80ad 	beq.w	8004e40 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ce6:	4b36      	ldr	r3, [pc, #216]	@ (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f003 030c 	and.w	r3, r3, #12
 8004cee:	2b08      	cmp	r3, #8
 8004cf0:	d060      	beq.n	8004db4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d145      	bne.n	8004d86 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cfa:	4b33      	ldr	r3, [pc, #204]	@ (8004dc8 <HAL_RCC_OscConfig+0x4b4>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d00:	f7fd fd32 	bl	8002768 <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d06:	e008      	b.n	8004d1a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d08:	f7fd fd2e 	bl	8002768 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e093      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d1a:	4b29      	ldr	r3, [pc, #164]	@ (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1f0      	bne.n	8004d08 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	69da      	ldr	r2, [r3, #28]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d34:	019b      	lsls	r3, r3, #6
 8004d36:	431a      	orrs	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d3c:	085b      	lsrs	r3, r3, #1
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	041b      	lsls	r3, r3, #16
 8004d42:	431a      	orrs	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d48:	061b      	lsls	r3, r3, #24
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d50:	071b      	lsls	r3, r3, #28
 8004d52:	491b      	ldr	r1, [pc, #108]	@ (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d58:	4b1b      	ldr	r3, [pc, #108]	@ (8004dc8 <HAL_RCC_OscConfig+0x4b4>)
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5e:	f7fd fd03 	bl	8002768 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d64:	e008      	b.n	8004d78 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d66:	f7fd fcff 	bl	8002768 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e064      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d78:	4b11      	ldr	r3, [pc, #68]	@ (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0f0      	beq.n	8004d66 <HAL_RCC_OscConfig+0x452>
 8004d84:	e05c      	b.n	8004e40 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d86:	4b10      	ldr	r3, [pc, #64]	@ (8004dc8 <HAL_RCC_OscConfig+0x4b4>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8c:	f7fd fcec 	bl	8002768 <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d94:	f7fd fce8 	bl	8002768 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e04d      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004da6:	4b06      	ldr	r3, [pc, #24]	@ (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1f0      	bne.n	8004d94 <HAL_RCC_OscConfig+0x480>
 8004db2:	e045      	b.n	8004e40 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d107      	bne.n	8004dcc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e040      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
 8004dc0:	40023800 	.word	0x40023800
 8004dc4:	40007000 	.word	0x40007000
 8004dc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8004e4c <HAL_RCC_OscConfig+0x538>)
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d030      	beq.n	8004e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d129      	bne.n	8004e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d122      	bne.n	8004e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d119      	bne.n	8004e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e12:	085b      	lsrs	r3, r3, #1
 8004e14:	3b01      	subs	r3, #1
 8004e16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d10f      	bne.n	8004e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d107      	bne.n	8004e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e36:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d001      	beq.n	8004e40 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e000      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3718      	adds	r7, #24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	40023800 	.word	0x40023800

08004e50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e042      	b.n	8004ee8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d106      	bne.n	8004e7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7fd fa3e 	bl	80022f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2224      	movs	r2, #36	@ 0x24
 8004e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 fdbd 	bl	8005a14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	691a      	ldr	r2, [r3, #16]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ea8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	695a      	ldr	r2, [r3, #20]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004eb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68da      	ldr	r2, [r3, #12]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ec8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b08a      	sub	sp, #40	@ 0x28
 8004ef4:	af02      	add	r7, sp, #8
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	603b      	str	r3, [r7, #0]
 8004efc:	4613      	mov	r3, r2
 8004efe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b20      	cmp	r3, #32
 8004f0e:	d175      	bne.n	8004ffc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d002      	beq.n	8004f1c <HAL_UART_Transmit+0x2c>
 8004f16:	88fb      	ldrh	r3, [r7, #6]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e06e      	b.n	8004ffe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2221      	movs	r2, #33	@ 0x21
 8004f2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f2e:	f7fd fc1b 	bl	8002768 <HAL_GetTick>
 8004f32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	88fa      	ldrh	r2, [r7, #6]
 8004f38:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	88fa      	ldrh	r2, [r7, #6]
 8004f3e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f48:	d108      	bne.n	8004f5c <HAL_UART_Transmit+0x6c>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d104      	bne.n	8004f5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f52:	2300      	movs	r3, #0
 8004f54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	61bb      	str	r3, [r7, #24]
 8004f5a:	e003      	b.n	8004f64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f60:	2300      	movs	r3, #0
 8004f62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f64:	e02e      	b.n	8004fc4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	2180      	movs	r1, #128	@ 0x80
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f000 fb1f 	bl	80055b4 <UART_WaitOnFlagUntilTimeout>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d005      	beq.n	8004f88 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e03a      	b.n	8004ffe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10b      	bne.n	8004fa6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	461a      	mov	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	3302      	adds	r3, #2
 8004fa2:	61bb      	str	r3, [r7, #24]
 8004fa4:	e007      	b.n	8004fb6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	781a      	ldrb	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1cb      	bne.n	8004f66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	2140      	movs	r1, #64	@ 0x40
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f000 faeb 	bl	80055b4 <UART_WaitOnFlagUntilTimeout>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d005      	beq.n	8004ff0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e006      	b.n	8004ffe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	e000      	b.n	8004ffe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004ffc:	2302      	movs	r3, #2
  }
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3720      	adds	r7, #32
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b084      	sub	sp, #16
 800500a:	af00      	add	r7, sp, #0
 800500c:	60f8      	str	r0, [r7, #12]
 800500e:	60b9      	str	r1, [r7, #8]
 8005010:	4613      	mov	r3, r2
 8005012:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b20      	cmp	r3, #32
 800501e:	d112      	bne.n	8005046 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d002      	beq.n	800502c <HAL_UART_Receive_IT+0x26>
 8005026:	88fb      	ldrh	r3, [r7, #6]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e00b      	b.n	8005048 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005036:	88fb      	ldrh	r3, [r7, #6]
 8005038:	461a      	mov	r2, r3
 800503a:	68b9      	ldr	r1, [r7, #8]
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 fb12 	bl	8005666 <UART_Start_Receive_IT>
 8005042:	4603      	mov	r3, r0
 8005044:	e000      	b.n	8005048 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005046:	2302      	movs	r3, #2
  }
}
 8005048:	4618      	mov	r0, r3
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b0ba      	sub	sp, #232	@ 0xe8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005076:	2300      	movs	r3, #0
 8005078:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800507c:	2300      	movs	r3, #0
 800507e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005086:	f003 030f 	and.w	r3, r3, #15
 800508a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800508e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10f      	bne.n	80050b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800509a:	f003 0320 	and.w	r3, r3, #32
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d009      	beq.n	80050b6 <HAL_UART_IRQHandler+0x66>
 80050a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050a6:	f003 0320 	and.w	r3, r3, #32
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 fbf2 	bl	8005898 <UART_Receive_IT>
      return;
 80050b4:	e25b      	b.n	800556e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80050b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f000 80de 	beq.w	800527c <HAL_UART_IRQHandler+0x22c>
 80050c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d106      	bne.n	80050da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050d0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 80d1 	beq.w	800527c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80050da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00b      	beq.n	80050fe <HAL_UART_IRQHandler+0xae>
 80050e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d005      	beq.n	80050fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050f6:	f043 0201 	orr.w	r2, r3, #1
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005102:	f003 0304 	and.w	r3, r3, #4
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00b      	beq.n	8005122 <HAL_UART_IRQHandler+0xd2>
 800510a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d005      	beq.n	8005122 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800511a:	f043 0202 	orr.w	r2, r3, #2
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00b      	beq.n	8005146 <HAL_UART_IRQHandler+0xf6>
 800512e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b00      	cmp	r3, #0
 8005138:	d005      	beq.n	8005146 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800513e:	f043 0204 	orr.w	r2, r3, #4
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800514a:	f003 0308 	and.w	r3, r3, #8
 800514e:	2b00      	cmp	r3, #0
 8005150:	d011      	beq.n	8005176 <HAL_UART_IRQHandler+0x126>
 8005152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005156:	f003 0320 	and.w	r3, r3, #32
 800515a:	2b00      	cmp	r3, #0
 800515c:	d105      	bne.n	800516a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800515e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d005      	beq.n	8005176 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800516e:	f043 0208 	orr.w	r2, r3, #8
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800517a:	2b00      	cmp	r3, #0
 800517c:	f000 81f2 	beq.w	8005564 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005184:	f003 0320 	and.w	r3, r3, #32
 8005188:	2b00      	cmp	r3, #0
 800518a:	d008      	beq.n	800519e <HAL_UART_IRQHandler+0x14e>
 800518c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005190:	f003 0320 	and.w	r3, r3, #32
 8005194:	2b00      	cmp	r3, #0
 8005196:	d002      	beq.n	800519e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 fb7d 	bl	8005898 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051a8:	2b40      	cmp	r3, #64	@ 0x40
 80051aa:	bf0c      	ite	eq
 80051ac:	2301      	moveq	r3, #1
 80051ae:	2300      	movne	r3, #0
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ba:	f003 0308 	and.w	r3, r3, #8
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d103      	bne.n	80051ca <HAL_UART_IRQHandler+0x17a>
 80051c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d04f      	beq.n	800526a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fa85 	bl	80056da <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051da:	2b40      	cmp	r3, #64	@ 0x40
 80051dc:	d141      	bne.n	8005262 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	3314      	adds	r3, #20
 80051e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80051ec:	e853 3f00 	ldrex	r3, [r3]
 80051f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80051f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80051f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	3314      	adds	r3, #20
 8005206:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800520a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800520e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005212:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005216:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800521a:	e841 2300 	strex	r3, r2, [r1]
 800521e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005222:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1d9      	bne.n	80051de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800522e:	2b00      	cmp	r3, #0
 8005230:	d013      	beq.n	800525a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005236:	4a7e      	ldr	r2, [pc, #504]	@ (8005430 <HAL_UART_IRQHandler+0x3e0>)
 8005238:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800523e:	4618      	mov	r0, r3
 8005240:	f7fd fe53 	bl	8002eea <HAL_DMA_Abort_IT>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d016      	beq.n	8005278 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800524e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005254:	4610      	mov	r0, r2
 8005256:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005258:	e00e      	b.n	8005278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f994 	bl	8005588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005260:	e00a      	b.n	8005278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f990 	bl	8005588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005268:	e006      	b.n	8005278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f98c 	bl	8005588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005276:	e175      	b.n	8005564 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005278:	bf00      	nop
    return;
 800527a:	e173      	b.n	8005564 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005280:	2b01      	cmp	r3, #1
 8005282:	f040 814f 	bne.w	8005524 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800528a:	f003 0310 	and.w	r3, r3, #16
 800528e:	2b00      	cmp	r3, #0
 8005290:	f000 8148 	beq.w	8005524 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005298:	f003 0310 	and.w	r3, r3, #16
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 8141 	beq.w	8005524 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052a2:	2300      	movs	r3, #0
 80052a4:	60bb      	str	r3, [r7, #8]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	60bb      	str	r3, [r7, #8]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	60bb      	str	r3, [r7, #8]
 80052b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c2:	2b40      	cmp	r3, #64	@ 0x40
 80052c4:	f040 80b6 	bne.w	8005434 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80052d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 8145 	beq.w	8005568 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80052e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80052e6:	429a      	cmp	r2, r3
 80052e8:	f080 813e 	bcs.w	8005568 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80052f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052fe:	f000 8088 	beq.w	8005412 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	330c      	adds	r3, #12
 8005308:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005310:	e853 3f00 	ldrex	r3, [r3]
 8005314:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005318:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800531c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005320:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	330c      	adds	r3, #12
 800532a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800532e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005332:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005336:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800533a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005346:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1d9      	bne.n	8005302 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3314      	adds	r3, #20
 8005354:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005356:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005358:	e853 3f00 	ldrex	r3, [r3]
 800535c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800535e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005360:	f023 0301 	bic.w	r3, r3, #1
 8005364:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3314      	adds	r3, #20
 800536e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005372:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005376:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005378:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800537a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800537e:	e841 2300 	strex	r3, r2, [r1]
 8005382:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005384:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1e1      	bne.n	800534e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	3314      	adds	r3, #20
 8005390:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005392:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005394:	e853 3f00 	ldrex	r3, [r3]
 8005398:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800539a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800539c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3314      	adds	r3, #20
 80053aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80053ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80053b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80053b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80053b6:	e841 2300 	strex	r3, r2, [r1]
 80053ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80053bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1e3      	bne.n	800538a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2220      	movs	r2, #32
 80053c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	330c      	adds	r3, #12
 80053d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053da:	e853 3f00 	ldrex	r3, [r3]
 80053de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80053e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053e2:	f023 0310 	bic.w	r3, r3, #16
 80053e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	330c      	adds	r3, #12
 80053f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80053f4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80053f6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80053fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80053fc:	e841 2300 	strex	r3, r2, [r1]
 8005400:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005402:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1e3      	bne.n	80053d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800540c:	4618      	mov	r0, r3
 800540e:	f7fd fcfc 	bl	8002e0a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2202      	movs	r2, #2
 8005416:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005420:	b29b      	uxth	r3, r3
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	b29b      	uxth	r3, r3
 8005426:	4619      	mov	r1, r3
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f8b7 	bl	800559c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800542e:	e09b      	b.n	8005568 <HAL_UART_IRQHandler+0x518>
 8005430:	080057a1 	.word	0x080057a1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800543c:	b29b      	uxth	r3, r3
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005448:	b29b      	uxth	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 808e 	beq.w	800556c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005450:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 8089 	beq.w	800556c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	330c      	adds	r3, #12
 8005460:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005464:	e853 3f00 	ldrex	r3, [r3]
 8005468:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800546a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800546c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005470:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	330c      	adds	r3, #12
 800547a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800547e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005480:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005482:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005484:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005486:	e841 2300 	strex	r3, r2, [r1]
 800548a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800548c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1e3      	bne.n	800545a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	3314      	adds	r3, #20
 8005498:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549c:	e853 3f00 	ldrex	r3, [r3]
 80054a0:	623b      	str	r3, [r7, #32]
   return(result);
 80054a2:	6a3b      	ldr	r3, [r7, #32]
 80054a4:	f023 0301 	bic.w	r3, r3, #1
 80054a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3314      	adds	r3, #20
 80054b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80054b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80054b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054be:	e841 2300 	strex	r3, r2, [r1]
 80054c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1e3      	bne.n	8005492 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2220      	movs	r2, #32
 80054ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	330c      	adds	r3, #12
 80054de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	e853 3f00 	ldrex	r3, [r3]
 80054e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f023 0310 	bic.w	r3, r3, #16
 80054ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	330c      	adds	r3, #12
 80054f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80054fc:	61fa      	str	r2, [r7, #28]
 80054fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005500:	69b9      	ldr	r1, [r7, #24]
 8005502:	69fa      	ldr	r2, [r7, #28]
 8005504:	e841 2300 	strex	r3, r2, [r1]
 8005508:	617b      	str	r3, [r7, #20]
   return(result);
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1e3      	bne.n	80054d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005516:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800551a:	4619      	mov	r1, r3
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 f83d 	bl	800559c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005522:	e023      	b.n	800556c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800552c:	2b00      	cmp	r3, #0
 800552e:	d009      	beq.n	8005544 <HAL_UART_IRQHandler+0x4f4>
 8005530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005538:	2b00      	cmp	r3, #0
 800553a:	d003      	beq.n	8005544 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 f943 	bl	80057c8 <UART_Transmit_IT>
    return;
 8005542:	e014      	b.n	800556e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00e      	beq.n	800556e <HAL_UART_IRQHandler+0x51e>
 8005550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005558:	2b00      	cmp	r3, #0
 800555a:	d008      	beq.n	800556e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f983 	bl	8005868 <UART_EndTransmit_IT>
    return;
 8005562:	e004      	b.n	800556e <HAL_UART_IRQHandler+0x51e>
    return;
 8005564:	bf00      	nop
 8005566:	e002      	b.n	800556e <HAL_UART_IRQHandler+0x51e>
      return;
 8005568:	bf00      	nop
 800556a:	e000      	b.n	800556e <HAL_UART_IRQHandler+0x51e>
      return;
 800556c:	bf00      	nop
  }
}
 800556e:	37e8      	adds	r7, #232	@ 0xe8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	460b      	mov	r3, r1
 80055a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	603b      	str	r3, [r7, #0]
 80055c0:	4613      	mov	r3, r2
 80055c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055c4:	e03b      	b.n	800563e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055cc:	d037      	beq.n	800563e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ce:	f7fd f8cb 	bl	8002768 <HAL_GetTick>
 80055d2:	4602      	mov	r2, r0
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	6a3a      	ldr	r2, [r7, #32]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d302      	bcc.n	80055e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e03a      	b.n	800565e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	f003 0304 	and.w	r3, r3, #4
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d023      	beq.n	800563e <UART_WaitOnFlagUntilTimeout+0x8a>
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2b80      	cmp	r3, #128	@ 0x80
 80055fa:	d020      	beq.n	800563e <UART_WaitOnFlagUntilTimeout+0x8a>
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2b40      	cmp	r3, #64	@ 0x40
 8005600:	d01d      	beq.n	800563e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0308 	and.w	r3, r3, #8
 800560c:	2b08      	cmp	r3, #8
 800560e:	d116      	bne.n	800563e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005610:	2300      	movs	r3, #0
 8005612:	617b      	str	r3, [r7, #20]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	617b      	str	r3, [r7, #20]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	617b      	str	r3, [r7, #20]
 8005624:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f000 f857 	bl	80056da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2208      	movs	r2, #8
 8005630:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e00f      	b.n	800565e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	4013      	ands	r3, r2
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	429a      	cmp	r2, r3
 800564c:	bf0c      	ite	eq
 800564e:	2301      	moveq	r3, #1
 8005650:	2300      	movne	r3, #0
 8005652:	b2db      	uxtb	r3, r3
 8005654:	461a      	mov	r2, r3
 8005656:	79fb      	ldrb	r3, [r7, #7]
 8005658:	429a      	cmp	r2, r3
 800565a:	d0b4      	beq.n	80055c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3718      	adds	r7, #24
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005666:	b480      	push	{r7}
 8005668:	b085      	sub	sp, #20
 800566a:	af00      	add	r7, sp, #0
 800566c:	60f8      	str	r0, [r7, #12]
 800566e:	60b9      	str	r1, [r7, #8]
 8005670:	4613      	mov	r3, r2
 8005672:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	88fa      	ldrh	r2, [r7, #6]
 800567e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	88fa      	ldrh	r2, [r7, #6]
 8005684:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2222      	movs	r2, #34	@ 0x22
 8005690:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d007      	beq.n	80056ac <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68da      	ldr	r2, [r3, #12]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056aa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	695a      	ldr	r2, [r3, #20]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f042 0201 	orr.w	r2, r2, #1
 80056ba:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68da      	ldr	r2, [r3, #12]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f042 0220 	orr.w	r2, r2, #32
 80056ca:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056da:	b480      	push	{r7}
 80056dc:	b095      	sub	sp, #84	@ 0x54
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	330c      	adds	r3, #12
 80056e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ec:	e853 3f00 	ldrex	r3, [r3]
 80056f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	330c      	adds	r3, #12
 8005700:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005702:	643a      	str	r2, [r7, #64]	@ 0x40
 8005704:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005706:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005708:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800570a:	e841 2300 	strex	r3, r2, [r1]
 800570e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1e5      	bne.n	80056e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	3314      	adds	r3, #20
 800571c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	e853 3f00 	ldrex	r3, [r3]
 8005724:	61fb      	str	r3, [r7, #28]
   return(result);
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	f023 0301 	bic.w	r3, r3, #1
 800572c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	3314      	adds	r3, #20
 8005734:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005736:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005738:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800573c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800573e:	e841 2300 	strex	r3, r2, [r1]
 8005742:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1e5      	bne.n	8005716 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800574e:	2b01      	cmp	r3, #1
 8005750:	d119      	bne.n	8005786 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	330c      	adds	r3, #12
 8005758:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	e853 3f00 	ldrex	r3, [r3]
 8005760:	60bb      	str	r3, [r7, #8]
   return(result);
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	f023 0310 	bic.w	r3, r3, #16
 8005768:	647b      	str	r3, [r7, #68]	@ 0x44
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	330c      	adds	r3, #12
 8005770:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005772:	61ba      	str	r2, [r7, #24]
 8005774:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005776:	6979      	ldr	r1, [r7, #20]
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	e841 2300 	strex	r3, r2, [r1]
 800577e:	613b      	str	r3, [r7, #16]
   return(result);
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1e5      	bne.n	8005752 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2220      	movs	r2, #32
 800578a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005794:	bf00      	nop
 8005796:	3754      	adds	r7, #84	@ 0x54
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f7ff fee4 	bl	8005588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057c0:	bf00      	nop
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b21      	cmp	r3, #33	@ 0x21
 80057da:	d13e      	bne.n	800585a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057e4:	d114      	bne.n	8005810 <UART_Transmit_IT+0x48>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d110      	bne.n	8005810 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	881b      	ldrh	r3, [r3, #0]
 80057f8:	461a      	mov	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005802:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	1c9a      	adds	r2, r3, #2
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	621a      	str	r2, [r3, #32]
 800580e:	e008      	b.n	8005822 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a1b      	ldr	r3, [r3, #32]
 8005814:	1c59      	adds	r1, r3, #1
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	6211      	str	r1, [r2, #32]
 800581a:	781a      	ldrb	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005826:	b29b      	uxth	r3, r3
 8005828:	3b01      	subs	r3, #1
 800582a:	b29b      	uxth	r3, r3
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	4619      	mov	r1, r3
 8005830:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10f      	bne.n	8005856 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68da      	ldr	r2, [r3, #12]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005844:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68da      	ldr	r2, [r3, #12]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005854:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	e000      	b.n	800585c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800585a:	2302      	movs	r3, #2
  }
}
 800585c:	4618      	mov	r0, r3
 800585e:	3714      	adds	r7, #20
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68da      	ldr	r2, [r3, #12]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800587e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2220      	movs	r2, #32
 8005884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7ff fe73 	bl	8005574 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b08c      	sub	sp, #48	@ 0x30
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b22      	cmp	r3, #34	@ 0x22
 80058aa:	f040 80ae 	bne.w	8005a0a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058b6:	d117      	bne.n	80058e8 <UART_Receive_IT+0x50>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d113      	bne.n	80058e8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80058c0:	2300      	movs	r3, #0
 80058c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e0:	1c9a      	adds	r2, r3, #2
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80058e6:	e026      	b.n	8005936 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80058ee:	2300      	movs	r3, #0
 80058f0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058fa:	d007      	beq.n	800590c <UART_Receive_IT+0x74>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10a      	bne.n	800591a <UART_Receive_IT+0x82>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d106      	bne.n	800591a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	b2da      	uxtb	r2, r3
 8005914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005916:	701a      	strb	r2, [r3, #0]
 8005918:	e008      	b.n	800592c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	b2db      	uxtb	r3, r3
 8005922:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005926:	b2da      	uxtb	r2, r3
 8005928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800592a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005930:	1c5a      	adds	r2, r3, #1
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800593a:	b29b      	uxth	r3, r3
 800593c:	3b01      	subs	r3, #1
 800593e:	b29b      	uxth	r3, r3
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	4619      	mov	r1, r3
 8005944:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005946:	2b00      	cmp	r3, #0
 8005948:	d15d      	bne.n	8005a06 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68da      	ldr	r2, [r3, #12]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f022 0220 	bic.w	r2, r2, #32
 8005958:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68da      	ldr	r2, [r3, #12]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005968:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	695a      	ldr	r2, [r3, #20]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 0201 	bic.w	r2, r2, #1
 8005978:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2220      	movs	r2, #32
 800597e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800598c:	2b01      	cmp	r3, #1
 800598e:	d135      	bne.n	80059fc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	330c      	adds	r3, #12
 800599c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	e853 3f00 	ldrex	r3, [r3]
 80059a4:	613b      	str	r3, [r7, #16]
   return(result);
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	f023 0310 	bic.w	r3, r3, #16
 80059ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	330c      	adds	r3, #12
 80059b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059b6:	623a      	str	r2, [r7, #32]
 80059b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ba:	69f9      	ldr	r1, [r7, #28]
 80059bc:	6a3a      	ldr	r2, [r7, #32]
 80059be:	e841 2300 	strex	r3, r2, [r1]
 80059c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1e5      	bne.n	8005996 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0310 	and.w	r3, r3, #16
 80059d4:	2b10      	cmp	r3, #16
 80059d6:	d10a      	bne.n	80059ee <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059d8:	2300      	movs	r3, #0
 80059da:	60fb      	str	r3, [r7, #12]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	60fb      	str	r3, [r7, #12]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059f2:	4619      	mov	r1, r3
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f7ff fdd1 	bl	800559c <HAL_UARTEx_RxEventCallback>
 80059fa:	e002      	b.n	8005a02 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f7fc f9db 	bl	8001db8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a02:	2300      	movs	r3, #0
 8005a04:	e002      	b.n	8005a0c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005a06:	2300      	movs	r3, #0
 8005a08:	e000      	b.n	8005a0c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005a0a:	2302      	movs	r3, #2
  }
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3730      	adds	r7, #48	@ 0x30
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a18:	b0c0      	sub	sp, #256	@ 0x100
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a30:	68d9      	ldr	r1, [r3, #12]
 8005a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	ea40 0301 	orr.w	r3, r0, r1
 8005a3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	431a      	orrs	r2, r3
 8005a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a58:	69db      	ldr	r3, [r3, #28]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005a6c:	f021 010c 	bic.w	r1, r1, #12
 8005a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005a7a:	430b      	orrs	r3, r1
 8005a7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a8e:	6999      	ldr	r1, [r3, #24]
 8005a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	ea40 0301 	orr.w	r3, r0, r1
 8005a9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	4b8f      	ldr	r3, [pc, #572]	@ (8005ce0 <UART_SetConfig+0x2cc>)
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d005      	beq.n	8005ab4 <UART_SetConfig+0xa0>
 8005aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	4b8d      	ldr	r3, [pc, #564]	@ (8005ce4 <UART_SetConfig+0x2d0>)
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d104      	bne.n	8005abe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ab4:	f7fe fcea 	bl	800448c <HAL_RCC_GetPCLK2Freq>
 8005ab8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005abc:	e003      	b.n	8005ac6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005abe:	f7fe fcd1 	bl	8004464 <HAL_RCC_GetPCLK1Freq>
 8005ac2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aca:	69db      	ldr	r3, [r3, #28]
 8005acc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ad0:	f040 810c 	bne.w	8005cec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ad4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ade:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005ae2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005ae6:	4622      	mov	r2, r4
 8005ae8:	462b      	mov	r3, r5
 8005aea:	1891      	adds	r1, r2, r2
 8005aec:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005aee:	415b      	adcs	r3, r3
 8005af0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005af2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005af6:	4621      	mov	r1, r4
 8005af8:	eb12 0801 	adds.w	r8, r2, r1
 8005afc:	4629      	mov	r1, r5
 8005afe:	eb43 0901 	adc.w	r9, r3, r1
 8005b02:	f04f 0200 	mov.w	r2, #0
 8005b06:	f04f 0300 	mov.w	r3, #0
 8005b0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b16:	4690      	mov	r8, r2
 8005b18:	4699      	mov	r9, r3
 8005b1a:	4623      	mov	r3, r4
 8005b1c:	eb18 0303 	adds.w	r3, r8, r3
 8005b20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005b24:	462b      	mov	r3, r5
 8005b26:	eb49 0303 	adc.w	r3, r9, r3
 8005b2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b3a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005b3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b42:	460b      	mov	r3, r1
 8005b44:	18db      	adds	r3, r3, r3
 8005b46:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b48:	4613      	mov	r3, r2
 8005b4a:	eb42 0303 	adc.w	r3, r2, r3
 8005b4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005b54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005b58:	f7fb f916 	bl	8000d88 <__aeabi_uldivmod>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	460b      	mov	r3, r1
 8005b60:	4b61      	ldr	r3, [pc, #388]	@ (8005ce8 <UART_SetConfig+0x2d4>)
 8005b62:	fba3 2302 	umull	r2, r3, r3, r2
 8005b66:	095b      	lsrs	r3, r3, #5
 8005b68:	011c      	lsls	r4, r3, #4
 8005b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b74:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005b78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005b7c:	4642      	mov	r2, r8
 8005b7e:	464b      	mov	r3, r9
 8005b80:	1891      	adds	r1, r2, r2
 8005b82:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005b84:	415b      	adcs	r3, r3
 8005b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005b8c:	4641      	mov	r1, r8
 8005b8e:	eb12 0a01 	adds.w	sl, r2, r1
 8005b92:	4649      	mov	r1, r9
 8005b94:	eb43 0b01 	adc.w	fp, r3, r1
 8005b98:	f04f 0200 	mov.w	r2, #0
 8005b9c:	f04f 0300 	mov.w	r3, #0
 8005ba0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ba4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ba8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bac:	4692      	mov	sl, r2
 8005bae:	469b      	mov	fp, r3
 8005bb0:	4643      	mov	r3, r8
 8005bb2:	eb1a 0303 	adds.w	r3, sl, r3
 8005bb6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005bba:	464b      	mov	r3, r9
 8005bbc:	eb4b 0303 	adc.w	r3, fp, r3
 8005bc0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005bd0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005bd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005bd8:	460b      	mov	r3, r1
 8005bda:	18db      	adds	r3, r3, r3
 8005bdc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bde:	4613      	mov	r3, r2
 8005be0:	eb42 0303 	adc.w	r3, r2, r3
 8005be4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005be6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005bea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005bee:	f7fb f8cb 	bl	8000d88 <__aeabi_uldivmod>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	4611      	mov	r1, r2
 8005bf8:	4b3b      	ldr	r3, [pc, #236]	@ (8005ce8 <UART_SetConfig+0x2d4>)
 8005bfa:	fba3 2301 	umull	r2, r3, r3, r1
 8005bfe:	095b      	lsrs	r3, r3, #5
 8005c00:	2264      	movs	r2, #100	@ 0x64
 8005c02:	fb02 f303 	mul.w	r3, r2, r3
 8005c06:	1acb      	subs	r3, r1, r3
 8005c08:	00db      	lsls	r3, r3, #3
 8005c0a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005c0e:	4b36      	ldr	r3, [pc, #216]	@ (8005ce8 <UART_SetConfig+0x2d4>)
 8005c10:	fba3 2302 	umull	r2, r3, r3, r2
 8005c14:	095b      	lsrs	r3, r3, #5
 8005c16:	005b      	lsls	r3, r3, #1
 8005c18:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005c1c:	441c      	add	r4, r3
 8005c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c22:	2200      	movs	r2, #0
 8005c24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c28:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005c2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005c30:	4642      	mov	r2, r8
 8005c32:	464b      	mov	r3, r9
 8005c34:	1891      	adds	r1, r2, r2
 8005c36:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005c38:	415b      	adcs	r3, r3
 8005c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005c40:	4641      	mov	r1, r8
 8005c42:	1851      	adds	r1, r2, r1
 8005c44:	6339      	str	r1, [r7, #48]	@ 0x30
 8005c46:	4649      	mov	r1, r9
 8005c48:	414b      	adcs	r3, r1
 8005c4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c4c:	f04f 0200 	mov.w	r2, #0
 8005c50:	f04f 0300 	mov.w	r3, #0
 8005c54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005c58:	4659      	mov	r1, fp
 8005c5a:	00cb      	lsls	r3, r1, #3
 8005c5c:	4651      	mov	r1, sl
 8005c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c62:	4651      	mov	r1, sl
 8005c64:	00ca      	lsls	r2, r1, #3
 8005c66:	4610      	mov	r0, r2
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	4642      	mov	r2, r8
 8005c6e:	189b      	adds	r3, r3, r2
 8005c70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c74:	464b      	mov	r3, r9
 8005c76:	460a      	mov	r2, r1
 8005c78:	eb42 0303 	adc.w	r3, r2, r3
 8005c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c8c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005c90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c94:	460b      	mov	r3, r1
 8005c96:	18db      	adds	r3, r3, r3
 8005c98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	eb42 0303 	adc.w	r3, r2, r3
 8005ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ca2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ca6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005caa:	f7fb f86d 	bl	8000d88 <__aeabi_uldivmod>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce8 <UART_SetConfig+0x2d4>)
 8005cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8005cb8:	095b      	lsrs	r3, r3, #5
 8005cba:	2164      	movs	r1, #100	@ 0x64
 8005cbc:	fb01 f303 	mul.w	r3, r1, r3
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	00db      	lsls	r3, r3, #3
 8005cc4:	3332      	adds	r3, #50	@ 0x32
 8005cc6:	4a08      	ldr	r2, [pc, #32]	@ (8005ce8 <UART_SetConfig+0x2d4>)
 8005cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ccc:	095b      	lsrs	r3, r3, #5
 8005cce:	f003 0207 	and.w	r2, r3, #7
 8005cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4422      	add	r2, r4
 8005cda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005cdc:	e106      	b.n	8005eec <UART_SetConfig+0x4d8>
 8005cde:	bf00      	nop
 8005ce0:	40011000 	.word	0x40011000
 8005ce4:	40011400 	.word	0x40011400
 8005ce8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005cf6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005cfa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005cfe:	4642      	mov	r2, r8
 8005d00:	464b      	mov	r3, r9
 8005d02:	1891      	adds	r1, r2, r2
 8005d04:	6239      	str	r1, [r7, #32]
 8005d06:	415b      	adcs	r3, r3
 8005d08:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d0e:	4641      	mov	r1, r8
 8005d10:	1854      	adds	r4, r2, r1
 8005d12:	4649      	mov	r1, r9
 8005d14:	eb43 0501 	adc.w	r5, r3, r1
 8005d18:	f04f 0200 	mov.w	r2, #0
 8005d1c:	f04f 0300 	mov.w	r3, #0
 8005d20:	00eb      	lsls	r3, r5, #3
 8005d22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d26:	00e2      	lsls	r2, r4, #3
 8005d28:	4614      	mov	r4, r2
 8005d2a:	461d      	mov	r5, r3
 8005d2c:	4643      	mov	r3, r8
 8005d2e:	18e3      	adds	r3, r4, r3
 8005d30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d34:	464b      	mov	r3, r9
 8005d36:	eb45 0303 	adc.w	r3, r5, r3
 8005d3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d4e:	f04f 0200 	mov.w	r2, #0
 8005d52:	f04f 0300 	mov.w	r3, #0
 8005d56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005d5a:	4629      	mov	r1, r5
 8005d5c:	008b      	lsls	r3, r1, #2
 8005d5e:	4621      	mov	r1, r4
 8005d60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d64:	4621      	mov	r1, r4
 8005d66:	008a      	lsls	r2, r1, #2
 8005d68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005d6c:	f7fb f80c 	bl	8000d88 <__aeabi_uldivmod>
 8005d70:	4602      	mov	r2, r0
 8005d72:	460b      	mov	r3, r1
 8005d74:	4b60      	ldr	r3, [pc, #384]	@ (8005ef8 <UART_SetConfig+0x4e4>)
 8005d76:	fba3 2302 	umull	r2, r3, r3, r2
 8005d7a:	095b      	lsrs	r3, r3, #5
 8005d7c:	011c      	lsls	r4, r3, #4
 8005d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d82:	2200      	movs	r2, #0
 8005d84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d88:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005d8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005d90:	4642      	mov	r2, r8
 8005d92:	464b      	mov	r3, r9
 8005d94:	1891      	adds	r1, r2, r2
 8005d96:	61b9      	str	r1, [r7, #24]
 8005d98:	415b      	adcs	r3, r3
 8005d9a:	61fb      	str	r3, [r7, #28]
 8005d9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005da0:	4641      	mov	r1, r8
 8005da2:	1851      	adds	r1, r2, r1
 8005da4:	6139      	str	r1, [r7, #16]
 8005da6:	4649      	mov	r1, r9
 8005da8:	414b      	adcs	r3, r1
 8005daa:	617b      	str	r3, [r7, #20]
 8005dac:	f04f 0200 	mov.w	r2, #0
 8005db0:	f04f 0300 	mov.w	r3, #0
 8005db4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005db8:	4659      	mov	r1, fp
 8005dba:	00cb      	lsls	r3, r1, #3
 8005dbc:	4651      	mov	r1, sl
 8005dbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dc2:	4651      	mov	r1, sl
 8005dc4:	00ca      	lsls	r2, r1, #3
 8005dc6:	4610      	mov	r0, r2
 8005dc8:	4619      	mov	r1, r3
 8005dca:	4603      	mov	r3, r0
 8005dcc:	4642      	mov	r2, r8
 8005dce:	189b      	adds	r3, r3, r2
 8005dd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005dd4:	464b      	mov	r3, r9
 8005dd6:	460a      	mov	r2, r1
 8005dd8:	eb42 0303 	adc.w	r3, r2, r3
 8005ddc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005dea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005dec:	f04f 0200 	mov.w	r2, #0
 8005df0:	f04f 0300 	mov.w	r3, #0
 8005df4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005df8:	4649      	mov	r1, r9
 8005dfa:	008b      	lsls	r3, r1, #2
 8005dfc:	4641      	mov	r1, r8
 8005dfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e02:	4641      	mov	r1, r8
 8005e04:	008a      	lsls	r2, r1, #2
 8005e06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005e0a:	f7fa ffbd 	bl	8000d88 <__aeabi_uldivmod>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	460b      	mov	r3, r1
 8005e12:	4611      	mov	r1, r2
 8005e14:	4b38      	ldr	r3, [pc, #224]	@ (8005ef8 <UART_SetConfig+0x4e4>)
 8005e16:	fba3 2301 	umull	r2, r3, r3, r1
 8005e1a:	095b      	lsrs	r3, r3, #5
 8005e1c:	2264      	movs	r2, #100	@ 0x64
 8005e1e:	fb02 f303 	mul.w	r3, r2, r3
 8005e22:	1acb      	subs	r3, r1, r3
 8005e24:	011b      	lsls	r3, r3, #4
 8005e26:	3332      	adds	r3, #50	@ 0x32
 8005e28:	4a33      	ldr	r2, [pc, #204]	@ (8005ef8 <UART_SetConfig+0x4e4>)
 8005e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e2e:	095b      	lsrs	r3, r3, #5
 8005e30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e34:	441c      	add	r4, r3
 8005e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e3e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005e40:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005e44:	4642      	mov	r2, r8
 8005e46:	464b      	mov	r3, r9
 8005e48:	1891      	adds	r1, r2, r2
 8005e4a:	60b9      	str	r1, [r7, #8]
 8005e4c:	415b      	adcs	r3, r3
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e54:	4641      	mov	r1, r8
 8005e56:	1851      	adds	r1, r2, r1
 8005e58:	6039      	str	r1, [r7, #0]
 8005e5a:	4649      	mov	r1, r9
 8005e5c:	414b      	adcs	r3, r1
 8005e5e:	607b      	str	r3, [r7, #4]
 8005e60:	f04f 0200 	mov.w	r2, #0
 8005e64:	f04f 0300 	mov.w	r3, #0
 8005e68:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e6c:	4659      	mov	r1, fp
 8005e6e:	00cb      	lsls	r3, r1, #3
 8005e70:	4651      	mov	r1, sl
 8005e72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e76:	4651      	mov	r1, sl
 8005e78:	00ca      	lsls	r2, r1, #3
 8005e7a:	4610      	mov	r0, r2
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	4603      	mov	r3, r0
 8005e80:	4642      	mov	r2, r8
 8005e82:	189b      	adds	r3, r3, r2
 8005e84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e86:	464b      	mov	r3, r9
 8005e88:	460a      	mov	r2, r1
 8005e8a:	eb42 0303 	adc.w	r3, r2, r3
 8005e8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e9a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005e9c:	f04f 0200 	mov.w	r2, #0
 8005ea0:	f04f 0300 	mov.w	r3, #0
 8005ea4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005ea8:	4649      	mov	r1, r9
 8005eaa:	008b      	lsls	r3, r1, #2
 8005eac:	4641      	mov	r1, r8
 8005eae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005eb2:	4641      	mov	r1, r8
 8005eb4:	008a      	lsls	r2, r1, #2
 8005eb6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005eba:	f7fa ff65 	bl	8000d88 <__aeabi_uldivmod>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ef8 <UART_SetConfig+0x4e4>)
 8005ec4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ec8:	095b      	lsrs	r3, r3, #5
 8005eca:	2164      	movs	r1, #100	@ 0x64
 8005ecc:	fb01 f303 	mul.w	r3, r1, r3
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	011b      	lsls	r3, r3, #4
 8005ed4:	3332      	adds	r3, #50	@ 0x32
 8005ed6:	4a08      	ldr	r2, [pc, #32]	@ (8005ef8 <UART_SetConfig+0x4e4>)
 8005ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8005edc:	095b      	lsrs	r3, r3, #5
 8005ede:	f003 020f 	and.w	r2, r3, #15
 8005ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4422      	add	r2, r4
 8005eea:	609a      	str	r2, [r3, #8]
}
 8005eec:	bf00      	nop
 8005eee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ef8:	51eb851f 	.word	0x51eb851f

08005efc <__cvt>:
 8005efc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f00:	ec57 6b10 	vmov	r6, r7, d0
 8005f04:	2f00      	cmp	r7, #0
 8005f06:	460c      	mov	r4, r1
 8005f08:	4619      	mov	r1, r3
 8005f0a:	463b      	mov	r3, r7
 8005f0c:	bfbb      	ittet	lt
 8005f0e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005f12:	461f      	movlt	r7, r3
 8005f14:	2300      	movge	r3, #0
 8005f16:	232d      	movlt	r3, #45	@ 0x2d
 8005f18:	700b      	strb	r3, [r1, #0]
 8005f1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f1c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005f20:	4691      	mov	r9, r2
 8005f22:	f023 0820 	bic.w	r8, r3, #32
 8005f26:	bfbc      	itt	lt
 8005f28:	4632      	movlt	r2, r6
 8005f2a:	4616      	movlt	r6, r2
 8005f2c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005f30:	d005      	beq.n	8005f3e <__cvt+0x42>
 8005f32:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005f36:	d100      	bne.n	8005f3a <__cvt+0x3e>
 8005f38:	3401      	adds	r4, #1
 8005f3a:	2102      	movs	r1, #2
 8005f3c:	e000      	b.n	8005f40 <__cvt+0x44>
 8005f3e:	2103      	movs	r1, #3
 8005f40:	ab03      	add	r3, sp, #12
 8005f42:	9301      	str	r3, [sp, #4]
 8005f44:	ab02      	add	r3, sp, #8
 8005f46:	9300      	str	r3, [sp, #0]
 8005f48:	ec47 6b10 	vmov	d0, r6, r7
 8005f4c:	4653      	mov	r3, sl
 8005f4e:	4622      	mov	r2, r4
 8005f50:	f001 f98a 	bl	8007268 <_dtoa_r>
 8005f54:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005f58:	4605      	mov	r5, r0
 8005f5a:	d119      	bne.n	8005f90 <__cvt+0x94>
 8005f5c:	f019 0f01 	tst.w	r9, #1
 8005f60:	d00e      	beq.n	8005f80 <__cvt+0x84>
 8005f62:	eb00 0904 	add.w	r9, r0, r4
 8005f66:	2200      	movs	r2, #0
 8005f68:	2300      	movs	r3, #0
 8005f6a:	4630      	mov	r0, r6
 8005f6c:	4639      	mov	r1, r7
 8005f6e:	f7fa fddb 	bl	8000b28 <__aeabi_dcmpeq>
 8005f72:	b108      	cbz	r0, 8005f78 <__cvt+0x7c>
 8005f74:	f8cd 900c 	str.w	r9, [sp, #12]
 8005f78:	2230      	movs	r2, #48	@ 0x30
 8005f7a:	9b03      	ldr	r3, [sp, #12]
 8005f7c:	454b      	cmp	r3, r9
 8005f7e:	d31e      	bcc.n	8005fbe <__cvt+0xc2>
 8005f80:	9b03      	ldr	r3, [sp, #12]
 8005f82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005f84:	1b5b      	subs	r3, r3, r5
 8005f86:	4628      	mov	r0, r5
 8005f88:	6013      	str	r3, [r2, #0]
 8005f8a:	b004      	add	sp, #16
 8005f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f90:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005f94:	eb00 0904 	add.w	r9, r0, r4
 8005f98:	d1e5      	bne.n	8005f66 <__cvt+0x6a>
 8005f9a:	7803      	ldrb	r3, [r0, #0]
 8005f9c:	2b30      	cmp	r3, #48	@ 0x30
 8005f9e:	d10a      	bne.n	8005fb6 <__cvt+0xba>
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	4630      	mov	r0, r6
 8005fa6:	4639      	mov	r1, r7
 8005fa8:	f7fa fdbe 	bl	8000b28 <__aeabi_dcmpeq>
 8005fac:	b918      	cbnz	r0, 8005fb6 <__cvt+0xba>
 8005fae:	f1c4 0401 	rsb	r4, r4, #1
 8005fb2:	f8ca 4000 	str.w	r4, [sl]
 8005fb6:	f8da 3000 	ldr.w	r3, [sl]
 8005fba:	4499      	add	r9, r3
 8005fbc:	e7d3      	b.n	8005f66 <__cvt+0x6a>
 8005fbe:	1c59      	adds	r1, r3, #1
 8005fc0:	9103      	str	r1, [sp, #12]
 8005fc2:	701a      	strb	r2, [r3, #0]
 8005fc4:	e7d9      	b.n	8005f7a <__cvt+0x7e>

08005fc6 <__exponent>:
 8005fc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fc8:	2900      	cmp	r1, #0
 8005fca:	bfba      	itte	lt
 8005fcc:	4249      	neglt	r1, r1
 8005fce:	232d      	movlt	r3, #45	@ 0x2d
 8005fd0:	232b      	movge	r3, #43	@ 0x2b
 8005fd2:	2909      	cmp	r1, #9
 8005fd4:	7002      	strb	r2, [r0, #0]
 8005fd6:	7043      	strb	r3, [r0, #1]
 8005fd8:	dd29      	ble.n	800602e <__exponent+0x68>
 8005fda:	f10d 0307 	add.w	r3, sp, #7
 8005fde:	461d      	mov	r5, r3
 8005fe0:	270a      	movs	r7, #10
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	fbb1 f6f7 	udiv	r6, r1, r7
 8005fe8:	fb07 1416 	mls	r4, r7, r6, r1
 8005fec:	3430      	adds	r4, #48	@ 0x30
 8005fee:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005ff2:	460c      	mov	r4, r1
 8005ff4:	2c63      	cmp	r4, #99	@ 0x63
 8005ff6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005ffa:	4631      	mov	r1, r6
 8005ffc:	dcf1      	bgt.n	8005fe2 <__exponent+0x1c>
 8005ffe:	3130      	adds	r1, #48	@ 0x30
 8006000:	1e94      	subs	r4, r2, #2
 8006002:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006006:	1c41      	adds	r1, r0, #1
 8006008:	4623      	mov	r3, r4
 800600a:	42ab      	cmp	r3, r5
 800600c:	d30a      	bcc.n	8006024 <__exponent+0x5e>
 800600e:	f10d 0309 	add.w	r3, sp, #9
 8006012:	1a9b      	subs	r3, r3, r2
 8006014:	42ac      	cmp	r4, r5
 8006016:	bf88      	it	hi
 8006018:	2300      	movhi	r3, #0
 800601a:	3302      	adds	r3, #2
 800601c:	4403      	add	r3, r0
 800601e:	1a18      	subs	r0, r3, r0
 8006020:	b003      	add	sp, #12
 8006022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006024:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006028:	f801 6f01 	strb.w	r6, [r1, #1]!
 800602c:	e7ed      	b.n	800600a <__exponent+0x44>
 800602e:	2330      	movs	r3, #48	@ 0x30
 8006030:	3130      	adds	r1, #48	@ 0x30
 8006032:	7083      	strb	r3, [r0, #2]
 8006034:	70c1      	strb	r1, [r0, #3]
 8006036:	1d03      	adds	r3, r0, #4
 8006038:	e7f1      	b.n	800601e <__exponent+0x58>
	...

0800603c <_printf_float>:
 800603c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006040:	b08d      	sub	sp, #52	@ 0x34
 8006042:	460c      	mov	r4, r1
 8006044:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006048:	4616      	mov	r6, r2
 800604a:	461f      	mov	r7, r3
 800604c:	4605      	mov	r5, r0
 800604e:	f001 f805 	bl	800705c <_localeconv_r>
 8006052:	6803      	ldr	r3, [r0, #0]
 8006054:	9304      	str	r3, [sp, #16]
 8006056:	4618      	mov	r0, r3
 8006058:	f7fa f93a 	bl	80002d0 <strlen>
 800605c:	2300      	movs	r3, #0
 800605e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006060:	f8d8 3000 	ldr.w	r3, [r8]
 8006064:	9005      	str	r0, [sp, #20]
 8006066:	3307      	adds	r3, #7
 8006068:	f023 0307 	bic.w	r3, r3, #7
 800606c:	f103 0208 	add.w	r2, r3, #8
 8006070:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006074:	f8d4 b000 	ldr.w	fp, [r4]
 8006078:	f8c8 2000 	str.w	r2, [r8]
 800607c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006080:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006084:	9307      	str	r3, [sp, #28]
 8006086:	f8cd 8018 	str.w	r8, [sp, #24]
 800608a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800608e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006092:	4b9c      	ldr	r3, [pc, #624]	@ (8006304 <_printf_float+0x2c8>)
 8006094:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006098:	f7fa fd78 	bl	8000b8c <__aeabi_dcmpun>
 800609c:	bb70      	cbnz	r0, 80060fc <_printf_float+0xc0>
 800609e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060a2:	4b98      	ldr	r3, [pc, #608]	@ (8006304 <_printf_float+0x2c8>)
 80060a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80060a8:	f7fa fd52 	bl	8000b50 <__aeabi_dcmple>
 80060ac:	bb30      	cbnz	r0, 80060fc <_printf_float+0xc0>
 80060ae:	2200      	movs	r2, #0
 80060b0:	2300      	movs	r3, #0
 80060b2:	4640      	mov	r0, r8
 80060b4:	4649      	mov	r1, r9
 80060b6:	f7fa fd41 	bl	8000b3c <__aeabi_dcmplt>
 80060ba:	b110      	cbz	r0, 80060c2 <_printf_float+0x86>
 80060bc:	232d      	movs	r3, #45	@ 0x2d
 80060be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060c2:	4a91      	ldr	r2, [pc, #580]	@ (8006308 <_printf_float+0x2cc>)
 80060c4:	4b91      	ldr	r3, [pc, #580]	@ (800630c <_printf_float+0x2d0>)
 80060c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80060ca:	bf94      	ite	ls
 80060cc:	4690      	movls	r8, r2
 80060ce:	4698      	movhi	r8, r3
 80060d0:	2303      	movs	r3, #3
 80060d2:	6123      	str	r3, [r4, #16]
 80060d4:	f02b 0304 	bic.w	r3, fp, #4
 80060d8:	6023      	str	r3, [r4, #0]
 80060da:	f04f 0900 	mov.w	r9, #0
 80060de:	9700      	str	r7, [sp, #0]
 80060e0:	4633      	mov	r3, r6
 80060e2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80060e4:	4621      	mov	r1, r4
 80060e6:	4628      	mov	r0, r5
 80060e8:	f000 f9d2 	bl	8006490 <_printf_common>
 80060ec:	3001      	adds	r0, #1
 80060ee:	f040 808d 	bne.w	800620c <_printf_float+0x1d0>
 80060f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80060f6:	b00d      	add	sp, #52	@ 0x34
 80060f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060fc:	4642      	mov	r2, r8
 80060fe:	464b      	mov	r3, r9
 8006100:	4640      	mov	r0, r8
 8006102:	4649      	mov	r1, r9
 8006104:	f7fa fd42 	bl	8000b8c <__aeabi_dcmpun>
 8006108:	b140      	cbz	r0, 800611c <_printf_float+0xe0>
 800610a:	464b      	mov	r3, r9
 800610c:	2b00      	cmp	r3, #0
 800610e:	bfbc      	itt	lt
 8006110:	232d      	movlt	r3, #45	@ 0x2d
 8006112:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006116:	4a7e      	ldr	r2, [pc, #504]	@ (8006310 <_printf_float+0x2d4>)
 8006118:	4b7e      	ldr	r3, [pc, #504]	@ (8006314 <_printf_float+0x2d8>)
 800611a:	e7d4      	b.n	80060c6 <_printf_float+0x8a>
 800611c:	6863      	ldr	r3, [r4, #4]
 800611e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006122:	9206      	str	r2, [sp, #24]
 8006124:	1c5a      	adds	r2, r3, #1
 8006126:	d13b      	bne.n	80061a0 <_printf_float+0x164>
 8006128:	2306      	movs	r3, #6
 800612a:	6063      	str	r3, [r4, #4]
 800612c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006130:	2300      	movs	r3, #0
 8006132:	6022      	str	r2, [r4, #0]
 8006134:	9303      	str	r3, [sp, #12]
 8006136:	ab0a      	add	r3, sp, #40	@ 0x28
 8006138:	e9cd a301 	strd	sl, r3, [sp, #4]
 800613c:	ab09      	add	r3, sp, #36	@ 0x24
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	6861      	ldr	r1, [r4, #4]
 8006142:	ec49 8b10 	vmov	d0, r8, r9
 8006146:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800614a:	4628      	mov	r0, r5
 800614c:	f7ff fed6 	bl	8005efc <__cvt>
 8006150:	9b06      	ldr	r3, [sp, #24]
 8006152:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006154:	2b47      	cmp	r3, #71	@ 0x47
 8006156:	4680      	mov	r8, r0
 8006158:	d129      	bne.n	80061ae <_printf_float+0x172>
 800615a:	1cc8      	adds	r0, r1, #3
 800615c:	db02      	blt.n	8006164 <_printf_float+0x128>
 800615e:	6863      	ldr	r3, [r4, #4]
 8006160:	4299      	cmp	r1, r3
 8006162:	dd41      	ble.n	80061e8 <_printf_float+0x1ac>
 8006164:	f1aa 0a02 	sub.w	sl, sl, #2
 8006168:	fa5f fa8a 	uxtb.w	sl, sl
 800616c:	3901      	subs	r1, #1
 800616e:	4652      	mov	r2, sl
 8006170:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006174:	9109      	str	r1, [sp, #36]	@ 0x24
 8006176:	f7ff ff26 	bl	8005fc6 <__exponent>
 800617a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800617c:	1813      	adds	r3, r2, r0
 800617e:	2a01      	cmp	r2, #1
 8006180:	4681      	mov	r9, r0
 8006182:	6123      	str	r3, [r4, #16]
 8006184:	dc02      	bgt.n	800618c <_printf_float+0x150>
 8006186:	6822      	ldr	r2, [r4, #0]
 8006188:	07d2      	lsls	r2, r2, #31
 800618a:	d501      	bpl.n	8006190 <_printf_float+0x154>
 800618c:	3301      	adds	r3, #1
 800618e:	6123      	str	r3, [r4, #16]
 8006190:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006194:	2b00      	cmp	r3, #0
 8006196:	d0a2      	beq.n	80060de <_printf_float+0xa2>
 8006198:	232d      	movs	r3, #45	@ 0x2d
 800619a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800619e:	e79e      	b.n	80060de <_printf_float+0xa2>
 80061a0:	9a06      	ldr	r2, [sp, #24]
 80061a2:	2a47      	cmp	r2, #71	@ 0x47
 80061a4:	d1c2      	bne.n	800612c <_printf_float+0xf0>
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1c0      	bne.n	800612c <_printf_float+0xf0>
 80061aa:	2301      	movs	r3, #1
 80061ac:	e7bd      	b.n	800612a <_printf_float+0xee>
 80061ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80061b2:	d9db      	bls.n	800616c <_printf_float+0x130>
 80061b4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80061b8:	d118      	bne.n	80061ec <_printf_float+0x1b0>
 80061ba:	2900      	cmp	r1, #0
 80061bc:	6863      	ldr	r3, [r4, #4]
 80061be:	dd0b      	ble.n	80061d8 <_printf_float+0x19c>
 80061c0:	6121      	str	r1, [r4, #16]
 80061c2:	b913      	cbnz	r3, 80061ca <_printf_float+0x18e>
 80061c4:	6822      	ldr	r2, [r4, #0]
 80061c6:	07d0      	lsls	r0, r2, #31
 80061c8:	d502      	bpl.n	80061d0 <_printf_float+0x194>
 80061ca:	3301      	adds	r3, #1
 80061cc:	440b      	add	r3, r1
 80061ce:	6123      	str	r3, [r4, #16]
 80061d0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80061d2:	f04f 0900 	mov.w	r9, #0
 80061d6:	e7db      	b.n	8006190 <_printf_float+0x154>
 80061d8:	b913      	cbnz	r3, 80061e0 <_printf_float+0x1a4>
 80061da:	6822      	ldr	r2, [r4, #0]
 80061dc:	07d2      	lsls	r2, r2, #31
 80061de:	d501      	bpl.n	80061e4 <_printf_float+0x1a8>
 80061e0:	3302      	adds	r3, #2
 80061e2:	e7f4      	b.n	80061ce <_printf_float+0x192>
 80061e4:	2301      	movs	r3, #1
 80061e6:	e7f2      	b.n	80061ce <_printf_float+0x192>
 80061e8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80061ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061ee:	4299      	cmp	r1, r3
 80061f0:	db05      	blt.n	80061fe <_printf_float+0x1c2>
 80061f2:	6823      	ldr	r3, [r4, #0]
 80061f4:	6121      	str	r1, [r4, #16]
 80061f6:	07d8      	lsls	r0, r3, #31
 80061f8:	d5ea      	bpl.n	80061d0 <_printf_float+0x194>
 80061fa:	1c4b      	adds	r3, r1, #1
 80061fc:	e7e7      	b.n	80061ce <_printf_float+0x192>
 80061fe:	2900      	cmp	r1, #0
 8006200:	bfd4      	ite	le
 8006202:	f1c1 0202 	rsble	r2, r1, #2
 8006206:	2201      	movgt	r2, #1
 8006208:	4413      	add	r3, r2
 800620a:	e7e0      	b.n	80061ce <_printf_float+0x192>
 800620c:	6823      	ldr	r3, [r4, #0]
 800620e:	055a      	lsls	r2, r3, #21
 8006210:	d407      	bmi.n	8006222 <_printf_float+0x1e6>
 8006212:	6923      	ldr	r3, [r4, #16]
 8006214:	4642      	mov	r2, r8
 8006216:	4631      	mov	r1, r6
 8006218:	4628      	mov	r0, r5
 800621a:	47b8      	blx	r7
 800621c:	3001      	adds	r0, #1
 800621e:	d12b      	bne.n	8006278 <_printf_float+0x23c>
 8006220:	e767      	b.n	80060f2 <_printf_float+0xb6>
 8006222:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006226:	f240 80dd 	bls.w	80063e4 <_printf_float+0x3a8>
 800622a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800622e:	2200      	movs	r2, #0
 8006230:	2300      	movs	r3, #0
 8006232:	f7fa fc79 	bl	8000b28 <__aeabi_dcmpeq>
 8006236:	2800      	cmp	r0, #0
 8006238:	d033      	beq.n	80062a2 <_printf_float+0x266>
 800623a:	4a37      	ldr	r2, [pc, #220]	@ (8006318 <_printf_float+0x2dc>)
 800623c:	2301      	movs	r3, #1
 800623e:	4631      	mov	r1, r6
 8006240:	4628      	mov	r0, r5
 8006242:	47b8      	blx	r7
 8006244:	3001      	adds	r0, #1
 8006246:	f43f af54 	beq.w	80060f2 <_printf_float+0xb6>
 800624a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800624e:	4543      	cmp	r3, r8
 8006250:	db02      	blt.n	8006258 <_printf_float+0x21c>
 8006252:	6823      	ldr	r3, [r4, #0]
 8006254:	07d8      	lsls	r0, r3, #31
 8006256:	d50f      	bpl.n	8006278 <_printf_float+0x23c>
 8006258:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800625c:	4631      	mov	r1, r6
 800625e:	4628      	mov	r0, r5
 8006260:	47b8      	blx	r7
 8006262:	3001      	adds	r0, #1
 8006264:	f43f af45 	beq.w	80060f2 <_printf_float+0xb6>
 8006268:	f04f 0900 	mov.w	r9, #0
 800626c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006270:	f104 0a1a 	add.w	sl, r4, #26
 8006274:	45c8      	cmp	r8, r9
 8006276:	dc09      	bgt.n	800628c <_printf_float+0x250>
 8006278:	6823      	ldr	r3, [r4, #0]
 800627a:	079b      	lsls	r3, r3, #30
 800627c:	f100 8103 	bmi.w	8006486 <_printf_float+0x44a>
 8006280:	68e0      	ldr	r0, [r4, #12]
 8006282:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006284:	4298      	cmp	r0, r3
 8006286:	bfb8      	it	lt
 8006288:	4618      	movlt	r0, r3
 800628a:	e734      	b.n	80060f6 <_printf_float+0xba>
 800628c:	2301      	movs	r3, #1
 800628e:	4652      	mov	r2, sl
 8006290:	4631      	mov	r1, r6
 8006292:	4628      	mov	r0, r5
 8006294:	47b8      	blx	r7
 8006296:	3001      	adds	r0, #1
 8006298:	f43f af2b 	beq.w	80060f2 <_printf_float+0xb6>
 800629c:	f109 0901 	add.w	r9, r9, #1
 80062a0:	e7e8      	b.n	8006274 <_printf_float+0x238>
 80062a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	dc39      	bgt.n	800631c <_printf_float+0x2e0>
 80062a8:	4a1b      	ldr	r2, [pc, #108]	@ (8006318 <_printf_float+0x2dc>)
 80062aa:	2301      	movs	r3, #1
 80062ac:	4631      	mov	r1, r6
 80062ae:	4628      	mov	r0, r5
 80062b0:	47b8      	blx	r7
 80062b2:	3001      	adds	r0, #1
 80062b4:	f43f af1d 	beq.w	80060f2 <_printf_float+0xb6>
 80062b8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80062bc:	ea59 0303 	orrs.w	r3, r9, r3
 80062c0:	d102      	bne.n	80062c8 <_printf_float+0x28c>
 80062c2:	6823      	ldr	r3, [r4, #0]
 80062c4:	07d9      	lsls	r1, r3, #31
 80062c6:	d5d7      	bpl.n	8006278 <_printf_float+0x23c>
 80062c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062cc:	4631      	mov	r1, r6
 80062ce:	4628      	mov	r0, r5
 80062d0:	47b8      	blx	r7
 80062d2:	3001      	adds	r0, #1
 80062d4:	f43f af0d 	beq.w	80060f2 <_printf_float+0xb6>
 80062d8:	f04f 0a00 	mov.w	sl, #0
 80062dc:	f104 0b1a 	add.w	fp, r4, #26
 80062e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062e2:	425b      	negs	r3, r3
 80062e4:	4553      	cmp	r3, sl
 80062e6:	dc01      	bgt.n	80062ec <_printf_float+0x2b0>
 80062e8:	464b      	mov	r3, r9
 80062ea:	e793      	b.n	8006214 <_printf_float+0x1d8>
 80062ec:	2301      	movs	r3, #1
 80062ee:	465a      	mov	r2, fp
 80062f0:	4631      	mov	r1, r6
 80062f2:	4628      	mov	r0, r5
 80062f4:	47b8      	blx	r7
 80062f6:	3001      	adds	r0, #1
 80062f8:	f43f aefb 	beq.w	80060f2 <_printf_float+0xb6>
 80062fc:	f10a 0a01 	add.w	sl, sl, #1
 8006300:	e7ee      	b.n	80062e0 <_printf_float+0x2a4>
 8006302:	bf00      	nop
 8006304:	7fefffff 	.word	0x7fefffff
 8006308:	0800a97c 	.word	0x0800a97c
 800630c:	0800a980 	.word	0x0800a980
 8006310:	0800a984 	.word	0x0800a984
 8006314:	0800a988 	.word	0x0800a988
 8006318:	0800a98c 	.word	0x0800a98c
 800631c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800631e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006322:	4553      	cmp	r3, sl
 8006324:	bfa8      	it	ge
 8006326:	4653      	movge	r3, sl
 8006328:	2b00      	cmp	r3, #0
 800632a:	4699      	mov	r9, r3
 800632c:	dc36      	bgt.n	800639c <_printf_float+0x360>
 800632e:	f04f 0b00 	mov.w	fp, #0
 8006332:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006336:	f104 021a 	add.w	r2, r4, #26
 800633a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800633c:	9306      	str	r3, [sp, #24]
 800633e:	eba3 0309 	sub.w	r3, r3, r9
 8006342:	455b      	cmp	r3, fp
 8006344:	dc31      	bgt.n	80063aa <_printf_float+0x36e>
 8006346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006348:	459a      	cmp	sl, r3
 800634a:	dc3a      	bgt.n	80063c2 <_printf_float+0x386>
 800634c:	6823      	ldr	r3, [r4, #0]
 800634e:	07da      	lsls	r2, r3, #31
 8006350:	d437      	bmi.n	80063c2 <_printf_float+0x386>
 8006352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006354:	ebaa 0903 	sub.w	r9, sl, r3
 8006358:	9b06      	ldr	r3, [sp, #24]
 800635a:	ebaa 0303 	sub.w	r3, sl, r3
 800635e:	4599      	cmp	r9, r3
 8006360:	bfa8      	it	ge
 8006362:	4699      	movge	r9, r3
 8006364:	f1b9 0f00 	cmp.w	r9, #0
 8006368:	dc33      	bgt.n	80063d2 <_printf_float+0x396>
 800636a:	f04f 0800 	mov.w	r8, #0
 800636e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006372:	f104 0b1a 	add.w	fp, r4, #26
 8006376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006378:	ebaa 0303 	sub.w	r3, sl, r3
 800637c:	eba3 0309 	sub.w	r3, r3, r9
 8006380:	4543      	cmp	r3, r8
 8006382:	f77f af79 	ble.w	8006278 <_printf_float+0x23c>
 8006386:	2301      	movs	r3, #1
 8006388:	465a      	mov	r2, fp
 800638a:	4631      	mov	r1, r6
 800638c:	4628      	mov	r0, r5
 800638e:	47b8      	blx	r7
 8006390:	3001      	adds	r0, #1
 8006392:	f43f aeae 	beq.w	80060f2 <_printf_float+0xb6>
 8006396:	f108 0801 	add.w	r8, r8, #1
 800639a:	e7ec      	b.n	8006376 <_printf_float+0x33a>
 800639c:	4642      	mov	r2, r8
 800639e:	4631      	mov	r1, r6
 80063a0:	4628      	mov	r0, r5
 80063a2:	47b8      	blx	r7
 80063a4:	3001      	adds	r0, #1
 80063a6:	d1c2      	bne.n	800632e <_printf_float+0x2f2>
 80063a8:	e6a3      	b.n	80060f2 <_printf_float+0xb6>
 80063aa:	2301      	movs	r3, #1
 80063ac:	4631      	mov	r1, r6
 80063ae:	4628      	mov	r0, r5
 80063b0:	9206      	str	r2, [sp, #24]
 80063b2:	47b8      	blx	r7
 80063b4:	3001      	adds	r0, #1
 80063b6:	f43f ae9c 	beq.w	80060f2 <_printf_float+0xb6>
 80063ba:	9a06      	ldr	r2, [sp, #24]
 80063bc:	f10b 0b01 	add.w	fp, fp, #1
 80063c0:	e7bb      	b.n	800633a <_printf_float+0x2fe>
 80063c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063c6:	4631      	mov	r1, r6
 80063c8:	4628      	mov	r0, r5
 80063ca:	47b8      	blx	r7
 80063cc:	3001      	adds	r0, #1
 80063ce:	d1c0      	bne.n	8006352 <_printf_float+0x316>
 80063d0:	e68f      	b.n	80060f2 <_printf_float+0xb6>
 80063d2:	9a06      	ldr	r2, [sp, #24]
 80063d4:	464b      	mov	r3, r9
 80063d6:	4442      	add	r2, r8
 80063d8:	4631      	mov	r1, r6
 80063da:	4628      	mov	r0, r5
 80063dc:	47b8      	blx	r7
 80063de:	3001      	adds	r0, #1
 80063e0:	d1c3      	bne.n	800636a <_printf_float+0x32e>
 80063e2:	e686      	b.n	80060f2 <_printf_float+0xb6>
 80063e4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80063e8:	f1ba 0f01 	cmp.w	sl, #1
 80063ec:	dc01      	bgt.n	80063f2 <_printf_float+0x3b6>
 80063ee:	07db      	lsls	r3, r3, #31
 80063f0:	d536      	bpl.n	8006460 <_printf_float+0x424>
 80063f2:	2301      	movs	r3, #1
 80063f4:	4642      	mov	r2, r8
 80063f6:	4631      	mov	r1, r6
 80063f8:	4628      	mov	r0, r5
 80063fa:	47b8      	blx	r7
 80063fc:	3001      	adds	r0, #1
 80063fe:	f43f ae78 	beq.w	80060f2 <_printf_float+0xb6>
 8006402:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006406:	4631      	mov	r1, r6
 8006408:	4628      	mov	r0, r5
 800640a:	47b8      	blx	r7
 800640c:	3001      	adds	r0, #1
 800640e:	f43f ae70 	beq.w	80060f2 <_printf_float+0xb6>
 8006412:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006416:	2200      	movs	r2, #0
 8006418:	2300      	movs	r3, #0
 800641a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800641e:	f7fa fb83 	bl	8000b28 <__aeabi_dcmpeq>
 8006422:	b9c0      	cbnz	r0, 8006456 <_printf_float+0x41a>
 8006424:	4653      	mov	r3, sl
 8006426:	f108 0201 	add.w	r2, r8, #1
 800642a:	4631      	mov	r1, r6
 800642c:	4628      	mov	r0, r5
 800642e:	47b8      	blx	r7
 8006430:	3001      	adds	r0, #1
 8006432:	d10c      	bne.n	800644e <_printf_float+0x412>
 8006434:	e65d      	b.n	80060f2 <_printf_float+0xb6>
 8006436:	2301      	movs	r3, #1
 8006438:	465a      	mov	r2, fp
 800643a:	4631      	mov	r1, r6
 800643c:	4628      	mov	r0, r5
 800643e:	47b8      	blx	r7
 8006440:	3001      	adds	r0, #1
 8006442:	f43f ae56 	beq.w	80060f2 <_printf_float+0xb6>
 8006446:	f108 0801 	add.w	r8, r8, #1
 800644a:	45d0      	cmp	r8, sl
 800644c:	dbf3      	blt.n	8006436 <_printf_float+0x3fa>
 800644e:	464b      	mov	r3, r9
 8006450:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006454:	e6df      	b.n	8006216 <_printf_float+0x1da>
 8006456:	f04f 0800 	mov.w	r8, #0
 800645a:	f104 0b1a 	add.w	fp, r4, #26
 800645e:	e7f4      	b.n	800644a <_printf_float+0x40e>
 8006460:	2301      	movs	r3, #1
 8006462:	4642      	mov	r2, r8
 8006464:	e7e1      	b.n	800642a <_printf_float+0x3ee>
 8006466:	2301      	movs	r3, #1
 8006468:	464a      	mov	r2, r9
 800646a:	4631      	mov	r1, r6
 800646c:	4628      	mov	r0, r5
 800646e:	47b8      	blx	r7
 8006470:	3001      	adds	r0, #1
 8006472:	f43f ae3e 	beq.w	80060f2 <_printf_float+0xb6>
 8006476:	f108 0801 	add.w	r8, r8, #1
 800647a:	68e3      	ldr	r3, [r4, #12]
 800647c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800647e:	1a5b      	subs	r3, r3, r1
 8006480:	4543      	cmp	r3, r8
 8006482:	dcf0      	bgt.n	8006466 <_printf_float+0x42a>
 8006484:	e6fc      	b.n	8006280 <_printf_float+0x244>
 8006486:	f04f 0800 	mov.w	r8, #0
 800648a:	f104 0919 	add.w	r9, r4, #25
 800648e:	e7f4      	b.n	800647a <_printf_float+0x43e>

08006490 <_printf_common>:
 8006490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006494:	4616      	mov	r6, r2
 8006496:	4698      	mov	r8, r3
 8006498:	688a      	ldr	r2, [r1, #8]
 800649a:	690b      	ldr	r3, [r1, #16]
 800649c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80064a0:	4293      	cmp	r3, r2
 80064a2:	bfb8      	it	lt
 80064a4:	4613      	movlt	r3, r2
 80064a6:	6033      	str	r3, [r6, #0]
 80064a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80064ac:	4607      	mov	r7, r0
 80064ae:	460c      	mov	r4, r1
 80064b0:	b10a      	cbz	r2, 80064b6 <_printf_common+0x26>
 80064b2:	3301      	adds	r3, #1
 80064b4:	6033      	str	r3, [r6, #0]
 80064b6:	6823      	ldr	r3, [r4, #0]
 80064b8:	0699      	lsls	r1, r3, #26
 80064ba:	bf42      	ittt	mi
 80064bc:	6833      	ldrmi	r3, [r6, #0]
 80064be:	3302      	addmi	r3, #2
 80064c0:	6033      	strmi	r3, [r6, #0]
 80064c2:	6825      	ldr	r5, [r4, #0]
 80064c4:	f015 0506 	ands.w	r5, r5, #6
 80064c8:	d106      	bne.n	80064d8 <_printf_common+0x48>
 80064ca:	f104 0a19 	add.w	sl, r4, #25
 80064ce:	68e3      	ldr	r3, [r4, #12]
 80064d0:	6832      	ldr	r2, [r6, #0]
 80064d2:	1a9b      	subs	r3, r3, r2
 80064d4:	42ab      	cmp	r3, r5
 80064d6:	dc26      	bgt.n	8006526 <_printf_common+0x96>
 80064d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80064dc:	6822      	ldr	r2, [r4, #0]
 80064de:	3b00      	subs	r3, #0
 80064e0:	bf18      	it	ne
 80064e2:	2301      	movne	r3, #1
 80064e4:	0692      	lsls	r2, r2, #26
 80064e6:	d42b      	bmi.n	8006540 <_printf_common+0xb0>
 80064e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80064ec:	4641      	mov	r1, r8
 80064ee:	4638      	mov	r0, r7
 80064f0:	47c8      	blx	r9
 80064f2:	3001      	adds	r0, #1
 80064f4:	d01e      	beq.n	8006534 <_printf_common+0xa4>
 80064f6:	6823      	ldr	r3, [r4, #0]
 80064f8:	6922      	ldr	r2, [r4, #16]
 80064fa:	f003 0306 	and.w	r3, r3, #6
 80064fe:	2b04      	cmp	r3, #4
 8006500:	bf02      	ittt	eq
 8006502:	68e5      	ldreq	r5, [r4, #12]
 8006504:	6833      	ldreq	r3, [r6, #0]
 8006506:	1aed      	subeq	r5, r5, r3
 8006508:	68a3      	ldr	r3, [r4, #8]
 800650a:	bf0c      	ite	eq
 800650c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006510:	2500      	movne	r5, #0
 8006512:	4293      	cmp	r3, r2
 8006514:	bfc4      	itt	gt
 8006516:	1a9b      	subgt	r3, r3, r2
 8006518:	18ed      	addgt	r5, r5, r3
 800651a:	2600      	movs	r6, #0
 800651c:	341a      	adds	r4, #26
 800651e:	42b5      	cmp	r5, r6
 8006520:	d11a      	bne.n	8006558 <_printf_common+0xc8>
 8006522:	2000      	movs	r0, #0
 8006524:	e008      	b.n	8006538 <_printf_common+0xa8>
 8006526:	2301      	movs	r3, #1
 8006528:	4652      	mov	r2, sl
 800652a:	4641      	mov	r1, r8
 800652c:	4638      	mov	r0, r7
 800652e:	47c8      	blx	r9
 8006530:	3001      	adds	r0, #1
 8006532:	d103      	bne.n	800653c <_printf_common+0xac>
 8006534:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800653c:	3501      	adds	r5, #1
 800653e:	e7c6      	b.n	80064ce <_printf_common+0x3e>
 8006540:	18e1      	adds	r1, r4, r3
 8006542:	1c5a      	adds	r2, r3, #1
 8006544:	2030      	movs	r0, #48	@ 0x30
 8006546:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800654a:	4422      	add	r2, r4
 800654c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006550:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006554:	3302      	adds	r3, #2
 8006556:	e7c7      	b.n	80064e8 <_printf_common+0x58>
 8006558:	2301      	movs	r3, #1
 800655a:	4622      	mov	r2, r4
 800655c:	4641      	mov	r1, r8
 800655e:	4638      	mov	r0, r7
 8006560:	47c8      	blx	r9
 8006562:	3001      	adds	r0, #1
 8006564:	d0e6      	beq.n	8006534 <_printf_common+0xa4>
 8006566:	3601      	adds	r6, #1
 8006568:	e7d9      	b.n	800651e <_printf_common+0x8e>
	...

0800656c <_printf_i>:
 800656c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006570:	7e0f      	ldrb	r7, [r1, #24]
 8006572:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006574:	2f78      	cmp	r7, #120	@ 0x78
 8006576:	4691      	mov	r9, r2
 8006578:	4680      	mov	r8, r0
 800657a:	460c      	mov	r4, r1
 800657c:	469a      	mov	sl, r3
 800657e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006582:	d807      	bhi.n	8006594 <_printf_i+0x28>
 8006584:	2f62      	cmp	r7, #98	@ 0x62
 8006586:	d80a      	bhi.n	800659e <_printf_i+0x32>
 8006588:	2f00      	cmp	r7, #0
 800658a:	f000 80d2 	beq.w	8006732 <_printf_i+0x1c6>
 800658e:	2f58      	cmp	r7, #88	@ 0x58
 8006590:	f000 80b9 	beq.w	8006706 <_printf_i+0x19a>
 8006594:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006598:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800659c:	e03a      	b.n	8006614 <_printf_i+0xa8>
 800659e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80065a2:	2b15      	cmp	r3, #21
 80065a4:	d8f6      	bhi.n	8006594 <_printf_i+0x28>
 80065a6:	a101      	add	r1, pc, #4	@ (adr r1, 80065ac <_printf_i+0x40>)
 80065a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065ac:	08006605 	.word	0x08006605
 80065b0:	08006619 	.word	0x08006619
 80065b4:	08006595 	.word	0x08006595
 80065b8:	08006595 	.word	0x08006595
 80065bc:	08006595 	.word	0x08006595
 80065c0:	08006595 	.word	0x08006595
 80065c4:	08006619 	.word	0x08006619
 80065c8:	08006595 	.word	0x08006595
 80065cc:	08006595 	.word	0x08006595
 80065d0:	08006595 	.word	0x08006595
 80065d4:	08006595 	.word	0x08006595
 80065d8:	08006719 	.word	0x08006719
 80065dc:	08006643 	.word	0x08006643
 80065e0:	080066d3 	.word	0x080066d3
 80065e4:	08006595 	.word	0x08006595
 80065e8:	08006595 	.word	0x08006595
 80065ec:	0800673b 	.word	0x0800673b
 80065f0:	08006595 	.word	0x08006595
 80065f4:	08006643 	.word	0x08006643
 80065f8:	08006595 	.word	0x08006595
 80065fc:	08006595 	.word	0x08006595
 8006600:	080066db 	.word	0x080066db
 8006604:	6833      	ldr	r3, [r6, #0]
 8006606:	1d1a      	adds	r2, r3, #4
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	6032      	str	r2, [r6, #0]
 800660c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006610:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006614:	2301      	movs	r3, #1
 8006616:	e09d      	b.n	8006754 <_printf_i+0x1e8>
 8006618:	6833      	ldr	r3, [r6, #0]
 800661a:	6820      	ldr	r0, [r4, #0]
 800661c:	1d19      	adds	r1, r3, #4
 800661e:	6031      	str	r1, [r6, #0]
 8006620:	0606      	lsls	r6, r0, #24
 8006622:	d501      	bpl.n	8006628 <_printf_i+0xbc>
 8006624:	681d      	ldr	r5, [r3, #0]
 8006626:	e003      	b.n	8006630 <_printf_i+0xc4>
 8006628:	0645      	lsls	r5, r0, #25
 800662a:	d5fb      	bpl.n	8006624 <_printf_i+0xb8>
 800662c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006630:	2d00      	cmp	r5, #0
 8006632:	da03      	bge.n	800663c <_printf_i+0xd0>
 8006634:	232d      	movs	r3, #45	@ 0x2d
 8006636:	426d      	negs	r5, r5
 8006638:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800663c:	4859      	ldr	r0, [pc, #356]	@ (80067a4 <_printf_i+0x238>)
 800663e:	230a      	movs	r3, #10
 8006640:	e011      	b.n	8006666 <_printf_i+0xfa>
 8006642:	6821      	ldr	r1, [r4, #0]
 8006644:	6833      	ldr	r3, [r6, #0]
 8006646:	0608      	lsls	r0, r1, #24
 8006648:	f853 5b04 	ldr.w	r5, [r3], #4
 800664c:	d402      	bmi.n	8006654 <_printf_i+0xe8>
 800664e:	0649      	lsls	r1, r1, #25
 8006650:	bf48      	it	mi
 8006652:	b2ad      	uxthmi	r5, r5
 8006654:	2f6f      	cmp	r7, #111	@ 0x6f
 8006656:	4853      	ldr	r0, [pc, #332]	@ (80067a4 <_printf_i+0x238>)
 8006658:	6033      	str	r3, [r6, #0]
 800665a:	bf14      	ite	ne
 800665c:	230a      	movne	r3, #10
 800665e:	2308      	moveq	r3, #8
 8006660:	2100      	movs	r1, #0
 8006662:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006666:	6866      	ldr	r6, [r4, #4]
 8006668:	60a6      	str	r6, [r4, #8]
 800666a:	2e00      	cmp	r6, #0
 800666c:	bfa2      	ittt	ge
 800666e:	6821      	ldrge	r1, [r4, #0]
 8006670:	f021 0104 	bicge.w	r1, r1, #4
 8006674:	6021      	strge	r1, [r4, #0]
 8006676:	b90d      	cbnz	r5, 800667c <_printf_i+0x110>
 8006678:	2e00      	cmp	r6, #0
 800667a:	d04b      	beq.n	8006714 <_printf_i+0x1a8>
 800667c:	4616      	mov	r6, r2
 800667e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006682:	fb03 5711 	mls	r7, r3, r1, r5
 8006686:	5dc7      	ldrb	r7, [r0, r7]
 8006688:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800668c:	462f      	mov	r7, r5
 800668e:	42bb      	cmp	r3, r7
 8006690:	460d      	mov	r5, r1
 8006692:	d9f4      	bls.n	800667e <_printf_i+0x112>
 8006694:	2b08      	cmp	r3, #8
 8006696:	d10b      	bne.n	80066b0 <_printf_i+0x144>
 8006698:	6823      	ldr	r3, [r4, #0]
 800669a:	07df      	lsls	r7, r3, #31
 800669c:	d508      	bpl.n	80066b0 <_printf_i+0x144>
 800669e:	6923      	ldr	r3, [r4, #16]
 80066a0:	6861      	ldr	r1, [r4, #4]
 80066a2:	4299      	cmp	r1, r3
 80066a4:	bfde      	ittt	le
 80066a6:	2330      	movle	r3, #48	@ 0x30
 80066a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80066ac:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80066b0:	1b92      	subs	r2, r2, r6
 80066b2:	6122      	str	r2, [r4, #16]
 80066b4:	f8cd a000 	str.w	sl, [sp]
 80066b8:	464b      	mov	r3, r9
 80066ba:	aa03      	add	r2, sp, #12
 80066bc:	4621      	mov	r1, r4
 80066be:	4640      	mov	r0, r8
 80066c0:	f7ff fee6 	bl	8006490 <_printf_common>
 80066c4:	3001      	adds	r0, #1
 80066c6:	d14a      	bne.n	800675e <_printf_i+0x1f2>
 80066c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80066cc:	b004      	add	sp, #16
 80066ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066d2:	6823      	ldr	r3, [r4, #0]
 80066d4:	f043 0320 	orr.w	r3, r3, #32
 80066d8:	6023      	str	r3, [r4, #0]
 80066da:	4833      	ldr	r0, [pc, #204]	@ (80067a8 <_printf_i+0x23c>)
 80066dc:	2778      	movs	r7, #120	@ 0x78
 80066de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	6831      	ldr	r1, [r6, #0]
 80066e6:	061f      	lsls	r7, r3, #24
 80066e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80066ec:	d402      	bmi.n	80066f4 <_printf_i+0x188>
 80066ee:	065f      	lsls	r7, r3, #25
 80066f0:	bf48      	it	mi
 80066f2:	b2ad      	uxthmi	r5, r5
 80066f4:	6031      	str	r1, [r6, #0]
 80066f6:	07d9      	lsls	r1, r3, #31
 80066f8:	bf44      	itt	mi
 80066fa:	f043 0320 	orrmi.w	r3, r3, #32
 80066fe:	6023      	strmi	r3, [r4, #0]
 8006700:	b11d      	cbz	r5, 800670a <_printf_i+0x19e>
 8006702:	2310      	movs	r3, #16
 8006704:	e7ac      	b.n	8006660 <_printf_i+0xf4>
 8006706:	4827      	ldr	r0, [pc, #156]	@ (80067a4 <_printf_i+0x238>)
 8006708:	e7e9      	b.n	80066de <_printf_i+0x172>
 800670a:	6823      	ldr	r3, [r4, #0]
 800670c:	f023 0320 	bic.w	r3, r3, #32
 8006710:	6023      	str	r3, [r4, #0]
 8006712:	e7f6      	b.n	8006702 <_printf_i+0x196>
 8006714:	4616      	mov	r6, r2
 8006716:	e7bd      	b.n	8006694 <_printf_i+0x128>
 8006718:	6833      	ldr	r3, [r6, #0]
 800671a:	6825      	ldr	r5, [r4, #0]
 800671c:	6961      	ldr	r1, [r4, #20]
 800671e:	1d18      	adds	r0, r3, #4
 8006720:	6030      	str	r0, [r6, #0]
 8006722:	062e      	lsls	r6, r5, #24
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	d501      	bpl.n	800672c <_printf_i+0x1c0>
 8006728:	6019      	str	r1, [r3, #0]
 800672a:	e002      	b.n	8006732 <_printf_i+0x1c6>
 800672c:	0668      	lsls	r0, r5, #25
 800672e:	d5fb      	bpl.n	8006728 <_printf_i+0x1bc>
 8006730:	8019      	strh	r1, [r3, #0]
 8006732:	2300      	movs	r3, #0
 8006734:	6123      	str	r3, [r4, #16]
 8006736:	4616      	mov	r6, r2
 8006738:	e7bc      	b.n	80066b4 <_printf_i+0x148>
 800673a:	6833      	ldr	r3, [r6, #0]
 800673c:	1d1a      	adds	r2, r3, #4
 800673e:	6032      	str	r2, [r6, #0]
 8006740:	681e      	ldr	r6, [r3, #0]
 8006742:	6862      	ldr	r2, [r4, #4]
 8006744:	2100      	movs	r1, #0
 8006746:	4630      	mov	r0, r6
 8006748:	f7f9 fd72 	bl	8000230 <memchr>
 800674c:	b108      	cbz	r0, 8006752 <_printf_i+0x1e6>
 800674e:	1b80      	subs	r0, r0, r6
 8006750:	6060      	str	r0, [r4, #4]
 8006752:	6863      	ldr	r3, [r4, #4]
 8006754:	6123      	str	r3, [r4, #16]
 8006756:	2300      	movs	r3, #0
 8006758:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800675c:	e7aa      	b.n	80066b4 <_printf_i+0x148>
 800675e:	6923      	ldr	r3, [r4, #16]
 8006760:	4632      	mov	r2, r6
 8006762:	4649      	mov	r1, r9
 8006764:	4640      	mov	r0, r8
 8006766:	47d0      	blx	sl
 8006768:	3001      	adds	r0, #1
 800676a:	d0ad      	beq.n	80066c8 <_printf_i+0x15c>
 800676c:	6823      	ldr	r3, [r4, #0]
 800676e:	079b      	lsls	r3, r3, #30
 8006770:	d413      	bmi.n	800679a <_printf_i+0x22e>
 8006772:	68e0      	ldr	r0, [r4, #12]
 8006774:	9b03      	ldr	r3, [sp, #12]
 8006776:	4298      	cmp	r0, r3
 8006778:	bfb8      	it	lt
 800677a:	4618      	movlt	r0, r3
 800677c:	e7a6      	b.n	80066cc <_printf_i+0x160>
 800677e:	2301      	movs	r3, #1
 8006780:	4632      	mov	r2, r6
 8006782:	4649      	mov	r1, r9
 8006784:	4640      	mov	r0, r8
 8006786:	47d0      	blx	sl
 8006788:	3001      	adds	r0, #1
 800678a:	d09d      	beq.n	80066c8 <_printf_i+0x15c>
 800678c:	3501      	adds	r5, #1
 800678e:	68e3      	ldr	r3, [r4, #12]
 8006790:	9903      	ldr	r1, [sp, #12]
 8006792:	1a5b      	subs	r3, r3, r1
 8006794:	42ab      	cmp	r3, r5
 8006796:	dcf2      	bgt.n	800677e <_printf_i+0x212>
 8006798:	e7eb      	b.n	8006772 <_printf_i+0x206>
 800679a:	2500      	movs	r5, #0
 800679c:	f104 0619 	add.w	r6, r4, #25
 80067a0:	e7f5      	b.n	800678e <_printf_i+0x222>
 80067a2:	bf00      	nop
 80067a4:	0800a98e 	.word	0x0800a98e
 80067a8:	0800a99f 	.word	0x0800a99f

080067ac <_scanf_float>:
 80067ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b0:	b087      	sub	sp, #28
 80067b2:	4617      	mov	r7, r2
 80067b4:	9303      	str	r3, [sp, #12]
 80067b6:	688b      	ldr	r3, [r1, #8]
 80067b8:	1e5a      	subs	r2, r3, #1
 80067ba:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80067be:	bf81      	itttt	hi
 80067c0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80067c4:	eb03 0b05 	addhi.w	fp, r3, r5
 80067c8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80067cc:	608b      	strhi	r3, [r1, #8]
 80067ce:	680b      	ldr	r3, [r1, #0]
 80067d0:	460a      	mov	r2, r1
 80067d2:	f04f 0500 	mov.w	r5, #0
 80067d6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80067da:	f842 3b1c 	str.w	r3, [r2], #28
 80067de:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80067e2:	4680      	mov	r8, r0
 80067e4:	460c      	mov	r4, r1
 80067e6:	bf98      	it	ls
 80067e8:	f04f 0b00 	movls.w	fp, #0
 80067ec:	9201      	str	r2, [sp, #4]
 80067ee:	4616      	mov	r6, r2
 80067f0:	46aa      	mov	sl, r5
 80067f2:	46a9      	mov	r9, r5
 80067f4:	9502      	str	r5, [sp, #8]
 80067f6:	68a2      	ldr	r2, [r4, #8]
 80067f8:	b152      	cbz	r2, 8006810 <_scanf_float+0x64>
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	2b4e      	cmp	r3, #78	@ 0x4e
 8006800:	d864      	bhi.n	80068cc <_scanf_float+0x120>
 8006802:	2b40      	cmp	r3, #64	@ 0x40
 8006804:	d83c      	bhi.n	8006880 <_scanf_float+0xd4>
 8006806:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800680a:	b2c8      	uxtb	r0, r1
 800680c:	280e      	cmp	r0, #14
 800680e:	d93a      	bls.n	8006886 <_scanf_float+0xda>
 8006810:	f1b9 0f00 	cmp.w	r9, #0
 8006814:	d003      	beq.n	800681e <_scanf_float+0x72>
 8006816:	6823      	ldr	r3, [r4, #0]
 8006818:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800681c:	6023      	str	r3, [r4, #0]
 800681e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006822:	f1ba 0f01 	cmp.w	sl, #1
 8006826:	f200 8117 	bhi.w	8006a58 <_scanf_float+0x2ac>
 800682a:	9b01      	ldr	r3, [sp, #4]
 800682c:	429e      	cmp	r6, r3
 800682e:	f200 8108 	bhi.w	8006a42 <_scanf_float+0x296>
 8006832:	2001      	movs	r0, #1
 8006834:	b007      	add	sp, #28
 8006836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800683a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800683e:	2a0d      	cmp	r2, #13
 8006840:	d8e6      	bhi.n	8006810 <_scanf_float+0x64>
 8006842:	a101      	add	r1, pc, #4	@ (adr r1, 8006848 <_scanf_float+0x9c>)
 8006844:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006848:	0800698f 	.word	0x0800698f
 800684c:	08006811 	.word	0x08006811
 8006850:	08006811 	.word	0x08006811
 8006854:	08006811 	.word	0x08006811
 8006858:	080069ef 	.word	0x080069ef
 800685c:	080069c7 	.word	0x080069c7
 8006860:	08006811 	.word	0x08006811
 8006864:	08006811 	.word	0x08006811
 8006868:	0800699d 	.word	0x0800699d
 800686c:	08006811 	.word	0x08006811
 8006870:	08006811 	.word	0x08006811
 8006874:	08006811 	.word	0x08006811
 8006878:	08006811 	.word	0x08006811
 800687c:	08006955 	.word	0x08006955
 8006880:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006884:	e7db      	b.n	800683e <_scanf_float+0x92>
 8006886:	290e      	cmp	r1, #14
 8006888:	d8c2      	bhi.n	8006810 <_scanf_float+0x64>
 800688a:	a001      	add	r0, pc, #4	@ (adr r0, 8006890 <_scanf_float+0xe4>)
 800688c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006890:	08006945 	.word	0x08006945
 8006894:	08006811 	.word	0x08006811
 8006898:	08006945 	.word	0x08006945
 800689c:	080069db 	.word	0x080069db
 80068a0:	08006811 	.word	0x08006811
 80068a4:	080068ed 	.word	0x080068ed
 80068a8:	0800692b 	.word	0x0800692b
 80068ac:	0800692b 	.word	0x0800692b
 80068b0:	0800692b 	.word	0x0800692b
 80068b4:	0800692b 	.word	0x0800692b
 80068b8:	0800692b 	.word	0x0800692b
 80068bc:	0800692b 	.word	0x0800692b
 80068c0:	0800692b 	.word	0x0800692b
 80068c4:	0800692b 	.word	0x0800692b
 80068c8:	0800692b 	.word	0x0800692b
 80068cc:	2b6e      	cmp	r3, #110	@ 0x6e
 80068ce:	d809      	bhi.n	80068e4 <_scanf_float+0x138>
 80068d0:	2b60      	cmp	r3, #96	@ 0x60
 80068d2:	d8b2      	bhi.n	800683a <_scanf_float+0x8e>
 80068d4:	2b54      	cmp	r3, #84	@ 0x54
 80068d6:	d07b      	beq.n	80069d0 <_scanf_float+0x224>
 80068d8:	2b59      	cmp	r3, #89	@ 0x59
 80068da:	d199      	bne.n	8006810 <_scanf_float+0x64>
 80068dc:	2d07      	cmp	r5, #7
 80068de:	d197      	bne.n	8006810 <_scanf_float+0x64>
 80068e0:	2508      	movs	r5, #8
 80068e2:	e02c      	b.n	800693e <_scanf_float+0x192>
 80068e4:	2b74      	cmp	r3, #116	@ 0x74
 80068e6:	d073      	beq.n	80069d0 <_scanf_float+0x224>
 80068e8:	2b79      	cmp	r3, #121	@ 0x79
 80068ea:	e7f6      	b.n	80068da <_scanf_float+0x12e>
 80068ec:	6821      	ldr	r1, [r4, #0]
 80068ee:	05c8      	lsls	r0, r1, #23
 80068f0:	d51b      	bpl.n	800692a <_scanf_float+0x17e>
 80068f2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80068f6:	6021      	str	r1, [r4, #0]
 80068f8:	f109 0901 	add.w	r9, r9, #1
 80068fc:	f1bb 0f00 	cmp.w	fp, #0
 8006900:	d003      	beq.n	800690a <_scanf_float+0x15e>
 8006902:	3201      	adds	r2, #1
 8006904:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8006908:	60a2      	str	r2, [r4, #8]
 800690a:	68a3      	ldr	r3, [r4, #8]
 800690c:	3b01      	subs	r3, #1
 800690e:	60a3      	str	r3, [r4, #8]
 8006910:	6923      	ldr	r3, [r4, #16]
 8006912:	3301      	adds	r3, #1
 8006914:	6123      	str	r3, [r4, #16]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	3b01      	subs	r3, #1
 800691a:	2b00      	cmp	r3, #0
 800691c:	607b      	str	r3, [r7, #4]
 800691e:	f340 8087 	ble.w	8006a30 <_scanf_float+0x284>
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	3301      	adds	r3, #1
 8006926:	603b      	str	r3, [r7, #0]
 8006928:	e765      	b.n	80067f6 <_scanf_float+0x4a>
 800692a:	eb1a 0105 	adds.w	r1, sl, r5
 800692e:	f47f af6f 	bne.w	8006810 <_scanf_float+0x64>
 8006932:	6822      	ldr	r2, [r4, #0]
 8006934:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006938:	6022      	str	r2, [r4, #0]
 800693a:	460d      	mov	r5, r1
 800693c:	468a      	mov	sl, r1
 800693e:	f806 3b01 	strb.w	r3, [r6], #1
 8006942:	e7e2      	b.n	800690a <_scanf_float+0x15e>
 8006944:	6822      	ldr	r2, [r4, #0]
 8006946:	0610      	lsls	r0, r2, #24
 8006948:	f57f af62 	bpl.w	8006810 <_scanf_float+0x64>
 800694c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006950:	6022      	str	r2, [r4, #0]
 8006952:	e7f4      	b.n	800693e <_scanf_float+0x192>
 8006954:	f1ba 0f00 	cmp.w	sl, #0
 8006958:	d10e      	bne.n	8006978 <_scanf_float+0x1cc>
 800695a:	f1b9 0f00 	cmp.w	r9, #0
 800695e:	d10e      	bne.n	800697e <_scanf_float+0x1d2>
 8006960:	6822      	ldr	r2, [r4, #0]
 8006962:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006966:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800696a:	d108      	bne.n	800697e <_scanf_float+0x1d2>
 800696c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006970:	6022      	str	r2, [r4, #0]
 8006972:	f04f 0a01 	mov.w	sl, #1
 8006976:	e7e2      	b.n	800693e <_scanf_float+0x192>
 8006978:	f1ba 0f02 	cmp.w	sl, #2
 800697c:	d055      	beq.n	8006a2a <_scanf_float+0x27e>
 800697e:	2d01      	cmp	r5, #1
 8006980:	d002      	beq.n	8006988 <_scanf_float+0x1dc>
 8006982:	2d04      	cmp	r5, #4
 8006984:	f47f af44 	bne.w	8006810 <_scanf_float+0x64>
 8006988:	3501      	adds	r5, #1
 800698a:	b2ed      	uxtb	r5, r5
 800698c:	e7d7      	b.n	800693e <_scanf_float+0x192>
 800698e:	f1ba 0f01 	cmp.w	sl, #1
 8006992:	f47f af3d 	bne.w	8006810 <_scanf_float+0x64>
 8006996:	f04f 0a02 	mov.w	sl, #2
 800699a:	e7d0      	b.n	800693e <_scanf_float+0x192>
 800699c:	b97d      	cbnz	r5, 80069be <_scanf_float+0x212>
 800699e:	f1b9 0f00 	cmp.w	r9, #0
 80069a2:	f47f af38 	bne.w	8006816 <_scanf_float+0x6a>
 80069a6:	6822      	ldr	r2, [r4, #0]
 80069a8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80069ac:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80069b0:	f040 8108 	bne.w	8006bc4 <_scanf_float+0x418>
 80069b4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80069b8:	6022      	str	r2, [r4, #0]
 80069ba:	2501      	movs	r5, #1
 80069bc:	e7bf      	b.n	800693e <_scanf_float+0x192>
 80069be:	2d03      	cmp	r5, #3
 80069c0:	d0e2      	beq.n	8006988 <_scanf_float+0x1dc>
 80069c2:	2d05      	cmp	r5, #5
 80069c4:	e7de      	b.n	8006984 <_scanf_float+0x1d8>
 80069c6:	2d02      	cmp	r5, #2
 80069c8:	f47f af22 	bne.w	8006810 <_scanf_float+0x64>
 80069cc:	2503      	movs	r5, #3
 80069ce:	e7b6      	b.n	800693e <_scanf_float+0x192>
 80069d0:	2d06      	cmp	r5, #6
 80069d2:	f47f af1d 	bne.w	8006810 <_scanf_float+0x64>
 80069d6:	2507      	movs	r5, #7
 80069d8:	e7b1      	b.n	800693e <_scanf_float+0x192>
 80069da:	6822      	ldr	r2, [r4, #0]
 80069dc:	0591      	lsls	r1, r2, #22
 80069de:	f57f af17 	bpl.w	8006810 <_scanf_float+0x64>
 80069e2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80069e6:	6022      	str	r2, [r4, #0]
 80069e8:	f8cd 9008 	str.w	r9, [sp, #8]
 80069ec:	e7a7      	b.n	800693e <_scanf_float+0x192>
 80069ee:	6822      	ldr	r2, [r4, #0]
 80069f0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80069f4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80069f8:	d006      	beq.n	8006a08 <_scanf_float+0x25c>
 80069fa:	0550      	lsls	r0, r2, #21
 80069fc:	f57f af08 	bpl.w	8006810 <_scanf_float+0x64>
 8006a00:	f1b9 0f00 	cmp.w	r9, #0
 8006a04:	f000 80de 	beq.w	8006bc4 <_scanf_float+0x418>
 8006a08:	0591      	lsls	r1, r2, #22
 8006a0a:	bf58      	it	pl
 8006a0c:	9902      	ldrpl	r1, [sp, #8]
 8006a0e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006a12:	bf58      	it	pl
 8006a14:	eba9 0101 	subpl.w	r1, r9, r1
 8006a18:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006a1c:	bf58      	it	pl
 8006a1e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006a22:	6022      	str	r2, [r4, #0]
 8006a24:	f04f 0900 	mov.w	r9, #0
 8006a28:	e789      	b.n	800693e <_scanf_float+0x192>
 8006a2a:	f04f 0a03 	mov.w	sl, #3
 8006a2e:	e786      	b.n	800693e <_scanf_float+0x192>
 8006a30:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006a34:	4639      	mov	r1, r7
 8006a36:	4640      	mov	r0, r8
 8006a38:	4798      	blx	r3
 8006a3a:	2800      	cmp	r0, #0
 8006a3c:	f43f aedb 	beq.w	80067f6 <_scanf_float+0x4a>
 8006a40:	e6e6      	b.n	8006810 <_scanf_float+0x64>
 8006a42:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a4a:	463a      	mov	r2, r7
 8006a4c:	4640      	mov	r0, r8
 8006a4e:	4798      	blx	r3
 8006a50:	6923      	ldr	r3, [r4, #16]
 8006a52:	3b01      	subs	r3, #1
 8006a54:	6123      	str	r3, [r4, #16]
 8006a56:	e6e8      	b.n	800682a <_scanf_float+0x7e>
 8006a58:	1e6b      	subs	r3, r5, #1
 8006a5a:	2b06      	cmp	r3, #6
 8006a5c:	d824      	bhi.n	8006aa8 <_scanf_float+0x2fc>
 8006a5e:	2d02      	cmp	r5, #2
 8006a60:	d836      	bhi.n	8006ad0 <_scanf_float+0x324>
 8006a62:	9b01      	ldr	r3, [sp, #4]
 8006a64:	429e      	cmp	r6, r3
 8006a66:	f67f aee4 	bls.w	8006832 <_scanf_float+0x86>
 8006a6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a72:	463a      	mov	r2, r7
 8006a74:	4640      	mov	r0, r8
 8006a76:	4798      	blx	r3
 8006a78:	6923      	ldr	r3, [r4, #16]
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	6123      	str	r3, [r4, #16]
 8006a7e:	e7f0      	b.n	8006a62 <_scanf_float+0x2b6>
 8006a80:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a84:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006a88:	463a      	mov	r2, r7
 8006a8a:	4640      	mov	r0, r8
 8006a8c:	4798      	blx	r3
 8006a8e:	6923      	ldr	r3, [r4, #16]
 8006a90:	3b01      	subs	r3, #1
 8006a92:	6123      	str	r3, [r4, #16]
 8006a94:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006a98:	fa5f fa8a 	uxtb.w	sl, sl
 8006a9c:	f1ba 0f02 	cmp.w	sl, #2
 8006aa0:	d1ee      	bne.n	8006a80 <_scanf_float+0x2d4>
 8006aa2:	3d03      	subs	r5, #3
 8006aa4:	b2ed      	uxtb	r5, r5
 8006aa6:	1b76      	subs	r6, r6, r5
 8006aa8:	6823      	ldr	r3, [r4, #0]
 8006aaa:	05da      	lsls	r2, r3, #23
 8006aac:	d530      	bpl.n	8006b10 <_scanf_float+0x364>
 8006aae:	055b      	lsls	r3, r3, #21
 8006ab0:	d511      	bpl.n	8006ad6 <_scanf_float+0x32a>
 8006ab2:	9b01      	ldr	r3, [sp, #4]
 8006ab4:	429e      	cmp	r6, r3
 8006ab6:	f67f aebc 	bls.w	8006832 <_scanf_float+0x86>
 8006aba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006abe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ac2:	463a      	mov	r2, r7
 8006ac4:	4640      	mov	r0, r8
 8006ac6:	4798      	blx	r3
 8006ac8:	6923      	ldr	r3, [r4, #16]
 8006aca:	3b01      	subs	r3, #1
 8006acc:	6123      	str	r3, [r4, #16]
 8006ace:	e7f0      	b.n	8006ab2 <_scanf_float+0x306>
 8006ad0:	46aa      	mov	sl, r5
 8006ad2:	46b3      	mov	fp, r6
 8006ad4:	e7de      	b.n	8006a94 <_scanf_float+0x2e8>
 8006ad6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006ada:	6923      	ldr	r3, [r4, #16]
 8006adc:	2965      	cmp	r1, #101	@ 0x65
 8006ade:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006ae2:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8006ae6:	6123      	str	r3, [r4, #16]
 8006ae8:	d00c      	beq.n	8006b04 <_scanf_float+0x358>
 8006aea:	2945      	cmp	r1, #69	@ 0x45
 8006aec:	d00a      	beq.n	8006b04 <_scanf_float+0x358>
 8006aee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006af2:	463a      	mov	r2, r7
 8006af4:	4640      	mov	r0, r8
 8006af6:	4798      	blx	r3
 8006af8:	6923      	ldr	r3, [r4, #16]
 8006afa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006afe:	3b01      	subs	r3, #1
 8006b00:	1eb5      	subs	r5, r6, #2
 8006b02:	6123      	str	r3, [r4, #16]
 8006b04:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b08:	463a      	mov	r2, r7
 8006b0a:	4640      	mov	r0, r8
 8006b0c:	4798      	blx	r3
 8006b0e:	462e      	mov	r6, r5
 8006b10:	6822      	ldr	r2, [r4, #0]
 8006b12:	f012 0210 	ands.w	r2, r2, #16
 8006b16:	d001      	beq.n	8006b1c <_scanf_float+0x370>
 8006b18:	2000      	movs	r0, #0
 8006b1a:	e68b      	b.n	8006834 <_scanf_float+0x88>
 8006b1c:	7032      	strb	r2, [r6, #0]
 8006b1e:	6823      	ldr	r3, [r4, #0]
 8006b20:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006b24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b28:	d11c      	bne.n	8006b64 <_scanf_float+0x3b8>
 8006b2a:	9b02      	ldr	r3, [sp, #8]
 8006b2c:	454b      	cmp	r3, r9
 8006b2e:	eba3 0209 	sub.w	r2, r3, r9
 8006b32:	d123      	bne.n	8006b7c <_scanf_float+0x3d0>
 8006b34:	9901      	ldr	r1, [sp, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	4640      	mov	r0, r8
 8006b3a:	f002 fd0d 	bl	8009558 <_strtod_r>
 8006b3e:	9b03      	ldr	r3, [sp, #12]
 8006b40:	6821      	ldr	r1, [r4, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f011 0f02 	tst.w	r1, #2
 8006b48:	ec57 6b10 	vmov	r6, r7, d0
 8006b4c:	f103 0204 	add.w	r2, r3, #4
 8006b50:	d01f      	beq.n	8006b92 <_scanf_float+0x3e6>
 8006b52:	9903      	ldr	r1, [sp, #12]
 8006b54:	600a      	str	r2, [r1, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	e9c3 6700 	strd	r6, r7, [r3]
 8006b5c:	68e3      	ldr	r3, [r4, #12]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	60e3      	str	r3, [r4, #12]
 8006b62:	e7d9      	b.n	8006b18 <_scanf_float+0x36c>
 8006b64:	9b04      	ldr	r3, [sp, #16]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d0e4      	beq.n	8006b34 <_scanf_float+0x388>
 8006b6a:	9905      	ldr	r1, [sp, #20]
 8006b6c:	230a      	movs	r3, #10
 8006b6e:	3101      	adds	r1, #1
 8006b70:	4640      	mov	r0, r8
 8006b72:	f002 fd71 	bl	8009658 <_strtol_r>
 8006b76:	9b04      	ldr	r3, [sp, #16]
 8006b78:	9e05      	ldr	r6, [sp, #20]
 8006b7a:	1ac2      	subs	r2, r0, r3
 8006b7c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006b80:	429e      	cmp	r6, r3
 8006b82:	bf28      	it	cs
 8006b84:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006b88:	4910      	ldr	r1, [pc, #64]	@ (8006bcc <_scanf_float+0x420>)
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	f000 f954 	bl	8006e38 <siprintf>
 8006b90:	e7d0      	b.n	8006b34 <_scanf_float+0x388>
 8006b92:	f011 0f04 	tst.w	r1, #4
 8006b96:	9903      	ldr	r1, [sp, #12]
 8006b98:	600a      	str	r2, [r1, #0]
 8006b9a:	d1dc      	bne.n	8006b56 <_scanf_float+0x3aa>
 8006b9c:	681d      	ldr	r5, [r3, #0]
 8006b9e:	4632      	mov	r2, r6
 8006ba0:	463b      	mov	r3, r7
 8006ba2:	4630      	mov	r0, r6
 8006ba4:	4639      	mov	r1, r7
 8006ba6:	f7f9 fff1 	bl	8000b8c <__aeabi_dcmpun>
 8006baa:	b128      	cbz	r0, 8006bb8 <_scanf_float+0x40c>
 8006bac:	4808      	ldr	r0, [pc, #32]	@ (8006bd0 <_scanf_float+0x424>)
 8006bae:	f000 facd 	bl	800714c <nanf>
 8006bb2:	ed85 0a00 	vstr	s0, [r5]
 8006bb6:	e7d1      	b.n	8006b5c <_scanf_float+0x3b0>
 8006bb8:	4630      	mov	r0, r6
 8006bba:	4639      	mov	r1, r7
 8006bbc:	f7fa f844 	bl	8000c48 <__aeabi_d2f>
 8006bc0:	6028      	str	r0, [r5, #0]
 8006bc2:	e7cb      	b.n	8006b5c <_scanf_float+0x3b0>
 8006bc4:	f04f 0900 	mov.w	r9, #0
 8006bc8:	e629      	b.n	800681e <_scanf_float+0x72>
 8006bca:	bf00      	nop
 8006bcc:	0800a9b0 	.word	0x0800a9b0
 8006bd0:	0800ad45 	.word	0x0800ad45

08006bd4 <std>:
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	b510      	push	{r4, lr}
 8006bd8:	4604      	mov	r4, r0
 8006bda:	e9c0 3300 	strd	r3, r3, [r0]
 8006bde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006be2:	6083      	str	r3, [r0, #8]
 8006be4:	8181      	strh	r1, [r0, #12]
 8006be6:	6643      	str	r3, [r0, #100]	@ 0x64
 8006be8:	81c2      	strh	r2, [r0, #14]
 8006bea:	6183      	str	r3, [r0, #24]
 8006bec:	4619      	mov	r1, r3
 8006bee:	2208      	movs	r2, #8
 8006bf0:	305c      	adds	r0, #92	@ 0x5c
 8006bf2:	f000 fa19 	bl	8007028 <memset>
 8006bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8006c2c <std+0x58>)
 8006bf8:	6263      	str	r3, [r4, #36]	@ 0x24
 8006bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8006c30 <std+0x5c>)
 8006bfc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8006c34 <std+0x60>)
 8006c00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006c02:	4b0d      	ldr	r3, [pc, #52]	@ (8006c38 <std+0x64>)
 8006c04:	6323      	str	r3, [r4, #48]	@ 0x30
 8006c06:	4b0d      	ldr	r3, [pc, #52]	@ (8006c3c <std+0x68>)
 8006c08:	6224      	str	r4, [r4, #32]
 8006c0a:	429c      	cmp	r4, r3
 8006c0c:	d006      	beq.n	8006c1c <std+0x48>
 8006c0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006c12:	4294      	cmp	r4, r2
 8006c14:	d002      	beq.n	8006c1c <std+0x48>
 8006c16:	33d0      	adds	r3, #208	@ 0xd0
 8006c18:	429c      	cmp	r4, r3
 8006c1a:	d105      	bne.n	8006c28 <std+0x54>
 8006c1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c24:	f000 ba8e 	b.w	8007144 <__retarget_lock_init_recursive>
 8006c28:	bd10      	pop	{r4, pc}
 8006c2a:	bf00      	nop
 8006c2c:	08006e79 	.word	0x08006e79
 8006c30:	08006e9b 	.word	0x08006e9b
 8006c34:	08006ed3 	.word	0x08006ed3
 8006c38:	08006ef7 	.word	0x08006ef7
 8006c3c:	20000360 	.word	0x20000360

08006c40 <stdio_exit_handler>:
 8006c40:	4a02      	ldr	r2, [pc, #8]	@ (8006c4c <stdio_exit_handler+0xc>)
 8006c42:	4903      	ldr	r1, [pc, #12]	@ (8006c50 <stdio_exit_handler+0x10>)
 8006c44:	4803      	ldr	r0, [pc, #12]	@ (8006c54 <stdio_exit_handler+0x14>)
 8006c46:	f000 b869 	b.w	8006d1c <_fwalk_sglue>
 8006c4a:	bf00      	nop
 8006c4c:	20000010 	.word	0x20000010
 8006c50:	08009c99 	.word	0x08009c99
 8006c54:	20000020 	.word	0x20000020

08006c58 <cleanup_stdio>:
 8006c58:	6841      	ldr	r1, [r0, #4]
 8006c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8006c8c <cleanup_stdio+0x34>)
 8006c5c:	4299      	cmp	r1, r3
 8006c5e:	b510      	push	{r4, lr}
 8006c60:	4604      	mov	r4, r0
 8006c62:	d001      	beq.n	8006c68 <cleanup_stdio+0x10>
 8006c64:	f003 f818 	bl	8009c98 <_fflush_r>
 8006c68:	68a1      	ldr	r1, [r4, #8]
 8006c6a:	4b09      	ldr	r3, [pc, #36]	@ (8006c90 <cleanup_stdio+0x38>)
 8006c6c:	4299      	cmp	r1, r3
 8006c6e:	d002      	beq.n	8006c76 <cleanup_stdio+0x1e>
 8006c70:	4620      	mov	r0, r4
 8006c72:	f003 f811 	bl	8009c98 <_fflush_r>
 8006c76:	68e1      	ldr	r1, [r4, #12]
 8006c78:	4b06      	ldr	r3, [pc, #24]	@ (8006c94 <cleanup_stdio+0x3c>)
 8006c7a:	4299      	cmp	r1, r3
 8006c7c:	d004      	beq.n	8006c88 <cleanup_stdio+0x30>
 8006c7e:	4620      	mov	r0, r4
 8006c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c84:	f003 b808 	b.w	8009c98 <_fflush_r>
 8006c88:	bd10      	pop	{r4, pc}
 8006c8a:	bf00      	nop
 8006c8c:	20000360 	.word	0x20000360
 8006c90:	200003c8 	.word	0x200003c8
 8006c94:	20000430 	.word	0x20000430

08006c98 <global_stdio_init.part.0>:
 8006c98:	b510      	push	{r4, lr}
 8006c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8006cc8 <global_stdio_init.part.0+0x30>)
 8006c9c:	4c0b      	ldr	r4, [pc, #44]	@ (8006ccc <global_stdio_init.part.0+0x34>)
 8006c9e:	4a0c      	ldr	r2, [pc, #48]	@ (8006cd0 <global_stdio_init.part.0+0x38>)
 8006ca0:	601a      	str	r2, [r3, #0]
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	2104      	movs	r1, #4
 8006ca8:	f7ff ff94 	bl	8006bd4 <std>
 8006cac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	2109      	movs	r1, #9
 8006cb4:	f7ff ff8e 	bl	8006bd4 <std>
 8006cb8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006cbc:	2202      	movs	r2, #2
 8006cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cc2:	2112      	movs	r1, #18
 8006cc4:	f7ff bf86 	b.w	8006bd4 <std>
 8006cc8:	20000498 	.word	0x20000498
 8006ccc:	20000360 	.word	0x20000360
 8006cd0:	08006c41 	.word	0x08006c41

08006cd4 <__sfp_lock_acquire>:
 8006cd4:	4801      	ldr	r0, [pc, #4]	@ (8006cdc <__sfp_lock_acquire+0x8>)
 8006cd6:	f000 ba36 	b.w	8007146 <__retarget_lock_acquire_recursive>
 8006cda:	bf00      	nop
 8006cdc:	200004a1 	.word	0x200004a1

08006ce0 <__sfp_lock_release>:
 8006ce0:	4801      	ldr	r0, [pc, #4]	@ (8006ce8 <__sfp_lock_release+0x8>)
 8006ce2:	f000 ba31 	b.w	8007148 <__retarget_lock_release_recursive>
 8006ce6:	bf00      	nop
 8006ce8:	200004a1 	.word	0x200004a1

08006cec <__sinit>:
 8006cec:	b510      	push	{r4, lr}
 8006cee:	4604      	mov	r4, r0
 8006cf0:	f7ff fff0 	bl	8006cd4 <__sfp_lock_acquire>
 8006cf4:	6a23      	ldr	r3, [r4, #32]
 8006cf6:	b11b      	cbz	r3, 8006d00 <__sinit+0x14>
 8006cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cfc:	f7ff bff0 	b.w	8006ce0 <__sfp_lock_release>
 8006d00:	4b04      	ldr	r3, [pc, #16]	@ (8006d14 <__sinit+0x28>)
 8006d02:	6223      	str	r3, [r4, #32]
 8006d04:	4b04      	ldr	r3, [pc, #16]	@ (8006d18 <__sinit+0x2c>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1f5      	bne.n	8006cf8 <__sinit+0xc>
 8006d0c:	f7ff ffc4 	bl	8006c98 <global_stdio_init.part.0>
 8006d10:	e7f2      	b.n	8006cf8 <__sinit+0xc>
 8006d12:	bf00      	nop
 8006d14:	08006c59 	.word	0x08006c59
 8006d18:	20000498 	.word	0x20000498

08006d1c <_fwalk_sglue>:
 8006d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d20:	4607      	mov	r7, r0
 8006d22:	4688      	mov	r8, r1
 8006d24:	4614      	mov	r4, r2
 8006d26:	2600      	movs	r6, #0
 8006d28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d2c:	f1b9 0901 	subs.w	r9, r9, #1
 8006d30:	d505      	bpl.n	8006d3e <_fwalk_sglue+0x22>
 8006d32:	6824      	ldr	r4, [r4, #0]
 8006d34:	2c00      	cmp	r4, #0
 8006d36:	d1f7      	bne.n	8006d28 <_fwalk_sglue+0xc>
 8006d38:	4630      	mov	r0, r6
 8006d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d3e:	89ab      	ldrh	r3, [r5, #12]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d907      	bls.n	8006d54 <_fwalk_sglue+0x38>
 8006d44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	d003      	beq.n	8006d54 <_fwalk_sglue+0x38>
 8006d4c:	4629      	mov	r1, r5
 8006d4e:	4638      	mov	r0, r7
 8006d50:	47c0      	blx	r8
 8006d52:	4306      	orrs	r6, r0
 8006d54:	3568      	adds	r5, #104	@ 0x68
 8006d56:	e7e9      	b.n	8006d2c <_fwalk_sglue+0x10>

08006d58 <iprintf>:
 8006d58:	b40f      	push	{r0, r1, r2, r3}
 8006d5a:	b507      	push	{r0, r1, r2, lr}
 8006d5c:	4906      	ldr	r1, [pc, #24]	@ (8006d78 <iprintf+0x20>)
 8006d5e:	ab04      	add	r3, sp, #16
 8006d60:	6808      	ldr	r0, [r1, #0]
 8006d62:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d66:	6881      	ldr	r1, [r0, #8]
 8006d68:	9301      	str	r3, [sp, #4]
 8006d6a:	f002 fdf9 	bl	8009960 <_vfiprintf_r>
 8006d6e:	b003      	add	sp, #12
 8006d70:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d74:	b004      	add	sp, #16
 8006d76:	4770      	bx	lr
 8006d78:	2000001c 	.word	0x2000001c

08006d7c <_puts_r>:
 8006d7c:	6a03      	ldr	r3, [r0, #32]
 8006d7e:	b570      	push	{r4, r5, r6, lr}
 8006d80:	6884      	ldr	r4, [r0, #8]
 8006d82:	4605      	mov	r5, r0
 8006d84:	460e      	mov	r6, r1
 8006d86:	b90b      	cbnz	r3, 8006d8c <_puts_r+0x10>
 8006d88:	f7ff ffb0 	bl	8006cec <__sinit>
 8006d8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d8e:	07db      	lsls	r3, r3, #31
 8006d90:	d405      	bmi.n	8006d9e <_puts_r+0x22>
 8006d92:	89a3      	ldrh	r3, [r4, #12]
 8006d94:	0598      	lsls	r0, r3, #22
 8006d96:	d402      	bmi.n	8006d9e <_puts_r+0x22>
 8006d98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d9a:	f000 f9d4 	bl	8007146 <__retarget_lock_acquire_recursive>
 8006d9e:	89a3      	ldrh	r3, [r4, #12]
 8006da0:	0719      	lsls	r1, r3, #28
 8006da2:	d502      	bpl.n	8006daa <_puts_r+0x2e>
 8006da4:	6923      	ldr	r3, [r4, #16]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d135      	bne.n	8006e16 <_puts_r+0x9a>
 8006daa:	4621      	mov	r1, r4
 8006dac:	4628      	mov	r0, r5
 8006dae:	f000 f8e5 	bl	8006f7c <__swsetup_r>
 8006db2:	b380      	cbz	r0, 8006e16 <_puts_r+0x9a>
 8006db4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006db8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006dba:	07da      	lsls	r2, r3, #31
 8006dbc:	d405      	bmi.n	8006dca <_puts_r+0x4e>
 8006dbe:	89a3      	ldrh	r3, [r4, #12]
 8006dc0:	059b      	lsls	r3, r3, #22
 8006dc2:	d402      	bmi.n	8006dca <_puts_r+0x4e>
 8006dc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006dc6:	f000 f9bf 	bl	8007148 <__retarget_lock_release_recursive>
 8006dca:	4628      	mov	r0, r5
 8006dcc:	bd70      	pop	{r4, r5, r6, pc}
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	da04      	bge.n	8006ddc <_puts_r+0x60>
 8006dd2:	69a2      	ldr	r2, [r4, #24]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	dc17      	bgt.n	8006e08 <_puts_r+0x8c>
 8006dd8:	290a      	cmp	r1, #10
 8006dda:	d015      	beq.n	8006e08 <_puts_r+0x8c>
 8006ddc:	6823      	ldr	r3, [r4, #0]
 8006dde:	1c5a      	adds	r2, r3, #1
 8006de0:	6022      	str	r2, [r4, #0]
 8006de2:	7019      	strb	r1, [r3, #0]
 8006de4:	68a3      	ldr	r3, [r4, #8]
 8006de6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006dea:	3b01      	subs	r3, #1
 8006dec:	60a3      	str	r3, [r4, #8]
 8006dee:	2900      	cmp	r1, #0
 8006df0:	d1ed      	bne.n	8006dce <_puts_r+0x52>
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	da11      	bge.n	8006e1a <_puts_r+0x9e>
 8006df6:	4622      	mov	r2, r4
 8006df8:	210a      	movs	r1, #10
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	f000 f87f 	bl	8006efe <__swbuf_r>
 8006e00:	3001      	adds	r0, #1
 8006e02:	d0d7      	beq.n	8006db4 <_puts_r+0x38>
 8006e04:	250a      	movs	r5, #10
 8006e06:	e7d7      	b.n	8006db8 <_puts_r+0x3c>
 8006e08:	4622      	mov	r2, r4
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	f000 f877 	bl	8006efe <__swbuf_r>
 8006e10:	3001      	adds	r0, #1
 8006e12:	d1e7      	bne.n	8006de4 <_puts_r+0x68>
 8006e14:	e7ce      	b.n	8006db4 <_puts_r+0x38>
 8006e16:	3e01      	subs	r6, #1
 8006e18:	e7e4      	b.n	8006de4 <_puts_r+0x68>
 8006e1a:	6823      	ldr	r3, [r4, #0]
 8006e1c:	1c5a      	adds	r2, r3, #1
 8006e1e:	6022      	str	r2, [r4, #0]
 8006e20:	220a      	movs	r2, #10
 8006e22:	701a      	strb	r2, [r3, #0]
 8006e24:	e7ee      	b.n	8006e04 <_puts_r+0x88>
	...

08006e28 <puts>:
 8006e28:	4b02      	ldr	r3, [pc, #8]	@ (8006e34 <puts+0xc>)
 8006e2a:	4601      	mov	r1, r0
 8006e2c:	6818      	ldr	r0, [r3, #0]
 8006e2e:	f7ff bfa5 	b.w	8006d7c <_puts_r>
 8006e32:	bf00      	nop
 8006e34:	2000001c 	.word	0x2000001c

08006e38 <siprintf>:
 8006e38:	b40e      	push	{r1, r2, r3}
 8006e3a:	b500      	push	{lr}
 8006e3c:	b09c      	sub	sp, #112	@ 0x70
 8006e3e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006e40:	9002      	str	r0, [sp, #8]
 8006e42:	9006      	str	r0, [sp, #24]
 8006e44:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006e48:	4809      	ldr	r0, [pc, #36]	@ (8006e70 <siprintf+0x38>)
 8006e4a:	9107      	str	r1, [sp, #28]
 8006e4c:	9104      	str	r1, [sp, #16]
 8006e4e:	4909      	ldr	r1, [pc, #36]	@ (8006e74 <siprintf+0x3c>)
 8006e50:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e54:	9105      	str	r1, [sp, #20]
 8006e56:	6800      	ldr	r0, [r0, #0]
 8006e58:	9301      	str	r3, [sp, #4]
 8006e5a:	a902      	add	r1, sp, #8
 8006e5c:	f002 fc5a 	bl	8009714 <_svfiprintf_r>
 8006e60:	9b02      	ldr	r3, [sp, #8]
 8006e62:	2200      	movs	r2, #0
 8006e64:	701a      	strb	r2, [r3, #0]
 8006e66:	b01c      	add	sp, #112	@ 0x70
 8006e68:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e6c:	b003      	add	sp, #12
 8006e6e:	4770      	bx	lr
 8006e70:	2000001c 	.word	0x2000001c
 8006e74:	ffff0208 	.word	0xffff0208

08006e78 <__sread>:
 8006e78:	b510      	push	{r4, lr}
 8006e7a:	460c      	mov	r4, r1
 8006e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e80:	f000 f912 	bl	80070a8 <_read_r>
 8006e84:	2800      	cmp	r0, #0
 8006e86:	bfab      	itete	ge
 8006e88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006e8a:	89a3      	ldrhlt	r3, [r4, #12]
 8006e8c:	181b      	addge	r3, r3, r0
 8006e8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006e92:	bfac      	ite	ge
 8006e94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006e96:	81a3      	strhlt	r3, [r4, #12]
 8006e98:	bd10      	pop	{r4, pc}

08006e9a <__swrite>:
 8006e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e9e:	461f      	mov	r7, r3
 8006ea0:	898b      	ldrh	r3, [r1, #12]
 8006ea2:	05db      	lsls	r3, r3, #23
 8006ea4:	4605      	mov	r5, r0
 8006ea6:	460c      	mov	r4, r1
 8006ea8:	4616      	mov	r6, r2
 8006eaa:	d505      	bpl.n	8006eb8 <__swrite+0x1e>
 8006eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eb0:	2302      	movs	r3, #2
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f000 f8e6 	bl	8007084 <_lseek_r>
 8006eb8:	89a3      	ldrh	r3, [r4, #12]
 8006eba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ebe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ec2:	81a3      	strh	r3, [r4, #12]
 8006ec4:	4632      	mov	r2, r6
 8006ec6:	463b      	mov	r3, r7
 8006ec8:	4628      	mov	r0, r5
 8006eca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ece:	f000 b8fd 	b.w	80070cc <_write_r>

08006ed2 <__sseek>:
 8006ed2:	b510      	push	{r4, lr}
 8006ed4:	460c      	mov	r4, r1
 8006ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eda:	f000 f8d3 	bl	8007084 <_lseek_r>
 8006ede:	1c43      	adds	r3, r0, #1
 8006ee0:	89a3      	ldrh	r3, [r4, #12]
 8006ee2:	bf15      	itete	ne
 8006ee4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006ee6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006eea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006eee:	81a3      	strheq	r3, [r4, #12]
 8006ef0:	bf18      	it	ne
 8006ef2:	81a3      	strhne	r3, [r4, #12]
 8006ef4:	bd10      	pop	{r4, pc}

08006ef6 <__sclose>:
 8006ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006efa:	f000 b8b3 	b.w	8007064 <_close_r>

08006efe <__swbuf_r>:
 8006efe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f00:	460e      	mov	r6, r1
 8006f02:	4614      	mov	r4, r2
 8006f04:	4605      	mov	r5, r0
 8006f06:	b118      	cbz	r0, 8006f10 <__swbuf_r+0x12>
 8006f08:	6a03      	ldr	r3, [r0, #32]
 8006f0a:	b90b      	cbnz	r3, 8006f10 <__swbuf_r+0x12>
 8006f0c:	f7ff feee 	bl	8006cec <__sinit>
 8006f10:	69a3      	ldr	r3, [r4, #24]
 8006f12:	60a3      	str	r3, [r4, #8]
 8006f14:	89a3      	ldrh	r3, [r4, #12]
 8006f16:	071a      	lsls	r2, r3, #28
 8006f18:	d501      	bpl.n	8006f1e <__swbuf_r+0x20>
 8006f1a:	6923      	ldr	r3, [r4, #16]
 8006f1c:	b943      	cbnz	r3, 8006f30 <__swbuf_r+0x32>
 8006f1e:	4621      	mov	r1, r4
 8006f20:	4628      	mov	r0, r5
 8006f22:	f000 f82b 	bl	8006f7c <__swsetup_r>
 8006f26:	b118      	cbz	r0, 8006f30 <__swbuf_r+0x32>
 8006f28:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006f2c:	4638      	mov	r0, r7
 8006f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f30:	6823      	ldr	r3, [r4, #0]
 8006f32:	6922      	ldr	r2, [r4, #16]
 8006f34:	1a98      	subs	r0, r3, r2
 8006f36:	6963      	ldr	r3, [r4, #20]
 8006f38:	b2f6      	uxtb	r6, r6
 8006f3a:	4283      	cmp	r3, r0
 8006f3c:	4637      	mov	r7, r6
 8006f3e:	dc05      	bgt.n	8006f4c <__swbuf_r+0x4e>
 8006f40:	4621      	mov	r1, r4
 8006f42:	4628      	mov	r0, r5
 8006f44:	f002 fea8 	bl	8009c98 <_fflush_r>
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	d1ed      	bne.n	8006f28 <__swbuf_r+0x2a>
 8006f4c:	68a3      	ldr	r3, [r4, #8]
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	60a3      	str	r3, [r4, #8]
 8006f52:	6823      	ldr	r3, [r4, #0]
 8006f54:	1c5a      	adds	r2, r3, #1
 8006f56:	6022      	str	r2, [r4, #0]
 8006f58:	701e      	strb	r6, [r3, #0]
 8006f5a:	6962      	ldr	r2, [r4, #20]
 8006f5c:	1c43      	adds	r3, r0, #1
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d004      	beq.n	8006f6c <__swbuf_r+0x6e>
 8006f62:	89a3      	ldrh	r3, [r4, #12]
 8006f64:	07db      	lsls	r3, r3, #31
 8006f66:	d5e1      	bpl.n	8006f2c <__swbuf_r+0x2e>
 8006f68:	2e0a      	cmp	r6, #10
 8006f6a:	d1df      	bne.n	8006f2c <__swbuf_r+0x2e>
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	4628      	mov	r0, r5
 8006f70:	f002 fe92 	bl	8009c98 <_fflush_r>
 8006f74:	2800      	cmp	r0, #0
 8006f76:	d0d9      	beq.n	8006f2c <__swbuf_r+0x2e>
 8006f78:	e7d6      	b.n	8006f28 <__swbuf_r+0x2a>
	...

08006f7c <__swsetup_r>:
 8006f7c:	b538      	push	{r3, r4, r5, lr}
 8006f7e:	4b29      	ldr	r3, [pc, #164]	@ (8007024 <__swsetup_r+0xa8>)
 8006f80:	4605      	mov	r5, r0
 8006f82:	6818      	ldr	r0, [r3, #0]
 8006f84:	460c      	mov	r4, r1
 8006f86:	b118      	cbz	r0, 8006f90 <__swsetup_r+0x14>
 8006f88:	6a03      	ldr	r3, [r0, #32]
 8006f8a:	b90b      	cbnz	r3, 8006f90 <__swsetup_r+0x14>
 8006f8c:	f7ff feae 	bl	8006cec <__sinit>
 8006f90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f94:	0719      	lsls	r1, r3, #28
 8006f96:	d422      	bmi.n	8006fde <__swsetup_r+0x62>
 8006f98:	06da      	lsls	r2, r3, #27
 8006f9a:	d407      	bmi.n	8006fac <__swsetup_r+0x30>
 8006f9c:	2209      	movs	r2, #9
 8006f9e:	602a      	str	r2, [r5, #0]
 8006fa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fa4:	81a3      	strh	r3, [r4, #12]
 8006fa6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006faa:	e033      	b.n	8007014 <__swsetup_r+0x98>
 8006fac:	0758      	lsls	r0, r3, #29
 8006fae:	d512      	bpl.n	8006fd6 <__swsetup_r+0x5a>
 8006fb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006fb2:	b141      	cbz	r1, 8006fc6 <__swsetup_r+0x4a>
 8006fb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006fb8:	4299      	cmp	r1, r3
 8006fba:	d002      	beq.n	8006fc2 <__swsetup_r+0x46>
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	f000 ff17 	bl	8007df0 <_free_r>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8006fc6:	89a3      	ldrh	r3, [r4, #12]
 8006fc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006fcc:	81a3      	strh	r3, [r4, #12]
 8006fce:	2300      	movs	r3, #0
 8006fd0:	6063      	str	r3, [r4, #4]
 8006fd2:	6923      	ldr	r3, [r4, #16]
 8006fd4:	6023      	str	r3, [r4, #0]
 8006fd6:	89a3      	ldrh	r3, [r4, #12]
 8006fd8:	f043 0308 	orr.w	r3, r3, #8
 8006fdc:	81a3      	strh	r3, [r4, #12]
 8006fde:	6923      	ldr	r3, [r4, #16]
 8006fe0:	b94b      	cbnz	r3, 8006ff6 <__swsetup_r+0x7a>
 8006fe2:	89a3      	ldrh	r3, [r4, #12]
 8006fe4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006fe8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fec:	d003      	beq.n	8006ff6 <__swsetup_r+0x7a>
 8006fee:	4621      	mov	r1, r4
 8006ff0:	4628      	mov	r0, r5
 8006ff2:	f002 fe9f 	bl	8009d34 <__smakebuf_r>
 8006ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ffa:	f013 0201 	ands.w	r2, r3, #1
 8006ffe:	d00a      	beq.n	8007016 <__swsetup_r+0x9a>
 8007000:	2200      	movs	r2, #0
 8007002:	60a2      	str	r2, [r4, #8]
 8007004:	6962      	ldr	r2, [r4, #20]
 8007006:	4252      	negs	r2, r2
 8007008:	61a2      	str	r2, [r4, #24]
 800700a:	6922      	ldr	r2, [r4, #16]
 800700c:	b942      	cbnz	r2, 8007020 <__swsetup_r+0xa4>
 800700e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007012:	d1c5      	bne.n	8006fa0 <__swsetup_r+0x24>
 8007014:	bd38      	pop	{r3, r4, r5, pc}
 8007016:	0799      	lsls	r1, r3, #30
 8007018:	bf58      	it	pl
 800701a:	6962      	ldrpl	r2, [r4, #20]
 800701c:	60a2      	str	r2, [r4, #8]
 800701e:	e7f4      	b.n	800700a <__swsetup_r+0x8e>
 8007020:	2000      	movs	r0, #0
 8007022:	e7f7      	b.n	8007014 <__swsetup_r+0x98>
 8007024:	2000001c 	.word	0x2000001c

08007028 <memset>:
 8007028:	4402      	add	r2, r0
 800702a:	4603      	mov	r3, r0
 800702c:	4293      	cmp	r3, r2
 800702e:	d100      	bne.n	8007032 <memset+0xa>
 8007030:	4770      	bx	lr
 8007032:	f803 1b01 	strb.w	r1, [r3], #1
 8007036:	e7f9      	b.n	800702c <memset+0x4>

08007038 <strncmp>:
 8007038:	b510      	push	{r4, lr}
 800703a:	b16a      	cbz	r2, 8007058 <strncmp+0x20>
 800703c:	3901      	subs	r1, #1
 800703e:	1884      	adds	r4, r0, r2
 8007040:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007044:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007048:	429a      	cmp	r2, r3
 800704a:	d103      	bne.n	8007054 <strncmp+0x1c>
 800704c:	42a0      	cmp	r0, r4
 800704e:	d001      	beq.n	8007054 <strncmp+0x1c>
 8007050:	2a00      	cmp	r2, #0
 8007052:	d1f5      	bne.n	8007040 <strncmp+0x8>
 8007054:	1ad0      	subs	r0, r2, r3
 8007056:	bd10      	pop	{r4, pc}
 8007058:	4610      	mov	r0, r2
 800705a:	e7fc      	b.n	8007056 <strncmp+0x1e>

0800705c <_localeconv_r>:
 800705c:	4800      	ldr	r0, [pc, #0]	@ (8007060 <_localeconv_r+0x4>)
 800705e:	4770      	bx	lr
 8007060:	2000015c 	.word	0x2000015c

08007064 <_close_r>:
 8007064:	b538      	push	{r3, r4, r5, lr}
 8007066:	4d06      	ldr	r5, [pc, #24]	@ (8007080 <_close_r+0x1c>)
 8007068:	2300      	movs	r3, #0
 800706a:	4604      	mov	r4, r0
 800706c:	4608      	mov	r0, r1
 800706e:	602b      	str	r3, [r5, #0]
 8007070:	f7fb fa6e 	bl	8002550 <_close>
 8007074:	1c43      	adds	r3, r0, #1
 8007076:	d102      	bne.n	800707e <_close_r+0x1a>
 8007078:	682b      	ldr	r3, [r5, #0]
 800707a:	b103      	cbz	r3, 800707e <_close_r+0x1a>
 800707c:	6023      	str	r3, [r4, #0]
 800707e:	bd38      	pop	{r3, r4, r5, pc}
 8007080:	2000049c 	.word	0x2000049c

08007084 <_lseek_r>:
 8007084:	b538      	push	{r3, r4, r5, lr}
 8007086:	4d07      	ldr	r5, [pc, #28]	@ (80070a4 <_lseek_r+0x20>)
 8007088:	4604      	mov	r4, r0
 800708a:	4608      	mov	r0, r1
 800708c:	4611      	mov	r1, r2
 800708e:	2200      	movs	r2, #0
 8007090:	602a      	str	r2, [r5, #0]
 8007092:	461a      	mov	r2, r3
 8007094:	f7fb fa83 	bl	800259e <_lseek>
 8007098:	1c43      	adds	r3, r0, #1
 800709a:	d102      	bne.n	80070a2 <_lseek_r+0x1e>
 800709c:	682b      	ldr	r3, [r5, #0]
 800709e:	b103      	cbz	r3, 80070a2 <_lseek_r+0x1e>
 80070a0:	6023      	str	r3, [r4, #0]
 80070a2:	bd38      	pop	{r3, r4, r5, pc}
 80070a4:	2000049c 	.word	0x2000049c

080070a8 <_read_r>:
 80070a8:	b538      	push	{r3, r4, r5, lr}
 80070aa:	4d07      	ldr	r5, [pc, #28]	@ (80070c8 <_read_r+0x20>)
 80070ac:	4604      	mov	r4, r0
 80070ae:	4608      	mov	r0, r1
 80070b0:	4611      	mov	r1, r2
 80070b2:	2200      	movs	r2, #0
 80070b4:	602a      	str	r2, [r5, #0]
 80070b6:	461a      	mov	r2, r3
 80070b8:	f7fb fa11 	bl	80024de <_read>
 80070bc:	1c43      	adds	r3, r0, #1
 80070be:	d102      	bne.n	80070c6 <_read_r+0x1e>
 80070c0:	682b      	ldr	r3, [r5, #0]
 80070c2:	b103      	cbz	r3, 80070c6 <_read_r+0x1e>
 80070c4:	6023      	str	r3, [r4, #0]
 80070c6:	bd38      	pop	{r3, r4, r5, pc}
 80070c8:	2000049c 	.word	0x2000049c

080070cc <_write_r>:
 80070cc:	b538      	push	{r3, r4, r5, lr}
 80070ce:	4d07      	ldr	r5, [pc, #28]	@ (80070ec <_write_r+0x20>)
 80070d0:	4604      	mov	r4, r0
 80070d2:	4608      	mov	r0, r1
 80070d4:	4611      	mov	r1, r2
 80070d6:	2200      	movs	r2, #0
 80070d8:	602a      	str	r2, [r5, #0]
 80070da:	461a      	mov	r2, r3
 80070dc:	f7fb fa1c 	bl	8002518 <_write>
 80070e0:	1c43      	adds	r3, r0, #1
 80070e2:	d102      	bne.n	80070ea <_write_r+0x1e>
 80070e4:	682b      	ldr	r3, [r5, #0]
 80070e6:	b103      	cbz	r3, 80070ea <_write_r+0x1e>
 80070e8:	6023      	str	r3, [r4, #0]
 80070ea:	bd38      	pop	{r3, r4, r5, pc}
 80070ec:	2000049c 	.word	0x2000049c

080070f0 <__errno>:
 80070f0:	4b01      	ldr	r3, [pc, #4]	@ (80070f8 <__errno+0x8>)
 80070f2:	6818      	ldr	r0, [r3, #0]
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	2000001c 	.word	0x2000001c

080070fc <__libc_init_array>:
 80070fc:	b570      	push	{r4, r5, r6, lr}
 80070fe:	4d0d      	ldr	r5, [pc, #52]	@ (8007134 <__libc_init_array+0x38>)
 8007100:	4c0d      	ldr	r4, [pc, #52]	@ (8007138 <__libc_init_array+0x3c>)
 8007102:	1b64      	subs	r4, r4, r5
 8007104:	10a4      	asrs	r4, r4, #2
 8007106:	2600      	movs	r6, #0
 8007108:	42a6      	cmp	r6, r4
 800710a:	d109      	bne.n	8007120 <__libc_init_array+0x24>
 800710c:	4d0b      	ldr	r5, [pc, #44]	@ (800713c <__libc_init_array+0x40>)
 800710e:	4c0c      	ldr	r4, [pc, #48]	@ (8007140 <__libc_init_array+0x44>)
 8007110:	f003 facc 	bl	800a6ac <_init>
 8007114:	1b64      	subs	r4, r4, r5
 8007116:	10a4      	asrs	r4, r4, #2
 8007118:	2600      	movs	r6, #0
 800711a:	42a6      	cmp	r6, r4
 800711c:	d105      	bne.n	800712a <__libc_init_array+0x2e>
 800711e:	bd70      	pop	{r4, r5, r6, pc}
 8007120:	f855 3b04 	ldr.w	r3, [r5], #4
 8007124:	4798      	blx	r3
 8007126:	3601      	adds	r6, #1
 8007128:	e7ee      	b.n	8007108 <__libc_init_array+0xc>
 800712a:	f855 3b04 	ldr.w	r3, [r5], #4
 800712e:	4798      	blx	r3
 8007130:	3601      	adds	r6, #1
 8007132:	e7f2      	b.n	800711a <__libc_init_array+0x1e>
 8007134:	0800adb0 	.word	0x0800adb0
 8007138:	0800adb0 	.word	0x0800adb0
 800713c:	0800adb0 	.word	0x0800adb0
 8007140:	0800adb4 	.word	0x0800adb4

08007144 <__retarget_lock_init_recursive>:
 8007144:	4770      	bx	lr

08007146 <__retarget_lock_acquire_recursive>:
 8007146:	4770      	bx	lr

08007148 <__retarget_lock_release_recursive>:
 8007148:	4770      	bx	lr
	...

0800714c <nanf>:
 800714c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007154 <nanf+0x8>
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	7fc00000 	.word	0x7fc00000

08007158 <quorem>:
 8007158:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800715c:	6903      	ldr	r3, [r0, #16]
 800715e:	690c      	ldr	r4, [r1, #16]
 8007160:	42a3      	cmp	r3, r4
 8007162:	4607      	mov	r7, r0
 8007164:	db7e      	blt.n	8007264 <quorem+0x10c>
 8007166:	3c01      	subs	r4, #1
 8007168:	f101 0814 	add.w	r8, r1, #20
 800716c:	00a3      	lsls	r3, r4, #2
 800716e:	f100 0514 	add.w	r5, r0, #20
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007178:	9301      	str	r3, [sp, #4]
 800717a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800717e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007182:	3301      	adds	r3, #1
 8007184:	429a      	cmp	r2, r3
 8007186:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800718a:	fbb2 f6f3 	udiv	r6, r2, r3
 800718e:	d32e      	bcc.n	80071ee <quorem+0x96>
 8007190:	f04f 0a00 	mov.w	sl, #0
 8007194:	46c4      	mov	ip, r8
 8007196:	46ae      	mov	lr, r5
 8007198:	46d3      	mov	fp, sl
 800719a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800719e:	b298      	uxth	r0, r3
 80071a0:	fb06 a000 	mla	r0, r6, r0, sl
 80071a4:	0c02      	lsrs	r2, r0, #16
 80071a6:	0c1b      	lsrs	r3, r3, #16
 80071a8:	fb06 2303 	mla	r3, r6, r3, r2
 80071ac:	f8de 2000 	ldr.w	r2, [lr]
 80071b0:	b280      	uxth	r0, r0
 80071b2:	b292      	uxth	r2, r2
 80071b4:	1a12      	subs	r2, r2, r0
 80071b6:	445a      	add	r2, fp
 80071b8:	f8de 0000 	ldr.w	r0, [lr]
 80071bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80071c6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80071ca:	b292      	uxth	r2, r2
 80071cc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80071d0:	45e1      	cmp	r9, ip
 80071d2:	f84e 2b04 	str.w	r2, [lr], #4
 80071d6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80071da:	d2de      	bcs.n	800719a <quorem+0x42>
 80071dc:	9b00      	ldr	r3, [sp, #0]
 80071de:	58eb      	ldr	r3, [r5, r3]
 80071e0:	b92b      	cbnz	r3, 80071ee <quorem+0x96>
 80071e2:	9b01      	ldr	r3, [sp, #4]
 80071e4:	3b04      	subs	r3, #4
 80071e6:	429d      	cmp	r5, r3
 80071e8:	461a      	mov	r2, r3
 80071ea:	d32f      	bcc.n	800724c <quorem+0xf4>
 80071ec:	613c      	str	r4, [r7, #16]
 80071ee:	4638      	mov	r0, r7
 80071f0:	f001 f9c2 	bl	8008578 <__mcmp>
 80071f4:	2800      	cmp	r0, #0
 80071f6:	db25      	blt.n	8007244 <quorem+0xec>
 80071f8:	4629      	mov	r1, r5
 80071fa:	2000      	movs	r0, #0
 80071fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8007200:	f8d1 c000 	ldr.w	ip, [r1]
 8007204:	fa1f fe82 	uxth.w	lr, r2
 8007208:	fa1f f38c 	uxth.w	r3, ip
 800720c:	eba3 030e 	sub.w	r3, r3, lr
 8007210:	4403      	add	r3, r0
 8007212:	0c12      	lsrs	r2, r2, #16
 8007214:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007218:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800721c:	b29b      	uxth	r3, r3
 800721e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007222:	45c1      	cmp	r9, r8
 8007224:	f841 3b04 	str.w	r3, [r1], #4
 8007228:	ea4f 4022 	mov.w	r0, r2, asr #16
 800722c:	d2e6      	bcs.n	80071fc <quorem+0xa4>
 800722e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007232:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007236:	b922      	cbnz	r2, 8007242 <quorem+0xea>
 8007238:	3b04      	subs	r3, #4
 800723a:	429d      	cmp	r5, r3
 800723c:	461a      	mov	r2, r3
 800723e:	d30b      	bcc.n	8007258 <quorem+0x100>
 8007240:	613c      	str	r4, [r7, #16]
 8007242:	3601      	adds	r6, #1
 8007244:	4630      	mov	r0, r6
 8007246:	b003      	add	sp, #12
 8007248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800724c:	6812      	ldr	r2, [r2, #0]
 800724e:	3b04      	subs	r3, #4
 8007250:	2a00      	cmp	r2, #0
 8007252:	d1cb      	bne.n	80071ec <quorem+0x94>
 8007254:	3c01      	subs	r4, #1
 8007256:	e7c6      	b.n	80071e6 <quorem+0x8e>
 8007258:	6812      	ldr	r2, [r2, #0]
 800725a:	3b04      	subs	r3, #4
 800725c:	2a00      	cmp	r2, #0
 800725e:	d1ef      	bne.n	8007240 <quorem+0xe8>
 8007260:	3c01      	subs	r4, #1
 8007262:	e7ea      	b.n	800723a <quorem+0xe2>
 8007264:	2000      	movs	r0, #0
 8007266:	e7ee      	b.n	8007246 <quorem+0xee>

08007268 <_dtoa_r>:
 8007268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800726c:	69c7      	ldr	r7, [r0, #28]
 800726e:	b099      	sub	sp, #100	@ 0x64
 8007270:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007274:	ec55 4b10 	vmov	r4, r5, d0
 8007278:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800727a:	9109      	str	r1, [sp, #36]	@ 0x24
 800727c:	4683      	mov	fp, r0
 800727e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007280:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007282:	b97f      	cbnz	r7, 80072a4 <_dtoa_r+0x3c>
 8007284:	2010      	movs	r0, #16
 8007286:	f000 fdfd 	bl	8007e84 <malloc>
 800728a:	4602      	mov	r2, r0
 800728c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007290:	b920      	cbnz	r0, 800729c <_dtoa_r+0x34>
 8007292:	4ba7      	ldr	r3, [pc, #668]	@ (8007530 <_dtoa_r+0x2c8>)
 8007294:	21ef      	movs	r1, #239	@ 0xef
 8007296:	48a7      	ldr	r0, [pc, #668]	@ (8007534 <_dtoa_r+0x2cc>)
 8007298:	f002 fdea 	bl	8009e70 <__assert_func>
 800729c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80072a0:	6007      	str	r7, [r0, #0]
 80072a2:	60c7      	str	r7, [r0, #12]
 80072a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80072a8:	6819      	ldr	r1, [r3, #0]
 80072aa:	b159      	cbz	r1, 80072c4 <_dtoa_r+0x5c>
 80072ac:	685a      	ldr	r2, [r3, #4]
 80072ae:	604a      	str	r2, [r1, #4]
 80072b0:	2301      	movs	r3, #1
 80072b2:	4093      	lsls	r3, r2
 80072b4:	608b      	str	r3, [r1, #8]
 80072b6:	4658      	mov	r0, fp
 80072b8:	f000 feda 	bl	8008070 <_Bfree>
 80072bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80072c0:	2200      	movs	r2, #0
 80072c2:	601a      	str	r2, [r3, #0]
 80072c4:	1e2b      	subs	r3, r5, #0
 80072c6:	bfb9      	ittee	lt
 80072c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80072cc:	9303      	strlt	r3, [sp, #12]
 80072ce:	2300      	movge	r3, #0
 80072d0:	6033      	strge	r3, [r6, #0]
 80072d2:	9f03      	ldr	r7, [sp, #12]
 80072d4:	4b98      	ldr	r3, [pc, #608]	@ (8007538 <_dtoa_r+0x2d0>)
 80072d6:	bfbc      	itt	lt
 80072d8:	2201      	movlt	r2, #1
 80072da:	6032      	strlt	r2, [r6, #0]
 80072dc:	43bb      	bics	r3, r7
 80072de:	d112      	bne.n	8007306 <_dtoa_r+0x9e>
 80072e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80072e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80072e6:	6013      	str	r3, [r2, #0]
 80072e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80072ec:	4323      	orrs	r3, r4
 80072ee:	f000 854d 	beq.w	8007d8c <_dtoa_r+0xb24>
 80072f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80072f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800754c <_dtoa_r+0x2e4>
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f000 854f 	beq.w	8007d9c <_dtoa_r+0xb34>
 80072fe:	f10a 0303 	add.w	r3, sl, #3
 8007302:	f000 bd49 	b.w	8007d98 <_dtoa_r+0xb30>
 8007306:	ed9d 7b02 	vldr	d7, [sp, #8]
 800730a:	2200      	movs	r2, #0
 800730c:	ec51 0b17 	vmov	r0, r1, d7
 8007310:	2300      	movs	r3, #0
 8007312:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007316:	f7f9 fc07 	bl	8000b28 <__aeabi_dcmpeq>
 800731a:	4680      	mov	r8, r0
 800731c:	b158      	cbz	r0, 8007336 <_dtoa_r+0xce>
 800731e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007320:	2301      	movs	r3, #1
 8007322:	6013      	str	r3, [r2, #0]
 8007324:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007326:	b113      	cbz	r3, 800732e <_dtoa_r+0xc6>
 8007328:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800732a:	4b84      	ldr	r3, [pc, #528]	@ (800753c <_dtoa_r+0x2d4>)
 800732c:	6013      	str	r3, [r2, #0]
 800732e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007550 <_dtoa_r+0x2e8>
 8007332:	f000 bd33 	b.w	8007d9c <_dtoa_r+0xb34>
 8007336:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800733a:	aa16      	add	r2, sp, #88	@ 0x58
 800733c:	a917      	add	r1, sp, #92	@ 0x5c
 800733e:	4658      	mov	r0, fp
 8007340:	f001 fa3a 	bl	80087b8 <__d2b>
 8007344:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007348:	4681      	mov	r9, r0
 800734a:	2e00      	cmp	r6, #0
 800734c:	d077      	beq.n	800743e <_dtoa_r+0x1d6>
 800734e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007350:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007354:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007358:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800735c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007360:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007364:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007368:	4619      	mov	r1, r3
 800736a:	2200      	movs	r2, #0
 800736c:	4b74      	ldr	r3, [pc, #464]	@ (8007540 <_dtoa_r+0x2d8>)
 800736e:	f7f8 ffbb 	bl	80002e8 <__aeabi_dsub>
 8007372:	a369      	add	r3, pc, #420	@ (adr r3, 8007518 <_dtoa_r+0x2b0>)
 8007374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007378:	f7f9 f96e 	bl	8000658 <__aeabi_dmul>
 800737c:	a368      	add	r3, pc, #416	@ (adr r3, 8007520 <_dtoa_r+0x2b8>)
 800737e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007382:	f7f8 ffb3 	bl	80002ec <__adddf3>
 8007386:	4604      	mov	r4, r0
 8007388:	4630      	mov	r0, r6
 800738a:	460d      	mov	r5, r1
 800738c:	f7f9 f8fa 	bl	8000584 <__aeabi_i2d>
 8007390:	a365      	add	r3, pc, #404	@ (adr r3, 8007528 <_dtoa_r+0x2c0>)
 8007392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007396:	f7f9 f95f 	bl	8000658 <__aeabi_dmul>
 800739a:	4602      	mov	r2, r0
 800739c:	460b      	mov	r3, r1
 800739e:	4620      	mov	r0, r4
 80073a0:	4629      	mov	r1, r5
 80073a2:	f7f8 ffa3 	bl	80002ec <__adddf3>
 80073a6:	4604      	mov	r4, r0
 80073a8:	460d      	mov	r5, r1
 80073aa:	f7f9 fc05 	bl	8000bb8 <__aeabi_d2iz>
 80073ae:	2200      	movs	r2, #0
 80073b0:	4607      	mov	r7, r0
 80073b2:	2300      	movs	r3, #0
 80073b4:	4620      	mov	r0, r4
 80073b6:	4629      	mov	r1, r5
 80073b8:	f7f9 fbc0 	bl	8000b3c <__aeabi_dcmplt>
 80073bc:	b140      	cbz	r0, 80073d0 <_dtoa_r+0x168>
 80073be:	4638      	mov	r0, r7
 80073c0:	f7f9 f8e0 	bl	8000584 <__aeabi_i2d>
 80073c4:	4622      	mov	r2, r4
 80073c6:	462b      	mov	r3, r5
 80073c8:	f7f9 fbae 	bl	8000b28 <__aeabi_dcmpeq>
 80073cc:	b900      	cbnz	r0, 80073d0 <_dtoa_r+0x168>
 80073ce:	3f01      	subs	r7, #1
 80073d0:	2f16      	cmp	r7, #22
 80073d2:	d851      	bhi.n	8007478 <_dtoa_r+0x210>
 80073d4:	4b5b      	ldr	r3, [pc, #364]	@ (8007544 <_dtoa_r+0x2dc>)
 80073d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80073da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073e2:	f7f9 fbab 	bl	8000b3c <__aeabi_dcmplt>
 80073e6:	2800      	cmp	r0, #0
 80073e8:	d048      	beq.n	800747c <_dtoa_r+0x214>
 80073ea:	3f01      	subs	r7, #1
 80073ec:	2300      	movs	r3, #0
 80073ee:	9312      	str	r3, [sp, #72]	@ 0x48
 80073f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80073f2:	1b9b      	subs	r3, r3, r6
 80073f4:	1e5a      	subs	r2, r3, #1
 80073f6:	bf44      	itt	mi
 80073f8:	f1c3 0801 	rsbmi	r8, r3, #1
 80073fc:	2300      	movmi	r3, #0
 80073fe:	9208      	str	r2, [sp, #32]
 8007400:	bf54      	ite	pl
 8007402:	f04f 0800 	movpl.w	r8, #0
 8007406:	9308      	strmi	r3, [sp, #32]
 8007408:	2f00      	cmp	r7, #0
 800740a:	db39      	blt.n	8007480 <_dtoa_r+0x218>
 800740c:	9b08      	ldr	r3, [sp, #32]
 800740e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007410:	443b      	add	r3, r7
 8007412:	9308      	str	r3, [sp, #32]
 8007414:	2300      	movs	r3, #0
 8007416:	930a      	str	r3, [sp, #40]	@ 0x28
 8007418:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800741a:	2b09      	cmp	r3, #9
 800741c:	d864      	bhi.n	80074e8 <_dtoa_r+0x280>
 800741e:	2b05      	cmp	r3, #5
 8007420:	bfc4      	itt	gt
 8007422:	3b04      	subgt	r3, #4
 8007424:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007428:	f1a3 0302 	sub.w	r3, r3, #2
 800742c:	bfcc      	ite	gt
 800742e:	2400      	movgt	r4, #0
 8007430:	2401      	movle	r4, #1
 8007432:	2b03      	cmp	r3, #3
 8007434:	d863      	bhi.n	80074fe <_dtoa_r+0x296>
 8007436:	e8df f003 	tbb	[pc, r3]
 800743a:	372a      	.short	0x372a
 800743c:	5535      	.short	0x5535
 800743e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007442:	441e      	add	r6, r3
 8007444:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007448:	2b20      	cmp	r3, #32
 800744a:	bfc1      	itttt	gt
 800744c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007450:	409f      	lslgt	r7, r3
 8007452:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007456:	fa24 f303 	lsrgt.w	r3, r4, r3
 800745a:	bfd6      	itet	le
 800745c:	f1c3 0320 	rsble	r3, r3, #32
 8007460:	ea47 0003 	orrgt.w	r0, r7, r3
 8007464:	fa04 f003 	lslle.w	r0, r4, r3
 8007468:	f7f9 f87c 	bl	8000564 <__aeabi_ui2d>
 800746c:	2201      	movs	r2, #1
 800746e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007472:	3e01      	subs	r6, #1
 8007474:	9214      	str	r2, [sp, #80]	@ 0x50
 8007476:	e777      	b.n	8007368 <_dtoa_r+0x100>
 8007478:	2301      	movs	r3, #1
 800747a:	e7b8      	b.n	80073ee <_dtoa_r+0x186>
 800747c:	9012      	str	r0, [sp, #72]	@ 0x48
 800747e:	e7b7      	b.n	80073f0 <_dtoa_r+0x188>
 8007480:	427b      	negs	r3, r7
 8007482:	930a      	str	r3, [sp, #40]	@ 0x28
 8007484:	2300      	movs	r3, #0
 8007486:	eba8 0807 	sub.w	r8, r8, r7
 800748a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800748c:	e7c4      	b.n	8007418 <_dtoa_r+0x1b0>
 800748e:	2300      	movs	r3, #0
 8007490:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007492:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007494:	2b00      	cmp	r3, #0
 8007496:	dc35      	bgt.n	8007504 <_dtoa_r+0x29c>
 8007498:	2301      	movs	r3, #1
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	9307      	str	r3, [sp, #28]
 800749e:	461a      	mov	r2, r3
 80074a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80074a2:	e00b      	b.n	80074bc <_dtoa_r+0x254>
 80074a4:	2301      	movs	r3, #1
 80074a6:	e7f3      	b.n	8007490 <_dtoa_r+0x228>
 80074a8:	2300      	movs	r3, #0
 80074aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074ae:	18fb      	adds	r3, r7, r3
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	3301      	adds	r3, #1
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	9307      	str	r3, [sp, #28]
 80074b8:	bfb8      	it	lt
 80074ba:	2301      	movlt	r3, #1
 80074bc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80074c0:	2100      	movs	r1, #0
 80074c2:	2204      	movs	r2, #4
 80074c4:	f102 0514 	add.w	r5, r2, #20
 80074c8:	429d      	cmp	r5, r3
 80074ca:	d91f      	bls.n	800750c <_dtoa_r+0x2a4>
 80074cc:	6041      	str	r1, [r0, #4]
 80074ce:	4658      	mov	r0, fp
 80074d0:	f000 fd8e 	bl	8007ff0 <_Balloc>
 80074d4:	4682      	mov	sl, r0
 80074d6:	2800      	cmp	r0, #0
 80074d8:	d13c      	bne.n	8007554 <_dtoa_r+0x2ec>
 80074da:	4b1b      	ldr	r3, [pc, #108]	@ (8007548 <_dtoa_r+0x2e0>)
 80074dc:	4602      	mov	r2, r0
 80074de:	f240 11af 	movw	r1, #431	@ 0x1af
 80074e2:	e6d8      	b.n	8007296 <_dtoa_r+0x2e>
 80074e4:	2301      	movs	r3, #1
 80074e6:	e7e0      	b.n	80074aa <_dtoa_r+0x242>
 80074e8:	2401      	movs	r4, #1
 80074ea:	2300      	movs	r3, #0
 80074ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80074ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 80074f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	9307      	str	r3, [sp, #28]
 80074f8:	2200      	movs	r2, #0
 80074fa:	2312      	movs	r3, #18
 80074fc:	e7d0      	b.n	80074a0 <_dtoa_r+0x238>
 80074fe:	2301      	movs	r3, #1
 8007500:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007502:	e7f5      	b.n	80074f0 <_dtoa_r+0x288>
 8007504:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007506:	9300      	str	r3, [sp, #0]
 8007508:	9307      	str	r3, [sp, #28]
 800750a:	e7d7      	b.n	80074bc <_dtoa_r+0x254>
 800750c:	3101      	adds	r1, #1
 800750e:	0052      	lsls	r2, r2, #1
 8007510:	e7d8      	b.n	80074c4 <_dtoa_r+0x25c>
 8007512:	bf00      	nop
 8007514:	f3af 8000 	nop.w
 8007518:	636f4361 	.word	0x636f4361
 800751c:	3fd287a7 	.word	0x3fd287a7
 8007520:	8b60c8b3 	.word	0x8b60c8b3
 8007524:	3fc68a28 	.word	0x3fc68a28
 8007528:	509f79fb 	.word	0x509f79fb
 800752c:	3fd34413 	.word	0x3fd34413
 8007530:	0800a9c2 	.word	0x0800a9c2
 8007534:	0800a9d9 	.word	0x0800a9d9
 8007538:	7ff00000 	.word	0x7ff00000
 800753c:	0800a98d 	.word	0x0800a98d
 8007540:	3ff80000 	.word	0x3ff80000
 8007544:	0800aad0 	.word	0x0800aad0
 8007548:	0800aa31 	.word	0x0800aa31
 800754c:	0800a9be 	.word	0x0800a9be
 8007550:	0800a98c 	.word	0x0800a98c
 8007554:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007558:	6018      	str	r0, [r3, #0]
 800755a:	9b07      	ldr	r3, [sp, #28]
 800755c:	2b0e      	cmp	r3, #14
 800755e:	f200 80a4 	bhi.w	80076aa <_dtoa_r+0x442>
 8007562:	2c00      	cmp	r4, #0
 8007564:	f000 80a1 	beq.w	80076aa <_dtoa_r+0x442>
 8007568:	2f00      	cmp	r7, #0
 800756a:	dd33      	ble.n	80075d4 <_dtoa_r+0x36c>
 800756c:	4bad      	ldr	r3, [pc, #692]	@ (8007824 <_dtoa_r+0x5bc>)
 800756e:	f007 020f 	and.w	r2, r7, #15
 8007572:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007576:	ed93 7b00 	vldr	d7, [r3]
 800757a:	05f8      	lsls	r0, r7, #23
 800757c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007580:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007584:	d516      	bpl.n	80075b4 <_dtoa_r+0x34c>
 8007586:	4ba8      	ldr	r3, [pc, #672]	@ (8007828 <_dtoa_r+0x5c0>)
 8007588:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800758c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007590:	f7f9 f98c 	bl	80008ac <__aeabi_ddiv>
 8007594:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007598:	f004 040f 	and.w	r4, r4, #15
 800759c:	2603      	movs	r6, #3
 800759e:	4da2      	ldr	r5, [pc, #648]	@ (8007828 <_dtoa_r+0x5c0>)
 80075a0:	b954      	cbnz	r4, 80075b8 <_dtoa_r+0x350>
 80075a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075aa:	f7f9 f97f 	bl	80008ac <__aeabi_ddiv>
 80075ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075b2:	e028      	b.n	8007606 <_dtoa_r+0x39e>
 80075b4:	2602      	movs	r6, #2
 80075b6:	e7f2      	b.n	800759e <_dtoa_r+0x336>
 80075b8:	07e1      	lsls	r1, r4, #31
 80075ba:	d508      	bpl.n	80075ce <_dtoa_r+0x366>
 80075bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075c4:	f7f9 f848 	bl	8000658 <__aeabi_dmul>
 80075c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075cc:	3601      	adds	r6, #1
 80075ce:	1064      	asrs	r4, r4, #1
 80075d0:	3508      	adds	r5, #8
 80075d2:	e7e5      	b.n	80075a0 <_dtoa_r+0x338>
 80075d4:	f000 80d2 	beq.w	800777c <_dtoa_r+0x514>
 80075d8:	427c      	negs	r4, r7
 80075da:	4b92      	ldr	r3, [pc, #584]	@ (8007824 <_dtoa_r+0x5bc>)
 80075dc:	4d92      	ldr	r5, [pc, #584]	@ (8007828 <_dtoa_r+0x5c0>)
 80075de:	f004 020f 	and.w	r2, r4, #15
 80075e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075ee:	f7f9 f833 	bl	8000658 <__aeabi_dmul>
 80075f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075f6:	1124      	asrs	r4, r4, #4
 80075f8:	2300      	movs	r3, #0
 80075fa:	2602      	movs	r6, #2
 80075fc:	2c00      	cmp	r4, #0
 80075fe:	f040 80b2 	bne.w	8007766 <_dtoa_r+0x4fe>
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1d3      	bne.n	80075ae <_dtoa_r+0x346>
 8007606:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007608:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800760c:	2b00      	cmp	r3, #0
 800760e:	f000 80b7 	beq.w	8007780 <_dtoa_r+0x518>
 8007612:	4b86      	ldr	r3, [pc, #536]	@ (800782c <_dtoa_r+0x5c4>)
 8007614:	2200      	movs	r2, #0
 8007616:	4620      	mov	r0, r4
 8007618:	4629      	mov	r1, r5
 800761a:	f7f9 fa8f 	bl	8000b3c <__aeabi_dcmplt>
 800761e:	2800      	cmp	r0, #0
 8007620:	f000 80ae 	beq.w	8007780 <_dtoa_r+0x518>
 8007624:	9b07      	ldr	r3, [sp, #28]
 8007626:	2b00      	cmp	r3, #0
 8007628:	f000 80aa 	beq.w	8007780 <_dtoa_r+0x518>
 800762c:	9b00      	ldr	r3, [sp, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	dd37      	ble.n	80076a2 <_dtoa_r+0x43a>
 8007632:	1e7b      	subs	r3, r7, #1
 8007634:	9304      	str	r3, [sp, #16]
 8007636:	4620      	mov	r0, r4
 8007638:	4b7d      	ldr	r3, [pc, #500]	@ (8007830 <_dtoa_r+0x5c8>)
 800763a:	2200      	movs	r2, #0
 800763c:	4629      	mov	r1, r5
 800763e:	f7f9 f80b 	bl	8000658 <__aeabi_dmul>
 8007642:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007646:	9c00      	ldr	r4, [sp, #0]
 8007648:	3601      	adds	r6, #1
 800764a:	4630      	mov	r0, r6
 800764c:	f7f8 ff9a 	bl	8000584 <__aeabi_i2d>
 8007650:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007654:	f7f9 f800 	bl	8000658 <__aeabi_dmul>
 8007658:	4b76      	ldr	r3, [pc, #472]	@ (8007834 <_dtoa_r+0x5cc>)
 800765a:	2200      	movs	r2, #0
 800765c:	f7f8 fe46 	bl	80002ec <__adddf3>
 8007660:	4605      	mov	r5, r0
 8007662:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007666:	2c00      	cmp	r4, #0
 8007668:	f040 808d 	bne.w	8007786 <_dtoa_r+0x51e>
 800766c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007670:	4b71      	ldr	r3, [pc, #452]	@ (8007838 <_dtoa_r+0x5d0>)
 8007672:	2200      	movs	r2, #0
 8007674:	f7f8 fe38 	bl	80002e8 <__aeabi_dsub>
 8007678:	4602      	mov	r2, r0
 800767a:	460b      	mov	r3, r1
 800767c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007680:	462a      	mov	r2, r5
 8007682:	4633      	mov	r3, r6
 8007684:	f7f9 fa78 	bl	8000b78 <__aeabi_dcmpgt>
 8007688:	2800      	cmp	r0, #0
 800768a:	f040 828b 	bne.w	8007ba4 <_dtoa_r+0x93c>
 800768e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007692:	462a      	mov	r2, r5
 8007694:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007698:	f7f9 fa50 	bl	8000b3c <__aeabi_dcmplt>
 800769c:	2800      	cmp	r0, #0
 800769e:	f040 8128 	bne.w	80078f2 <_dtoa_r+0x68a>
 80076a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80076a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80076aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	f2c0 815a 	blt.w	8007966 <_dtoa_r+0x6fe>
 80076b2:	2f0e      	cmp	r7, #14
 80076b4:	f300 8157 	bgt.w	8007966 <_dtoa_r+0x6fe>
 80076b8:	4b5a      	ldr	r3, [pc, #360]	@ (8007824 <_dtoa_r+0x5bc>)
 80076ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80076be:	ed93 7b00 	vldr	d7, [r3]
 80076c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	ed8d 7b00 	vstr	d7, [sp]
 80076ca:	da03      	bge.n	80076d4 <_dtoa_r+0x46c>
 80076cc:	9b07      	ldr	r3, [sp, #28]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f340 8101 	ble.w	80078d6 <_dtoa_r+0x66e>
 80076d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80076d8:	4656      	mov	r6, sl
 80076da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076de:	4620      	mov	r0, r4
 80076e0:	4629      	mov	r1, r5
 80076e2:	f7f9 f8e3 	bl	80008ac <__aeabi_ddiv>
 80076e6:	f7f9 fa67 	bl	8000bb8 <__aeabi_d2iz>
 80076ea:	4680      	mov	r8, r0
 80076ec:	f7f8 ff4a 	bl	8000584 <__aeabi_i2d>
 80076f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076f4:	f7f8 ffb0 	bl	8000658 <__aeabi_dmul>
 80076f8:	4602      	mov	r2, r0
 80076fa:	460b      	mov	r3, r1
 80076fc:	4620      	mov	r0, r4
 80076fe:	4629      	mov	r1, r5
 8007700:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007704:	f7f8 fdf0 	bl	80002e8 <__aeabi_dsub>
 8007708:	f806 4b01 	strb.w	r4, [r6], #1
 800770c:	9d07      	ldr	r5, [sp, #28]
 800770e:	eba6 040a 	sub.w	r4, r6, sl
 8007712:	42a5      	cmp	r5, r4
 8007714:	4602      	mov	r2, r0
 8007716:	460b      	mov	r3, r1
 8007718:	f040 8117 	bne.w	800794a <_dtoa_r+0x6e2>
 800771c:	f7f8 fde6 	bl	80002ec <__adddf3>
 8007720:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007724:	4604      	mov	r4, r0
 8007726:	460d      	mov	r5, r1
 8007728:	f7f9 fa26 	bl	8000b78 <__aeabi_dcmpgt>
 800772c:	2800      	cmp	r0, #0
 800772e:	f040 80f9 	bne.w	8007924 <_dtoa_r+0x6bc>
 8007732:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007736:	4620      	mov	r0, r4
 8007738:	4629      	mov	r1, r5
 800773a:	f7f9 f9f5 	bl	8000b28 <__aeabi_dcmpeq>
 800773e:	b118      	cbz	r0, 8007748 <_dtoa_r+0x4e0>
 8007740:	f018 0f01 	tst.w	r8, #1
 8007744:	f040 80ee 	bne.w	8007924 <_dtoa_r+0x6bc>
 8007748:	4649      	mov	r1, r9
 800774a:	4658      	mov	r0, fp
 800774c:	f000 fc90 	bl	8008070 <_Bfree>
 8007750:	2300      	movs	r3, #0
 8007752:	7033      	strb	r3, [r6, #0]
 8007754:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007756:	3701      	adds	r7, #1
 8007758:	601f      	str	r7, [r3, #0]
 800775a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800775c:	2b00      	cmp	r3, #0
 800775e:	f000 831d 	beq.w	8007d9c <_dtoa_r+0xb34>
 8007762:	601e      	str	r6, [r3, #0]
 8007764:	e31a      	b.n	8007d9c <_dtoa_r+0xb34>
 8007766:	07e2      	lsls	r2, r4, #31
 8007768:	d505      	bpl.n	8007776 <_dtoa_r+0x50e>
 800776a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800776e:	f7f8 ff73 	bl	8000658 <__aeabi_dmul>
 8007772:	3601      	adds	r6, #1
 8007774:	2301      	movs	r3, #1
 8007776:	1064      	asrs	r4, r4, #1
 8007778:	3508      	adds	r5, #8
 800777a:	e73f      	b.n	80075fc <_dtoa_r+0x394>
 800777c:	2602      	movs	r6, #2
 800777e:	e742      	b.n	8007606 <_dtoa_r+0x39e>
 8007780:	9c07      	ldr	r4, [sp, #28]
 8007782:	9704      	str	r7, [sp, #16]
 8007784:	e761      	b.n	800764a <_dtoa_r+0x3e2>
 8007786:	4b27      	ldr	r3, [pc, #156]	@ (8007824 <_dtoa_r+0x5bc>)
 8007788:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800778a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800778e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007792:	4454      	add	r4, sl
 8007794:	2900      	cmp	r1, #0
 8007796:	d053      	beq.n	8007840 <_dtoa_r+0x5d8>
 8007798:	4928      	ldr	r1, [pc, #160]	@ (800783c <_dtoa_r+0x5d4>)
 800779a:	2000      	movs	r0, #0
 800779c:	f7f9 f886 	bl	80008ac <__aeabi_ddiv>
 80077a0:	4633      	mov	r3, r6
 80077a2:	462a      	mov	r2, r5
 80077a4:	f7f8 fda0 	bl	80002e8 <__aeabi_dsub>
 80077a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077ac:	4656      	mov	r6, sl
 80077ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077b2:	f7f9 fa01 	bl	8000bb8 <__aeabi_d2iz>
 80077b6:	4605      	mov	r5, r0
 80077b8:	f7f8 fee4 	bl	8000584 <__aeabi_i2d>
 80077bc:	4602      	mov	r2, r0
 80077be:	460b      	mov	r3, r1
 80077c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077c4:	f7f8 fd90 	bl	80002e8 <__aeabi_dsub>
 80077c8:	3530      	adds	r5, #48	@ 0x30
 80077ca:	4602      	mov	r2, r0
 80077cc:	460b      	mov	r3, r1
 80077ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80077d2:	f806 5b01 	strb.w	r5, [r6], #1
 80077d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80077da:	f7f9 f9af 	bl	8000b3c <__aeabi_dcmplt>
 80077de:	2800      	cmp	r0, #0
 80077e0:	d171      	bne.n	80078c6 <_dtoa_r+0x65e>
 80077e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077e6:	4911      	ldr	r1, [pc, #68]	@ (800782c <_dtoa_r+0x5c4>)
 80077e8:	2000      	movs	r0, #0
 80077ea:	f7f8 fd7d 	bl	80002e8 <__aeabi_dsub>
 80077ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80077f2:	f7f9 f9a3 	bl	8000b3c <__aeabi_dcmplt>
 80077f6:	2800      	cmp	r0, #0
 80077f8:	f040 8095 	bne.w	8007926 <_dtoa_r+0x6be>
 80077fc:	42a6      	cmp	r6, r4
 80077fe:	f43f af50 	beq.w	80076a2 <_dtoa_r+0x43a>
 8007802:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007806:	4b0a      	ldr	r3, [pc, #40]	@ (8007830 <_dtoa_r+0x5c8>)
 8007808:	2200      	movs	r2, #0
 800780a:	f7f8 ff25 	bl	8000658 <__aeabi_dmul>
 800780e:	4b08      	ldr	r3, [pc, #32]	@ (8007830 <_dtoa_r+0x5c8>)
 8007810:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007814:	2200      	movs	r2, #0
 8007816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800781a:	f7f8 ff1d 	bl	8000658 <__aeabi_dmul>
 800781e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007822:	e7c4      	b.n	80077ae <_dtoa_r+0x546>
 8007824:	0800aad0 	.word	0x0800aad0
 8007828:	0800aaa8 	.word	0x0800aaa8
 800782c:	3ff00000 	.word	0x3ff00000
 8007830:	40240000 	.word	0x40240000
 8007834:	401c0000 	.word	0x401c0000
 8007838:	40140000 	.word	0x40140000
 800783c:	3fe00000 	.word	0x3fe00000
 8007840:	4631      	mov	r1, r6
 8007842:	4628      	mov	r0, r5
 8007844:	f7f8 ff08 	bl	8000658 <__aeabi_dmul>
 8007848:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800784c:	9415      	str	r4, [sp, #84]	@ 0x54
 800784e:	4656      	mov	r6, sl
 8007850:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007854:	f7f9 f9b0 	bl	8000bb8 <__aeabi_d2iz>
 8007858:	4605      	mov	r5, r0
 800785a:	f7f8 fe93 	bl	8000584 <__aeabi_i2d>
 800785e:	4602      	mov	r2, r0
 8007860:	460b      	mov	r3, r1
 8007862:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007866:	f7f8 fd3f 	bl	80002e8 <__aeabi_dsub>
 800786a:	3530      	adds	r5, #48	@ 0x30
 800786c:	f806 5b01 	strb.w	r5, [r6], #1
 8007870:	4602      	mov	r2, r0
 8007872:	460b      	mov	r3, r1
 8007874:	42a6      	cmp	r6, r4
 8007876:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800787a:	f04f 0200 	mov.w	r2, #0
 800787e:	d124      	bne.n	80078ca <_dtoa_r+0x662>
 8007880:	4bac      	ldr	r3, [pc, #688]	@ (8007b34 <_dtoa_r+0x8cc>)
 8007882:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007886:	f7f8 fd31 	bl	80002ec <__adddf3>
 800788a:	4602      	mov	r2, r0
 800788c:	460b      	mov	r3, r1
 800788e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007892:	f7f9 f971 	bl	8000b78 <__aeabi_dcmpgt>
 8007896:	2800      	cmp	r0, #0
 8007898:	d145      	bne.n	8007926 <_dtoa_r+0x6be>
 800789a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800789e:	49a5      	ldr	r1, [pc, #660]	@ (8007b34 <_dtoa_r+0x8cc>)
 80078a0:	2000      	movs	r0, #0
 80078a2:	f7f8 fd21 	bl	80002e8 <__aeabi_dsub>
 80078a6:	4602      	mov	r2, r0
 80078a8:	460b      	mov	r3, r1
 80078aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078ae:	f7f9 f945 	bl	8000b3c <__aeabi_dcmplt>
 80078b2:	2800      	cmp	r0, #0
 80078b4:	f43f aef5 	beq.w	80076a2 <_dtoa_r+0x43a>
 80078b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80078ba:	1e73      	subs	r3, r6, #1
 80078bc:	9315      	str	r3, [sp, #84]	@ 0x54
 80078be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80078c2:	2b30      	cmp	r3, #48	@ 0x30
 80078c4:	d0f8      	beq.n	80078b8 <_dtoa_r+0x650>
 80078c6:	9f04      	ldr	r7, [sp, #16]
 80078c8:	e73e      	b.n	8007748 <_dtoa_r+0x4e0>
 80078ca:	4b9b      	ldr	r3, [pc, #620]	@ (8007b38 <_dtoa_r+0x8d0>)
 80078cc:	f7f8 fec4 	bl	8000658 <__aeabi_dmul>
 80078d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078d4:	e7bc      	b.n	8007850 <_dtoa_r+0x5e8>
 80078d6:	d10c      	bne.n	80078f2 <_dtoa_r+0x68a>
 80078d8:	4b98      	ldr	r3, [pc, #608]	@ (8007b3c <_dtoa_r+0x8d4>)
 80078da:	2200      	movs	r2, #0
 80078dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078e0:	f7f8 feba 	bl	8000658 <__aeabi_dmul>
 80078e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078e8:	f7f9 f93c 	bl	8000b64 <__aeabi_dcmpge>
 80078ec:	2800      	cmp	r0, #0
 80078ee:	f000 8157 	beq.w	8007ba0 <_dtoa_r+0x938>
 80078f2:	2400      	movs	r4, #0
 80078f4:	4625      	mov	r5, r4
 80078f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078f8:	43db      	mvns	r3, r3
 80078fa:	9304      	str	r3, [sp, #16]
 80078fc:	4656      	mov	r6, sl
 80078fe:	2700      	movs	r7, #0
 8007900:	4621      	mov	r1, r4
 8007902:	4658      	mov	r0, fp
 8007904:	f000 fbb4 	bl	8008070 <_Bfree>
 8007908:	2d00      	cmp	r5, #0
 800790a:	d0dc      	beq.n	80078c6 <_dtoa_r+0x65e>
 800790c:	b12f      	cbz	r7, 800791a <_dtoa_r+0x6b2>
 800790e:	42af      	cmp	r7, r5
 8007910:	d003      	beq.n	800791a <_dtoa_r+0x6b2>
 8007912:	4639      	mov	r1, r7
 8007914:	4658      	mov	r0, fp
 8007916:	f000 fbab 	bl	8008070 <_Bfree>
 800791a:	4629      	mov	r1, r5
 800791c:	4658      	mov	r0, fp
 800791e:	f000 fba7 	bl	8008070 <_Bfree>
 8007922:	e7d0      	b.n	80078c6 <_dtoa_r+0x65e>
 8007924:	9704      	str	r7, [sp, #16]
 8007926:	4633      	mov	r3, r6
 8007928:	461e      	mov	r6, r3
 800792a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800792e:	2a39      	cmp	r2, #57	@ 0x39
 8007930:	d107      	bne.n	8007942 <_dtoa_r+0x6da>
 8007932:	459a      	cmp	sl, r3
 8007934:	d1f8      	bne.n	8007928 <_dtoa_r+0x6c0>
 8007936:	9a04      	ldr	r2, [sp, #16]
 8007938:	3201      	adds	r2, #1
 800793a:	9204      	str	r2, [sp, #16]
 800793c:	2230      	movs	r2, #48	@ 0x30
 800793e:	f88a 2000 	strb.w	r2, [sl]
 8007942:	781a      	ldrb	r2, [r3, #0]
 8007944:	3201      	adds	r2, #1
 8007946:	701a      	strb	r2, [r3, #0]
 8007948:	e7bd      	b.n	80078c6 <_dtoa_r+0x65e>
 800794a:	4b7b      	ldr	r3, [pc, #492]	@ (8007b38 <_dtoa_r+0x8d0>)
 800794c:	2200      	movs	r2, #0
 800794e:	f7f8 fe83 	bl	8000658 <__aeabi_dmul>
 8007952:	2200      	movs	r2, #0
 8007954:	2300      	movs	r3, #0
 8007956:	4604      	mov	r4, r0
 8007958:	460d      	mov	r5, r1
 800795a:	f7f9 f8e5 	bl	8000b28 <__aeabi_dcmpeq>
 800795e:	2800      	cmp	r0, #0
 8007960:	f43f aebb 	beq.w	80076da <_dtoa_r+0x472>
 8007964:	e6f0      	b.n	8007748 <_dtoa_r+0x4e0>
 8007966:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007968:	2a00      	cmp	r2, #0
 800796a:	f000 80db 	beq.w	8007b24 <_dtoa_r+0x8bc>
 800796e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007970:	2a01      	cmp	r2, #1
 8007972:	f300 80bf 	bgt.w	8007af4 <_dtoa_r+0x88c>
 8007976:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007978:	2a00      	cmp	r2, #0
 800797a:	f000 80b7 	beq.w	8007aec <_dtoa_r+0x884>
 800797e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007982:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007984:	4646      	mov	r6, r8
 8007986:	9a08      	ldr	r2, [sp, #32]
 8007988:	2101      	movs	r1, #1
 800798a:	441a      	add	r2, r3
 800798c:	4658      	mov	r0, fp
 800798e:	4498      	add	r8, r3
 8007990:	9208      	str	r2, [sp, #32]
 8007992:	f000 fc6b 	bl	800826c <__i2b>
 8007996:	4605      	mov	r5, r0
 8007998:	b15e      	cbz	r6, 80079b2 <_dtoa_r+0x74a>
 800799a:	9b08      	ldr	r3, [sp, #32]
 800799c:	2b00      	cmp	r3, #0
 800799e:	dd08      	ble.n	80079b2 <_dtoa_r+0x74a>
 80079a0:	42b3      	cmp	r3, r6
 80079a2:	9a08      	ldr	r2, [sp, #32]
 80079a4:	bfa8      	it	ge
 80079a6:	4633      	movge	r3, r6
 80079a8:	eba8 0803 	sub.w	r8, r8, r3
 80079ac:	1af6      	subs	r6, r6, r3
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	9308      	str	r3, [sp, #32]
 80079b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079b4:	b1f3      	cbz	r3, 80079f4 <_dtoa_r+0x78c>
 80079b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 80b7 	beq.w	8007b2c <_dtoa_r+0x8c4>
 80079be:	b18c      	cbz	r4, 80079e4 <_dtoa_r+0x77c>
 80079c0:	4629      	mov	r1, r5
 80079c2:	4622      	mov	r2, r4
 80079c4:	4658      	mov	r0, fp
 80079c6:	f000 fd11 	bl	80083ec <__pow5mult>
 80079ca:	464a      	mov	r2, r9
 80079cc:	4601      	mov	r1, r0
 80079ce:	4605      	mov	r5, r0
 80079d0:	4658      	mov	r0, fp
 80079d2:	f000 fc61 	bl	8008298 <__multiply>
 80079d6:	4649      	mov	r1, r9
 80079d8:	9004      	str	r0, [sp, #16]
 80079da:	4658      	mov	r0, fp
 80079dc:	f000 fb48 	bl	8008070 <_Bfree>
 80079e0:	9b04      	ldr	r3, [sp, #16]
 80079e2:	4699      	mov	r9, r3
 80079e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079e6:	1b1a      	subs	r2, r3, r4
 80079e8:	d004      	beq.n	80079f4 <_dtoa_r+0x78c>
 80079ea:	4649      	mov	r1, r9
 80079ec:	4658      	mov	r0, fp
 80079ee:	f000 fcfd 	bl	80083ec <__pow5mult>
 80079f2:	4681      	mov	r9, r0
 80079f4:	2101      	movs	r1, #1
 80079f6:	4658      	mov	r0, fp
 80079f8:	f000 fc38 	bl	800826c <__i2b>
 80079fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079fe:	4604      	mov	r4, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f000 81cf 	beq.w	8007da4 <_dtoa_r+0xb3c>
 8007a06:	461a      	mov	r2, r3
 8007a08:	4601      	mov	r1, r0
 8007a0a:	4658      	mov	r0, fp
 8007a0c:	f000 fcee 	bl	80083ec <__pow5mult>
 8007a10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	4604      	mov	r4, r0
 8007a16:	f300 8095 	bgt.w	8007b44 <_dtoa_r+0x8dc>
 8007a1a:	9b02      	ldr	r3, [sp, #8]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f040 8087 	bne.w	8007b30 <_dtoa_r+0x8c8>
 8007a22:	9b03      	ldr	r3, [sp, #12]
 8007a24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f040 8089 	bne.w	8007b40 <_dtoa_r+0x8d8>
 8007a2e:	9b03      	ldr	r3, [sp, #12]
 8007a30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a34:	0d1b      	lsrs	r3, r3, #20
 8007a36:	051b      	lsls	r3, r3, #20
 8007a38:	b12b      	cbz	r3, 8007a46 <_dtoa_r+0x7de>
 8007a3a:	9b08      	ldr	r3, [sp, #32]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	9308      	str	r3, [sp, #32]
 8007a40:	f108 0801 	add.w	r8, r8, #1
 8007a44:	2301      	movs	r3, #1
 8007a46:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f000 81b0 	beq.w	8007db0 <_dtoa_r+0xb48>
 8007a50:	6923      	ldr	r3, [r4, #16]
 8007a52:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a56:	6918      	ldr	r0, [r3, #16]
 8007a58:	f000 fbbc 	bl	80081d4 <__hi0bits>
 8007a5c:	f1c0 0020 	rsb	r0, r0, #32
 8007a60:	9b08      	ldr	r3, [sp, #32]
 8007a62:	4418      	add	r0, r3
 8007a64:	f010 001f 	ands.w	r0, r0, #31
 8007a68:	d077      	beq.n	8007b5a <_dtoa_r+0x8f2>
 8007a6a:	f1c0 0320 	rsb	r3, r0, #32
 8007a6e:	2b04      	cmp	r3, #4
 8007a70:	dd6b      	ble.n	8007b4a <_dtoa_r+0x8e2>
 8007a72:	9b08      	ldr	r3, [sp, #32]
 8007a74:	f1c0 001c 	rsb	r0, r0, #28
 8007a78:	4403      	add	r3, r0
 8007a7a:	4480      	add	r8, r0
 8007a7c:	4406      	add	r6, r0
 8007a7e:	9308      	str	r3, [sp, #32]
 8007a80:	f1b8 0f00 	cmp.w	r8, #0
 8007a84:	dd05      	ble.n	8007a92 <_dtoa_r+0x82a>
 8007a86:	4649      	mov	r1, r9
 8007a88:	4642      	mov	r2, r8
 8007a8a:	4658      	mov	r0, fp
 8007a8c:	f000 fd08 	bl	80084a0 <__lshift>
 8007a90:	4681      	mov	r9, r0
 8007a92:	9b08      	ldr	r3, [sp, #32]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	dd05      	ble.n	8007aa4 <_dtoa_r+0x83c>
 8007a98:	4621      	mov	r1, r4
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	4658      	mov	r0, fp
 8007a9e:	f000 fcff 	bl	80084a0 <__lshift>
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d059      	beq.n	8007b5e <_dtoa_r+0x8f6>
 8007aaa:	4621      	mov	r1, r4
 8007aac:	4648      	mov	r0, r9
 8007aae:	f000 fd63 	bl	8008578 <__mcmp>
 8007ab2:	2800      	cmp	r0, #0
 8007ab4:	da53      	bge.n	8007b5e <_dtoa_r+0x8f6>
 8007ab6:	1e7b      	subs	r3, r7, #1
 8007ab8:	9304      	str	r3, [sp, #16]
 8007aba:	4649      	mov	r1, r9
 8007abc:	2300      	movs	r3, #0
 8007abe:	220a      	movs	r2, #10
 8007ac0:	4658      	mov	r0, fp
 8007ac2:	f000 faf7 	bl	80080b4 <__multadd>
 8007ac6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ac8:	4681      	mov	r9, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	f000 8172 	beq.w	8007db4 <_dtoa_r+0xb4c>
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	4629      	mov	r1, r5
 8007ad4:	220a      	movs	r2, #10
 8007ad6:	4658      	mov	r0, fp
 8007ad8:	f000 faec 	bl	80080b4 <__multadd>
 8007adc:	9b00      	ldr	r3, [sp, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	4605      	mov	r5, r0
 8007ae2:	dc67      	bgt.n	8007bb4 <_dtoa_r+0x94c>
 8007ae4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	dc41      	bgt.n	8007b6e <_dtoa_r+0x906>
 8007aea:	e063      	b.n	8007bb4 <_dtoa_r+0x94c>
 8007aec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007aee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007af2:	e746      	b.n	8007982 <_dtoa_r+0x71a>
 8007af4:	9b07      	ldr	r3, [sp, #28]
 8007af6:	1e5c      	subs	r4, r3, #1
 8007af8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007afa:	42a3      	cmp	r3, r4
 8007afc:	bfbf      	itttt	lt
 8007afe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007b00:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007b02:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007b04:	1ae3      	sublt	r3, r4, r3
 8007b06:	bfb4      	ite	lt
 8007b08:	18d2      	addlt	r2, r2, r3
 8007b0a:	1b1c      	subge	r4, r3, r4
 8007b0c:	9b07      	ldr	r3, [sp, #28]
 8007b0e:	bfbc      	itt	lt
 8007b10:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007b12:	2400      	movlt	r4, #0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	bfb5      	itete	lt
 8007b18:	eba8 0603 	sublt.w	r6, r8, r3
 8007b1c:	9b07      	ldrge	r3, [sp, #28]
 8007b1e:	2300      	movlt	r3, #0
 8007b20:	4646      	movge	r6, r8
 8007b22:	e730      	b.n	8007986 <_dtoa_r+0x71e>
 8007b24:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007b26:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007b28:	4646      	mov	r6, r8
 8007b2a:	e735      	b.n	8007998 <_dtoa_r+0x730>
 8007b2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b2e:	e75c      	b.n	80079ea <_dtoa_r+0x782>
 8007b30:	2300      	movs	r3, #0
 8007b32:	e788      	b.n	8007a46 <_dtoa_r+0x7de>
 8007b34:	3fe00000 	.word	0x3fe00000
 8007b38:	40240000 	.word	0x40240000
 8007b3c:	40140000 	.word	0x40140000
 8007b40:	9b02      	ldr	r3, [sp, #8]
 8007b42:	e780      	b.n	8007a46 <_dtoa_r+0x7de>
 8007b44:	2300      	movs	r3, #0
 8007b46:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b48:	e782      	b.n	8007a50 <_dtoa_r+0x7e8>
 8007b4a:	d099      	beq.n	8007a80 <_dtoa_r+0x818>
 8007b4c:	9a08      	ldr	r2, [sp, #32]
 8007b4e:	331c      	adds	r3, #28
 8007b50:	441a      	add	r2, r3
 8007b52:	4498      	add	r8, r3
 8007b54:	441e      	add	r6, r3
 8007b56:	9208      	str	r2, [sp, #32]
 8007b58:	e792      	b.n	8007a80 <_dtoa_r+0x818>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	e7f6      	b.n	8007b4c <_dtoa_r+0x8e4>
 8007b5e:	9b07      	ldr	r3, [sp, #28]
 8007b60:	9704      	str	r7, [sp, #16]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	dc20      	bgt.n	8007ba8 <_dtoa_r+0x940>
 8007b66:	9300      	str	r3, [sp, #0]
 8007b68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	dd1e      	ble.n	8007bac <_dtoa_r+0x944>
 8007b6e:	9b00      	ldr	r3, [sp, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f47f aec0 	bne.w	80078f6 <_dtoa_r+0x68e>
 8007b76:	4621      	mov	r1, r4
 8007b78:	2205      	movs	r2, #5
 8007b7a:	4658      	mov	r0, fp
 8007b7c:	f000 fa9a 	bl	80080b4 <__multadd>
 8007b80:	4601      	mov	r1, r0
 8007b82:	4604      	mov	r4, r0
 8007b84:	4648      	mov	r0, r9
 8007b86:	f000 fcf7 	bl	8008578 <__mcmp>
 8007b8a:	2800      	cmp	r0, #0
 8007b8c:	f77f aeb3 	ble.w	80078f6 <_dtoa_r+0x68e>
 8007b90:	4656      	mov	r6, sl
 8007b92:	2331      	movs	r3, #49	@ 0x31
 8007b94:	f806 3b01 	strb.w	r3, [r6], #1
 8007b98:	9b04      	ldr	r3, [sp, #16]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	9304      	str	r3, [sp, #16]
 8007b9e:	e6ae      	b.n	80078fe <_dtoa_r+0x696>
 8007ba0:	9c07      	ldr	r4, [sp, #28]
 8007ba2:	9704      	str	r7, [sp, #16]
 8007ba4:	4625      	mov	r5, r4
 8007ba6:	e7f3      	b.n	8007b90 <_dtoa_r+0x928>
 8007ba8:	9b07      	ldr	r3, [sp, #28]
 8007baa:	9300      	str	r3, [sp, #0]
 8007bac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f000 8104 	beq.w	8007dbc <_dtoa_r+0xb54>
 8007bb4:	2e00      	cmp	r6, #0
 8007bb6:	dd05      	ble.n	8007bc4 <_dtoa_r+0x95c>
 8007bb8:	4629      	mov	r1, r5
 8007bba:	4632      	mov	r2, r6
 8007bbc:	4658      	mov	r0, fp
 8007bbe:	f000 fc6f 	bl	80084a0 <__lshift>
 8007bc2:	4605      	mov	r5, r0
 8007bc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d05a      	beq.n	8007c80 <_dtoa_r+0xa18>
 8007bca:	6869      	ldr	r1, [r5, #4]
 8007bcc:	4658      	mov	r0, fp
 8007bce:	f000 fa0f 	bl	8007ff0 <_Balloc>
 8007bd2:	4606      	mov	r6, r0
 8007bd4:	b928      	cbnz	r0, 8007be2 <_dtoa_r+0x97a>
 8007bd6:	4b84      	ldr	r3, [pc, #528]	@ (8007de8 <_dtoa_r+0xb80>)
 8007bd8:	4602      	mov	r2, r0
 8007bda:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007bde:	f7ff bb5a 	b.w	8007296 <_dtoa_r+0x2e>
 8007be2:	692a      	ldr	r2, [r5, #16]
 8007be4:	3202      	adds	r2, #2
 8007be6:	0092      	lsls	r2, r2, #2
 8007be8:	f105 010c 	add.w	r1, r5, #12
 8007bec:	300c      	adds	r0, #12
 8007bee:	f002 f929 	bl	8009e44 <memcpy>
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	4631      	mov	r1, r6
 8007bf6:	4658      	mov	r0, fp
 8007bf8:	f000 fc52 	bl	80084a0 <__lshift>
 8007bfc:	f10a 0301 	add.w	r3, sl, #1
 8007c00:	9307      	str	r3, [sp, #28]
 8007c02:	9b00      	ldr	r3, [sp, #0]
 8007c04:	4453      	add	r3, sl
 8007c06:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c08:	9b02      	ldr	r3, [sp, #8]
 8007c0a:	f003 0301 	and.w	r3, r3, #1
 8007c0e:	462f      	mov	r7, r5
 8007c10:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c12:	4605      	mov	r5, r0
 8007c14:	9b07      	ldr	r3, [sp, #28]
 8007c16:	4621      	mov	r1, r4
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	4648      	mov	r0, r9
 8007c1c:	9300      	str	r3, [sp, #0]
 8007c1e:	f7ff fa9b 	bl	8007158 <quorem>
 8007c22:	4639      	mov	r1, r7
 8007c24:	9002      	str	r0, [sp, #8]
 8007c26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007c2a:	4648      	mov	r0, r9
 8007c2c:	f000 fca4 	bl	8008578 <__mcmp>
 8007c30:	462a      	mov	r2, r5
 8007c32:	9008      	str	r0, [sp, #32]
 8007c34:	4621      	mov	r1, r4
 8007c36:	4658      	mov	r0, fp
 8007c38:	f000 fcba 	bl	80085b0 <__mdiff>
 8007c3c:	68c2      	ldr	r2, [r0, #12]
 8007c3e:	4606      	mov	r6, r0
 8007c40:	bb02      	cbnz	r2, 8007c84 <_dtoa_r+0xa1c>
 8007c42:	4601      	mov	r1, r0
 8007c44:	4648      	mov	r0, r9
 8007c46:	f000 fc97 	bl	8008578 <__mcmp>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	4631      	mov	r1, r6
 8007c4e:	4658      	mov	r0, fp
 8007c50:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c52:	f000 fa0d 	bl	8008070 <_Bfree>
 8007c56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c58:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c5a:	9e07      	ldr	r6, [sp, #28]
 8007c5c:	ea43 0102 	orr.w	r1, r3, r2
 8007c60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c62:	4319      	orrs	r1, r3
 8007c64:	d110      	bne.n	8007c88 <_dtoa_r+0xa20>
 8007c66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c6a:	d029      	beq.n	8007cc0 <_dtoa_r+0xa58>
 8007c6c:	9b08      	ldr	r3, [sp, #32]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	dd02      	ble.n	8007c78 <_dtoa_r+0xa10>
 8007c72:	9b02      	ldr	r3, [sp, #8]
 8007c74:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007c78:	9b00      	ldr	r3, [sp, #0]
 8007c7a:	f883 8000 	strb.w	r8, [r3]
 8007c7e:	e63f      	b.n	8007900 <_dtoa_r+0x698>
 8007c80:	4628      	mov	r0, r5
 8007c82:	e7bb      	b.n	8007bfc <_dtoa_r+0x994>
 8007c84:	2201      	movs	r2, #1
 8007c86:	e7e1      	b.n	8007c4c <_dtoa_r+0x9e4>
 8007c88:	9b08      	ldr	r3, [sp, #32]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	db04      	blt.n	8007c98 <_dtoa_r+0xa30>
 8007c8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c90:	430b      	orrs	r3, r1
 8007c92:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c94:	430b      	orrs	r3, r1
 8007c96:	d120      	bne.n	8007cda <_dtoa_r+0xa72>
 8007c98:	2a00      	cmp	r2, #0
 8007c9a:	dded      	ble.n	8007c78 <_dtoa_r+0xa10>
 8007c9c:	4649      	mov	r1, r9
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	4658      	mov	r0, fp
 8007ca2:	f000 fbfd 	bl	80084a0 <__lshift>
 8007ca6:	4621      	mov	r1, r4
 8007ca8:	4681      	mov	r9, r0
 8007caa:	f000 fc65 	bl	8008578 <__mcmp>
 8007cae:	2800      	cmp	r0, #0
 8007cb0:	dc03      	bgt.n	8007cba <_dtoa_r+0xa52>
 8007cb2:	d1e1      	bne.n	8007c78 <_dtoa_r+0xa10>
 8007cb4:	f018 0f01 	tst.w	r8, #1
 8007cb8:	d0de      	beq.n	8007c78 <_dtoa_r+0xa10>
 8007cba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007cbe:	d1d8      	bne.n	8007c72 <_dtoa_r+0xa0a>
 8007cc0:	9a00      	ldr	r2, [sp, #0]
 8007cc2:	2339      	movs	r3, #57	@ 0x39
 8007cc4:	7013      	strb	r3, [r2, #0]
 8007cc6:	4633      	mov	r3, r6
 8007cc8:	461e      	mov	r6, r3
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007cd0:	2a39      	cmp	r2, #57	@ 0x39
 8007cd2:	d052      	beq.n	8007d7a <_dtoa_r+0xb12>
 8007cd4:	3201      	adds	r2, #1
 8007cd6:	701a      	strb	r2, [r3, #0]
 8007cd8:	e612      	b.n	8007900 <_dtoa_r+0x698>
 8007cda:	2a00      	cmp	r2, #0
 8007cdc:	dd07      	ble.n	8007cee <_dtoa_r+0xa86>
 8007cde:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007ce2:	d0ed      	beq.n	8007cc0 <_dtoa_r+0xa58>
 8007ce4:	9a00      	ldr	r2, [sp, #0]
 8007ce6:	f108 0301 	add.w	r3, r8, #1
 8007cea:	7013      	strb	r3, [r2, #0]
 8007cec:	e608      	b.n	8007900 <_dtoa_r+0x698>
 8007cee:	9b07      	ldr	r3, [sp, #28]
 8007cf0:	9a07      	ldr	r2, [sp, #28]
 8007cf2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007cf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d028      	beq.n	8007d4e <_dtoa_r+0xae6>
 8007cfc:	4649      	mov	r1, r9
 8007cfe:	2300      	movs	r3, #0
 8007d00:	220a      	movs	r2, #10
 8007d02:	4658      	mov	r0, fp
 8007d04:	f000 f9d6 	bl	80080b4 <__multadd>
 8007d08:	42af      	cmp	r7, r5
 8007d0a:	4681      	mov	r9, r0
 8007d0c:	f04f 0300 	mov.w	r3, #0
 8007d10:	f04f 020a 	mov.w	r2, #10
 8007d14:	4639      	mov	r1, r7
 8007d16:	4658      	mov	r0, fp
 8007d18:	d107      	bne.n	8007d2a <_dtoa_r+0xac2>
 8007d1a:	f000 f9cb 	bl	80080b4 <__multadd>
 8007d1e:	4607      	mov	r7, r0
 8007d20:	4605      	mov	r5, r0
 8007d22:	9b07      	ldr	r3, [sp, #28]
 8007d24:	3301      	adds	r3, #1
 8007d26:	9307      	str	r3, [sp, #28]
 8007d28:	e774      	b.n	8007c14 <_dtoa_r+0x9ac>
 8007d2a:	f000 f9c3 	bl	80080b4 <__multadd>
 8007d2e:	4629      	mov	r1, r5
 8007d30:	4607      	mov	r7, r0
 8007d32:	2300      	movs	r3, #0
 8007d34:	220a      	movs	r2, #10
 8007d36:	4658      	mov	r0, fp
 8007d38:	f000 f9bc 	bl	80080b4 <__multadd>
 8007d3c:	4605      	mov	r5, r0
 8007d3e:	e7f0      	b.n	8007d22 <_dtoa_r+0xaba>
 8007d40:	9b00      	ldr	r3, [sp, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	bfcc      	ite	gt
 8007d46:	461e      	movgt	r6, r3
 8007d48:	2601      	movle	r6, #1
 8007d4a:	4456      	add	r6, sl
 8007d4c:	2700      	movs	r7, #0
 8007d4e:	4649      	mov	r1, r9
 8007d50:	2201      	movs	r2, #1
 8007d52:	4658      	mov	r0, fp
 8007d54:	f000 fba4 	bl	80084a0 <__lshift>
 8007d58:	4621      	mov	r1, r4
 8007d5a:	4681      	mov	r9, r0
 8007d5c:	f000 fc0c 	bl	8008578 <__mcmp>
 8007d60:	2800      	cmp	r0, #0
 8007d62:	dcb0      	bgt.n	8007cc6 <_dtoa_r+0xa5e>
 8007d64:	d102      	bne.n	8007d6c <_dtoa_r+0xb04>
 8007d66:	f018 0f01 	tst.w	r8, #1
 8007d6a:	d1ac      	bne.n	8007cc6 <_dtoa_r+0xa5e>
 8007d6c:	4633      	mov	r3, r6
 8007d6e:	461e      	mov	r6, r3
 8007d70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d74:	2a30      	cmp	r2, #48	@ 0x30
 8007d76:	d0fa      	beq.n	8007d6e <_dtoa_r+0xb06>
 8007d78:	e5c2      	b.n	8007900 <_dtoa_r+0x698>
 8007d7a:	459a      	cmp	sl, r3
 8007d7c:	d1a4      	bne.n	8007cc8 <_dtoa_r+0xa60>
 8007d7e:	9b04      	ldr	r3, [sp, #16]
 8007d80:	3301      	adds	r3, #1
 8007d82:	9304      	str	r3, [sp, #16]
 8007d84:	2331      	movs	r3, #49	@ 0x31
 8007d86:	f88a 3000 	strb.w	r3, [sl]
 8007d8a:	e5b9      	b.n	8007900 <_dtoa_r+0x698>
 8007d8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d8e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007dec <_dtoa_r+0xb84>
 8007d92:	b11b      	cbz	r3, 8007d9c <_dtoa_r+0xb34>
 8007d94:	f10a 0308 	add.w	r3, sl, #8
 8007d98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007d9a:	6013      	str	r3, [r2, #0]
 8007d9c:	4650      	mov	r0, sl
 8007d9e:	b019      	add	sp, #100	@ 0x64
 8007da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	f77f ae37 	ble.w	8007a1a <_dtoa_r+0x7b2>
 8007dac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dae:	930a      	str	r3, [sp, #40]	@ 0x28
 8007db0:	2001      	movs	r0, #1
 8007db2:	e655      	b.n	8007a60 <_dtoa_r+0x7f8>
 8007db4:	9b00      	ldr	r3, [sp, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	f77f aed6 	ble.w	8007b68 <_dtoa_r+0x900>
 8007dbc:	4656      	mov	r6, sl
 8007dbe:	4621      	mov	r1, r4
 8007dc0:	4648      	mov	r0, r9
 8007dc2:	f7ff f9c9 	bl	8007158 <quorem>
 8007dc6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007dca:	f806 8b01 	strb.w	r8, [r6], #1
 8007dce:	9b00      	ldr	r3, [sp, #0]
 8007dd0:	eba6 020a 	sub.w	r2, r6, sl
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	ddb3      	ble.n	8007d40 <_dtoa_r+0xad8>
 8007dd8:	4649      	mov	r1, r9
 8007dda:	2300      	movs	r3, #0
 8007ddc:	220a      	movs	r2, #10
 8007dde:	4658      	mov	r0, fp
 8007de0:	f000 f968 	bl	80080b4 <__multadd>
 8007de4:	4681      	mov	r9, r0
 8007de6:	e7ea      	b.n	8007dbe <_dtoa_r+0xb56>
 8007de8:	0800aa31 	.word	0x0800aa31
 8007dec:	0800a9b5 	.word	0x0800a9b5

08007df0 <_free_r>:
 8007df0:	b538      	push	{r3, r4, r5, lr}
 8007df2:	4605      	mov	r5, r0
 8007df4:	2900      	cmp	r1, #0
 8007df6:	d041      	beq.n	8007e7c <_free_r+0x8c>
 8007df8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dfc:	1f0c      	subs	r4, r1, #4
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	bfb8      	it	lt
 8007e02:	18e4      	addlt	r4, r4, r3
 8007e04:	f000 f8e8 	bl	8007fd8 <__malloc_lock>
 8007e08:	4a1d      	ldr	r2, [pc, #116]	@ (8007e80 <_free_r+0x90>)
 8007e0a:	6813      	ldr	r3, [r2, #0]
 8007e0c:	b933      	cbnz	r3, 8007e1c <_free_r+0x2c>
 8007e0e:	6063      	str	r3, [r4, #4]
 8007e10:	6014      	str	r4, [r2, #0]
 8007e12:	4628      	mov	r0, r5
 8007e14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e18:	f000 b8e4 	b.w	8007fe4 <__malloc_unlock>
 8007e1c:	42a3      	cmp	r3, r4
 8007e1e:	d908      	bls.n	8007e32 <_free_r+0x42>
 8007e20:	6820      	ldr	r0, [r4, #0]
 8007e22:	1821      	adds	r1, r4, r0
 8007e24:	428b      	cmp	r3, r1
 8007e26:	bf01      	itttt	eq
 8007e28:	6819      	ldreq	r1, [r3, #0]
 8007e2a:	685b      	ldreq	r3, [r3, #4]
 8007e2c:	1809      	addeq	r1, r1, r0
 8007e2e:	6021      	streq	r1, [r4, #0]
 8007e30:	e7ed      	b.n	8007e0e <_free_r+0x1e>
 8007e32:	461a      	mov	r2, r3
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	b10b      	cbz	r3, 8007e3c <_free_r+0x4c>
 8007e38:	42a3      	cmp	r3, r4
 8007e3a:	d9fa      	bls.n	8007e32 <_free_r+0x42>
 8007e3c:	6811      	ldr	r1, [r2, #0]
 8007e3e:	1850      	adds	r0, r2, r1
 8007e40:	42a0      	cmp	r0, r4
 8007e42:	d10b      	bne.n	8007e5c <_free_r+0x6c>
 8007e44:	6820      	ldr	r0, [r4, #0]
 8007e46:	4401      	add	r1, r0
 8007e48:	1850      	adds	r0, r2, r1
 8007e4a:	4283      	cmp	r3, r0
 8007e4c:	6011      	str	r1, [r2, #0]
 8007e4e:	d1e0      	bne.n	8007e12 <_free_r+0x22>
 8007e50:	6818      	ldr	r0, [r3, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	6053      	str	r3, [r2, #4]
 8007e56:	4408      	add	r0, r1
 8007e58:	6010      	str	r0, [r2, #0]
 8007e5a:	e7da      	b.n	8007e12 <_free_r+0x22>
 8007e5c:	d902      	bls.n	8007e64 <_free_r+0x74>
 8007e5e:	230c      	movs	r3, #12
 8007e60:	602b      	str	r3, [r5, #0]
 8007e62:	e7d6      	b.n	8007e12 <_free_r+0x22>
 8007e64:	6820      	ldr	r0, [r4, #0]
 8007e66:	1821      	adds	r1, r4, r0
 8007e68:	428b      	cmp	r3, r1
 8007e6a:	bf04      	itt	eq
 8007e6c:	6819      	ldreq	r1, [r3, #0]
 8007e6e:	685b      	ldreq	r3, [r3, #4]
 8007e70:	6063      	str	r3, [r4, #4]
 8007e72:	bf04      	itt	eq
 8007e74:	1809      	addeq	r1, r1, r0
 8007e76:	6021      	streq	r1, [r4, #0]
 8007e78:	6054      	str	r4, [r2, #4]
 8007e7a:	e7ca      	b.n	8007e12 <_free_r+0x22>
 8007e7c:	bd38      	pop	{r3, r4, r5, pc}
 8007e7e:	bf00      	nop
 8007e80:	200004a8 	.word	0x200004a8

08007e84 <malloc>:
 8007e84:	4b02      	ldr	r3, [pc, #8]	@ (8007e90 <malloc+0xc>)
 8007e86:	4601      	mov	r1, r0
 8007e88:	6818      	ldr	r0, [r3, #0]
 8007e8a:	f000 b825 	b.w	8007ed8 <_malloc_r>
 8007e8e:	bf00      	nop
 8007e90:	2000001c 	.word	0x2000001c

08007e94 <sbrk_aligned>:
 8007e94:	b570      	push	{r4, r5, r6, lr}
 8007e96:	4e0f      	ldr	r6, [pc, #60]	@ (8007ed4 <sbrk_aligned+0x40>)
 8007e98:	460c      	mov	r4, r1
 8007e9a:	6831      	ldr	r1, [r6, #0]
 8007e9c:	4605      	mov	r5, r0
 8007e9e:	b911      	cbnz	r1, 8007ea6 <sbrk_aligned+0x12>
 8007ea0:	f001 ffc0 	bl	8009e24 <_sbrk_r>
 8007ea4:	6030      	str	r0, [r6, #0]
 8007ea6:	4621      	mov	r1, r4
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	f001 ffbb 	bl	8009e24 <_sbrk_r>
 8007eae:	1c43      	adds	r3, r0, #1
 8007eb0:	d103      	bne.n	8007eba <sbrk_aligned+0x26>
 8007eb2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	bd70      	pop	{r4, r5, r6, pc}
 8007eba:	1cc4      	adds	r4, r0, #3
 8007ebc:	f024 0403 	bic.w	r4, r4, #3
 8007ec0:	42a0      	cmp	r0, r4
 8007ec2:	d0f8      	beq.n	8007eb6 <sbrk_aligned+0x22>
 8007ec4:	1a21      	subs	r1, r4, r0
 8007ec6:	4628      	mov	r0, r5
 8007ec8:	f001 ffac 	bl	8009e24 <_sbrk_r>
 8007ecc:	3001      	adds	r0, #1
 8007ece:	d1f2      	bne.n	8007eb6 <sbrk_aligned+0x22>
 8007ed0:	e7ef      	b.n	8007eb2 <sbrk_aligned+0x1e>
 8007ed2:	bf00      	nop
 8007ed4:	200004a4 	.word	0x200004a4

08007ed8 <_malloc_r>:
 8007ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007edc:	1ccd      	adds	r5, r1, #3
 8007ede:	f025 0503 	bic.w	r5, r5, #3
 8007ee2:	3508      	adds	r5, #8
 8007ee4:	2d0c      	cmp	r5, #12
 8007ee6:	bf38      	it	cc
 8007ee8:	250c      	movcc	r5, #12
 8007eea:	2d00      	cmp	r5, #0
 8007eec:	4606      	mov	r6, r0
 8007eee:	db01      	blt.n	8007ef4 <_malloc_r+0x1c>
 8007ef0:	42a9      	cmp	r1, r5
 8007ef2:	d904      	bls.n	8007efe <_malloc_r+0x26>
 8007ef4:	230c      	movs	r3, #12
 8007ef6:	6033      	str	r3, [r6, #0]
 8007ef8:	2000      	movs	r0, #0
 8007efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007efe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007fd4 <_malloc_r+0xfc>
 8007f02:	f000 f869 	bl	8007fd8 <__malloc_lock>
 8007f06:	f8d8 3000 	ldr.w	r3, [r8]
 8007f0a:	461c      	mov	r4, r3
 8007f0c:	bb44      	cbnz	r4, 8007f60 <_malloc_r+0x88>
 8007f0e:	4629      	mov	r1, r5
 8007f10:	4630      	mov	r0, r6
 8007f12:	f7ff ffbf 	bl	8007e94 <sbrk_aligned>
 8007f16:	1c43      	adds	r3, r0, #1
 8007f18:	4604      	mov	r4, r0
 8007f1a:	d158      	bne.n	8007fce <_malloc_r+0xf6>
 8007f1c:	f8d8 4000 	ldr.w	r4, [r8]
 8007f20:	4627      	mov	r7, r4
 8007f22:	2f00      	cmp	r7, #0
 8007f24:	d143      	bne.n	8007fae <_malloc_r+0xd6>
 8007f26:	2c00      	cmp	r4, #0
 8007f28:	d04b      	beq.n	8007fc2 <_malloc_r+0xea>
 8007f2a:	6823      	ldr	r3, [r4, #0]
 8007f2c:	4639      	mov	r1, r7
 8007f2e:	4630      	mov	r0, r6
 8007f30:	eb04 0903 	add.w	r9, r4, r3
 8007f34:	f001 ff76 	bl	8009e24 <_sbrk_r>
 8007f38:	4581      	cmp	r9, r0
 8007f3a:	d142      	bne.n	8007fc2 <_malloc_r+0xea>
 8007f3c:	6821      	ldr	r1, [r4, #0]
 8007f3e:	1a6d      	subs	r5, r5, r1
 8007f40:	4629      	mov	r1, r5
 8007f42:	4630      	mov	r0, r6
 8007f44:	f7ff ffa6 	bl	8007e94 <sbrk_aligned>
 8007f48:	3001      	adds	r0, #1
 8007f4a:	d03a      	beq.n	8007fc2 <_malloc_r+0xea>
 8007f4c:	6823      	ldr	r3, [r4, #0]
 8007f4e:	442b      	add	r3, r5
 8007f50:	6023      	str	r3, [r4, #0]
 8007f52:	f8d8 3000 	ldr.w	r3, [r8]
 8007f56:	685a      	ldr	r2, [r3, #4]
 8007f58:	bb62      	cbnz	r2, 8007fb4 <_malloc_r+0xdc>
 8007f5a:	f8c8 7000 	str.w	r7, [r8]
 8007f5e:	e00f      	b.n	8007f80 <_malloc_r+0xa8>
 8007f60:	6822      	ldr	r2, [r4, #0]
 8007f62:	1b52      	subs	r2, r2, r5
 8007f64:	d420      	bmi.n	8007fa8 <_malloc_r+0xd0>
 8007f66:	2a0b      	cmp	r2, #11
 8007f68:	d917      	bls.n	8007f9a <_malloc_r+0xc2>
 8007f6a:	1961      	adds	r1, r4, r5
 8007f6c:	42a3      	cmp	r3, r4
 8007f6e:	6025      	str	r5, [r4, #0]
 8007f70:	bf18      	it	ne
 8007f72:	6059      	strne	r1, [r3, #4]
 8007f74:	6863      	ldr	r3, [r4, #4]
 8007f76:	bf08      	it	eq
 8007f78:	f8c8 1000 	streq.w	r1, [r8]
 8007f7c:	5162      	str	r2, [r4, r5]
 8007f7e:	604b      	str	r3, [r1, #4]
 8007f80:	4630      	mov	r0, r6
 8007f82:	f000 f82f 	bl	8007fe4 <__malloc_unlock>
 8007f86:	f104 000b 	add.w	r0, r4, #11
 8007f8a:	1d23      	adds	r3, r4, #4
 8007f8c:	f020 0007 	bic.w	r0, r0, #7
 8007f90:	1ac2      	subs	r2, r0, r3
 8007f92:	bf1c      	itt	ne
 8007f94:	1a1b      	subne	r3, r3, r0
 8007f96:	50a3      	strne	r3, [r4, r2]
 8007f98:	e7af      	b.n	8007efa <_malloc_r+0x22>
 8007f9a:	6862      	ldr	r2, [r4, #4]
 8007f9c:	42a3      	cmp	r3, r4
 8007f9e:	bf0c      	ite	eq
 8007fa0:	f8c8 2000 	streq.w	r2, [r8]
 8007fa4:	605a      	strne	r2, [r3, #4]
 8007fa6:	e7eb      	b.n	8007f80 <_malloc_r+0xa8>
 8007fa8:	4623      	mov	r3, r4
 8007faa:	6864      	ldr	r4, [r4, #4]
 8007fac:	e7ae      	b.n	8007f0c <_malloc_r+0x34>
 8007fae:	463c      	mov	r4, r7
 8007fb0:	687f      	ldr	r7, [r7, #4]
 8007fb2:	e7b6      	b.n	8007f22 <_malloc_r+0x4a>
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	42a3      	cmp	r3, r4
 8007fba:	d1fb      	bne.n	8007fb4 <_malloc_r+0xdc>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	6053      	str	r3, [r2, #4]
 8007fc0:	e7de      	b.n	8007f80 <_malloc_r+0xa8>
 8007fc2:	230c      	movs	r3, #12
 8007fc4:	6033      	str	r3, [r6, #0]
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	f000 f80c 	bl	8007fe4 <__malloc_unlock>
 8007fcc:	e794      	b.n	8007ef8 <_malloc_r+0x20>
 8007fce:	6005      	str	r5, [r0, #0]
 8007fd0:	e7d6      	b.n	8007f80 <_malloc_r+0xa8>
 8007fd2:	bf00      	nop
 8007fd4:	200004a8 	.word	0x200004a8

08007fd8 <__malloc_lock>:
 8007fd8:	4801      	ldr	r0, [pc, #4]	@ (8007fe0 <__malloc_lock+0x8>)
 8007fda:	f7ff b8b4 	b.w	8007146 <__retarget_lock_acquire_recursive>
 8007fde:	bf00      	nop
 8007fe0:	200004a0 	.word	0x200004a0

08007fe4 <__malloc_unlock>:
 8007fe4:	4801      	ldr	r0, [pc, #4]	@ (8007fec <__malloc_unlock+0x8>)
 8007fe6:	f7ff b8af 	b.w	8007148 <__retarget_lock_release_recursive>
 8007fea:	bf00      	nop
 8007fec:	200004a0 	.word	0x200004a0

08007ff0 <_Balloc>:
 8007ff0:	b570      	push	{r4, r5, r6, lr}
 8007ff2:	69c6      	ldr	r6, [r0, #28]
 8007ff4:	4604      	mov	r4, r0
 8007ff6:	460d      	mov	r5, r1
 8007ff8:	b976      	cbnz	r6, 8008018 <_Balloc+0x28>
 8007ffa:	2010      	movs	r0, #16
 8007ffc:	f7ff ff42 	bl	8007e84 <malloc>
 8008000:	4602      	mov	r2, r0
 8008002:	61e0      	str	r0, [r4, #28]
 8008004:	b920      	cbnz	r0, 8008010 <_Balloc+0x20>
 8008006:	4b18      	ldr	r3, [pc, #96]	@ (8008068 <_Balloc+0x78>)
 8008008:	4818      	ldr	r0, [pc, #96]	@ (800806c <_Balloc+0x7c>)
 800800a:	216b      	movs	r1, #107	@ 0x6b
 800800c:	f001 ff30 	bl	8009e70 <__assert_func>
 8008010:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008014:	6006      	str	r6, [r0, #0]
 8008016:	60c6      	str	r6, [r0, #12]
 8008018:	69e6      	ldr	r6, [r4, #28]
 800801a:	68f3      	ldr	r3, [r6, #12]
 800801c:	b183      	cbz	r3, 8008040 <_Balloc+0x50>
 800801e:	69e3      	ldr	r3, [r4, #28]
 8008020:	68db      	ldr	r3, [r3, #12]
 8008022:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008026:	b9b8      	cbnz	r0, 8008058 <_Balloc+0x68>
 8008028:	2101      	movs	r1, #1
 800802a:	fa01 f605 	lsl.w	r6, r1, r5
 800802e:	1d72      	adds	r2, r6, #5
 8008030:	0092      	lsls	r2, r2, #2
 8008032:	4620      	mov	r0, r4
 8008034:	f001 ff3a 	bl	8009eac <_calloc_r>
 8008038:	b160      	cbz	r0, 8008054 <_Balloc+0x64>
 800803a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800803e:	e00e      	b.n	800805e <_Balloc+0x6e>
 8008040:	2221      	movs	r2, #33	@ 0x21
 8008042:	2104      	movs	r1, #4
 8008044:	4620      	mov	r0, r4
 8008046:	f001 ff31 	bl	8009eac <_calloc_r>
 800804a:	69e3      	ldr	r3, [r4, #28]
 800804c:	60f0      	str	r0, [r6, #12]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d1e4      	bne.n	800801e <_Balloc+0x2e>
 8008054:	2000      	movs	r0, #0
 8008056:	bd70      	pop	{r4, r5, r6, pc}
 8008058:	6802      	ldr	r2, [r0, #0]
 800805a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800805e:	2300      	movs	r3, #0
 8008060:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008064:	e7f7      	b.n	8008056 <_Balloc+0x66>
 8008066:	bf00      	nop
 8008068:	0800a9c2 	.word	0x0800a9c2
 800806c:	0800aa42 	.word	0x0800aa42

08008070 <_Bfree>:
 8008070:	b570      	push	{r4, r5, r6, lr}
 8008072:	69c6      	ldr	r6, [r0, #28]
 8008074:	4605      	mov	r5, r0
 8008076:	460c      	mov	r4, r1
 8008078:	b976      	cbnz	r6, 8008098 <_Bfree+0x28>
 800807a:	2010      	movs	r0, #16
 800807c:	f7ff ff02 	bl	8007e84 <malloc>
 8008080:	4602      	mov	r2, r0
 8008082:	61e8      	str	r0, [r5, #28]
 8008084:	b920      	cbnz	r0, 8008090 <_Bfree+0x20>
 8008086:	4b09      	ldr	r3, [pc, #36]	@ (80080ac <_Bfree+0x3c>)
 8008088:	4809      	ldr	r0, [pc, #36]	@ (80080b0 <_Bfree+0x40>)
 800808a:	218f      	movs	r1, #143	@ 0x8f
 800808c:	f001 fef0 	bl	8009e70 <__assert_func>
 8008090:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008094:	6006      	str	r6, [r0, #0]
 8008096:	60c6      	str	r6, [r0, #12]
 8008098:	b13c      	cbz	r4, 80080aa <_Bfree+0x3a>
 800809a:	69eb      	ldr	r3, [r5, #28]
 800809c:	6862      	ldr	r2, [r4, #4]
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80080a4:	6021      	str	r1, [r4, #0]
 80080a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80080aa:	bd70      	pop	{r4, r5, r6, pc}
 80080ac:	0800a9c2 	.word	0x0800a9c2
 80080b0:	0800aa42 	.word	0x0800aa42

080080b4 <__multadd>:
 80080b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080b8:	690d      	ldr	r5, [r1, #16]
 80080ba:	4607      	mov	r7, r0
 80080bc:	460c      	mov	r4, r1
 80080be:	461e      	mov	r6, r3
 80080c0:	f101 0c14 	add.w	ip, r1, #20
 80080c4:	2000      	movs	r0, #0
 80080c6:	f8dc 3000 	ldr.w	r3, [ip]
 80080ca:	b299      	uxth	r1, r3
 80080cc:	fb02 6101 	mla	r1, r2, r1, r6
 80080d0:	0c1e      	lsrs	r6, r3, #16
 80080d2:	0c0b      	lsrs	r3, r1, #16
 80080d4:	fb02 3306 	mla	r3, r2, r6, r3
 80080d8:	b289      	uxth	r1, r1
 80080da:	3001      	adds	r0, #1
 80080dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80080e0:	4285      	cmp	r5, r0
 80080e2:	f84c 1b04 	str.w	r1, [ip], #4
 80080e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80080ea:	dcec      	bgt.n	80080c6 <__multadd+0x12>
 80080ec:	b30e      	cbz	r6, 8008132 <__multadd+0x7e>
 80080ee:	68a3      	ldr	r3, [r4, #8]
 80080f0:	42ab      	cmp	r3, r5
 80080f2:	dc19      	bgt.n	8008128 <__multadd+0x74>
 80080f4:	6861      	ldr	r1, [r4, #4]
 80080f6:	4638      	mov	r0, r7
 80080f8:	3101      	adds	r1, #1
 80080fa:	f7ff ff79 	bl	8007ff0 <_Balloc>
 80080fe:	4680      	mov	r8, r0
 8008100:	b928      	cbnz	r0, 800810e <__multadd+0x5a>
 8008102:	4602      	mov	r2, r0
 8008104:	4b0c      	ldr	r3, [pc, #48]	@ (8008138 <__multadd+0x84>)
 8008106:	480d      	ldr	r0, [pc, #52]	@ (800813c <__multadd+0x88>)
 8008108:	21ba      	movs	r1, #186	@ 0xba
 800810a:	f001 feb1 	bl	8009e70 <__assert_func>
 800810e:	6922      	ldr	r2, [r4, #16]
 8008110:	3202      	adds	r2, #2
 8008112:	f104 010c 	add.w	r1, r4, #12
 8008116:	0092      	lsls	r2, r2, #2
 8008118:	300c      	adds	r0, #12
 800811a:	f001 fe93 	bl	8009e44 <memcpy>
 800811e:	4621      	mov	r1, r4
 8008120:	4638      	mov	r0, r7
 8008122:	f7ff ffa5 	bl	8008070 <_Bfree>
 8008126:	4644      	mov	r4, r8
 8008128:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800812c:	3501      	adds	r5, #1
 800812e:	615e      	str	r6, [r3, #20]
 8008130:	6125      	str	r5, [r4, #16]
 8008132:	4620      	mov	r0, r4
 8008134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008138:	0800aa31 	.word	0x0800aa31
 800813c:	0800aa42 	.word	0x0800aa42

08008140 <__s2b>:
 8008140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008144:	460c      	mov	r4, r1
 8008146:	4615      	mov	r5, r2
 8008148:	461f      	mov	r7, r3
 800814a:	2209      	movs	r2, #9
 800814c:	3308      	adds	r3, #8
 800814e:	4606      	mov	r6, r0
 8008150:	fb93 f3f2 	sdiv	r3, r3, r2
 8008154:	2100      	movs	r1, #0
 8008156:	2201      	movs	r2, #1
 8008158:	429a      	cmp	r2, r3
 800815a:	db09      	blt.n	8008170 <__s2b+0x30>
 800815c:	4630      	mov	r0, r6
 800815e:	f7ff ff47 	bl	8007ff0 <_Balloc>
 8008162:	b940      	cbnz	r0, 8008176 <__s2b+0x36>
 8008164:	4602      	mov	r2, r0
 8008166:	4b19      	ldr	r3, [pc, #100]	@ (80081cc <__s2b+0x8c>)
 8008168:	4819      	ldr	r0, [pc, #100]	@ (80081d0 <__s2b+0x90>)
 800816a:	21d3      	movs	r1, #211	@ 0xd3
 800816c:	f001 fe80 	bl	8009e70 <__assert_func>
 8008170:	0052      	lsls	r2, r2, #1
 8008172:	3101      	adds	r1, #1
 8008174:	e7f0      	b.n	8008158 <__s2b+0x18>
 8008176:	9b08      	ldr	r3, [sp, #32]
 8008178:	6143      	str	r3, [r0, #20]
 800817a:	2d09      	cmp	r5, #9
 800817c:	f04f 0301 	mov.w	r3, #1
 8008180:	6103      	str	r3, [r0, #16]
 8008182:	dd16      	ble.n	80081b2 <__s2b+0x72>
 8008184:	f104 0909 	add.w	r9, r4, #9
 8008188:	46c8      	mov	r8, r9
 800818a:	442c      	add	r4, r5
 800818c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008190:	4601      	mov	r1, r0
 8008192:	3b30      	subs	r3, #48	@ 0x30
 8008194:	220a      	movs	r2, #10
 8008196:	4630      	mov	r0, r6
 8008198:	f7ff ff8c 	bl	80080b4 <__multadd>
 800819c:	45a0      	cmp	r8, r4
 800819e:	d1f5      	bne.n	800818c <__s2b+0x4c>
 80081a0:	f1a5 0408 	sub.w	r4, r5, #8
 80081a4:	444c      	add	r4, r9
 80081a6:	1b2d      	subs	r5, r5, r4
 80081a8:	1963      	adds	r3, r4, r5
 80081aa:	42bb      	cmp	r3, r7
 80081ac:	db04      	blt.n	80081b8 <__s2b+0x78>
 80081ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081b2:	340a      	adds	r4, #10
 80081b4:	2509      	movs	r5, #9
 80081b6:	e7f6      	b.n	80081a6 <__s2b+0x66>
 80081b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80081bc:	4601      	mov	r1, r0
 80081be:	3b30      	subs	r3, #48	@ 0x30
 80081c0:	220a      	movs	r2, #10
 80081c2:	4630      	mov	r0, r6
 80081c4:	f7ff ff76 	bl	80080b4 <__multadd>
 80081c8:	e7ee      	b.n	80081a8 <__s2b+0x68>
 80081ca:	bf00      	nop
 80081cc:	0800aa31 	.word	0x0800aa31
 80081d0:	0800aa42 	.word	0x0800aa42

080081d4 <__hi0bits>:
 80081d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80081d8:	4603      	mov	r3, r0
 80081da:	bf36      	itet	cc
 80081dc:	0403      	lslcc	r3, r0, #16
 80081de:	2000      	movcs	r0, #0
 80081e0:	2010      	movcc	r0, #16
 80081e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80081e6:	bf3c      	itt	cc
 80081e8:	021b      	lslcc	r3, r3, #8
 80081ea:	3008      	addcc	r0, #8
 80081ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081f0:	bf3c      	itt	cc
 80081f2:	011b      	lslcc	r3, r3, #4
 80081f4:	3004      	addcc	r0, #4
 80081f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081fa:	bf3c      	itt	cc
 80081fc:	009b      	lslcc	r3, r3, #2
 80081fe:	3002      	addcc	r0, #2
 8008200:	2b00      	cmp	r3, #0
 8008202:	db05      	blt.n	8008210 <__hi0bits+0x3c>
 8008204:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008208:	f100 0001 	add.w	r0, r0, #1
 800820c:	bf08      	it	eq
 800820e:	2020      	moveq	r0, #32
 8008210:	4770      	bx	lr

08008212 <__lo0bits>:
 8008212:	6803      	ldr	r3, [r0, #0]
 8008214:	4602      	mov	r2, r0
 8008216:	f013 0007 	ands.w	r0, r3, #7
 800821a:	d00b      	beq.n	8008234 <__lo0bits+0x22>
 800821c:	07d9      	lsls	r1, r3, #31
 800821e:	d421      	bmi.n	8008264 <__lo0bits+0x52>
 8008220:	0798      	lsls	r0, r3, #30
 8008222:	bf49      	itett	mi
 8008224:	085b      	lsrmi	r3, r3, #1
 8008226:	089b      	lsrpl	r3, r3, #2
 8008228:	2001      	movmi	r0, #1
 800822a:	6013      	strmi	r3, [r2, #0]
 800822c:	bf5c      	itt	pl
 800822e:	6013      	strpl	r3, [r2, #0]
 8008230:	2002      	movpl	r0, #2
 8008232:	4770      	bx	lr
 8008234:	b299      	uxth	r1, r3
 8008236:	b909      	cbnz	r1, 800823c <__lo0bits+0x2a>
 8008238:	0c1b      	lsrs	r3, r3, #16
 800823a:	2010      	movs	r0, #16
 800823c:	b2d9      	uxtb	r1, r3
 800823e:	b909      	cbnz	r1, 8008244 <__lo0bits+0x32>
 8008240:	3008      	adds	r0, #8
 8008242:	0a1b      	lsrs	r3, r3, #8
 8008244:	0719      	lsls	r1, r3, #28
 8008246:	bf04      	itt	eq
 8008248:	091b      	lsreq	r3, r3, #4
 800824a:	3004      	addeq	r0, #4
 800824c:	0799      	lsls	r1, r3, #30
 800824e:	bf04      	itt	eq
 8008250:	089b      	lsreq	r3, r3, #2
 8008252:	3002      	addeq	r0, #2
 8008254:	07d9      	lsls	r1, r3, #31
 8008256:	d403      	bmi.n	8008260 <__lo0bits+0x4e>
 8008258:	085b      	lsrs	r3, r3, #1
 800825a:	f100 0001 	add.w	r0, r0, #1
 800825e:	d003      	beq.n	8008268 <__lo0bits+0x56>
 8008260:	6013      	str	r3, [r2, #0]
 8008262:	4770      	bx	lr
 8008264:	2000      	movs	r0, #0
 8008266:	4770      	bx	lr
 8008268:	2020      	movs	r0, #32
 800826a:	4770      	bx	lr

0800826c <__i2b>:
 800826c:	b510      	push	{r4, lr}
 800826e:	460c      	mov	r4, r1
 8008270:	2101      	movs	r1, #1
 8008272:	f7ff febd 	bl	8007ff0 <_Balloc>
 8008276:	4602      	mov	r2, r0
 8008278:	b928      	cbnz	r0, 8008286 <__i2b+0x1a>
 800827a:	4b05      	ldr	r3, [pc, #20]	@ (8008290 <__i2b+0x24>)
 800827c:	4805      	ldr	r0, [pc, #20]	@ (8008294 <__i2b+0x28>)
 800827e:	f240 1145 	movw	r1, #325	@ 0x145
 8008282:	f001 fdf5 	bl	8009e70 <__assert_func>
 8008286:	2301      	movs	r3, #1
 8008288:	6144      	str	r4, [r0, #20]
 800828a:	6103      	str	r3, [r0, #16]
 800828c:	bd10      	pop	{r4, pc}
 800828e:	bf00      	nop
 8008290:	0800aa31 	.word	0x0800aa31
 8008294:	0800aa42 	.word	0x0800aa42

08008298 <__multiply>:
 8008298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800829c:	4614      	mov	r4, r2
 800829e:	690a      	ldr	r2, [r1, #16]
 80082a0:	6923      	ldr	r3, [r4, #16]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	bfa8      	it	ge
 80082a6:	4623      	movge	r3, r4
 80082a8:	460f      	mov	r7, r1
 80082aa:	bfa4      	itt	ge
 80082ac:	460c      	movge	r4, r1
 80082ae:	461f      	movge	r7, r3
 80082b0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80082b4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80082b8:	68a3      	ldr	r3, [r4, #8]
 80082ba:	6861      	ldr	r1, [r4, #4]
 80082bc:	eb0a 0609 	add.w	r6, sl, r9
 80082c0:	42b3      	cmp	r3, r6
 80082c2:	b085      	sub	sp, #20
 80082c4:	bfb8      	it	lt
 80082c6:	3101      	addlt	r1, #1
 80082c8:	f7ff fe92 	bl	8007ff0 <_Balloc>
 80082cc:	b930      	cbnz	r0, 80082dc <__multiply+0x44>
 80082ce:	4602      	mov	r2, r0
 80082d0:	4b44      	ldr	r3, [pc, #272]	@ (80083e4 <__multiply+0x14c>)
 80082d2:	4845      	ldr	r0, [pc, #276]	@ (80083e8 <__multiply+0x150>)
 80082d4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80082d8:	f001 fdca 	bl	8009e70 <__assert_func>
 80082dc:	f100 0514 	add.w	r5, r0, #20
 80082e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80082e4:	462b      	mov	r3, r5
 80082e6:	2200      	movs	r2, #0
 80082e8:	4543      	cmp	r3, r8
 80082ea:	d321      	bcc.n	8008330 <__multiply+0x98>
 80082ec:	f107 0114 	add.w	r1, r7, #20
 80082f0:	f104 0214 	add.w	r2, r4, #20
 80082f4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80082f8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80082fc:	9302      	str	r3, [sp, #8]
 80082fe:	1b13      	subs	r3, r2, r4
 8008300:	3b15      	subs	r3, #21
 8008302:	f023 0303 	bic.w	r3, r3, #3
 8008306:	3304      	adds	r3, #4
 8008308:	f104 0715 	add.w	r7, r4, #21
 800830c:	42ba      	cmp	r2, r7
 800830e:	bf38      	it	cc
 8008310:	2304      	movcc	r3, #4
 8008312:	9301      	str	r3, [sp, #4]
 8008314:	9b02      	ldr	r3, [sp, #8]
 8008316:	9103      	str	r1, [sp, #12]
 8008318:	428b      	cmp	r3, r1
 800831a:	d80c      	bhi.n	8008336 <__multiply+0x9e>
 800831c:	2e00      	cmp	r6, #0
 800831e:	dd03      	ble.n	8008328 <__multiply+0x90>
 8008320:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008324:	2b00      	cmp	r3, #0
 8008326:	d05b      	beq.n	80083e0 <__multiply+0x148>
 8008328:	6106      	str	r6, [r0, #16]
 800832a:	b005      	add	sp, #20
 800832c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008330:	f843 2b04 	str.w	r2, [r3], #4
 8008334:	e7d8      	b.n	80082e8 <__multiply+0x50>
 8008336:	f8b1 a000 	ldrh.w	sl, [r1]
 800833a:	f1ba 0f00 	cmp.w	sl, #0
 800833e:	d024      	beq.n	800838a <__multiply+0xf2>
 8008340:	f104 0e14 	add.w	lr, r4, #20
 8008344:	46a9      	mov	r9, r5
 8008346:	f04f 0c00 	mov.w	ip, #0
 800834a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800834e:	f8d9 3000 	ldr.w	r3, [r9]
 8008352:	fa1f fb87 	uxth.w	fp, r7
 8008356:	b29b      	uxth	r3, r3
 8008358:	fb0a 330b 	mla	r3, sl, fp, r3
 800835c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008360:	f8d9 7000 	ldr.w	r7, [r9]
 8008364:	4463      	add	r3, ip
 8008366:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800836a:	fb0a c70b 	mla	r7, sl, fp, ip
 800836e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008372:	b29b      	uxth	r3, r3
 8008374:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008378:	4572      	cmp	r2, lr
 800837a:	f849 3b04 	str.w	r3, [r9], #4
 800837e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008382:	d8e2      	bhi.n	800834a <__multiply+0xb2>
 8008384:	9b01      	ldr	r3, [sp, #4]
 8008386:	f845 c003 	str.w	ip, [r5, r3]
 800838a:	9b03      	ldr	r3, [sp, #12]
 800838c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008390:	3104      	adds	r1, #4
 8008392:	f1b9 0f00 	cmp.w	r9, #0
 8008396:	d021      	beq.n	80083dc <__multiply+0x144>
 8008398:	682b      	ldr	r3, [r5, #0]
 800839a:	f104 0c14 	add.w	ip, r4, #20
 800839e:	46ae      	mov	lr, r5
 80083a0:	f04f 0a00 	mov.w	sl, #0
 80083a4:	f8bc b000 	ldrh.w	fp, [ip]
 80083a8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80083ac:	fb09 770b 	mla	r7, r9, fp, r7
 80083b0:	4457      	add	r7, sl
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80083b8:	f84e 3b04 	str.w	r3, [lr], #4
 80083bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80083c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80083c4:	f8be 3000 	ldrh.w	r3, [lr]
 80083c8:	fb09 330a 	mla	r3, r9, sl, r3
 80083cc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80083d0:	4562      	cmp	r2, ip
 80083d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80083d6:	d8e5      	bhi.n	80083a4 <__multiply+0x10c>
 80083d8:	9f01      	ldr	r7, [sp, #4]
 80083da:	51eb      	str	r3, [r5, r7]
 80083dc:	3504      	adds	r5, #4
 80083de:	e799      	b.n	8008314 <__multiply+0x7c>
 80083e0:	3e01      	subs	r6, #1
 80083e2:	e79b      	b.n	800831c <__multiply+0x84>
 80083e4:	0800aa31 	.word	0x0800aa31
 80083e8:	0800aa42 	.word	0x0800aa42

080083ec <__pow5mult>:
 80083ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083f0:	4615      	mov	r5, r2
 80083f2:	f012 0203 	ands.w	r2, r2, #3
 80083f6:	4607      	mov	r7, r0
 80083f8:	460e      	mov	r6, r1
 80083fa:	d007      	beq.n	800840c <__pow5mult+0x20>
 80083fc:	4c25      	ldr	r4, [pc, #148]	@ (8008494 <__pow5mult+0xa8>)
 80083fe:	3a01      	subs	r2, #1
 8008400:	2300      	movs	r3, #0
 8008402:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008406:	f7ff fe55 	bl	80080b4 <__multadd>
 800840a:	4606      	mov	r6, r0
 800840c:	10ad      	asrs	r5, r5, #2
 800840e:	d03d      	beq.n	800848c <__pow5mult+0xa0>
 8008410:	69fc      	ldr	r4, [r7, #28]
 8008412:	b97c      	cbnz	r4, 8008434 <__pow5mult+0x48>
 8008414:	2010      	movs	r0, #16
 8008416:	f7ff fd35 	bl	8007e84 <malloc>
 800841a:	4602      	mov	r2, r0
 800841c:	61f8      	str	r0, [r7, #28]
 800841e:	b928      	cbnz	r0, 800842c <__pow5mult+0x40>
 8008420:	4b1d      	ldr	r3, [pc, #116]	@ (8008498 <__pow5mult+0xac>)
 8008422:	481e      	ldr	r0, [pc, #120]	@ (800849c <__pow5mult+0xb0>)
 8008424:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008428:	f001 fd22 	bl	8009e70 <__assert_func>
 800842c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008430:	6004      	str	r4, [r0, #0]
 8008432:	60c4      	str	r4, [r0, #12]
 8008434:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008438:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800843c:	b94c      	cbnz	r4, 8008452 <__pow5mult+0x66>
 800843e:	f240 2171 	movw	r1, #625	@ 0x271
 8008442:	4638      	mov	r0, r7
 8008444:	f7ff ff12 	bl	800826c <__i2b>
 8008448:	2300      	movs	r3, #0
 800844a:	f8c8 0008 	str.w	r0, [r8, #8]
 800844e:	4604      	mov	r4, r0
 8008450:	6003      	str	r3, [r0, #0]
 8008452:	f04f 0900 	mov.w	r9, #0
 8008456:	07eb      	lsls	r3, r5, #31
 8008458:	d50a      	bpl.n	8008470 <__pow5mult+0x84>
 800845a:	4631      	mov	r1, r6
 800845c:	4622      	mov	r2, r4
 800845e:	4638      	mov	r0, r7
 8008460:	f7ff ff1a 	bl	8008298 <__multiply>
 8008464:	4631      	mov	r1, r6
 8008466:	4680      	mov	r8, r0
 8008468:	4638      	mov	r0, r7
 800846a:	f7ff fe01 	bl	8008070 <_Bfree>
 800846e:	4646      	mov	r6, r8
 8008470:	106d      	asrs	r5, r5, #1
 8008472:	d00b      	beq.n	800848c <__pow5mult+0xa0>
 8008474:	6820      	ldr	r0, [r4, #0]
 8008476:	b938      	cbnz	r0, 8008488 <__pow5mult+0x9c>
 8008478:	4622      	mov	r2, r4
 800847a:	4621      	mov	r1, r4
 800847c:	4638      	mov	r0, r7
 800847e:	f7ff ff0b 	bl	8008298 <__multiply>
 8008482:	6020      	str	r0, [r4, #0]
 8008484:	f8c0 9000 	str.w	r9, [r0]
 8008488:	4604      	mov	r4, r0
 800848a:	e7e4      	b.n	8008456 <__pow5mult+0x6a>
 800848c:	4630      	mov	r0, r6
 800848e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008492:	bf00      	nop
 8008494:	0800aa9c 	.word	0x0800aa9c
 8008498:	0800a9c2 	.word	0x0800a9c2
 800849c:	0800aa42 	.word	0x0800aa42

080084a0 <__lshift>:
 80084a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084a4:	460c      	mov	r4, r1
 80084a6:	6849      	ldr	r1, [r1, #4]
 80084a8:	6923      	ldr	r3, [r4, #16]
 80084aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80084ae:	68a3      	ldr	r3, [r4, #8]
 80084b0:	4607      	mov	r7, r0
 80084b2:	4691      	mov	r9, r2
 80084b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80084b8:	f108 0601 	add.w	r6, r8, #1
 80084bc:	42b3      	cmp	r3, r6
 80084be:	db0b      	blt.n	80084d8 <__lshift+0x38>
 80084c0:	4638      	mov	r0, r7
 80084c2:	f7ff fd95 	bl	8007ff0 <_Balloc>
 80084c6:	4605      	mov	r5, r0
 80084c8:	b948      	cbnz	r0, 80084de <__lshift+0x3e>
 80084ca:	4602      	mov	r2, r0
 80084cc:	4b28      	ldr	r3, [pc, #160]	@ (8008570 <__lshift+0xd0>)
 80084ce:	4829      	ldr	r0, [pc, #164]	@ (8008574 <__lshift+0xd4>)
 80084d0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80084d4:	f001 fccc 	bl	8009e70 <__assert_func>
 80084d8:	3101      	adds	r1, #1
 80084da:	005b      	lsls	r3, r3, #1
 80084dc:	e7ee      	b.n	80084bc <__lshift+0x1c>
 80084de:	2300      	movs	r3, #0
 80084e0:	f100 0114 	add.w	r1, r0, #20
 80084e4:	f100 0210 	add.w	r2, r0, #16
 80084e8:	4618      	mov	r0, r3
 80084ea:	4553      	cmp	r3, sl
 80084ec:	db33      	blt.n	8008556 <__lshift+0xb6>
 80084ee:	6920      	ldr	r0, [r4, #16]
 80084f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084f4:	f104 0314 	add.w	r3, r4, #20
 80084f8:	f019 091f 	ands.w	r9, r9, #31
 80084fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008500:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008504:	d02b      	beq.n	800855e <__lshift+0xbe>
 8008506:	f1c9 0e20 	rsb	lr, r9, #32
 800850a:	468a      	mov	sl, r1
 800850c:	2200      	movs	r2, #0
 800850e:	6818      	ldr	r0, [r3, #0]
 8008510:	fa00 f009 	lsl.w	r0, r0, r9
 8008514:	4310      	orrs	r0, r2
 8008516:	f84a 0b04 	str.w	r0, [sl], #4
 800851a:	f853 2b04 	ldr.w	r2, [r3], #4
 800851e:	459c      	cmp	ip, r3
 8008520:	fa22 f20e 	lsr.w	r2, r2, lr
 8008524:	d8f3      	bhi.n	800850e <__lshift+0x6e>
 8008526:	ebac 0304 	sub.w	r3, ip, r4
 800852a:	3b15      	subs	r3, #21
 800852c:	f023 0303 	bic.w	r3, r3, #3
 8008530:	3304      	adds	r3, #4
 8008532:	f104 0015 	add.w	r0, r4, #21
 8008536:	4584      	cmp	ip, r0
 8008538:	bf38      	it	cc
 800853a:	2304      	movcc	r3, #4
 800853c:	50ca      	str	r2, [r1, r3]
 800853e:	b10a      	cbz	r2, 8008544 <__lshift+0xa4>
 8008540:	f108 0602 	add.w	r6, r8, #2
 8008544:	3e01      	subs	r6, #1
 8008546:	4638      	mov	r0, r7
 8008548:	612e      	str	r6, [r5, #16]
 800854a:	4621      	mov	r1, r4
 800854c:	f7ff fd90 	bl	8008070 <_Bfree>
 8008550:	4628      	mov	r0, r5
 8008552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008556:	f842 0f04 	str.w	r0, [r2, #4]!
 800855a:	3301      	adds	r3, #1
 800855c:	e7c5      	b.n	80084ea <__lshift+0x4a>
 800855e:	3904      	subs	r1, #4
 8008560:	f853 2b04 	ldr.w	r2, [r3], #4
 8008564:	f841 2f04 	str.w	r2, [r1, #4]!
 8008568:	459c      	cmp	ip, r3
 800856a:	d8f9      	bhi.n	8008560 <__lshift+0xc0>
 800856c:	e7ea      	b.n	8008544 <__lshift+0xa4>
 800856e:	bf00      	nop
 8008570:	0800aa31 	.word	0x0800aa31
 8008574:	0800aa42 	.word	0x0800aa42

08008578 <__mcmp>:
 8008578:	690a      	ldr	r2, [r1, #16]
 800857a:	4603      	mov	r3, r0
 800857c:	6900      	ldr	r0, [r0, #16]
 800857e:	1a80      	subs	r0, r0, r2
 8008580:	b530      	push	{r4, r5, lr}
 8008582:	d10e      	bne.n	80085a2 <__mcmp+0x2a>
 8008584:	3314      	adds	r3, #20
 8008586:	3114      	adds	r1, #20
 8008588:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800858c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008590:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008594:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008598:	4295      	cmp	r5, r2
 800859a:	d003      	beq.n	80085a4 <__mcmp+0x2c>
 800859c:	d205      	bcs.n	80085aa <__mcmp+0x32>
 800859e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80085a2:	bd30      	pop	{r4, r5, pc}
 80085a4:	42a3      	cmp	r3, r4
 80085a6:	d3f3      	bcc.n	8008590 <__mcmp+0x18>
 80085a8:	e7fb      	b.n	80085a2 <__mcmp+0x2a>
 80085aa:	2001      	movs	r0, #1
 80085ac:	e7f9      	b.n	80085a2 <__mcmp+0x2a>
	...

080085b0 <__mdiff>:
 80085b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b4:	4689      	mov	r9, r1
 80085b6:	4606      	mov	r6, r0
 80085b8:	4611      	mov	r1, r2
 80085ba:	4648      	mov	r0, r9
 80085bc:	4614      	mov	r4, r2
 80085be:	f7ff ffdb 	bl	8008578 <__mcmp>
 80085c2:	1e05      	subs	r5, r0, #0
 80085c4:	d112      	bne.n	80085ec <__mdiff+0x3c>
 80085c6:	4629      	mov	r1, r5
 80085c8:	4630      	mov	r0, r6
 80085ca:	f7ff fd11 	bl	8007ff0 <_Balloc>
 80085ce:	4602      	mov	r2, r0
 80085d0:	b928      	cbnz	r0, 80085de <__mdiff+0x2e>
 80085d2:	4b3f      	ldr	r3, [pc, #252]	@ (80086d0 <__mdiff+0x120>)
 80085d4:	f240 2137 	movw	r1, #567	@ 0x237
 80085d8:	483e      	ldr	r0, [pc, #248]	@ (80086d4 <__mdiff+0x124>)
 80085da:	f001 fc49 	bl	8009e70 <__assert_func>
 80085de:	2301      	movs	r3, #1
 80085e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80085e4:	4610      	mov	r0, r2
 80085e6:	b003      	add	sp, #12
 80085e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ec:	bfbc      	itt	lt
 80085ee:	464b      	movlt	r3, r9
 80085f0:	46a1      	movlt	r9, r4
 80085f2:	4630      	mov	r0, r6
 80085f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80085f8:	bfba      	itte	lt
 80085fa:	461c      	movlt	r4, r3
 80085fc:	2501      	movlt	r5, #1
 80085fe:	2500      	movge	r5, #0
 8008600:	f7ff fcf6 	bl	8007ff0 <_Balloc>
 8008604:	4602      	mov	r2, r0
 8008606:	b918      	cbnz	r0, 8008610 <__mdiff+0x60>
 8008608:	4b31      	ldr	r3, [pc, #196]	@ (80086d0 <__mdiff+0x120>)
 800860a:	f240 2145 	movw	r1, #581	@ 0x245
 800860e:	e7e3      	b.n	80085d8 <__mdiff+0x28>
 8008610:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008614:	6926      	ldr	r6, [r4, #16]
 8008616:	60c5      	str	r5, [r0, #12]
 8008618:	f109 0310 	add.w	r3, r9, #16
 800861c:	f109 0514 	add.w	r5, r9, #20
 8008620:	f104 0e14 	add.w	lr, r4, #20
 8008624:	f100 0b14 	add.w	fp, r0, #20
 8008628:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800862c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008630:	9301      	str	r3, [sp, #4]
 8008632:	46d9      	mov	r9, fp
 8008634:	f04f 0c00 	mov.w	ip, #0
 8008638:	9b01      	ldr	r3, [sp, #4]
 800863a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800863e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008642:	9301      	str	r3, [sp, #4]
 8008644:	fa1f f38a 	uxth.w	r3, sl
 8008648:	4619      	mov	r1, r3
 800864a:	b283      	uxth	r3, r0
 800864c:	1acb      	subs	r3, r1, r3
 800864e:	0c00      	lsrs	r0, r0, #16
 8008650:	4463      	add	r3, ip
 8008652:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008656:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800865a:	b29b      	uxth	r3, r3
 800865c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008660:	4576      	cmp	r6, lr
 8008662:	f849 3b04 	str.w	r3, [r9], #4
 8008666:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800866a:	d8e5      	bhi.n	8008638 <__mdiff+0x88>
 800866c:	1b33      	subs	r3, r6, r4
 800866e:	3b15      	subs	r3, #21
 8008670:	f023 0303 	bic.w	r3, r3, #3
 8008674:	3415      	adds	r4, #21
 8008676:	3304      	adds	r3, #4
 8008678:	42a6      	cmp	r6, r4
 800867a:	bf38      	it	cc
 800867c:	2304      	movcc	r3, #4
 800867e:	441d      	add	r5, r3
 8008680:	445b      	add	r3, fp
 8008682:	461e      	mov	r6, r3
 8008684:	462c      	mov	r4, r5
 8008686:	4544      	cmp	r4, r8
 8008688:	d30e      	bcc.n	80086a8 <__mdiff+0xf8>
 800868a:	f108 0103 	add.w	r1, r8, #3
 800868e:	1b49      	subs	r1, r1, r5
 8008690:	f021 0103 	bic.w	r1, r1, #3
 8008694:	3d03      	subs	r5, #3
 8008696:	45a8      	cmp	r8, r5
 8008698:	bf38      	it	cc
 800869a:	2100      	movcc	r1, #0
 800869c:	440b      	add	r3, r1
 800869e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80086a2:	b191      	cbz	r1, 80086ca <__mdiff+0x11a>
 80086a4:	6117      	str	r7, [r2, #16]
 80086a6:	e79d      	b.n	80085e4 <__mdiff+0x34>
 80086a8:	f854 1b04 	ldr.w	r1, [r4], #4
 80086ac:	46e6      	mov	lr, ip
 80086ae:	0c08      	lsrs	r0, r1, #16
 80086b0:	fa1c fc81 	uxtah	ip, ip, r1
 80086b4:	4471      	add	r1, lr
 80086b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80086ba:	b289      	uxth	r1, r1
 80086bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80086c0:	f846 1b04 	str.w	r1, [r6], #4
 80086c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80086c8:	e7dd      	b.n	8008686 <__mdiff+0xd6>
 80086ca:	3f01      	subs	r7, #1
 80086cc:	e7e7      	b.n	800869e <__mdiff+0xee>
 80086ce:	bf00      	nop
 80086d0:	0800aa31 	.word	0x0800aa31
 80086d4:	0800aa42 	.word	0x0800aa42

080086d8 <__ulp>:
 80086d8:	b082      	sub	sp, #8
 80086da:	ed8d 0b00 	vstr	d0, [sp]
 80086de:	9a01      	ldr	r2, [sp, #4]
 80086e0:	4b0f      	ldr	r3, [pc, #60]	@ (8008720 <__ulp+0x48>)
 80086e2:	4013      	ands	r3, r2
 80086e4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	dc08      	bgt.n	80086fe <__ulp+0x26>
 80086ec:	425b      	negs	r3, r3
 80086ee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80086f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80086f6:	da04      	bge.n	8008702 <__ulp+0x2a>
 80086f8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80086fc:	4113      	asrs	r3, r2
 80086fe:	2200      	movs	r2, #0
 8008700:	e008      	b.n	8008714 <__ulp+0x3c>
 8008702:	f1a2 0314 	sub.w	r3, r2, #20
 8008706:	2b1e      	cmp	r3, #30
 8008708:	bfda      	itte	le
 800870a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800870e:	40da      	lsrle	r2, r3
 8008710:	2201      	movgt	r2, #1
 8008712:	2300      	movs	r3, #0
 8008714:	4619      	mov	r1, r3
 8008716:	4610      	mov	r0, r2
 8008718:	ec41 0b10 	vmov	d0, r0, r1
 800871c:	b002      	add	sp, #8
 800871e:	4770      	bx	lr
 8008720:	7ff00000 	.word	0x7ff00000

08008724 <__b2d>:
 8008724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008728:	6906      	ldr	r6, [r0, #16]
 800872a:	f100 0814 	add.w	r8, r0, #20
 800872e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008732:	1f37      	subs	r7, r6, #4
 8008734:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008738:	4610      	mov	r0, r2
 800873a:	f7ff fd4b 	bl	80081d4 <__hi0bits>
 800873e:	f1c0 0320 	rsb	r3, r0, #32
 8008742:	280a      	cmp	r0, #10
 8008744:	600b      	str	r3, [r1, #0]
 8008746:	491b      	ldr	r1, [pc, #108]	@ (80087b4 <__b2d+0x90>)
 8008748:	dc15      	bgt.n	8008776 <__b2d+0x52>
 800874a:	f1c0 0c0b 	rsb	ip, r0, #11
 800874e:	fa22 f30c 	lsr.w	r3, r2, ip
 8008752:	45b8      	cmp	r8, r7
 8008754:	ea43 0501 	orr.w	r5, r3, r1
 8008758:	bf34      	ite	cc
 800875a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800875e:	2300      	movcs	r3, #0
 8008760:	3015      	adds	r0, #21
 8008762:	fa02 f000 	lsl.w	r0, r2, r0
 8008766:	fa23 f30c 	lsr.w	r3, r3, ip
 800876a:	4303      	orrs	r3, r0
 800876c:	461c      	mov	r4, r3
 800876e:	ec45 4b10 	vmov	d0, r4, r5
 8008772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008776:	45b8      	cmp	r8, r7
 8008778:	bf3a      	itte	cc
 800877a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800877e:	f1a6 0708 	subcc.w	r7, r6, #8
 8008782:	2300      	movcs	r3, #0
 8008784:	380b      	subs	r0, #11
 8008786:	d012      	beq.n	80087ae <__b2d+0x8a>
 8008788:	f1c0 0120 	rsb	r1, r0, #32
 800878c:	fa23 f401 	lsr.w	r4, r3, r1
 8008790:	4082      	lsls	r2, r0
 8008792:	4322      	orrs	r2, r4
 8008794:	4547      	cmp	r7, r8
 8008796:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800879a:	bf8c      	ite	hi
 800879c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80087a0:	2200      	movls	r2, #0
 80087a2:	4083      	lsls	r3, r0
 80087a4:	40ca      	lsrs	r2, r1
 80087a6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80087aa:	4313      	orrs	r3, r2
 80087ac:	e7de      	b.n	800876c <__b2d+0x48>
 80087ae:	ea42 0501 	orr.w	r5, r2, r1
 80087b2:	e7db      	b.n	800876c <__b2d+0x48>
 80087b4:	3ff00000 	.word	0x3ff00000

080087b8 <__d2b>:
 80087b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80087bc:	460f      	mov	r7, r1
 80087be:	2101      	movs	r1, #1
 80087c0:	ec59 8b10 	vmov	r8, r9, d0
 80087c4:	4616      	mov	r6, r2
 80087c6:	f7ff fc13 	bl	8007ff0 <_Balloc>
 80087ca:	4604      	mov	r4, r0
 80087cc:	b930      	cbnz	r0, 80087dc <__d2b+0x24>
 80087ce:	4602      	mov	r2, r0
 80087d0:	4b23      	ldr	r3, [pc, #140]	@ (8008860 <__d2b+0xa8>)
 80087d2:	4824      	ldr	r0, [pc, #144]	@ (8008864 <__d2b+0xac>)
 80087d4:	f240 310f 	movw	r1, #783	@ 0x30f
 80087d8:	f001 fb4a 	bl	8009e70 <__assert_func>
 80087dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80087e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087e4:	b10d      	cbz	r5, 80087ea <__d2b+0x32>
 80087e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80087ea:	9301      	str	r3, [sp, #4]
 80087ec:	f1b8 0300 	subs.w	r3, r8, #0
 80087f0:	d023      	beq.n	800883a <__d2b+0x82>
 80087f2:	4668      	mov	r0, sp
 80087f4:	9300      	str	r3, [sp, #0]
 80087f6:	f7ff fd0c 	bl	8008212 <__lo0bits>
 80087fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 80087fe:	b1d0      	cbz	r0, 8008836 <__d2b+0x7e>
 8008800:	f1c0 0320 	rsb	r3, r0, #32
 8008804:	fa02 f303 	lsl.w	r3, r2, r3
 8008808:	430b      	orrs	r3, r1
 800880a:	40c2      	lsrs	r2, r0
 800880c:	6163      	str	r3, [r4, #20]
 800880e:	9201      	str	r2, [sp, #4]
 8008810:	9b01      	ldr	r3, [sp, #4]
 8008812:	61a3      	str	r3, [r4, #24]
 8008814:	2b00      	cmp	r3, #0
 8008816:	bf0c      	ite	eq
 8008818:	2201      	moveq	r2, #1
 800881a:	2202      	movne	r2, #2
 800881c:	6122      	str	r2, [r4, #16]
 800881e:	b1a5      	cbz	r5, 800884a <__d2b+0x92>
 8008820:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008824:	4405      	add	r5, r0
 8008826:	603d      	str	r5, [r7, #0]
 8008828:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800882c:	6030      	str	r0, [r6, #0]
 800882e:	4620      	mov	r0, r4
 8008830:	b003      	add	sp, #12
 8008832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008836:	6161      	str	r1, [r4, #20]
 8008838:	e7ea      	b.n	8008810 <__d2b+0x58>
 800883a:	a801      	add	r0, sp, #4
 800883c:	f7ff fce9 	bl	8008212 <__lo0bits>
 8008840:	9b01      	ldr	r3, [sp, #4]
 8008842:	6163      	str	r3, [r4, #20]
 8008844:	3020      	adds	r0, #32
 8008846:	2201      	movs	r2, #1
 8008848:	e7e8      	b.n	800881c <__d2b+0x64>
 800884a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800884e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008852:	6038      	str	r0, [r7, #0]
 8008854:	6918      	ldr	r0, [r3, #16]
 8008856:	f7ff fcbd 	bl	80081d4 <__hi0bits>
 800885a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800885e:	e7e5      	b.n	800882c <__d2b+0x74>
 8008860:	0800aa31 	.word	0x0800aa31
 8008864:	0800aa42 	.word	0x0800aa42

08008868 <__ratio>:
 8008868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800886c:	b085      	sub	sp, #20
 800886e:	e9cd 1000 	strd	r1, r0, [sp]
 8008872:	a902      	add	r1, sp, #8
 8008874:	f7ff ff56 	bl	8008724 <__b2d>
 8008878:	9800      	ldr	r0, [sp, #0]
 800887a:	a903      	add	r1, sp, #12
 800887c:	ec55 4b10 	vmov	r4, r5, d0
 8008880:	f7ff ff50 	bl	8008724 <__b2d>
 8008884:	9b01      	ldr	r3, [sp, #4]
 8008886:	6919      	ldr	r1, [r3, #16]
 8008888:	9b00      	ldr	r3, [sp, #0]
 800888a:	691b      	ldr	r3, [r3, #16]
 800888c:	1ac9      	subs	r1, r1, r3
 800888e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008892:	1a9b      	subs	r3, r3, r2
 8008894:	ec5b ab10 	vmov	sl, fp, d0
 8008898:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800889c:	2b00      	cmp	r3, #0
 800889e:	bfce      	itee	gt
 80088a0:	462a      	movgt	r2, r5
 80088a2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80088a6:	465a      	movle	r2, fp
 80088a8:	462f      	mov	r7, r5
 80088aa:	46d9      	mov	r9, fp
 80088ac:	bfcc      	ite	gt
 80088ae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80088b2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80088b6:	464b      	mov	r3, r9
 80088b8:	4652      	mov	r2, sl
 80088ba:	4620      	mov	r0, r4
 80088bc:	4639      	mov	r1, r7
 80088be:	f7f7 fff5 	bl	80008ac <__aeabi_ddiv>
 80088c2:	ec41 0b10 	vmov	d0, r0, r1
 80088c6:	b005      	add	sp, #20
 80088c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080088cc <__copybits>:
 80088cc:	3901      	subs	r1, #1
 80088ce:	b570      	push	{r4, r5, r6, lr}
 80088d0:	1149      	asrs	r1, r1, #5
 80088d2:	6914      	ldr	r4, [r2, #16]
 80088d4:	3101      	adds	r1, #1
 80088d6:	f102 0314 	add.w	r3, r2, #20
 80088da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80088de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80088e2:	1f05      	subs	r5, r0, #4
 80088e4:	42a3      	cmp	r3, r4
 80088e6:	d30c      	bcc.n	8008902 <__copybits+0x36>
 80088e8:	1aa3      	subs	r3, r4, r2
 80088ea:	3b11      	subs	r3, #17
 80088ec:	f023 0303 	bic.w	r3, r3, #3
 80088f0:	3211      	adds	r2, #17
 80088f2:	42a2      	cmp	r2, r4
 80088f4:	bf88      	it	hi
 80088f6:	2300      	movhi	r3, #0
 80088f8:	4418      	add	r0, r3
 80088fa:	2300      	movs	r3, #0
 80088fc:	4288      	cmp	r0, r1
 80088fe:	d305      	bcc.n	800890c <__copybits+0x40>
 8008900:	bd70      	pop	{r4, r5, r6, pc}
 8008902:	f853 6b04 	ldr.w	r6, [r3], #4
 8008906:	f845 6f04 	str.w	r6, [r5, #4]!
 800890a:	e7eb      	b.n	80088e4 <__copybits+0x18>
 800890c:	f840 3b04 	str.w	r3, [r0], #4
 8008910:	e7f4      	b.n	80088fc <__copybits+0x30>

08008912 <__any_on>:
 8008912:	f100 0214 	add.w	r2, r0, #20
 8008916:	6900      	ldr	r0, [r0, #16]
 8008918:	114b      	asrs	r3, r1, #5
 800891a:	4298      	cmp	r0, r3
 800891c:	b510      	push	{r4, lr}
 800891e:	db11      	blt.n	8008944 <__any_on+0x32>
 8008920:	dd0a      	ble.n	8008938 <__any_on+0x26>
 8008922:	f011 011f 	ands.w	r1, r1, #31
 8008926:	d007      	beq.n	8008938 <__any_on+0x26>
 8008928:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800892c:	fa24 f001 	lsr.w	r0, r4, r1
 8008930:	fa00 f101 	lsl.w	r1, r0, r1
 8008934:	428c      	cmp	r4, r1
 8008936:	d10b      	bne.n	8008950 <__any_on+0x3e>
 8008938:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800893c:	4293      	cmp	r3, r2
 800893e:	d803      	bhi.n	8008948 <__any_on+0x36>
 8008940:	2000      	movs	r0, #0
 8008942:	bd10      	pop	{r4, pc}
 8008944:	4603      	mov	r3, r0
 8008946:	e7f7      	b.n	8008938 <__any_on+0x26>
 8008948:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800894c:	2900      	cmp	r1, #0
 800894e:	d0f5      	beq.n	800893c <__any_on+0x2a>
 8008950:	2001      	movs	r0, #1
 8008952:	e7f6      	b.n	8008942 <__any_on+0x30>

08008954 <sulp>:
 8008954:	b570      	push	{r4, r5, r6, lr}
 8008956:	4604      	mov	r4, r0
 8008958:	460d      	mov	r5, r1
 800895a:	ec45 4b10 	vmov	d0, r4, r5
 800895e:	4616      	mov	r6, r2
 8008960:	f7ff feba 	bl	80086d8 <__ulp>
 8008964:	ec51 0b10 	vmov	r0, r1, d0
 8008968:	b17e      	cbz	r6, 800898a <sulp+0x36>
 800896a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800896e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008972:	2b00      	cmp	r3, #0
 8008974:	dd09      	ble.n	800898a <sulp+0x36>
 8008976:	051b      	lsls	r3, r3, #20
 8008978:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800897c:	2400      	movs	r4, #0
 800897e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008982:	4622      	mov	r2, r4
 8008984:	462b      	mov	r3, r5
 8008986:	f7f7 fe67 	bl	8000658 <__aeabi_dmul>
 800898a:	ec41 0b10 	vmov	d0, r0, r1
 800898e:	bd70      	pop	{r4, r5, r6, pc}

08008990 <_strtod_l>:
 8008990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008994:	b09f      	sub	sp, #124	@ 0x7c
 8008996:	460c      	mov	r4, r1
 8008998:	9217      	str	r2, [sp, #92]	@ 0x5c
 800899a:	2200      	movs	r2, #0
 800899c:	921a      	str	r2, [sp, #104]	@ 0x68
 800899e:	9005      	str	r0, [sp, #20]
 80089a0:	f04f 0a00 	mov.w	sl, #0
 80089a4:	f04f 0b00 	mov.w	fp, #0
 80089a8:	460a      	mov	r2, r1
 80089aa:	9219      	str	r2, [sp, #100]	@ 0x64
 80089ac:	7811      	ldrb	r1, [r2, #0]
 80089ae:	292b      	cmp	r1, #43	@ 0x2b
 80089b0:	d04a      	beq.n	8008a48 <_strtod_l+0xb8>
 80089b2:	d838      	bhi.n	8008a26 <_strtod_l+0x96>
 80089b4:	290d      	cmp	r1, #13
 80089b6:	d832      	bhi.n	8008a1e <_strtod_l+0x8e>
 80089b8:	2908      	cmp	r1, #8
 80089ba:	d832      	bhi.n	8008a22 <_strtod_l+0x92>
 80089bc:	2900      	cmp	r1, #0
 80089be:	d03b      	beq.n	8008a38 <_strtod_l+0xa8>
 80089c0:	2200      	movs	r2, #0
 80089c2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80089c4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80089c6:	782a      	ldrb	r2, [r5, #0]
 80089c8:	2a30      	cmp	r2, #48	@ 0x30
 80089ca:	f040 80b3 	bne.w	8008b34 <_strtod_l+0x1a4>
 80089ce:	786a      	ldrb	r2, [r5, #1]
 80089d0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80089d4:	2a58      	cmp	r2, #88	@ 0x58
 80089d6:	d16e      	bne.n	8008ab6 <_strtod_l+0x126>
 80089d8:	9302      	str	r3, [sp, #8]
 80089da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089dc:	9301      	str	r3, [sp, #4]
 80089de:	ab1a      	add	r3, sp, #104	@ 0x68
 80089e0:	9300      	str	r3, [sp, #0]
 80089e2:	4a8e      	ldr	r2, [pc, #568]	@ (8008c1c <_strtod_l+0x28c>)
 80089e4:	9805      	ldr	r0, [sp, #20]
 80089e6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80089e8:	a919      	add	r1, sp, #100	@ 0x64
 80089ea:	f001 fadb 	bl	8009fa4 <__gethex>
 80089ee:	f010 060f 	ands.w	r6, r0, #15
 80089f2:	4604      	mov	r4, r0
 80089f4:	d005      	beq.n	8008a02 <_strtod_l+0x72>
 80089f6:	2e06      	cmp	r6, #6
 80089f8:	d128      	bne.n	8008a4c <_strtod_l+0xbc>
 80089fa:	3501      	adds	r5, #1
 80089fc:	2300      	movs	r3, #0
 80089fe:	9519      	str	r5, [sp, #100]	@ 0x64
 8008a00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f040 858e 	bne.w	8009526 <_strtod_l+0xb96>
 8008a0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a0c:	b1cb      	cbz	r3, 8008a42 <_strtod_l+0xb2>
 8008a0e:	4652      	mov	r2, sl
 8008a10:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008a14:	ec43 2b10 	vmov	d0, r2, r3
 8008a18:	b01f      	add	sp, #124	@ 0x7c
 8008a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a1e:	2920      	cmp	r1, #32
 8008a20:	d1ce      	bne.n	80089c0 <_strtod_l+0x30>
 8008a22:	3201      	adds	r2, #1
 8008a24:	e7c1      	b.n	80089aa <_strtod_l+0x1a>
 8008a26:	292d      	cmp	r1, #45	@ 0x2d
 8008a28:	d1ca      	bne.n	80089c0 <_strtod_l+0x30>
 8008a2a:	2101      	movs	r1, #1
 8008a2c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008a2e:	1c51      	adds	r1, r2, #1
 8008a30:	9119      	str	r1, [sp, #100]	@ 0x64
 8008a32:	7852      	ldrb	r2, [r2, #1]
 8008a34:	2a00      	cmp	r2, #0
 8008a36:	d1c5      	bne.n	80089c4 <_strtod_l+0x34>
 8008a38:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008a3a:	9419      	str	r4, [sp, #100]	@ 0x64
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	f040 8570 	bne.w	8009522 <_strtod_l+0xb92>
 8008a42:	4652      	mov	r2, sl
 8008a44:	465b      	mov	r3, fp
 8008a46:	e7e5      	b.n	8008a14 <_strtod_l+0x84>
 8008a48:	2100      	movs	r1, #0
 8008a4a:	e7ef      	b.n	8008a2c <_strtod_l+0x9c>
 8008a4c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008a4e:	b13a      	cbz	r2, 8008a60 <_strtod_l+0xd0>
 8008a50:	2135      	movs	r1, #53	@ 0x35
 8008a52:	a81c      	add	r0, sp, #112	@ 0x70
 8008a54:	f7ff ff3a 	bl	80088cc <__copybits>
 8008a58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a5a:	9805      	ldr	r0, [sp, #20]
 8008a5c:	f7ff fb08 	bl	8008070 <_Bfree>
 8008a60:	3e01      	subs	r6, #1
 8008a62:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008a64:	2e04      	cmp	r6, #4
 8008a66:	d806      	bhi.n	8008a76 <_strtod_l+0xe6>
 8008a68:	e8df f006 	tbb	[pc, r6]
 8008a6c:	201d0314 	.word	0x201d0314
 8008a70:	14          	.byte	0x14
 8008a71:	00          	.byte	0x00
 8008a72:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008a76:	05e1      	lsls	r1, r4, #23
 8008a78:	bf48      	it	mi
 8008a7a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008a7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008a82:	0d1b      	lsrs	r3, r3, #20
 8008a84:	051b      	lsls	r3, r3, #20
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1bb      	bne.n	8008a02 <_strtod_l+0x72>
 8008a8a:	f7fe fb31 	bl	80070f0 <__errno>
 8008a8e:	2322      	movs	r3, #34	@ 0x22
 8008a90:	6003      	str	r3, [r0, #0]
 8008a92:	e7b6      	b.n	8008a02 <_strtod_l+0x72>
 8008a94:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008a98:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008a9c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008aa0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008aa4:	e7e7      	b.n	8008a76 <_strtod_l+0xe6>
 8008aa6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008c24 <_strtod_l+0x294>
 8008aaa:	e7e4      	b.n	8008a76 <_strtod_l+0xe6>
 8008aac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008ab0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008ab4:	e7df      	b.n	8008a76 <_strtod_l+0xe6>
 8008ab6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ab8:	1c5a      	adds	r2, r3, #1
 8008aba:	9219      	str	r2, [sp, #100]	@ 0x64
 8008abc:	785b      	ldrb	r3, [r3, #1]
 8008abe:	2b30      	cmp	r3, #48	@ 0x30
 8008ac0:	d0f9      	beq.n	8008ab6 <_strtod_l+0x126>
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d09d      	beq.n	8008a02 <_strtod_l+0x72>
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008aca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008acc:	930c      	str	r3, [sp, #48]	@ 0x30
 8008ace:	2300      	movs	r3, #0
 8008ad0:	9308      	str	r3, [sp, #32]
 8008ad2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ad4:	461f      	mov	r7, r3
 8008ad6:	220a      	movs	r2, #10
 8008ad8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008ada:	7805      	ldrb	r5, [r0, #0]
 8008adc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008ae0:	b2d9      	uxtb	r1, r3
 8008ae2:	2909      	cmp	r1, #9
 8008ae4:	d928      	bls.n	8008b38 <_strtod_l+0x1a8>
 8008ae6:	494e      	ldr	r1, [pc, #312]	@ (8008c20 <_strtod_l+0x290>)
 8008ae8:	2201      	movs	r2, #1
 8008aea:	f7fe faa5 	bl	8007038 <strncmp>
 8008aee:	2800      	cmp	r0, #0
 8008af0:	d032      	beq.n	8008b58 <_strtod_l+0x1c8>
 8008af2:	2000      	movs	r0, #0
 8008af4:	462a      	mov	r2, r5
 8008af6:	4681      	mov	r9, r0
 8008af8:	463d      	mov	r5, r7
 8008afa:	4603      	mov	r3, r0
 8008afc:	2a65      	cmp	r2, #101	@ 0x65
 8008afe:	d001      	beq.n	8008b04 <_strtod_l+0x174>
 8008b00:	2a45      	cmp	r2, #69	@ 0x45
 8008b02:	d114      	bne.n	8008b2e <_strtod_l+0x19e>
 8008b04:	b91d      	cbnz	r5, 8008b0e <_strtod_l+0x17e>
 8008b06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b08:	4302      	orrs	r2, r0
 8008b0a:	d095      	beq.n	8008a38 <_strtod_l+0xa8>
 8008b0c:	2500      	movs	r5, #0
 8008b0e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008b10:	1c62      	adds	r2, r4, #1
 8008b12:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b14:	7862      	ldrb	r2, [r4, #1]
 8008b16:	2a2b      	cmp	r2, #43	@ 0x2b
 8008b18:	d077      	beq.n	8008c0a <_strtod_l+0x27a>
 8008b1a:	2a2d      	cmp	r2, #45	@ 0x2d
 8008b1c:	d07b      	beq.n	8008c16 <_strtod_l+0x286>
 8008b1e:	f04f 0c00 	mov.w	ip, #0
 8008b22:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008b26:	2909      	cmp	r1, #9
 8008b28:	f240 8082 	bls.w	8008c30 <_strtod_l+0x2a0>
 8008b2c:	9419      	str	r4, [sp, #100]	@ 0x64
 8008b2e:	f04f 0800 	mov.w	r8, #0
 8008b32:	e0a2      	b.n	8008c7a <_strtod_l+0x2ea>
 8008b34:	2300      	movs	r3, #0
 8008b36:	e7c7      	b.n	8008ac8 <_strtod_l+0x138>
 8008b38:	2f08      	cmp	r7, #8
 8008b3a:	bfd5      	itete	le
 8008b3c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008b3e:	9908      	ldrgt	r1, [sp, #32]
 8008b40:	fb02 3301 	mlale	r3, r2, r1, r3
 8008b44:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008b48:	f100 0001 	add.w	r0, r0, #1
 8008b4c:	bfd4      	ite	le
 8008b4e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008b50:	9308      	strgt	r3, [sp, #32]
 8008b52:	3701      	adds	r7, #1
 8008b54:	9019      	str	r0, [sp, #100]	@ 0x64
 8008b56:	e7bf      	b.n	8008ad8 <_strtod_l+0x148>
 8008b58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b5a:	1c5a      	adds	r2, r3, #1
 8008b5c:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b5e:	785a      	ldrb	r2, [r3, #1]
 8008b60:	b37f      	cbz	r7, 8008bc2 <_strtod_l+0x232>
 8008b62:	4681      	mov	r9, r0
 8008b64:	463d      	mov	r5, r7
 8008b66:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008b6a:	2b09      	cmp	r3, #9
 8008b6c:	d912      	bls.n	8008b94 <_strtod_l+0x204>
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e7c4      	b.n	8008afc <_strtod_l+0x16c>
 8008b72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b74:	1c5a      	adds	r2, r3, #1
 8008b76:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b78:	785a      	ldrb	r2, [r3, #1]
 8008b7a:	3001      	adds	r0, #1
 8008b7c:	2a30      	cmp	r2, #48	@ 0x30
 8008b7e:	d0f8      	beq.n	8008b72 <_strtod_l+0x1e2>
 8008b80:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008b84:	2b08      	cmp	r3, #8
 8008b86:	f200 84d3 	bhi.w	8009530 <_strtod_l+0xba0>
 8008b8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b8c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b8e:	4681      	mov	r9, r0
 8008b90:	2000      	movs	r0, #0
 8008b92:	4605      	mov	r5, r0
 8008b94:	3a30      	subs	r2, #48	@ 0x30
 8008b96:	f100 0301 	add.w	r3, r0, #1
 8008b9a:	d02a      	beq.n	8008bf2 <_strtod_l+0x262>
 8008b9c:	4499      	add	r9, r3
 8008b9e:	eb00 0c05 	add.w	ip, r0, r5
 8008ba2:	462b      	mov	r3, r5
 8008ba4:	210a      	movs	r1, #10
 8008ba6:	4563      	cmp	r3, ip
 8008ba8:	d10d      	bne.n	8008bc6 <_strtod_l+0x236>
 8008baa:	1c69      	adds	r1, r5, #1
 8008bac:	4401      	add	r1, r0
 8008bae:	4428      	add	r0, r5
 8008bb0:	2808      	cmp	r0, #8
 8008bb2:	dc16      	bgt.n	8008be2 <_strtod_l+0x252>
 8008bb4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008bb6:	230a      	movs	r3, #10
 8008bb8:	fb03 2300 	mla	r3, r3, r0, r2
 8008bbc:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	e018      	b.n	8008bf4 <_strtod_l+0x264>
 8008bc2:	4638      	mov	r0, r7
 8008bc4:	e7da      	b.n	8008b7c <_strtod_l+0x1ec>
 8008bc6:	2b08      	cmp	r3, #8
 8008bc8:	f103 0301 	add.w	r3, r3, #1
 8008bcc:	dc03      	bgt.n	8008bd6 <_strtod_l+0x246>
 8008bce:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008bd0:	434e      	muls	r6, r1
 8008bd2:	960a      	str	r6, [sp, #40]	@ 0x28
 8008bd4:	e7e7      	b.n	8008ba6 <_strtod_l+0x216>
 8008bd6:	2b10      	cmp	r3, #16
 8008bd8:	bfde      	ittt	le
 8008bda:	9e08      	ldrle	r6, [sp, #32]
 8008bdc:	434e      	mulle	r6, r1
 8008bde:	9608      	strle	r6, [sp, #32]
 8008be0:	e7e1      	b.n	8008ba6 <_strtod_l+0x216>
 8008be2:	280f      	cmp	r0, #15
 8008be4:	dceb      	bgt.n	8008bbe <_strtod_l+0x22e>
 8008be6:	9808      	ldr	r0, [sp, #32]
 8008be8:	230a      	movs	r3, #10
 8008bea:	fb03 2300 	mla	r3, r3, r0, r2
 8008bee:	9308      	str	r3, [sp, #32]
 8008bf0:	e7e5      	b.n	8008bbe <_strtod_l+0x22e>
 8008bf2:	4629      	mov	r1, r5
 8008bf4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008bf6:	1c50      	adds	r0, r2, #1
 8008bf8:	9019      	str	r0, [sp, #100]	@ 0x64
 8008bfa:	7852      	ldrb	r2, [r2, #1]
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	460d      	mov	r5, r1
 8008c00:	e7b1      	b.n	8008b66 <_strtod_l+0x1d6>
 8008c02:	f04f 0900 	mov.w	r9, #0
 8008c06:	2301      	movs	r3, #1
 8008c08:	e77d      	b.n	8008b06 <_strtod_l+0x176>
 8008c0a:	f04f 0c00 	mov.w	ip, #0
 8008c0e:	1ca2      	adds	r2, r4, #2
 8008c10:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c12:	78a2      	ldrb	r2, [r4, #2]
 8008c14:	e785      	b.n	8008b22 <_strtod_l+0x192>
 8008c16:	f04f 0c01 	mov.w	ip, #1
 8008c1a:	e7f8      	b.n	8008c0e <_strtod_l+0x27e>
 8008c1c:	0800abb0 	.word	0x0800abb0
 8008c20:	0800ab98 	.word	0x0800ab98
 8008c24:	7ff00000 	.word	0x7ff00000
 8008c28:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c2a:	1c51      	adds	r1, r2, #1
 8008c2c:	9119      	str	r1, [sp, #100]	@ 0x64
 8008c2e:	7852      	ldrb	r2, [r2, #1]
 8008c30:	2a30      	cmp	r2, #48	@ 0x30
 8008c32:	d0f9      	beq.n	8008c28 <_strtod_l+0x298>
 8008c34:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008c38:	2908      	cmp	r1, #8
 8008c3a:	f63f af78 	bhi.w	8008b2e <_strtod_l+0x19e>
 8008c3e:	3a30      	subs	r2, #48	@ 0x30
 8008c40:	920e      	str	r2, [sp, #56]	@ 0x38
 8008c42:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c44:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008c46:	f04f 080a 	mov.w	r8, #10
 8008c4a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c4c:	1c56      	adds	r6, r2, #1
 8008c4e:	9619      	str	r6, [sp, #100]	@ 0x64
 8008c50:	7852      	ldrb	r2, [r2, #1]
 8008c52:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008c56:	f1be 0f09 	cmp.w	lr, #9
 8008c5a:	d939      	bls.n	8008cd0 <_strtod_l+0x340>
 8008c5c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008c5e:	1a76      	subs	r6, r6, r1
 8008c60:	2e08      	cmp	r6, #8
 8008c62:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008c66:	dc03      	bgt.n	8008c70 <_strtod_l+0x2e0>
 8008c68:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008c6a:	4588      	cmp	r8, r1
 8008c6c:	bfa8      	it	ge
 8008c6e:	4688      	movge	r8, r1
 8008c70:	f1bc 0f00 	cmp.w	ip, #0
 8008c74:	d001      	beq.n	8008c7a <_strtod_l+0x2ea>
 8008c76:	f1c8 0800 	rsb	r8, r8, #0
 8008c7a:	2d00      	cmp	r5, #0
 8008c7c:	d14e      	bne.n	8008d1c <_strtod_l+0x38c>
 8008c7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c80:	4308      	orrs	r0, r1
 8008c82:	f47f aebe 	bne.w	8008a02 <_strtod_l+0x72>
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	f47f aed6 	bne.w	8008a38 <_strtod_l+0xa8>
 8008c8c:	2a69      	cmp	r2, #105	@ 0x69
 8008c8e:	d028      	beq.n	8008ce2 <_strtod_l+0x352>
 8008c90:	dc25      	bgt.n	8008cde <_strtod_l+0x34e>
 8008c92:	2a49      	cmp	r2, #73	@ 0x49
 8008c94:	d025      	beq.n	8008ce2 <_strtod_l+0x352>
 8008c96:	2a4e      	cmp	r2, #78	@ 0x4e
 8008c98:	f47f aece 	bne.w	8008a38 <_strtod_l+0xa8>
 8008c9c:	499b      	ldr	r1, [pc, #620]	@ (8008f0c <_strtod_l+0x57c>)
 8008c9e:	a819      	add	r0, sp, #100	@ 0x64
 8008ca0:	f001 fba2 	bl	800a3e8 <__match>
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	f43f aec7 	beq.w	8008a38 <_strtod_l+0xa8>
 8008caa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	2b28      	cmp	r3, #40	@ 0x28
 8008cb0:	d12e      	bne.n	8008d10 <_strtod_l+0x380>
 8008cb2:	4997      	ldr	r1, [pc, #604]	@ (8008f10 <_strtod_l+0x580>)
 8008cb4:	aa1c      	add	r2, sp, #112	@ 0x70
 8008cb6:	a819      	add	r0, sp, #100	@ 0x64
 8008cb8:	f001 fbaa 	bl	800a410 <__hexnan>
 8008cbc:	2805      	cmp	r0, #5
 8008cbe:	d127      	bne.n	8008d10 <_strtod_l+0x380>
 8008cc0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008cc2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008cc6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008cca:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008cce:	e698      	b.n	8008a02 <_strtod_l+0x72>
 8008cd0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008cd2:	fb08 2101 	mla	r1, r8, r1, r2
 8008cd6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008cda:	920e      	str	r2, [sp, #56]	@ 0x38
 8008cdc:	e7b5      	b.n	8008c4a <_strtod_l+0x2ba>
 8008cde:	2a6e      	cmp	r2, #110	@ 0x6e
 8008ce0:	e7da      	b.n	8008c98 <_strtod_l+0x308>
 8008ce2:	498c      	ldr	r1, [pc, #560]	@ (8008f14 <_strtod_l+0x584>)
 8008ce4:	a819      	add	r0, sp, #100	@ 0x64
 8008ce6:	f001 fb7f 	bl	800a3e8 <__match>
 8008cea:	2800      	cmp	r0, #0
 8008cec:	f43f aea4 	beq.w	8008a38 <_strtod_l+0xa8>
 8008cf0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cf2:	4989      	ldr	r1, [pc, #548]	@ (8008f18 <_strtod_l+0x588>)
 8008cf4:	3b01      	subs	r3, #1
 8008cf6:	a819      	add	r0, sp, #100	@ 0x64
 8008cf8:	9319      	str	r3, [sp, #100]	@ 0x64
 8008cfa:	f001 fb75 	bl	800a3e8 <__match>
 8008cfe:	b910      	cbnz	r0, 8008d06 <_strtod_l+0x376>
 8008d00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d02:	3301      	adds	r3, #1
 8008d04:	9319      	str	r3, [sp, #100]	@ 0x64
 8008d06:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008f28 <_strtod_l+0x598>
 8008d0a:	f04f 0a00 	mov.w	sl, #0
 8008d0e:	e678      	b.n	8008a02 <_strtod_l+0x72>
 8008d10:	4882      	ldr	r0, [pc, #520]	@ (8008f1c <_strtod_l+0x58c>)
 8008d12:	f001 f8a5 	bl	8009e60 <nan>
 8008d16:	ec5b ab10 	vmov	sl, fp, d0
 8008d1a:	e672      	b.n	8008a02 <_strtod_l+0x72>
 8008d1c:	eba8 0309 	sub.w	r3, r8, r9
 8008d20:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008d22:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d24:	2f00      	cmp	r7, #0
 8008d26:	bf08      	it	eq
 8008d28:	462f      	moveq	r7, r5
 8008d2a:	2d10      	cmp	r5, #16
 8008d2c:	462c      	mov	r4, r5
 8008d2e:	bfa8      	it	ge
 8008d30:	2410      	movge	r4, #16
 8008d32:	f7f7 fc17 	bl	8000564 <__aeabi_ui2d>
 8008d36:	2d09      	cmp	r5, #9
 8008d38:	4682      	mov	sl, r0
 8008d3a:	468b      	mov	fp, r1
 8008d3c:	dc13      	bgt.n	8008d66 <_strtod_l+0x3d6>
 8008d3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f43f ae5e 	beq.w	8008a02 <_strtod_l+0x72>
 8008d46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d48:	dd78      	ble.n	8008e3c <_strtod_l+0x4ac>
 8008d4a:	2b16      	cmp	r3, #22
 8008d4c:	dc5f      	bgt.n	8008e0e <_strtod_l+0x47e>
 8008d4e:	4974      	ldr	r1, [pc, #464]	@ (8008f20 <_strtod_l+0x590>)
 8008d50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d58:	4652      	mov	r2, sl
 8008d5a:	465b      	mov	r3, fp
 8008d5c:	f7f7 fc7c 	bl	8000658 <__aeabi_dmul>
 8008d60:	4682      	mov	sl, r0
 8008d62:	468b      	mov	fp, r1
 8008d64:	e64d      	b.n	8008a02 <_strtod_l+0x72>
 8008d66:	4b6e      	ldr	r3, [pc, #440]	@ (8008f20 <_strtod_l+0x590>)
 8008d68:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d6c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008d70:	f7f7 fc72 	bl	8000658 <__aeabi_dmul>
 8008d74:	4682      	mov	sl, r0
 8008d76:	9808      	ldr	r0, [sp, #32]
 8008d78:	468b      	mov	fp, r1
 8008d7a:	f7f7 fbf3 	bl	8000564 <__aeabi_ui2d>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	460b      	mov	r3, r1
 8008d82:	4650      	mov	r0, sl
 8008d84:	4659      	mov	r1, fp
 8008d86:	f7f7 fab1 	bl	80002ec <__adddf3>
 8008d8a:	2d0f      	cmp	r5, #15
 8008d8c:	4682      	mov	sl, r0
 8008d8e:	468b      	mov	fp, r1
 8008d90:	ddd5      	ble.n	8008d3e <_strtod_l+0x3ae>
 8008d92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d94:	1b2c      	subs	r4, r5, r4
 8008d96:	441c      	add	r4, r3
 8008d98:	2c00      	cmp	r4, #0
 8008d9a:	f340 8096 	ble.w	8008eca <_strtod_l+0x53a>
 8008d9e:	f014 030f 	ands.w	r3, r4, #15
 8008da2:	d00a      	beq.n	8008dba <_strtod_l+0x42a>
 8008da4:	495e      	ldr	r1, [pc, #376]	@ (8008f20 <_strtod_l+0x590>)
 8008da6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008daa:	4652      	mov	r2, sl
 8008dac:	465b      	mov	r3, fp
 8008dae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008db2:	f7f7 fc51 	bl	8000658 <__aeabi_dmul>
 8008db6:	4682      	mov	sl, r0
 8008db8:	468b      	mov	fp, r1
 8008dba:	f034 040f 	bics.w	r4, r4, #15
 8008dbe:	d073      	beq.n	8008ea8 <_strtod_l+0x518>
 8008dc0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008dc4:	dd48      	ble.n	8008e58 <_strtod_l+0x4c8>
 8008dc6:	2400      	movs	r4, #0
 8008dc8:	46a0      	mov	r8, r4
 8008dca:	940a      	str	r4, [sp, #40]	@ 0x28
 8008dcc:	46a1      	mov	r9, r4
 8008dce:	9a05      	ldr	r2, [sp, #20]
 8008dd0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008f28 <_strtod_l+0x598>
 8008dd4:	2322      	movs	r3, #34	@ 0x22
 8008dd6:	6013      	str	r3, [r2, #0]
 8008dd8:	f04f 0a00 	mov.w	sl, #0
 8008ddc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	f43f ae0f 	beq.w	8008a02 <_strtod_l+0x72>
 8008de4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008de6:	9805      	ldr	r0, [sp, #20]
 8008de8:	f7ff f942 	bl	8008070 <_Bfree>
 8008dec:	9805      	ldr	r0, [sp, #20]
 8008dee:	4649      	mov	r1, r9
 8008df0:	f7ff f93e 	bl	8008070 <_Bfree>
 8008df4:	9805      	ldr	r0, [sp, #20]
 8008df6:	4641      	mov	r1, r8
 8008df8:	f7ff f93a 	bl	8008070 <_Bfree>
 8008dfc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008dfe:	9805      	ldr	r0, [sp, #20]
 8008e00:	f7ff f936 	bl	8008070 <_Bfree>
 8008e04:	9805      	ldr	r0, [sp, #20]
 8008e06:	4621      	mov	r1, r4
 8008e08:	f7ff f932 	bl	8008070 <_Bfree>
 8008e0c:	e5f9      	b.n	8008a02 <_strtod_l+0x72>
 8008e0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e10:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008e14:	4293      	cmp	r3, r2
 8008e16:	dbbc      	blt.n	8008d92 <_strtod_l+0x402>
 8008e18:	4c41      	ldr	r4, [pc, #260]	@ (8008f20 <_strtod_l+0x590>)
 8008e1a:	f1c5 050f 	rsb	r5, r5, #15
 8008e1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008e22:	4652      	mov	r2, sl
 8008e24:	465b      	mov	r3, fp
 8008e26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e2a:	f7f7 fc15 	bl	8000658 <__aeabi_dmul>
 8008e2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e30:	1b5d      	subs	r5, r3, r5
 8008e32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008e36:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008e3a:	e78f      	b.n	8008d5c <_strtod_l+0x3cc>
 8008e3c:	3316      	adds	r3, #22
 8008e3e:	dba8      	blt.n	8008d92 <_strtod_l+0x402>
 8008e40:	4b37      	ldr	r3, [pc, #220]	@ (8008f20 <_strtod_l+0x590>)
 8008e42:	eba9 0808 	sub.w	r8, r9, r8
 8008e46:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008e4a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008e4e:	4650      	mov	r0, sl
 8008e50:	4659      	mov	r1, fp
 8008e52:	f7f7 fd2b 	bl	80008ac <__aeabi_ddiv>
 8008e56:	e783      	b.n	8008d60 <_strtod_l+0x3d0>
 8008e58:	4b32      	ldr	r3, [pc, #200]	@ (8008f24 <_strtod_l+0x594>)
 8008e5a:	9308      	str	r3, [sp, #32]
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	1124      	asrs	r4, r4, #4
 8008e60:	4650      	mov	r0, sl
 8008e62:	4659      	mov	r1, fp
 8008e64:	461e      	mov	r6, r3
 8008e66:	2c01      	cmp	r4, #1
 8008e68:	dc21      	bgt.n	8008eae <_strtod_l+0x51e>
 8008e6a:	b10b      	cbz	r3, 8008e70 <_strtod_l+0x4e0>
 8008e6c:	4682      	mov	sl, r0
 8008e6e:	468b      	mov	fp, r1
 8008e70:	492c      	ldr	r1, [pc, #176]	@ (8008f24 <_strtod_l+0x594>)
 8008e72:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008e76:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008e7a:	4652      	mov	r2, sl
 8008e7c:	465b      	mov	r3, fp
 8008e7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e82:	f7f7 fbe9 	bl	8000658 <__aeabi_dmul>
 8008e86:	4b28      	ldr	r3, [pc, #160]	@ (8008f28 <_strtod_l+0x598>)
 8008e88:	460a      	mov	r2, r1
 8008e8a:	400b      	ands	r3, r1
 8008e8c:	4927      	ldr	r1, [pc, #156]	@ (8008f2c <_strtod_l+0x59c>)
 8008e8e:	428b      	cmp	r3, r1
 8008e90:	4682      	mov	sl, r0
 8008e92:	d898      	bhi.n	8008dc6 <_strtod_l+0x436>
 8008e94:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008e98:	428b      	cmp	r3, r1
 8008e9a:	bf86      	itte	hi
 8008e9c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008f30 <_strtod_l+0x5a0>
 8008ea0:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8008ea4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	9308      	str	r3, [sp, #32]
 8008eac:	e07a      	b.n	8008fa4 <_strtod_l+0x614>
 8008eae:	07e2      	lsls	r2, r4, #31
 8008eb0:	d505      	bpl.n	8008ebe <_strtod_l+0x52e>
 8008eb2:	9b08      	ldr	r3, [sp, #32]
 8008eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb8:	f7f7 fbce 	bl	8000658 <__aeabi_dmul>
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	9a08      	ldr	r2, [sp, #32]
 8008ec0:	3208      	adds	r2, #8
 8008ec2:	3601      	adds	r6, #1
 8008ec4:	1064      	asrs	r4, r4, #1
 8008ec6:	9208      	str	r2, [sp, #32]
 8008ec8:	e7cd      	b.n	8008e66 <_strtod_l+0x4d6>
 8008eca:	d0ed      	beq.n	8008ea8 <_strtod_l+0x518>
 8008ecc:	4264      	negs	r4, r4
 8008ece:	f014 020f 	ands.w	r2, r4, #15
 8008ed2:	d00a      	beq.n	8008eea <_strtod_l+0x55a>
 8008ed4:	4b12      	ldr	r3, [pc, #72]	@ (8008f20 <_strtod_l+0x590>)
 8008ed6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008eda:	4650      	mov	r0, sl
 8008edc:	4659      	mov	r1, fp
 8008ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee2:	f7f7 fce3 	bl	80008ac <__aeabi_ddiv>
 8008ee6:	4682      	mov	sl, r0
 8008ee8:	468b      	mov	fp, r1
 8008eea:	1124      	asrs	r4, r4, #4
 8008eec:	d0dc      	beq.n	8008ea8 <_strtod_l+0x518>
 8008eee:	2c1f      	cmp	r4, #31
 8008ef0:	dd20      	ble.n	8008f34 <_strtod_l+0x5a4>
 8008ef2:	2400      	movs	r4, #0
 8008ef4:	46a0      	mov	r8, r4
 8008ef6:	940a      	str	r4, [sp, #40]	@ 0x28
 8008ef8:	46a1      	mov	r9, r4
 8008efa:	9a05      	ldr	r2, [sp, #20]
 8008efc:	2322      	movs	r3, #34	@ 0x22
 8008efe:	f04f 0a00 	mov.w	sl, #0
 8008f02:	f04f 0b00 	mov.w	fp, #0
 8008f06:	6013      	str	r3, [r2, #0]
 8008f08:	e768      	b.n	8008ddc <_strtod_l+0x44c>
 8008f0a:	bf00      	nop
 8008f0c:	0800a989 	.word	0x0800a989
 8008f10:	0800ab9c 	.word	0x0800ab9c
 8008f14:	0800a981 	.word	0x0800a981
 8008f18:	0800a9b8 	.word	0x0800a9b8
 8008f1c:	0800ad45 	.word	0x0800ad45
 8008f20:	0800aad0 	.word	0x0800aad0
 8008f24:	0800aaa8 	.word	0x0800aaa8
 8008f28:	7ff00000 	.word	0x7ff00000
 8008f2c:	7ca00000 	.word	0x7ca00000
 8008f30:	7fefffff 	.word	0x7fefffff
 8008f34:	f014 0310 	ands.w	r3, r4, #16
 8008f38:	bf18      	it	ne
 8008f3a:	236a      	movne	r3, #106	@ 0x6a
 8008f3c:	4ea9      	ldr	r6, [pc, #676]	@ (80091e4 <_strtod_l+0x854>)
 8008f3e:	9308      	str	r3, [sp, #32]
 8008f40:	4650      	mov	r0, sl
 8008f42:	4659      	mov	r1, fp
 8008f44:	2300      	movs	r3, #0
 8008f46:	07e2      	lsls	r2, r4, #31
 8008f48:	d504      	bpl.n	8008f54 <_strtod_l+0x5c4>
 8008f4a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f4e:	f7f7 fb83 	bl	8000658 <__aeabi_dmul>
 8008f52:	2301      	movs	r3, #1
 8008f54:	1064      	asrs	r4, r4, #1
 8008f56:	f106 0608 	add.w	r6, r6, #8
 8008f5a:	d1f4      	bne.n	8008f46 <_strtod_l+0x5b6>
 8008f5c:	b10b      	cbz	r3, 8008f62 <_strtod_l+0x5d2>
 8008f5e:	4682      	mov	sl, r0
 8008f60:	468b      	mov	fp, r1
 8008f62:	9b08      	ldr	r3, [sp, #32]
 8008f64:	b1b3      	cbz	r3, 8008f94 <_strtod_l+0x604>
 8008f66:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008f6a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	4659      	mov	r1, fp
 8008f72:	dd0f      	ble.n	8008f94 <_strtod_l+0x604>
 8008f74:	2b1f      	cmp	r3, #31
 8008f76:	dd55      	ble.n	8009024 <_strtod_l+0x694>
 8008f78:	2b34      	cmp	r3, #52	@ 0x34
 8008f7a:	bfde      	ittt	le
 8008f7c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8008f80:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008f84:	4093      	lslle	r3, r2
 8008f86:	f04f 0a00 	mov.w	sl, #0
 8008f8a:	bfcc      	ite	gt
 8008f8c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008f90:	ea03 0b01 	andle.w	fp, r3, r1
 8008f94:	2200      	movs	r2, #0
 8008f96:	2300      	movs	r3, #0
 8008f98:	4650      	mov	r0, sl
 8008f9a:	4659      	mov	r1, fp
 8008f9c:	f7f7 fdc4 	bl	8000b28 <__aeabi_dcmpeq>
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	d1a6      	bne.n	8008ef2 <_strtod_l+0x562>
 8008fa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fa6:	9300      	str	r3, [sp, #0]
 8008fa8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008faa:	9805      	ldr	r0, [sp, #20]
 8008fac:	462b      	mov	r3, r5
 8008fae:	463a      	mov	r2, r7
 8008fb0:	f7ff f8c6 	bl	8008140 <__s2b>
 8008fb4:	900a      	str	r0, [sp, #40]	@ 0x28
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	f43f af05 	beq.w	8008dc6 <_strtod_l+0x436>
 8008fbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fbe:	2a00      	cmp	r2, #0
 8008fc0:	eba9 0308 	sub.w	r3, r9, r8
 8008fc4:	bfa8      	it	ge
 8008fc6:	2300      	movge	r3, #0
 8008fc8:	9312      	str	r3, [sp, #72]	@ 0x48
 8008fca:	2400      	movs	r4, #0
 8008fcc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008fd0:	9316      	str	r3, [sp, #88]	@ 0x58
 8008fd2:	46a0      	mov	r8, r4
 8008fd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fd6:	9805      	ldr	r0, [sp, #20]
 8008fd8:	6859      	ldr	r1, [r3, #4]
 8008fda:	f7ff f809 	bl	8007ff0 <_Balloc>
 8008fde:	4681      	mov	r9, r0
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	f43f aef4 	beq.w	8008dce <_strtod_l+0x43e>
 8008fe6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fe8:	691a      	ldr	r2, [r3, #16]
 8008fea:	3202      	adds	r2, #2
 8008fec:	f103 010c 	add.w	r1, r3, #12
 8008ff0:	0092      	lsls	r2, r2, #2
 8008ff2:	300c      	adds	r0, #12
 8008ff4:	f000 ff26 	bl	8009e44 <memcpy>
 8008ff8:	ec4b ab10 	vmov	d0, sl, fp
 8008ffc:	9805      	ldr	r0, [sp, #20]
 8008ffe:	aa1c      	add	r2, sp, #112	@ 0x70
 8009000:	a91b      	add	r1, sp, #108	@ 0x6c
 8009002:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009006:	f7ff fbd7 	bl	80087b8 <__d2b>
 800900a:	901a      	str	r0, [sp, #104]	@ 0x68
 800900c:	2800      	cmp	r0, #0
 800900e:	f43f aede 	beq.w	8008dce <_strtod_l+0x43e>
 8009012:	9805      	ldr	r0, [sp, #20]
 8009014:	2101      	movs	r1, #1
 8009016:	f7ff f929 	bl	800826c <__i2b>
 800901a:	4680      	mov	r8, r0
 800901c:	b948      	cbnz	r0, 8009032 <_strtod_l+0x6a2>
 800901e:	f04f 0800 	mov.w	r8, #0
 8009022:	e6d4      	b.n	8008dce <_strtod_l+0x43e>
 8009024:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009028:	fa02 f303 	lsl.w	r3, r2, r3
 800902c:	ea03 0a0a 	and.w	sl, r3, sl
 8009030:	e7b0      	b.n	8008f94 <_strtod_l+0x604>
 8009032:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009034:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009036:	2d00      	cmp	r5, #0
 8009038:	bfab      	itete	ge
 800903a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800903c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800903e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009040:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009042:	bfac      	ite	ge
 8009044:	18ef      	addge	r7, r5, r3
 8009046:	1b5e      	sublt	r6, r3, r5
 8009048:	9b08      	ldr	r3, [sp, #32]
 800904a:	1aed      	subs	r5, r5, r3
 800904c:	4415      	add	r5, r2
 800904e:	4b66      	ldr	r3, [pc, #408]	@ (80091e8 <_strtod_l+0x858>)
 8009050:	3d01      	subs	r5, #1
 8009052:	429d      	cmp	r5, r3
 8009054:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009058:	da50      	bge.n	80090fc <_strtod_l+0x76c>
 800905a:	1b5b      	subs	r3, r3, r5
 800905c:	2b1f      	cmp	r3, #31
 800905e:	eba2 0203 	sub.w	r2, r2, r3
 8009062:	f04f 0101 	mov.w	r1, #1
 8009066:	dc3d      	bgt.n	80090e4 <_strtod_l+0x754>
 8009068:	fa01 f303 	lsl.w	r3, r1, r3
 800906c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800906e:	2300      	movs	r3, #0
 8009070:	9310      	str	r3, [sp, #64]	@ 0x40
 8009072:	18bd      	adds	r5, r7, r2
 8009074:	9b08      	ldr	r3, [sp, #32]
 8009076:	42af      	cmp	r7, r5
 8009078:	4416      	add	r6, r2
 800907a:	441e      	add	r6, r3
 800907c:	463b      	mov	r3, r7
 800907e:	bfa8      	it	ge
 8009080:	462b      	movge	r3, r5
 8009082:	42b3      	cmp	r3, r6
 8009084:	bfa8      	it	ge
 8009086:	4633      	movge	r3, r6
 8009088:	2b00      	cmp	r3, #0
 800908a:	bfc2      	ittt	gt
 800908c:	1aed      	subgt	r5, r5, r3
 800908e:	1af6      	subgt	r6, r6, r3
 8009090:	1aff      	subgt	r7, r7, r3
 8009092:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009094:	2b00      	cmp	r3, #0
 8009096:	dd16      	ble.n	80090c6 <_strtod_l+0x736>
 8009098:	4641      	mov	r1, r8
 800909a:	9805      	ldr	r0, [sp, #20]
 800909c:	461a      	mov	r2, r3
 800909e:	f7ff f9a5 	bl	80083ec <__pow5mult>
 80090a2:	4680      	mov	r8, r0
 80090a4:	2800      	cmp	r0, #0
 80090a6:	d0ba      	beq.n	800901e <_strtod_l+0x68e>
 80090a8:	4601      	mov	r1, r0
 80090aa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80090ac:	9805      	ldr	r0, [sp, #20]
 80090ae:	f7ff f8f3 	bl	8008298 <__multiply>
 80090b2:	900e      	str	r0, [sp, #56]	@ 0x38
 80090b4:	2800      	cmp	r0, #0
 80090b6:	f43f ae8a 	beq.w	8008dce <_strtod_l+0x43e>
 80090ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80090bc:	9805      	ldr	r0, [sp, #20]
 80090be:	f7fe ffd7 	bl	8008070 <_Bfree>
 80090c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80090c6:	2d00      	cmp	r5, #0
 80090c8:	dc1d      	bgt.n	8009106 <_strtod_l+0x776>
 80090ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	dd23      	ble.n	8009118 <_strtod_l+0x788>
 80090d0:	4649      	mov	r1, r9
 80090d2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80090d4:	9805      	ldr	r0, [sp, #20]
 80090d6:	f7ff f989 	bl	80083ec <__pow5mult>
 80090da:	4681      	mov	r9, r0
 80090dc:	b9e0      	cbnz	r0, 8009118 <_strtod_l+0x788>
 80090de:	f04f 0900 	mov.w	r9, #0
 80090e2:	e674      	b.n	8008dce <_strtod_l+0x43e>
 80090e4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80090e8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80090ec:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80090f0:	35e2      	adds	r5, #226	@ 0xe2
 80090f2:	fa01 f305 	lsl.w	r3, r1, r5
 80090f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80090f8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80090fa:	e7ba      	b.n	8009072 <_strtod_l+0x6e2>
 80090fc:	2300      	movs	r3, #0
 80090fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8009100:	2301      	movs	r3, #1
 8009102:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009104:	e7b5      	b.n	8009072 <_strtod_l+0x6e2>
 8009106:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009108:	9805      	ldr	r0, [sp, #20]
 800910a:	462a      	mov	r2, r5
 800910c:	f7ff f9c8 	bl	80084a0 <__lshift>
 8009110:	901a      	str	r0, [sp, #104]	@ 0x68
 8009112:	2800      	cmp	r0, #0
 8009114:	d1d9      	bne.n	80090ca <_strtod_l+0x73a>
 8009116:	e65a      	b.n	8008dce <_strtod_l+0x43e>
 8009118:	2e00      	cmp	r6, #0
 800911a:	dd07      	ble.n	800912c <_strtod_l+0x79c>
 800911c:	4649      	mov	r1, r9
 800911e:	9805      	ldr	r0, [sp, #20]
 8009120:	4632      	mov	r2, r6
 8009122:	f7ff f9bd 	bl	80084a0 <__lshift>
 8009126:	4681      	mov	r9, r0
 8009128:	2800      	cmp	r0, #0
 800912a:	d0d8      	beq.n	80090de <_strtod_l+0x74e>
 800912c:	2f00      	cmp	r7, #0
 800912e:	dd08      	ble.n	8009142 <_strtod_l+0x7b2>
 8009130:	4641      	mov	r1, r8
 8009132:	9805      	ldr	r0, [sp, #20]
 8009134:	463a      	mov	r2, r7
 8009136:	f7ff f9b3 	bl	80084a0 <__lshift>
 800913a:	4680      	mov	r8, r0
 800913c:	2800      	cmp	r0, #0
 800913e:	f43f ae46 	beq.w	8008dce <_strtod_l+0x43e>
 8009142:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009144:	9805      	ldr	r0, [sp, #20]
 8009146:	464a      	mov	r2, r9
 8009148:	f7ff fa32 	bl	80085b0 <__mdiff>
 800914c:	4604      	mov	r4, r0
 800914e:	2800      	cmp	r0, #0
 8009150:	f43f ae3d 	beq.w	8008dce <_strtod_l+0x43e>
 8009154:	68c3      	ldr	r3, [r0, #12]
 8009156:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009158:	2300      	movs	r3, #0
 800915a:	60c3      	str	r3, [r0, #12]
 800915c:	4641      	mov	r1, r8
 800915e:	f7ff fa0b 	bl	8008578 <__mcmp>
 8009162:	2800      	cmp	r0, #0
 8009164:	da46      	bge.n	80091f4 <_strtod_l+0x864>
 8009166:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009168:	ea53 030a 	orrs.w	r3, r3, sl
 800916c:	d16c      	bne.n	8009248 <_strtod_l+0x8b8>
 800916e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009172:	2b00      	cmp	r3, #0
 8009174:	d168      	bne.n	8009248 <_strtod_l+0x8b8>
 8009176:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800917a:	0d1b      	lsrs	r3, r3, #20
 800917c:	051b      	lsls	r3, r3, #20
 800917e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009182:	d961      	bls.n	8009248 <_strtod_l+0x8b8>
 8009184:	6963      	ldr	r3, [r4, #20]
 8009186:	b913      	cbnz	r3, 800918e <_strtod_l+0x7fe>
 8009188:	6923      	ldr	r3, [r4, #16]
 800918a:	2b01      	cmp	r3, #1
 800918c:	dd5c      	ble.n	8009248 <_strtod_l+0x8b8>
 800918e:	4621      	mov	r1, r4
 8009190:	2201      	movs	r2, #1
 8009192:	9805      	ldr	r0, [sp, #20]
 8009194:	f7ff f984 	bl	80084a0 <__lshift>
 8009198:	4641      	mov	r1, r8
 800919a:	4604      	mov	r4, r0
 800919c:	f7ff f9ec 	bl	8008578 <__mcmp>
 80091a0:	2800      	cmp	r0, #0
 80091a2:	dd51      	ble.n	8009248 <_strtod_l+0x8b8>
 80091a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80091a8:	9a08      	ldr	r2, [sp, #32]
 80091aa:	0d1b      	lsrs	r3, r3, #20
 80091ac:	051b      	lsls	r3, r3, #20
 80091ae:	2a00      	cmp	r2, #0
 80091b0:	d06b      	beq.n	800928a <_strtod_l+0x8fa>
 80091b2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80091b6:	d868      	bhi.n	800928a <_strtod_l+0x8fa>
 80091b8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80091bc:	f67f ae9d 	bls.w	8008efa <_strtod_l+0x56a>
 80091c0:	4b0a      	ldr	r3, [pc, #40]	@ (80091ec <_strtod_l+0x85c>)
 80091c2:	4650      	mov	r0, sl
 80091c4:	4659      	mov	r1, fp
 80091c6:	2200      	movs	r2, #0
 80091c8:	f7f7 fa46 	bl	8000658 <__aeabi_dmul>
 80091cc:	4b08      	ldr	r3, [pc, #32]	@ (80091f0 <_strtod_l+0x860>)
 80091ce:	400b      	ands	r3, r1
 80091d0:	4682      	mov	sl, r0
 80091d2:	468b      	mov	fp, r1
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	f47f ae05 	bne.w	8008de4 <_strtod_l+0x454>
 80091da:	9a05      	ldr	r2, [sp, #20]
 80091dc:	2322      	movs	r3, #34	@ 0x22
 80091de:	6013      	str	r3, [r2, #0]
 80091e0:	e600      	b.n	8008de4 <_strtod_l+0x454>
 80091e2:	bf00      	nop
 80091e4:	0800abc8 	.word	0x0800abc8
 80091e8:	fffffc02 	.word	0xfffffc02
 80091ec:	39500000 	.word	0x39500000
 80091f0:	7ff00000 	.word	0x7ff00000
 80091f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80091f8:	d165      	bne.n	80092c6 <_strtod_l+0x936>
 80091fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80091fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009200:	b35a      	cbz	r2, 800925a <_strtod_l+0x8ca>
 8009202:	4a9f      	ldr	r2, [pc, #636]	@ (8009480 <_strtod_l+0xaf0>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d12b      	bne.n	8009260 <_strtod_l+0x8d0>
 8009208:	9b08      	ldr	r3, [sp, #32]
 800920a:	4651      	mov	r1, sl
 800920c:	b303      	cbz	r3, 8009250 <_strtod_l+0x8c0>
 800920e:	4b9d      	ldr	r3, [pc, #628]	@ (8009484 <_strtod_l+0xaf4>)
 8009210:	465a      	mov	r2, fp
 8009212:	4013      	ands	r3, r2
 8009214:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009218:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800921c:	d81b      	bhi.n	8009256 <_strtod_l+0x8c6>
 800921e:	0d1b      	lsrs	r3, r3, #20
 8009220:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009224:	fa02 f303 	lsl.w	r3, r2, r3
 8009228:	4299      	cmp	r1, r3
 800922a:	d119      	bne.n	8009260 <_strtod_l+0x8d0>
 800922c:	4b96      	ldr	r3, [pc, #600]	@ (8009488 <_strtod_l+0xaf8>)
 800922e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009230:	429a      	cmp	r2, r3
 8009232:	d102      	bne.n	800923a <_strtod_l+0x8aa>
 8009234:	3101      	adds	r1, #1
 8009236:	f43f adca 	beq.w	8008dce <_strtod_l+0x43e>
 800923a:	4b92      	ldr	r3, [pc, #584]	@ (8009484 <_strtod_l+0xaf4>)
 800923c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800923e:	401a      	ands	r2, r3
 8009240:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009244:	f04f 0a00 	mov.w	sl, #0
 8009248:	9b08      	ldr	r3, [sp, #32]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d1b8      	bne.n	80091c0 <_strtod_l+0x830>
 800924e:	e5c9      	b.n	8008de4 <_strtod_l+0x454>
 8009250:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009254:	e7e8      	b.n	8009228 <_strtod_l+0x898>
 8009256:	4613      	mov	r3, r2
 8009258:	e7e6      	b.n	8009228 <_strtod_l+0x898>
 800925a:	ea53 030a 	orrs.w	r3, r3, sl
 800925e:	d0a1      	beq.n	80091a4 <_strtod_l+0x814>
 8009260:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009262:	b1db      	cbz	r3, 800929c <_strtod_l+0x90c>
 8009264:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009266:	4213      	tst	r3, r2
 8009268:	d0ee      	beq.n	8009248 <_strtod_l+0x8b8>
 800926a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800926c:	9a08      	ldr	r2, [sp, #32]
 800926e:	4650      	mov	r0, sl
 8009270:	4659      	mov	r1, fp
 8009272:	b1bb      	cbz	r3, 80092a4 <_strtod_l+0x914>
 8009274:	f7ff fb6e 	bl	8008954 <sulp>
 8009278:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800927c:	ec53 2b10 	vmov	r2, r3, d0
 8009280:	f7f7 f834 	bl	80002ec <__adddf3>
 8009284:	4682      	mov	sl, r0
 8009286:	468b      	mov	fp, r1
 8009288:	e7de      	b.n	8009248 <_strtod_l+0x8b8>
 800928a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800928e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009292:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009296:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800929a:	e7d5      	b.n	8009248 <_strtod_l+0x8b8>
 800929c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800929e:	ea13 0f0a 	tst.w	r3, sl
 80092a2:	e7e1      	b.n	8009268 <_strtod_l+0x8d8>
 80092a4:	f7ff fb56 	bl	8008954 <sulp>
 80092a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80092ac:	ec53 2b10 	vmov	r2, r3, d0
 80092b0:	f7f7 f81a 	bl	80002e8 <__aeabi_dsub>
 80092b4:	2200      	movs	r2, #0
 80092b6:	2300      	movs	r3, #0
 80092b8:	4682      	mov	sl, r0
 80092ba:	468b      	mov	fp, r1
 80092bc:	f7f7 fc34 	bl	8000b28 <__aeabi_dcmpeq>
 80092c0:	2800      	cmp	r0, #0
 80092c2:	d0c1      	beq.n	8009248 <_strtod_l+0x8b8>
 80092c4:	e619      	b.n	8008efa <_strtod_l+0x56a>
 80092c6:	4641      	mov	r1, r8
 80092c8:	4620      	mov	r0, r4
 80092ca:	f7ff facd 	bl	8008868 <__ratio>
 80092ce:	ec57 6b10 	vmov	r6, r7, d0
 80092d2:	2200      	movs	r2, #0
 80092d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80092d8:	4630      	mov	r0, r6
 80092da:	4639      	mov	r1, r7
 80092dc:	f7f7 fc38 	bl	8000b50 <__aeabi_dcmple>
 80092e0:	2800      	cmp	r0, #0
 80092e2:	d06f      	beq.n	80093c4 <_strtod_l+0xa34>
 80092e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d17a      	bne.n	80093e0 <_strtod_l+0xa50>
 80092ea:	f1ba 0f00 	cmp.w	sl, #0
 80092ee:	d158      	bne.n	80093a2 <_strtod_l+0xa12>
 80092f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d15a      	bne.n	80093b0 <_strtod_l+0xa20>
 80092fa:	4b64      	ldr	r3, [pc, #400]	@ (800948c <_strtod_l+0xafc>)
 80092fc:	2200      	movs	r2, #0
 80092fe:	4630      	mov	r0, r6
 8009300:	4639      	mov	r1, r7
 8009302:	f7f7 fc1b 	bl	8000b3c <__aeabi_dcmplt>
 8009306:	2800      	cmp	r0, #0
 8009308:	d159      	bne.n	80093be <_strtod_l+0xa2e>
 800930a:	4630      	mov	r0, r6
 800930c:	4639      	mov	r1, r7
 800930e:	4b60      	ldr	r3, [pc, #384]	@ (8009490 <_strtod_l+0xb00>)
 8009310:	2200      	movs	r2, #0
 8009312:	f7f7 f9a1 	bl	8000658 <__aeabi_dmul>
 8009316:	4606      	mov	r6, r0
 8009318:	460f      	mov	r7, r1
 800931a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800931e:	9606      	str	r6, [sp, #24]
 8009320:	9307      	str	r3, [sp, #28]
 8009322:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009326:	4d57      	ldr	r5, [pc, #348]	@ (8009484 <_strtod_l+0xaf4>)
 8009328:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800932c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800932e:	401d      	ands	r5, r3
 8009330:	4b58      	ldr	r3, [pc, #352]	@ (8009494 <_strtod_l+0xb04>)
 8009332:	429d      	cmp	r5, r3
 8009334:	f040 80b2 	bne.w	800949c <_strtod_l+0xb0c>
 8009338:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800933a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800933e:	ec4b ab10 	vmov	d0, sl, fp
 8009342:	f7ff f9c9 	bl	80086d8 <__ulp>
 8009346:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800934a:	ec51 0b10 	vmov	r0, r1, d0
 800934e:	f7f7 f983 	bl	8000658 <__aeabi_dmul>
 8009352:	4652      	mov	r2, sl
 8009354:	465b      	mov	r3, fp
 8009356:	f7f6 ffc9 	bl	80002ec <__adddf3>
 800935a:	460b      	mov	r3, r1
 800935c:	4949      	ldr	r1, [pc, #292]	@ (8009484 <_strtod_l+0xaf4>)
 800935e:	4a4e      	ldr	r2, [pc, #312]	@ (8009498 <_strtod_l+0xb08>)
 8009360:	4019      	ands	r1, r3
 8009362:	4291      	cmp	r1, r2
 8009364:	4682      	mov	sl, r0
 8009366:	d942      	bls.n	80093ee <_strtod_l+0xa5e>
 8009368:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800936a:	4b47      	ldr	r3, [pc, #284]	@ (8009488 <_strtod_l+0xaf8>)
 800936c:	429a      	cmp	r2, r3
 800936e:	d103      	bne.n	8009378 <_strtod_l+0x9e8>
 8009370:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009372:	3301      	adds	r3, #1
 8009374:	f43f ad2b 	beq.w	8008dce <_strtod_l+0x43e>
 8009378:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009488 <_strtod_l+0xaf8>
 800937c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009380:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009382:	9805      	ldr	r0, [sp, #20]
 8009384:	f7fe fe74 	bl	8008070 <_Bfree>
 8009388:	9805      	ldr	r0, [sp, #20]
 800938a:	4649      	mov	r1, r9
 800938c:	f7fe fe70 	bl	8008070 <_Bfree>
 8009390:	9805      	ldr	r0, [sp, #20]
 8009392:	4641      	mov	r1, r8
 8009394:	f7fe fe6c 	bl	8008070 <_Bfree>
 8009398:	9805      	ldr	r0, [sp, #20]
 800939a:	4621      	mov	r1, r4
 800939c:	f7fe fe68 	bl	8008070 <_Bfree>
 80093a0:	e618      	b.n	8008fd4 <_strtod_l+0x644>
 80093a2:	f1ba 0f01 	cmp.w	sl, #1
 80093a6:	d103      	bne.n	80093b0 <_strtod_l+0xa20>
 80093a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	f43f ada5 	beq.w	8008efa <_strtod_l+0x56a>
 80093b0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009460 <_strtod_l+0xad0>
 80093b4:	4f35      	ldr	r7, [pc, #212]	@ (800948c <_strtod_l+0xafc>)
 80093b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80093ba:	2600      	movs	r6, #0
 80093bc:	e7b1      	b.n	8009322 <_strtod_l+0x992>
 80093be:	4f34      	ldr	r7, [pc, #208]	@ (8009490 <_strtod_l+0xb00>)
 80093c0:	2600      	movs	r6, #0
 80093c2:	e7aa      	b.n	800931a <_strtod_l+0x98a>
 80093c4:	4b32      	ldr	r3, [pc, #200]	@ (8009490 <_strtod_l+0xb00>)
 80093c6:	4630      	mov	r0, r6
 80093c8:	4639      	mov	r1, r7
 80093ca:	2200      	movs	r2, #0
 80093cc:	f7f7 f944 	bl	8000658 <__aeabi_dmul>
 80093d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093d2:	4606      	mov	r6, r0
 80093d4:	460f      	mov	r7, r1
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d09f      	beq.n	800931a <_strtod_l+0x98a>
 80093da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80093de:	e7a0      	b.n	8009322 <_strtod_l+0x992>
 80093e0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009468 <_strtod_l+0xad8>
 80093e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80093e8:	ec57 6b17 	vmov	r6, r7, d7
 80093ec:	e799      	b.n	8009322 <_strtod_l+0x992>
 80093ee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80093f2:	9b08      	ldr	r3, [sp, #32]
 80093f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d1c1      	bne.n	8009380 <_strtod_l+0x9f0>
 80093fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009400:	0d1b      	lsrs	r3, r3, #20
 8009402:	051b      	lsls	r3, r3, #20
 8009404:	429d      	cmp	r5, r3
 8009406:	d1bb      	bne.n	8009380 <_strtod_l+0x9f0>
 8009408:	4630      	mov	r0, r6
 800940a:	4639      	mov	r1, r7
 800940c:	f7f7 fcd4 	bl	8000db8 <__aeabi_d2lz>
 8009410:	f7f7 f8f4 	bl	80005fc <__aeabi_l2d>
 8009414:	4602      	mov	r2, r0
 8009416:	460b      	mov	r3, r1
 8009418:	4630      	mov	r0, r6
 800941a:	4639      	mov	r1, r7
 800941c:	f7f6 ff64 	bl	80002e8 <__aeabi_dsub>
 8009420:	460b      	mov	r3, r1
 8009422:	4602      	mov	r2, r0
 8009424:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009428:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800942c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800942e:	ea46 060a 	orr.w	r6, r6, sl
 8009432:	431e      	orrs	r6, r3
 8009434:	d06f      	beq.n	8009516 <_strtod_l+0xb86>
 8009436:	a30e      	add	r3, pc, #56	@ (adr r3, 8009470 <_strtod_l+0xae0>)
 8009438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943c:	f7f7 fb7e 	bl	8000b3c <__aeabi_dcmplt>
 8009440:	2800      	cmp	r0, #0
 8009442:	f47f accf 	bne.w	8008de4 <_strtod_l+0x454>
 8009446:	a30c      	add	r3, pc, #48	@ (adr r3, 8009478 <_strtod_l+0xae8>)
 8009448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009450:	f7f7 fb92 	bl	8000b78 <__aeabi_dcmpgt>
 8009454:	2800      	cmp	r0, #0
 8009456:	d093      	beq.n	8009380 <_strtod_l+0x9f0>
 8009458:	e4c4      	b.n	8008de4 <_strtod_l+0x454>
 800945a:	bf00      	nop
 800945c:	f3af 8000 	nop.w
 8009460:	00000000 	.word	0x00000000
 8009464:	bff00000 	.word	0xbff00000
 8009468:	00000000 	.word	0x00000000
 800946c:	3ff00000 	.word	0x3ff00000
 8009470:	94a03595 	.word	0x94a03595
 8009474:	3fdfffff 	.word	0x3fdfffff
 8009478:	35afe535 	.word	0x35afe535
 800947c:	3fe00000 	.word	0x3fe00000
 8009480:	000fffff 	.word	0x000fffff
 8009484:	7ff00000 	.word	0x7ff00000
 8009488:	7fefffff 	.word	0x7fefffff
 800948c:	3ff00000 	.word	0x3ff00000
 8009490:	3fe00000 	.word	0x3fe00000
 8009494:	7fe00000 	.word	0x7fe00000
 8009498:	7c9fffff 	.word	0x7c9fffff
 800949c:	9b08      	ldr	r3, [sp, #32]
 800949e:	b323      	cbz	r3, 80094ea <_strtod_l+0xb5a>
 80094a0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80094a4:	d821      	bhi.n	80094ea <_strtod_l+0xb5a>
 80094a6:	a328      	add	r3, pc, #160	@ (adr r3, 8009548 <_strtod_l+0xbb8>)
 80094a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ac:	4630      	mov	r0, r6
 80094ae:	4639      	mov	r1, r7
 80094b0:	f7f7 fb4e 	bl	8000b50 <__aeabi_dcmple>
 80094b4:	b1a0      	cbz	r0, 80094e0 <_strtod_l+0xb50>
 80094b6:	4639      	mov	r1, r7
 80094b8:	4630      	mov	r0, r6
 80094ba:	f7f7 fba5 	bl	8000c08 <__aeabi_d2uiz>
 80094be:	2801      	cmp	r0, #1
 80094c0:	bf38      	it	cc
 80094c2:	2001      	movcc	r0, #1
 80094c4:	f7f7 f84e 	bl	8000564 <__aeabi_ui2d>
 80094c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094ca:	4606      	mov	r6, r0
 80094cc:	460f      	mov	r7, r1
 80094ce:	b9fb      	cbnz	r3, 8009510 <_strtod_l+0xb80>
 80094d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80094d4:	9014      	str	r0, [sp, #80]	@ 0x50
 80094d6:	9315      	str	r3, [sp, #84]	@ 0x54
 80094d8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80094dc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80094e0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80094e2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80094e6:	1b5b      	subs	r3, r3, r5
 80094e8:	9311      	str	r3, [sp, #68]	@ 0x44
 80094ea:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80094ee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80094f2:	f7ff f8f1 	bl	80086d8 <__ulp>
 80094f6:	4650      	mov	r0, sl
 80094f8:	ec53 2b10 	vmov	r2, r3, d0
 80094fc:	4659      	mov	r1, fp
 80094fe:	f7f7 f8ab 	bl	8000658 <__aeabi_dmul>
 8009502:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009506:	f7f6 fef1 	bl	80002ec <__adddf3>
 800950a:	4682      	mov	sl, r0
 800950c:	468b      	mov	fp, r1
 800950e:	e770      	b.n	80093f2 <_strtod_l+0xa62>
 8009510:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009514:	e7e0      	b.n	80094d8 <_strtod_l+0xb48>
 8009516:	a30e      	add	r3, pc, #56	@ (adr r3, 8009550 <_strtod_l+0xbc0>)
 8009518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951c:	f7f7 fb0e 	bl	8000b3c <__aeabi_dcmplt>
 8009520:	e798      	b.n	8009454 <_strtod_l+0xac4>
 8009522:	2300      	movs	r3, #0
 8009524:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009526:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009528:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800952a:	6013      	str	r3, [r2, #0]
 800952c:	f7ff ba6d 	b.w	8008a0a <_strtod_l+0x7a>
 8009530:	2a65      	cmp	r2, #101	@ 0x65
 8009532:	f43f ab66 	beq.w	8008c02 <_strtod_l+0x272>
 8009536:	2a45      	cmp	r2, #69	@ 0x45
 8009538:	f43f ab63 	beq.w	8008c02 <_strtod_l+0x272>
 800953c:	2301      	movs	r3, #1
 800953e:	f7ff bb9e 	b.w	8008c7e <_strtod_l+0x2ee>
 8009542:	bf00      	nop
 8009544:	f3af 8000 	nop.w
 8009548:	ffc00000 	.word	0xffc00000
 800954c:	41dfffff 	.word	0x41dfffff
 8009550:	94a03595 	.word	0x94a03595
 8009554:	3fcfffff 	.word	0x3fcfffff

08009558 <_strtod_r>:
 8009558:	4b01      	ldr	r3, [pc, #4]	@ (8009560 <_strtod_r+0x8>)
 800955a:	f7ff ba19 	b.w	8008990 <_strtod_l>
 800955e:	bf00      	nop
 8009560:	2000006c 	.word	0x2000006c

08009564 <_strtol_l.constprop.0>:
 8009564:	2b24      	cmp	r3, #36	@ 0x24
 8009566:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800956a:	4686      	mov	lr, r0
 800956c:	4690      	mov	r8, r2
 800956e:	d801      	bhi.n	8009574 <_strtol_l.constprop.0+0x10>
 8009570:	2b01      	cmp	r3, #1
 8009572:	d106      	bne.n	8009582 <_strtol_l.constprop.0+0x1e>
 8009574:	f7fd fdbc 	bl	80070f0 <__errno>
 8009578:	2316      	movs	r3, #22
 800957a:	6003      	str	r3, [r0, #0]
 800957c:	2000      	movs	r0, #0
 800957e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009582:	4834      	ldr	r0, [pc, #208]	@ (8009654 <_strtol_l.constprop.0+0xf0>)
 8009584:	460d      	mov	r5, r1
 8009586:	462a      	mov	r2, r5
 8009588:	f815 4b01 	ldrb.w	r4, [r5], #1
 800958c:	5d06      	ldrb	r6, [r0, r4]
 800958e:	f016 0608 	ands.w	r6, r6, #8
 8009592:	d1f8      	bne.n	8009586 <_strtol_l.constprop.0+0x22>
 8009594:	2c2d      	cmp	r4, #45	@ 0x2d
 8009596:	d12d      	bne.n	80095f4 <_strtol_l.constprop.0+0x90>
 8009598:	782c      	ldrb	r4, [r5, #0]
 800959a:	2601      	movs	r6, #1
 800959c:	1c95      	adds	r5, r2, #2
 800959e:	f033 0210 	bics.w	r2, r3, #16
 80095a2:	d109      	bne.n	80095b8 <_strtol_l.constprop.0+0x54>
 80095a4:	2c30      	cmp	r4, #48	@ 0x30
 80095a6:	d12a      	bne.n	80095fe <_strtol_l.constprop.0+0x9a>
 80095a8:	782a      	ldrb	r2, [r5, #0]
 80095aa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80095ae:	2a58      	cmp	r2, #88	@ 0x58
 80095b0:	d125      	bne.n	80095fe <_strtol_l.constprop.0+0x9a>
 80095b2:	786c      	ldrb	r4, [r5, #1]
 80095b4:	2310      	movs	r3, #16
 80095b6:	3502      	adds	r5, #2
 80095b8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80095bc:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80095c0:	2200      	movs	r2, #0
 80095c2:	fbbc f9f3 	udiv	r9, ip, r3
 80095c6:	4610      	mov	r0, r2
 80095c8:	fb03 ca19 	mls	sl, r3, r9, ip
 80095cc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80095d0:	2f09      	cmp	r7, #9
 80095d2:	d81b      	bhi.n	800960c <_strtol_l.constprop.0+0xa8>
 80095d4:	463c      	mov	r4, r7
 80095d6:	42a3      	cmp	r3, r4
 80095d8:	dd27      	ble.n	800962a <_strtol_l.constprop.0+0xc6>
 80095da:	1c57      	adds	r7, r2, #1
 80095dc:	d007      	beq.n	80095ee <_strtol_l.constprop.0+0x8a>
 80095de:	4581      	cmp	r9, r0
 80095e0:	d320      	bcc.n	8009624 <_strtol_l.constprop.0+0xc0>
 80095e2:	d101      	bne.n	80095e8 <_strtol_l.constprop.0+0x84>
 80095e4:	45a2      	cmp	sl, r4
 80095e6:	db1d      	blt.n	8009624 <_strtol_l.constprop.0+0xc0>
 80095e8:	fb00 4003 	mla	r0, r0, r3, r4
 80095ec:	2201      	movs	r2, #1
 80095ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095f2:	e7eb      	b.n	80095cc <_strtol_l.constprop.0+0x68>
 80095f4:	2c2b      	cmp	r4, #43	@ 0x2b
 80095f6:	bf04      	itt	eq
 80095f8:	782c      	ldrbeq	r4, [r5, #0]
 80095fa:	1c95      	addeq	r5, r2, #2
 80095fc:	e7cf      	b.n	800959e <_strtol_l.constprop.0+0x3a>
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d1da      	bne.n	80095b8 <_strtol_l.constprop.0+0x54>
 8009602:	2c30      	cmp	r4, #48	@ 0x30
 8009604:	bf0c      	ite	eq
 8009606:	2308      	moveq	r3, #8
 8009608:	230a      	movne	r3, #10
 800960a:	e7d5      	b.n	80095b8 <_strtol_l.constprop.0+0x54>
 800960c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009610:	2f19      	cmp	r7, #25
 8009612:	d801      	bhi.n	8009618 <_strtol_l.constprop.0+0xb4>
 8009614:	3c37      	subs	r4, #55	@ 0x37
 8009616:	e7de      	b.n	80095d6 <_strtol_l.constprop.0+0x72>
 8009618:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800961c:	2f19      	cmp	r7, #25
 800961e:	d804      	bhi.n	800962a <_strtol_l.constprop.0+0xc6>
 8009620:	3c57      	subs	r4, #87	@ 0x57
 8009622:	e7d8      	b.n	80095d6 <_strtol_l.constprop.0+0x72>
 8009624:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009628:	e7e1      	b.n	80095ee <_strtol_l.constprop.0+0x8a>
 800962a:	1c53      	adds	r3, r2, #1
 800962c:	d108      	bne.n	8009640 <_strtol_l.constprop.0+0xdc>
 800962e:	2322      	movs	r3, #34	@ 0x22
 8009630:	f8ce 3000 	str.w	r3, [lr]
 8009634:	4660      	mov	r0, ip
 8009636:	f1b8 0f00 	cmp.w	r8, #0
 800963a:	d0a0      	beq.n	800957e <_strtol_l.constprop.0+0x1a>
 800963c:	1e69      	subs	r1, r5, #1
 800963e:	e006      	b.n	800964e <_strtol_l.constprop.0+0xea>
 8009640:	b106      	cbz	r6, 8009644 <_strtol_l.constprop.0+0xe0>
 8009642:	4240      	negs	r0, r0
 8009644:	f1b8 0f00 	cmp.w	r8, #0
 8009648:	d099      	beq.n	800957e <_strtol_l.constprop.0+0x1a>
 800964a:	2a00      	cmp	r2, #0
 800964c:	d1f6      	bne.n	800963c <_strtol_l.constprop.0+0xd8>
 800964e:	f8c8 1000 	str.w	r1, [r8]
 8009652:	e794      	b.n	800957e <_strtol_l.constprop.0+0x1a>
 8009654:	0800abf1 	.word	0x0800abf1

08009658 <_strtol_r>:
 8009658:	f7ff bf84 	b.w	8009564 <_strtol_l.constprop.0>

0800965c <__ssputs_r>:
 800965c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009660:	688e      	ldr	r6, [r1, #8]
 8009662:	461f      	mov	r7, r3
 8009664:	42be      	cmp	r6, r7
 8009666:	680b      	ldr	r3, [r1, #0]
 8009668:	4682      	mov	sl, r0
 800966a:	460c      	mov	r4, r1
 800966c:	4690      	mov	r8, r2
 800966e:	d82d      	bhi.n	80096cc <__ssputs_r+0x70>
 8009670:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009674:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009678:	d026      	beq.n	80096c8 <__ssputs_r+0x6c>
 800967a:	6965      	ldr	r5, [r4, #20]
 800967c:	6909      	ldr	r1, [r1, #16]
 800967e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009682:	eba3 0901 	sub.w	r9, r3, r1
 8009686:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800968a:	1c7b      	adds	r3, r7, #1
 800968c:	444b      	add	r3, r9
 800968e:	106d      	asrs	r5, r5, #1
 8009690:	429d      	cmp	r5, r3
 8009692:	bf38      	it	cc
 8009694:	461d      	movcc	r5, r3
 8009696:	0553      	lsls	r3, r2, #21
 8009698:	d527      	bpl.n	80096ea <__ssputs_r+0x8e>
 800969a:	4629      	mov	r1, r5
 800969c:	f7fe fc1c 	bl	8007ed8 <_malloc_r>
 80096a0:	4606      	mov	r6, r0
 80096a2:	b360      	cbz	r0, 80096fe <__ssputs_r+0xa2>
 80096a4:	6921      	ldr	r1, [r4, #16]
 80096a6:	464a      	mov	r2, r9
 80096a8:	f000 fbcc 	bl	8009e44 <memcpy>
 80096ac:	89a3      	ldrh	r3, [r4, #12]
 80096ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80096b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096b6:	81a3      	strh	r3, [r4, #12]
 80096b8:	6126      	str	r6, [r4, #16]
 80096ba:	6165      	str	r5, [r4, #20]
 80096bc:	444e      	add	r6, r9
 80096be:	eba5 0509 	sub.w	r5, r5, r9
 80096c2:	6026      	str	r6, [r4, #0]
 80096c4:	60a5      	str	r5, [r4, #8]
 80096c6:	463e      	mov	r6, r7
 80096c8:	42be      	cmp	r6, r7
 80096ca:	d900      	bls.n	80096ce <__ssputs_r+0x72>
 80096cc:	463e      	mov	r6, r7
 80096ce:	6820      	ldr	r0, [r4, #0]
 80096d0:	4632      	mov	r2, r6
 80096d2:	4641      	mov	r1, r8
 80096d4:	f000 fb6a 	bl	8009dac <memmove>
 80096d8:	68a3      	ldr	r3, [r4, #8]
 80096da:	1b9b      	subs	r3, r3, r6
 80096dc:	60a3      	str	r3, [r4, #8]
 80096de:	6823      	ldr	r3, [r4, #0]
 80096e0:	4433      	add	r3, r6
 80096e2:	6023      	str	r3, [r4, #0]
 80096e4:	2000      	movs	r0, #0
 80096e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ea:	462a      	mov	r2, r5
 80096ec:	f000 ff3d 	bl	800a56a <_realloc_r>
 80096f0:	4606      	mov	r6, r0
 80096f2:	2800      	cmp	r0, #0
 80096f4:	d1e0      	bne.n	80096b8 <__ssputs_r+0x5c>
 80096f6:	6921      	ldr	r1, [r4, #16]
 80096f8:	4650      	mov	r0, sl
 80096fa:	f7fe fb79 	bl	8007df0 <_free_r>
 80096fe:	230c      	movs	r3, #12
 8009700:	f8ca 3000 	str.w	r3, [sl]
 8009704:	89a3      	ldrh	r3, [r4, #12]
 8009706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800970a:	81a3      	strh	r3, [r4, #12]
 800970c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009710:	e7e9      	b.n	80096e6 <__ssputs_r+0x8a>
	...

08009714 <_svfiprintf_r>:
 8009714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009718:	4698      	mov	r8, r3
 800971a:	898b      	ldrh	r3, [r1, #12]
 800971c:	061b      	lsls	r3, r3, #24
 800971e:	b09d      	sub	sp, #116	@ 0x74
 8009720:	4607      	mov	r7, r0
 8009722:	460d      	mov	r5, r1
 8009724:	4614      	mov	r4, r2
 8009726:	d510      	bpl.n	800974a <_svfiprintf_r+0x36>
 8009728:	690b      	ldr	r3, [r1, #16]
 800972a:	b973      	cbnz	r3, 800974a <_svfiprintf_r+0x36>
 800972c:	2140      	movs	r1, #64	@ 0x40
 800972e:	f7fe fbd3 	bl	8007ed8 <_malloc_r>
 8009732:	6028      	str	r0, [r5, #0]
 8009734:	6128      	str	r0, [r5, #16]
 8009736:	b930      	cbnz	r0, 8009746 <_svfiprintf_r+0x32>
 8009738:	230c      	movs	r3, #12
 800973a:	603b      	str	r3, [r7, #0]
 800973c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009740:	b01d      	add	sp, #116	@ 0x74
 8009742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009746:	2340      	movs	r3, #64	@ 0x40
 8009748:	616b      	str	r3, [r5, #20]
 800974a:	2300      	movs	r3, #0
 800974c:	9309      	str	r3, [sp, #36]	@ 0x24
 800974e:	2320      	movs	r3, #32
 8009750:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009754:	f8cd 800c 	str.w	r8, [sp, #12]
 8009758:	2330      	movs	r3, #48	@ 0x30
 800975a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80098f8 <_svfiprintf_r+0x1e4>
 800975e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009762:	f04f 0901 	mov.w	r9, #1
 8009766:	4623      	mov	r3, r4
 8009768:	469a      	mov	sl, r3
 800976a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800976e:	b10a      	cbz	r2, 8009774 <_svfiprintf_r+0x60>
 8009770:	2a25      	cmp	r2, #37	@ 0x25
 8009772:	d1f9      	bne.n	8009768 <_svfiprintf_r+0x54>
 8009774:	ebba 0b04 	subs.w	fp, sl, r4
 8009778:	d00b      	beq.n	8009792 <_svfiprintf_r+0x7e>
 800977a:	465b      	mov	r3, fp
 800977c:	4622      	mov	r2, r4
 800977e:	4629      	mov	r1, r5
 8009780:	4638      	mov	r0, r7
 8009782:	f7ff ff6b 	bl	800965c <__ssputs_r>
 8009786:	3001      	adds	r0, #1
 8009788:	f000 80a7 	beq.w	80098da <_svfiprintf_r+0x1c6>
 800978c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800978e:	445a      	add	r2, fp
 8009790:	9209      	str	r2, [sp, #36]	@ 0x24
 8009792:	f89a 3000 	ldrb.w	r3, [sl]
 8009796:	2b00      	cmp	r3, #0
 8009798:	f000 809f 	beq.w	80098da <_svfiprintf_r+0x1c6>
 800979c:	2300      	movs	r3, #0
 800979e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80097a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097a6:	f10a 0a01 	add.w	sl, sl, #1
 80097aa:	9304      	str	r3, [sp, #16]
 80097ac:	9307      	str	r3, [sp, #28]
 80097ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80097b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80097b4:	4654      	mov	r4, sl
 80097b6:	2205      	movs	r2, #5
 80097b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097bc:	484e      	ldr	r0, [pc, #312]	@ (80098f8 <_svfiprintf_r+0x1e4>)
 80097be:	f7f6 fd37 	bl	8000230 <memchr>
 80097c2:	9a04      	ldr	r2, [sp, #16]
 80097c4:	b9d8      	cbnz	r0, 80097fe <_svfiprintf_r+0xea>
 80097c6:	06d0      	lsls	r0, r2, #27
 80097c8:	bf44      	itt	mi
 80097ca:	2320      	movmi	r3, #32
 80097cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097d0:	0711      	lsls	r1, r2, #28
 80097d2:	bf44      	itt	mi
 80097d4:	232b      	movmi	r3, #43	@ 0x2b
 80097d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097da:	f89a 3000 	ldrb.w	r3, [sl]
 80097de:	2b2a      	cmp	r3, #42	@ 0x2a
 80097e0:	d015      	beq.n	800980e <_svfiprintf_r+0xfa>
 80097e2:	9a07      	ldr	r2, [sp, #28]
 80097e4:	4654      	mov	r4, sl
 80097e6:	2000      	movs	r0, #0
 80097e8:	f04f 0c0a 	mov.w	ip, #10
 80097ec:	4621      	mov	r1, r4
 80097ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097f2:	3b30      	subs	r3, #48	@ 0x30
 80097f4:	2b09      	cmp	r3, #9
 80097f6:	d94b      	bls.n	8009890 <_svfiprintf_r+0x17c>
 80097f8:	b1b0      	cbz	r0, 8009828 <_svfiprintf_r+0x114>
 80097fa:	9207      	str	r2, [sp, #28]
 80097fc:	e014      	b.n	8009828 <_svfiprintf_r+0x114>
 80097fe:	eba0 0308 	sub.w	r3, r0, r8
 8009802:	fa09 f303 	lsl.w	r3, r9, r3
 8009806:	4313      	orrs	r3, r2
 8009808:	9304      	str	r3, [sp, #16]
 800980a:	46a2      	mov	sl, r4
 800980c:	e7d2      	b.n	80097b4 <_svfiprintf_r+0xa0>
 800980e:	9b03      	ldr	r3, [sp, #12]
 8009810:	1d19      	adds	r1, r3, #4
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	9103      	str	r1, [sp, #12]
 8009816:	2b00      	cmp	r3, #0
 8009818:	bfbb      	ittet	lt
 800981a:	425b      	neglt	r3, r3
 800981c:	f042 0202 	orrlt.w	r2, r2, #2
 8009820:	9307      	strge	r3, [sp, #28]
 8009822:	9307      	strlt	r3, [sp, #28]
 8009824:	bfb8      	it	lt
 8009826:	9204      	strlt	r2, [sp, #16]
 8009828:	7823      	ldrb	r3, [r4, #0]
 800982a:	2b2e      	cmp	r3, #46	@ 0x2e
 800982c:	d10a      	bne.n	8009844 <_svfiprintf_r+0x130>
 800982e:	7863      	ldrb	r3, [r4, #1]
 8009830:	2b2a      	cmp	r3, #42	@ 0x2a
 8009832:	d132      	bne.n	800989a <_svfiprintf_r+0x186>
 8009834:	9b03      	ldr	r3, [sp, #12]
 8009836:	1d1a      	adds	r2, r3, #4
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	9203      	str	r2, [sp, #12]
 800983c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009840:	3402      	adds	r4, #2
 8009842:	9305      	str	r3, [sp, #20]
 8009844:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009908 <_svfiprintf_r+0x1f4>
 8009848:	7821      	ldrb	r1, [r4, #0]
 800984a:	2203      	movs	r2, #3
 800984c:	4650      	mov	r0, sl
 800984e:	f7f6 fcef 	bl	8000230 <memchr>
 8009852:	b138      	cbz	r0, 8009864 <_svfiprintf_r+0x150>
 8009854:	9b04      	ldr	r3, [sp, #16]
 8009856:	eba0 000a 	sub.w	r0, r0, sl
 800985a:	2240      	movs	r2, #64	@ 0x40
 800985c:	4082      	lsls	r2, r0
 800985e:	4313      	orrs	r3, r2
 8009860:	3401      	adds	r4, #1
 8009862:	9304      	str	r3, [sp, #16]
 8009864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009868:	4824      	ldr	r0, [pc, #144]	@ (80098fc <_svfiprintf_r+0x1e8>)
 800986a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800986e:	2206      	movs	r2, #6
 8009870:	f7f6 fcde 	bl	8000230 <memchr>
 8009874:	2800      	cmp	r0, #0
 8009876:	d036      	beq.n	80098e6 <_svfiprintf_r+0x1d2>
 8009878:	4b21      	ldr	r3, [pc, #132]	@ (8009900 <_svfiprintf_r+0x1ec>)
 800987a:	bb1b      	cbnz	r3, 80098c4 <_svfiprintf_r+0x1b0>
 800987c:	9b03      	ldr	r3, [sp, #12]
 800987e:	3307      	adds	r3, #7
 8009880:	f023 0307 	bic.w	r3, r3, #7
 8009884:	3308      	adds	r3, #8
 8009886:	9303      	str	r3, [sp, #12]
 8009888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800988a:	4433      	add	r3, r6
 800988c:	9309      	str	r3, [sp, #36]	@ 0x24
 800988e:	e76a      	b.n	8009766 <_svfiprintf_r+0x52>
 8009890:	fb0c 3202 	mla	r2, ip, r2, r3
 8009894:	460c      	mov	r4, r1
 8009896:	2001      	movs	r0, #1
 8009898:	e7a8      	b.n	80097ec <_svfiprintf_r+0xd8>
 800989a:	2300      	movs	r3, #0
 800989c:	3401      	adds	r4, #1
 800989e:	9305      	str	r3, [sp, #20]
 80098a0:	4619      	mov	r1, r3
 80098a2:	f04f 0c0a 	mov.w	ip, #10
 80098a6:	4620      	mov	r0, r4
 80098a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098ac:	3a30      	subs	r2, #48	@ 0x30
 80098ae:	2a09      	cmp	r2, #9
 80098b0:	d903      	bls.n	80098ba <_svfiprintf_r+0x1a6>
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d0c6      	beq.n	8009844 <_svfiprintf_r+0x130>
 80098b6:	9105      	str	r1, [sp, #20]
 80098b8:	e7c4      	b.n	8009844 <_svfiprintf_r+0x130>
 80098ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80098be:	4604      	mov	r4, r0
 80098c0:	2301      	movs	r3, #1
 80098c2:	e7f0      	b.n	80098a6 <_svfiprintf_r+0x192>
 80098c4:	ab03      	add	r3, sp, #12
 80098c6:	9300      	str	r3, [sp, #0]
 80098c8:	462a      	mov	r2, r5
 80098ca:	4b0e      	ldr	r3, [pc, #56]	@ (8009904 <_svfiprintf_r+0x1f0>)
 80098cc:	a904      	add	r1, sp, #16
 80098ce:	4638      	mov	r0, r7
 80098d0:	f7fc fbb4 	bl	800603c <_printf_float>
 80098d4:	1c42      	adds	r2, r0, #1
 80098d6:	4606      	mov	r6, r0
 80098d8:	d1d6      	bne.n	8009888 <_svfiprintf_r+0x174>
 80098da:	89ab      	ldrh	r3, [r5, #12]
 80098dc:	065b      	lsls	r3, r3, #25
 80098de:	f53f af2d 	bmi.w	800973c <_svfiprintf_r+0x28>
 80098e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098e4:	e72c      	b.n	8009740 <_svfiprintf_r+0x2c>
 80098e6:	ab03      	add	r3, sp, #12
 80098e8:	9300      	str	r3, [sp, #0]
 80098ea:	462a      	mov	r2, r5
 80098ec:	4b05      	ldr	r3, [pc, #20]	@ (8009904 <_svfiprintf_r+0x1f0>)
 80098ee:	a904      	add	r1, sp, #16
 80098f0:	4638      	mov	r0, r7
 80098f2:	f7fc fe3b 	bl	800656c <_printf_i>
 80098f6:	e7ed      	b.n	80098d4 <_svfiprintf_r+0x1c0>
 80098f8:	0800acf1 	.word	0x0800acf1
 80098fc:	0800acfb 	.word	0x0800acfb
 8009900:	0800603d 	.word	0x0800603d
 8009904:	0800965d 	.word	0x0800965d
 8009908:	0800acf7 	.word	0x0800acf7

0800990c <__sfputc_r>:
 800990c:	6893      	ldr	r3, [r2, #8]
 800990e:	3b01      	subs	r3, #1
 8009910:	2b00      	cmp	r3, #0
 8009912:	b410      	push	{r4}
 8009914:	6093      	str	r3, [r2, #8]
 8009916:	da08      	bge.n	800992a <__sfputc_r+0x1e>
 8009918:	6994      	ldr	r4, [r2, #24]
 800991a:	42a3      	cmp	r3, r4
 800991c:	db01      	blt.n	8009922 <__sfputc_r+0x16>
 800991e:	290a      	cmp	r1, #10
 8009920:	d103      	bne.n	800992a <__sfputc_r+0x1e>
 8009922:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009926:	f7fd baea 	b.w	8006efe <__swbuf_r>
 800992a:	6813      	ldr	r3, [r2, #0]
 800992c:	1c58      	adds	r0, r3, #1
 800992e:	6010      	str	r0, [r2, #0]
 8009930:	7019      	strb	r1, [r3, #0]
 8009932:	4608      	mov	r0, r1
 8009934:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009938:	4770      	bx	lr

0800993a <__sfputs_r>:
 800993a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993c:	4606      	mov	r6, r0
 800993e:	460f      	mov	r7, r1
 8009940:	4614      	mov	r4, r2
 8009942:	18d5      	adds	r5, r2, r3
 8009944:	42ac      	cmp	r4, r5
 8009946:	d101      	bne.n	800994c <__sfputs_r+0x12>
 8009948:	2000      	movs	r0, #0
 800994a:	e007      	b.n	800995c <__sfputs_r+0x22>
 800994c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009950:	463a      	mov	r2, r7
 8009952:	4630      	mov	r0, r6
 8009954:	f7ff ffda 	bl	800990c <__sfputc_r>
 8009958:	1c43      	adds	r3, r0, #1
 800995a:	d1f3      	bne.n	8009944 <__sfputs_r+0xa>
 800995c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009960 <_vfiprintf_r>:
 8009960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009964:	460d      	mov	r5, r1
 8009966:	b09d      	sub	sp, #116	@ 0x74
 8009968:	4614      	mov	r4, r2
 800996a:	4698      	mov	r8, r3
 800996c:	4606      	mov	r6, r0
 800996e:	b118      	cbz	r0, 8009978 <_vfiprintf_r+0x18>
 8009970:	6a03      	ldr	r3, [r0, #32]
 8009972:	b90b      	cbnz	r3, 8009978 <_vfiprintf_r+0x18>
 8009974:	f7fd f9ba 	bl	8006cec <__sinit>
 8009978:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800997a:	07d9      	lsls	r1, r3, #31
 800997c:	d405      	bmi.n	800998a <_vfiprintf_r+0x2a>
 800997e:	89ab      	ldrh	r3, [r5, #12]
 8009980:	059a      	lsls	r2, r3, #22
 8009982:	d402      	bmi.n	800998a <_vfiprintf_r+0x2a>
 8009984:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009986:	f7fd fbde 	bl	8007146 <__retarget_lock_acquire_recursive>
 800998a:	89ab      	ldrh	r3, [r5, #12]
 800998c:	071b      	lsls	r3, r3, #28
 800998e:	d501      	bpl.n	8009994 <_vfiprintf_r+0x34>
 8009990:	692b      	ldr	r3, [r5, #16]
 8009992:	b99b      	cbnz	r3, 80099bc <_vfiprintf_r+0x5c>
 8009994:	4629      	mov	r1, r5
 8009996:	4630      	mov	r0, r6
 8009998:	f7fd faf0 	bl	8006f7c <__swsetup_r>
 800999c:	b170      	cbz	r0, 80099bc <_vfiprintf_r+0x5c>
 800999e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099a0:	07dc      	lsls	r4, r3, #31
 80099a2:	d504      	bpl.n	80099ae <_vfiprintf_r+0x4e>
 80099a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80099a8:	b01d      	add	sp, #116	@ 0x74
 80099aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ae:	89ab      	ldrh	r3, [r5, #12]
 80099b0:	0598      	lsls	r0, r3, #22
 80099b2:	d4f7      	bmi.n	80099a4 <_vfiprintf_r+0x44>
 80099b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099b6:	f7fd fbc7 	bl	8007148 <__retarget_lock_release_recursive>
 80099ba:	e7f3      	b.n	80099a4 <_vfiprintf_r+0x44>
 80099bc:	2300      	movs	r3, #0
 80099be:	9309      	str	r3, [sp, #36]	@ 0x24
 80099c0:	2320      	movs	r3, #32
 80099c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80099c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80099ca:	2330      	movs	r3, #48	@ 0x30
 80099cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009b7c <_vfiprintf_r+0x21c>
 80099d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80099d4:	f04f 0901 	mov.w	r9, #1
 80099d8:	4623      	mov	r3, r4
 80099da:	469a      	mov	sl, r3
 80099dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099e0:	b10a      	cbz	r2, 80099e6 <_vfiprintf_r+0x86>
 80099e2:	2a25      	cmp	r2, #37	@ 0x25
 80099e4:	d1f9      	bne.n	80099da <_vfiprintf_r+0x7a>
 80099e6:	ebba 0b04 	subs.w	fp, sl, r4
 80099ea:	d00b      	beq.n	8009a04 <_vfiprintf_r+0xa4>
 80099ec:	465b      	mov	r3, fp
 80099ee:	4622      	mov	r2, r4
 80099f0:	4629      	mov	r1, r5
 80099f2:	4630      	mov	r0, r6
 80099f4:	f7ff ffa1 	bl	800993a <__sfputs_r>
 80099f8:	3001      	adds	r0, #1
 80099fa:	f000 80a7 	beq.w	8009b4c <_vfiprintf_r+0x1ec>
 80099fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a00:	445a      	add	r2, fp
 8009a02:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a04:	f89a 3000 	ldrb.w	r3, [sl]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	f000 809f 	beq.w	8009b4c <_vfiprintf_r+0x1ec>
 8009a0e:	2300      	movs	r3, #0
 8009a10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009a14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a18:	f10a 0a01 	add.w	sl, sl, #1
 8009a1c:	9304      	str	r3, [sp, #16]
 8009a1e:	9307      	str	r3, [sp, #28]
 8009a20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a24:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a26:	4654      	mov	r4, sl
 8009a28:	2205      	movs	r2, #5
 8009a2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a2e:	4853      	ldr	r0, [pc, #332]	@ (8009b7c <_vfiprintf_r+0x21c>)
 8009a30:	f7f6 fbfe 	bl	8000230 <memchr>
 8009a34:	9a04      	ldr	r2, [sp, #16]
 8009a36:	b9d8      	cbnz	r0, 8009a70 <_vfiprintf_r+0x110>
 8009a38:	06d1      	lsls	r1, r2, #27
 8009a3a:	bf44      	itt	mi
 8009a3c:	2320      	movmi	r3, #32
 8009a3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a42:	0713      	lsls	r3, r2, #28
 8009a44:	bf44      	itt	mi
 8009a46:	232b      	movmi	r3, #43	@ 0x2b
 8009a48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a4c:	f89a 3000 	ldrb.w	r3, [sl]
 8009a50:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a52:	d015      	beq.n	8009a80 <_vfiprintf_r+0x120>
 8009a54:	9a07      	ldr	r2, [sp, #28]
 8009a56:	4654      	mov	r4, sl
 8009a58:	2000      	movs	r0, #0
 8009a5a:	f04f 0c0a 	mov.w	ip, #10
 8009a5e:	4621      	mov	r1, r4
 8009a60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a64:	3b30      	subs	r3, #48	@ 0x30
 8009a66:	2b09      	cmp	r3, #9
 8009a68:	d94b      	bls.n	8009b02 <_vfiprintf_r+0x1a2>
 8009a6a:	b1b0      	cbz	r0, 8009a9a <_vfiprintf_r+0x13a>
 8009a6c:	9207      	str	r2, [sp, #28]
 8009a6e:	e014      	b.n	8009a9a <_vfiprintf_r+0x13a>
 8009a70:	eba0 0308 	sub.w	r3, r0, r8
 8009a74:	fa09 f303 	lsl.w	r3, r9, r3
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	9304      	str	r3, [sp, #16]
 8009a7c:	46a2      	mov	sl, r4
 8009a7e:	e7d2      	b.n	8009a26 <_vfiprintf_r+0xc6>
 8009a80:	9b03      	ldr	r3, [sp, #12]
 8009a82:	1d19      	adds	r1, r3, #4
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	9103      	str	r1, [sp, #12]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	bfbb      	ittet	lt
 8009a8c:	425b      	neglt	r3, r3
 8009a8e:	f042 0202 	orrlt.w	r2, r2, #2
 8009a92:	9307      	strge	r3, [sp, #28]
 8009a94:	9307      	strlt	r3, [sp, #28]
 8009a96:	bfb8      	it	lt
 8009a98:	9204      	strlt	r2, [sp, #16]
 8009a9a:	7823      	ldrb	r3, [r4, #0]
 8009a9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a9e:	d10a      	bne.n	8009ab6 <_vfiprintf_r+0x156>
 8009aa0:	7863      	ldrb	r3, [r4, #1]
 8009aa2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009aa4:	d132      	bne.n	8009b0c <_vfiprintf_r+0x1ac>
 8009aa6:	9b03      	ldr	r3, [sp, #12]
 8009aa8:	1d1a      	adds	r2, r3, #4
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	9203      	str	r2, [sp, #12]
 8009aae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009ab2:	3402      	adds	r4, #2
 8009ab4:	9305      	str	r3, [sp, #20]
 8009ab6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009b8c <_vfiprintf_r+0x22c>
 8009aba:	7821      	ldrb	r1, [r4, #0]
 8009abc:	2203      	movs	r2, #3
 8009abe:	4650      	mov	r0, sl
 8009ac0:	f7f6 fbb6 	bl	8000230 <memchr>
 8009ac4:	b138      	cbz	r0, 8009ad6 <_vfiprintf_r+0x176>
 8009ac6:	9b04      	ldr	r3, [sp, #16]
 8009ac8:	eba0 000a 	sub.w	r0, r0, sl
 8009acc:	2240      	movs	r2, #64	@ 0x40
 8009ace:	4082      	lsls	r2, r0
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	3401      	adds	r4, #1
 8009ad4:	9304      	str	r3, [sp, #16]
 8009ad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ada:	4829      	ldr	r0, [pc, #164]	@ (8009b80 <_vfiprintf_r+0x220>)
 8009adc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ae0:	2206      	movs	r2, #6
 8009ae2:	f7f6 fba5 	bl	8000230 <memchr>
 8009ae6:	2800      	cmp	r0, #0
 8009ae8:	d03f      	beq.n	8009b6a <_vfiprintf_r+0x20a>
 8009aea:	4b26      	ldr	r3, [pc, #152]	@ (8009b84 <_vfiprintf_r+0x224>)
 8009aec:	bb1b      	cbnz	r3, 8009b36 <_vfiprintf_r+0x1d6>
 8009aee:	9b03      	ldr	r3, [sp, #12]
 8009af0:	3307      	adds	r3, #7
 8009af2:	f023 0307 	bic.w	r3, r3, #7
 8009af6:	3308      	adds	r3, #8
 8009af8:	9303      	str	r3, [sp, #12]
 8009afa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009afc:	443b      	add	r3, r7
 8009afe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b00:	e76a      	b.n	80099d8 <_vfiprintf_r+0x78>
 8009b02:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b06:	460c      	mov	r4, r1
 8009b08:	2001      	movs	r0, #1
 8009b0a:	e7a8      	b.n	8009a5e <_vfiprintf_r+0xfe>
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	3401      	adds	r4, #1
 8009b10:	9305      	str	r3, [sp, #20]
 8009b12:	4619      	mov	r1, r3
 8009b14:	f04f 0c0a 	mov.w	ip, #10
 8009b18:	4620      	mov	r0, r4
 8009b1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b1e:	3a30      	subs	r2, #48	@ 0x30
 8009b20:	2a09      	cmp	r2, #9
 8009b22:	d903      	bls.n	8009b2c <_vfiprintf_r+0x1cc>
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d0c6      	beq.n	8009ab6 <_vfiprintf_r+0x156>
 8009b28:	9105      	str	r1, [sp, #20]
 8009b2a:	e7c4      	b.n	8009ab6 <_vfiprintf_r+0x156>
 8009b2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b30:	4604      	mov	r4, r0
 8009b32:	2301      	movs	r3, #1
 8009b34:	e7f0      	b.n	8009b18 <_vfiprintf_r+0x1b8>
 8009b36:	ab03      	add	r3, sp, #12
 8009b38:	9300      	str	r3, [sp, #0]
 8009b3a:	462a      	mov	r2, r5
 8009b3c:	4b12      	ldr	r3, [pc, #72]	@ (8009b88 <_vfiprintf_r+0x228>)
 8009b3e:	a904      	add	r1, sp, #16
 8009b40:	4630      	mov	r0, r6
 8009b42:	f7fc fa7b 	bl	800603c <_printf_float>
 8009b46:	4607      	mov	r7, r0
 8009b48:	1c78      	adds	r0, r7, #1
 8009b4a:	d1d6      	bne.n	8009afa <_vfiprintf_r+0x19a>
 8009b4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b4e:	07d9      	lsls	r1, r3, #31
 8009b50:	d405      	bmi.n	8009b5e <_vfiprintf_r+0x1fe>
 8009b52:	89ab      	ldrh	r3, [r5, #12]
 8009b54:	059a      	lsls	r2, r3, #22
 8009b56:	d402      	bmi.n	8009b5e <_vfiprintf_r+0x1fe>
 8009b58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b5a:	f7fd faf5 	bl	8007148 <__retarget_lock_release_recursive>
 8009b5e:	89ab      	ldrh	r3, [r5, #12]
 8009b60:	065b      	lsls	r3, r3, #25
 8009b62:	f53f af1f 	bmi.w	80099a4 <_vfiprintf_r+0x44>
 8009b66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b68:	e71e      	b.n	80099a8 <_vfiprintf_r+0x48>
 8009b6a:	ab03      	add	r3, sp, #12
 8009b6c:	9300      	str	r3, [sp, #0]
 8009b6e:	462a      	mov	r2, r5
 8009b70:	4b05      	ldr	r3, [pc, #20]	@ (8009b88 <_vfiprintf_r+0x228>)
 8009b72:	a904      	add	r1, sp, #16
 8009b74:	4630      	mov	r0, r6
 8009b76:	f7fc fcf9 	bl	800656c <_printf_i>
 8009b7a:	e7e4      	b.n	8009b46 <_vfiprintf_r+0x1e6>
 8009b7c:	0800acf1 	.word	0x0800acf1
 8009b80:	0800acfb 	.word	0x0800acfb
 8009b84:	0800603d 	.word	0x0800603d
 8009b88:	0800993b 	.word	0x0800993b
 8009b8c:	0800acf7 	.word	0x0800acf7

08009b90 <__sflush_r>:
 8009b90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b98:	0716      	lsls	r6, r2, #28
 8009b9a:	4605      	mov	r5, r0
 8009b9c:	460c      	mov	r4, r1
 8009b9e:	d454      	bmi.n	8009c4a <__sflush_r+0xba>
 8009ba0:	684b      	ldr	r3, [r1, #4]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	dc02      	bgt.n	8009bac <__sflush_r+0x1c>
 8009ba6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	dd48      	ble.n	8009c3e <__sflush_r+0xae>
 8009bac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009bae:	2e00      	cmp	r6, #0
 8009bb0:	d045      	beq.n	8009c3e <__sflush_r+0xae>
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009bb8:	682f      	ldr	r7, [r5, #0]
 8009bba:	6a21      	ldr	r1, [r4, #32]
 8009bbc:	602b      	str	r3, [r5, #0]
 8009bbe:	d030      	beq.n	8009c22 <__sflush_r+0x92>
 8009bc0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009bc2:	89a3      	ldrh	r3, [r4, #12]
 8009bc4:	0759      	lsls	r1, r3, #29
 8009bc6:	d505      	bpl.n	8009bd4 <__sflush_r+0x44>
 8009bc8:	6863      	ldr	r3, [r4, #4]
 8009bca:	1ad2      	subs	r2, r2, r3
 8009bcc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009bce:	b10b      	cbz	r3, 8009bd4 <__sflush_r+0x44>
 8009bd0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009bd2:	1ad2      	subs	r2, r2, r3
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009bd8:	6a21      	ldr	r1, [r4, #32]
 8009bda:	4628      	mov	r0, r5
 8009bdc:	47b0      	blx	r6
 8009bde:	1c43      	adds	r3, r0, #1
 8009be0:	89a3      	ldrh	r3, [r4, #12]
 8009be2:	d106      	bne.n	8009bf2 <__sflush_r+0x62>
 8009be4:	6829      	ldr	r1, [r5, #0]
 8009be6:	291d      	cmp	r1, #29
 8009be8:	d82b      	bhi.n	8009c42 <__sflush_r+0xb2>
 8009bea:	4a2a      	ldr	r2, [pc, #168]	@ (8009c94 <__sflush_r+0x104>)
 8009bec:	410a      	asrs	r2, r1
 8009bee:	07d6      	lsls	r6, r2, #31
 8009bf0:	d427      	bmi.n	8009c42 <__sflush_r+0xb2>
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	6062      	str	r2, [r4, #4]
 8009bf6:	04d9      	lsls	r1, r3, #19
 8009bf8:	6922      	ldr	r2, [r4, #16]
 8009bfa:	6022      	str	r2, [r4, #0]
 8009bfc:	d504      	bpl.n	8009c08 <__sflush_r+0x78>
 8009bfe:	1c42      	adds	r2, r0, #1
 8009c00:	d101      	bne.n	8009c06 <__sflush_r+0x76>
 8009c02:	682b      	ldr	r3, [r5, #0]
 8009c04:	b903      	cbnz	r3, 8009c08 <__sflush_r+0x78>
 8009c06:	6560      	str	r0, [r4, #84]	@ 0x54
 8009c08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c0a:	602f      	str	r7, [r5, #0]
 8009c0c:	b1b9      	cbz	r1, 8009c3e <__sflush_r+0xae>
 8009c0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c12:	4299      	cmp	r1, r3
 8009c14:	d002      	beq.n	8009c1c <__sflush_r+0x8c>
 8009c16:	4628      	mov	r0, r5
 8009c18:	f7fe f8ea 	bl	8007df0 <_free_r>
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c20:	e00d      	b.n	8009c3e <__sflush_r+0xae>
 8009c22:	2301      	movs	r3, #1
 8009c24:	4628      	mov	r0, r5
 8009c26:	47b0      	blx	r6
 8009c28:	4602      	mov	r2, r0
 8009c2a:	1c50      	adds	r0, r2, #1
 8009c2c:	d1c9      	bne.n	8009bc2 <__sflush_r+0x32>
 8009c2e:	682b      	ldr	r3, [r5, #0]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d0c6      	beq.n	8009bc2 <__sflush_r+0x32>
 8009c34:	2b1d      	cmp	r3, #29
 8009c36:	d001      	beq.n	8009c3c <__sflush_r+0xac>
 8009c38:	2b16      	cmp	r3, #22
 8009c3a:	d11e      	bne.n	8009c7a <__sflush_r+0xea>
 8009c3c:	602f      	str	r7, [r5, #0]
 8009c3e:	2000      	movs	r0, #0
 8009c40:	e022      	b.n	8009c88 <__sflush_r+0xf8>
 8009c42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c46:	b21b      	sxth	r3, r3
 8009c48:	e01b      	b.n	8009c82 <__sflush_r+0xf2>
 8009c4a:	690f      	ldr	r7, [r1, #16]
 8009c4c:	2f00      	cmp	r7, #0
 8009c4e:	d0f6      	beq.n	8009c3e <__sflush_r+0xae>
 8009c50:	0793      	lsls	r3, r2, #30
 8009c52:	680e      	ldr	r6, [r1, #0]
 8009c54:	bf08      	it	eq
 8009c56:	694b      	ldreq	r3, [r1, #20]
 8009c58:	600f      	str	r7, [r1, #0]
 8009c5a:	bf18      	it	ne
 8009c5c:	2300      	movne	r3, #0
 8009c5e:	eba6 0807 	sub.w	r8, r6, r7
 8009c62:	608b      	str	r3, [r1, #8]
 8009c64:	f1b8 0f00 	cmp.w	r8, #0
 8009c68:	dde9      	ble.n	8009c3e <__sflush_r+0xae>
 8009c6a:	6a21      	ldr	r1, [r4, #32]
 8009c6c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009c6e:	4643      	mov	r3, r8
 8009c70:	463a      	mov	r2, r7
 8009c72:	4628      	mov	r0, r5
 8009c74:	47b0      	blx	r6
 8009c76:	2800      	cmp	r0, #0
 8009c78:	dc08      	bgt.n	8009c8c <__sflush_r+0xfc>
 8009c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c82:	81a3      	strh	r3, [r4, #12]
 8009c84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c8c:	4407      	add	r7, r0
 8009c8e:	eba8 0800 	sub.w	r8, r8, r0
 8009c92:	e7e7      	b.n	8009c64 <__sflush_r+0xd4>
 8009c94:	dfbffffe 	.word	0xdfbffffe

08009c98 <_fflush_r>:
 8009c98:	b538      	push	{r3, r4, r5, lr}
 8009c9a:	690b      	ldr	r3, [r1, #16]
 8009c9c:	4605      	mov	r5, r0
 8009c9e:	460c      	mov	r4, r1
 8009ca0:	b913      	cbnz	r3, 8009ca8 <_fflush_r+0x10>
 8009ca2:	2500      	movs	r5, #0
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	bd38      	pop	{r3, r4, r5, pc}
 8009ca8:	b118      	cbz	r0, 8009cb2 <_fflush_r+0x1a>
 8009caa:	6a03      	ldr	r3, [r0, #32]
 8009cac:	b90b      	cbnz	r3, 8009cb2 <_fflush_r+0x1a>
 8009cae:	f7fd f81d 	bl	8006cec <__sinit>
 8009cb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d0f3      	beq.n	8009ca2 <_fflush_r+0xa>
 8009cba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009cbc:	07d0      	lsls	r0, r2, #31
 8009cbe:	d404      	bmi.n	8009cca <_fflush_r+0x32>
 8009cc0:	0599      	lsls	r1, r3, #22
 8009cc2:	d402      	bmi.n	8009cca <_fflush_r+0x32>
 8009cc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cc6:	f7fd fa3e 	bl	8007146 <__retarget_lock_acquire_recursive>
 8009cca:	4628      	mov	r0, r5
 8009ccc:	4621      	mov	r1, r4
 8009cce:	f7ff ff5f 	bl	8009b90 <__sflush_r>
 8009cd2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009cd4:	07da      	lsls	r2, r3, #31
 8009cd6:	4605      	mov	r5, r0
 8009cd8:	d4e4      	bmi.n	8009ca4 <_fflush_r+0xc>
 8009cda:	89a3      	ldrh	r3, [r4, #12]
 8009cdc:	059b      	lsls	r3, r3, #22
 8009cde:	d4e1      	bmi.n	8009ca4 <_fflush_r+0xc>
 8009ce0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ce2:	f7fd fa31 	bl	8007148 <__retarget_lock_release_recursive>
 8009ce6:	e7dd      	b.n	8009ca4 <_fflush_r+0xc>

08009ce8 <__swhatbuf_r>:
 8009ce8:	b570      	push	{r4, r5, r6, lr}
 8009cea:	460c      	mov	r4, r1
 8009cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cf0:	2900      	cmp	r1, #0
 8009cf2:	b096      	sub	sp, #88	@ 0x58
 8009cf4:	4615      	mov	r5, r2
 8009cf6:	461e      	mov	r6, r3
 8009cf8:	da0d      	bge.n	8009d16 <__swhatbuf_r+0x2e>
 8009cfa:	89a3      	ldrh	r3, [r4, #12]
 8009cfc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009d00:	f04f 0100 	mov.w	r1, #0
 8009d04:	bf14      	ite	ne
 8009d06:	2340      	movne	r3, #64	@ 0x40
 8009d08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009d0c:	2000      	movs	r0, #0
 8009d0e:	6031      	str	r1, [r6, #0]
 8009d10:	602b      	str	r3, [r5, #0]
 8009d12:	b016      	add	sp, #88	@ 0x58
 8009d14:	bd70      	pop	{r4, r5, r6, pc}
 8009d16:	466a      	mov	r2, sp
 8009d18:	f000 f862 	bl	8009de0 <_fstat_r>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	dbec      	blt.n	8009cfa <__swhatbuf_r+0x12>
 8009d20:	9901      	ldr	r1, [sp, #4]
 8009d22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009d26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009d2a:	4259      	negs	r1, r3
 8009d2c:	4159      	adcs	r1, r3
 8009d2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d32:	e7eb      	b.n	8009d0c <__swhatbuf_r+0x24>

08009d34 <__smakebuf_r>:
 8009d34:	898b      	ldrh	r3, [r1, #12]
 8009d36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d38:	079d      	lsls	r5, r3, #30
 8009d3a:	4606      	mov	r6, r0
 8009d3c:	460c      	mov	r4, r1
 8009d3e:	d507      	bpl.n	8009d50 <__smakebuf_r+0x1c>
 8009d40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009d44:	6023      	str	r3, [r4, #0]
 8009d46:	6123      	str	r3, [r4, #16]
 8009d48:	2301      	movs	r3, #1
 8009d4a:	6163      	str	r3, [r4, #20]
 8009d4c:	b003      	add	sp, #12
 8009d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d50:	ab01      	add	r3, sp, #4
 8009d52:	466a      	mov	r2, sp
 8009d54:	f7ff ffc8 	bl	8009ce8 <__swhatbuf_r>
 8009d58:	9f00      	ldr	r7, [sp, #0]
 8009d5a:	4605      	mov	r5, r0
 8009d5c:	4639      	mov	r1, r7
 8009d5e:	4630      	mov	r0, r6
 8009d60:	f7fe f8ba 	bl	8007ed8 <_malloc_r>
 8009d64:	b948      	cbnz	r0, 8009d7a <__smakebuf_r+0x46>
 8009d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d6a:	059a      	lsls	r2, r3, #22
 8009d6c:	d4ee      	bmi.n	8009d4c <__smakebuf_r+0x18>
 8009d6e:	f023 0303 	bic.w	r3, r3, #3
 8009d72:	f043 0302 	orr.w	r3, r3, #2
 8009d76:	81a3      	strh	r3, [r4, #12]
 8009d78:	e7e2      	b.n	8009d40 <__smakebuf_r+0xc>
 8009d7a:	89a3      	ldrh	r3, [r4, #12]
 8009d7c:	6020      	str	r0, [r4, #0]
 8009d7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d82:	81a3      	strh	r3, [r4, #12]
 8009d84:	9b01      	ldr	r3, [sp, #4]
 8009d86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009d8a:	b15b      	cbz	r3, 8009da4 <__smakebuf_r+0x70>
 8009d8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d90:	4630      	mov	r0, r6
 8009d92:	f000 f837 	bl	8009e04 <_isatty_r>
 8009d96:	b128      	cbz	r0, 8009da4 <__smakebuf_r+0x70>
 8009d98:	89a3      	ldrh	r3, [r4, #12]
 8009d9a:	f023 0303 	bic.w	r3, r3, #3
 8009d9e:	f043 0301 	orr.w	r3, r3, #1
 8009da2:	81a3      	strh	r3, [r4, #12]
 8009da4:	89a3      	ldrh	r3, [r4, #12]
 8009da6:	431d      	orrs	r5, r3
 8009da8:	81a5      	strh	r5, [r4, #12]
 8009daa:	e7cf      	b.n	8009d4c <__smakebuf_r+0x18>

08009dac <memmove>:
 8009dac:	4288      	cmp	r0, r1
 8009dae:	b510      	push	{r4, lr}
 8009db0:	eb01 0402 	add.w	r4, r1, r2
 8009db4:	d902      	bls.n	8009dbc <memmove+0x10>
 8009db6:	4284      	cmp	r4, r0
 8009db8:	4623      	mov	r3, r4
 8009dba:	d807      	bhi.n	8009dcc <memmove+0x20>
 8009dbc:	1e43      	subs	r3, r0, #1
 8009dbe:	42a1      	cmp	r1, r4
 8009dc0:	d008      	beq.n	8009dd4 <memmove+0x28>
 8009dc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009dca:	e7f8      	b.n	8009dbe <memmove+0x12>
 8009dcc:	4402      	add	r2, r0
 8009dce:	4601      	mov	r1, r0
 8009dd0:	428a      	cmp	r2, r1
 8009dd2:	d100      	bne.n	8009dd6 <memmove+0x2a>
 8009dd4:	bd10      	pop	{r4, pc}
 8009dd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009dda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009dde:	e7f7      	b.n	8009dd0 <memmove+0x24>

08009de0 <_fstat_r>:
 8009de0:	b538      	push	{r3, r4, r5, lr}
 8009de2:	4d07      	ldr	r5, [pc, #28]	@ (8009e00 <_fstat_r+0x20>)
 8009de4:	2300      	movs	r3, #0
 8009de6:	4604      	mov	r4, r0
 8009de8:	4608      	mov	r0, r1
 8009dea:	4611      	mov	r1, r2
 8009dec:	602b      	str	r3, [r5, #0]
 8009dee:	f7f8 fbbb 	bl	8002568 <_fstat>
 8009df2:	1c43      	adds	r3, r0, #1
 8009df4:	d102      	bne.n	8009dfc <_fstat_r+0x1c>
 8009df6:	682b      	ldr	r3, [r5, #0]
 8009df8:	b103      	cbz	r3, 8009dfc <_fstat_r+0x1c>
 8009dfa:	6023      	str	r3, [r4, #0]
 8009dfc:	bd38      	pop	{r3, r4, r5, pc}
 8009dfe:	bf00      	nop
 8009e00:	2000049c 	.word	0x2000049c

08009e04 <_isatty_r>:
 8009e04:	b538      	push	{r3, r4, r5, lr}
 8009e06:	4d06      	ldr	r5, [pc, #24]	@ (8009e20 <_isatty_r+0x1c>)
 8009e08:	2300      	movs	r3, #0
 8009e0a:	4604      	mov	r4, r0
 8009e0c:	4608      	mov	r0, r1
 8009e0e:	602b      	str	r3, [r5, #0]
 8009e10:	f7f8 fbba 	bl	8002588 <_isatty>
 8009e14:	1c43      	adds	r3, r0, #1
 8009e16:	d102      	bne.n	8009e1e <_isatty_r+0x1a>
 8009e18:	682b      	ldr	r3, [r5, #0]
 8009e1a:	b103      	cbz	r3, 8009e1e <_isatty_r+0x1a>
 8009e1c:	6023      	str	r3, [r4, #0]
 8009e1e:	bd38      	pop	{r3, r4, r5, pc}
 8009e20:	2000049c 	.word	0x2000049c

08009e24 <_sbrk_r>:
 8009e24:	b538      	push	{r3, r4, r5, lr}
 8009e26:	4d06      	ldr	r5, [pc, #24]	@ (8009e40 <_sbrk_r+0x1c>)
 8009e28:	2300      	movs	r3, #0
 8009e2a:	4604      	mov	r4, r0
 8009e2c:	4608      	mov	r0, r1
 8009e2e:	602b      	str	r3, [r5, #0]
 8009e30:	f7f8 fbc2 	bl	80025b8 <_sbrk>
 8009e34:	1c43      	adds	r3, r0, #1
 8009e36:	d102      	bne.n	8009e3e <_sbrk_r+0x1a>
 8009e38:	682b      	ldr	r3, [r5, #0]
 8009e3a:	b103      	cbz	r3, 8009e3e <_sbrk_r+0x1a>
 8009e3c:	6023      	str	r3, [r4, #0]
 8009e3e:	bd38      	pop	{r3, r4, r5, pc}
 8009e40:	2000049c 	.word	0x2000049c

08009e44 <memcpy>:
 8009e44:	440a      	add	r2, r1
 8009e46:	4291      	cmp	r1, r2
 8009e48:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009e4c:	d100      	bne.n	8009e50 <memcpy+0xc>
 8009e4e:	4770      	bx	lr
 8009e50:	b510      	push	{r4, lr}
 8009e52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e5a:	4291      	cmp	r1, r2
 8009e5c:	d1f9      	bne.n	8009e52 <memcpy+0xe>
 8009e5e:	bd10      	pop	{r4, pc}

08009e60 <nan>:
 8009e60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009e68 <nan+0x8>
 8009e64:	4770      	bx	lr
 8009e66:	bf00      	nop
 8009e68:	00000000 	.word	0x00000000
 8009e6c:	7ff80000 	.word	0x7ff80000

08009e70 <__assert_func>:
 8009e70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e72:	4614      	mov	r4, r2
 8009e74:	461a      	mov	r2, r3
 8009e76:	4b09      	ldr	r3, [pc, #36]	@ (8009e9c <__assert_func+0x2c>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4605      	mov	r5, r0
 8009e7c:	68d8      	ldr	r0, [r3, #12]
 8009e7e:	b954      	cbnz	r4, 8009e96 <__assert_func+0x26>
 8009e80:	4b07      	ldr	r3, [pc, #28]	@ (8009ea0 <__assert_func+0x30>)
 8009e82:	461c      	mov	r4, r3
 8009e84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e88:	9100      	str	r1, [sp, #0]
 8009e8a:	462b      	mov	r3, r5
 8009e8c:	4905      	ldr	r1, [pc, #20]	@ (8009ea4 <__assert_func+0x34>)
 8009e8e:	f000 fba7 	bl	800a5e0 <fiprintf>
 8009e92:	f000 fbb7 	bl	800a604 <abort>
 8009e96:	4b04      	ldr	r3, [pc, #16]	@ (8009ea8 <__assert_func+0x38>)
 8009e98:	e7f4      	b.n	8009e84 <__assert_func+0x14>
 8009e9a:	bf00      	nop
 8009e9c:	2000001c 	.word	0x2000001c
 8009ea0:	0800ad45 	.word	0x0800ad45
 8009ea4:	0800ad17 	.word	0x0800ad17
 8009ea8:	0800ad0a 	.word	0x0800ad0a

08009eac <_calloc_r>:
 8009eac:	b570      	push	{r4, r5, r6, lr}
 8009eae:	fba1 5402 	umull	r5, r4, r1, r2
 8009eb2:	b93c      	cbnz	r4, 8009ec4 <_calloc_r+0x18>
 8009eb4:	4629      	mov	r1, r5
 8009eb6:	f7fe f80f 	bl	8007ed8 <_malloc_r>
 8009eba:	4606      	mov	r6, r0
 8009ebc:	b928      	cbnz	r0, 8009eca <_calloc_r+0x1e>
 8009ebe:	2600      	movs	r6, #0
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	bd70      	pop	{r4, r5, r6, pc}
 8009ec4:	220c      	movs	r2, #12
 8009ec6:	6002      	str	r2, [r0, #0]
 8009ec8:	e7f9      	b.n	8009ebe <_calloc_r+0x12>
 8009eca:	462a      	mov	r2, r5
 8009ecc:	4621      	mov	r1, r4
 8009ece:	f7fd f8ab 	bl	8007028 <memset>
 8009ed2:	e7f5      	b.n	8009ec0 <_calloc_r+0x14>

08009ed4 <rshift>:
 8009ed4:	6903      	ldr	r3, [r0, #16]
 8009ed6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009eda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ede:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009ee2:	f100 0414 	add.w	r4, r0, #20
 8009ee6:	dd45      	ble.n	8009f74 <rshift+0xa0>
 8009ee8:	f011 011f 	ands.w	r1, r1, #31
 8009eec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009ef0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009ef4:	d10c      	bne.n	8009f10 <rshift+0x3c>
 8009ef6:	f100 0710 	add.w	r7, r0, #16
 8009efa:	4629      	mov	r1, r5
 8009efc:	42b1      	cmp	r1, r6
 8009efe:	d334      	bcc.n	8009f6a <rshift+0x96>
 8009f00:	1a9b      	subs	r3, r3, r2
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	1eea      	subs	r2, r5, #3
 8009f06:	4296      	cmp	r6, r2
 8009f08:	bf38      	it	cc
 8009f0a:	2300      	movcc	r3, #0
 8009f0c:	4423      	add	r3, r4
 8009f0e:	e015      	b.n	8009f3c <rshift+0x68>
 8009f10:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009f14:	f1c1 0820 	rsb	r8, r1, #32
 8009f18:	40cf      	lsrs	r7, r1
 8009f1a:	f105 0e04 	add.w	lr, r5, #4
 8009f1e:	46a1      	mov	r9, r4
 8009f20:	4576      	cmp	r6, lr
 8009f22:	46f4      	mov	ip, lr
 8009f24:	d815      	bhi.n	8009f52 <rshift+0x7e>
 8009f26:	1a9a      	subs	r2, r3, r2
 8009f28:	0092      	lsls	r2, r2, #2
 8009f2a:	3a04      	subs	r2, #4
 8009f2c:	3501      	adds	r5, #1
 8009f2e:	42ae      	cmp	r6, r5
 8009f30:	bf38      	it	cc
 8009f32:	2200      	movcc	r2, #0
 8009f34:	18a3      	adds	r3, r4, r2
 8009f36:	50a7      	str	r7, [r4, r2]
 8009f38:	b107      	cbz	r7, 8009f3c <rshift+0x68>
 8009f3a:	3304      	adds	r3, #4
 8009f3c:	1b1a      	subs	r2, r3, r4
 8009f3e:	42a3      	cmp	r3, r4
 8009f40:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009f44:	bf08      	it	eq
 8009f46:	2300      	moveq	r3, #0
 8009f48:	6102      	str	r2, [r0, #16]
 8009f4a:	bf08      	it	eq
 8009f4c:	6143      	streq	r3, [r0, #20]
 8009f4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f52:	f8dc c000 	ldr.w	ip, [ip]
 8009f56:	fa0c fc08 	lsl.w	ip, ip, r8
 8009f5a:	ea4c 0707 	orr.w	r7, ip, r7
 8009f5e:	f849 7b04 	str.w	r7, [r9], #4
 8009f62:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009f66:	40cf      	lsrs	r7, r1
 8009f68:	e7da      	b.n	8009f20 <rshift+0x4c>
 8009f6a:	f851 cb04 	ldr.w	ip, [r1], #4
 8009f6e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009f72:	e7c3      	b.n	8009efc <rshift+0x28>
 8009f74:	4623      	mov	r3, r4
 8009f76:	e7e1      	b.n	8009f3c <rshift+0x68>

08009f78 <__hexdig_fun>:
 8009f78:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009f7c:	2b09      	cmp	r3, #9
 8009f7e:	d802      	bhi.n	8009f86 <__hexdig_fun+0xe>
 8009f80:	3820      	subs	r0, #32
 8009f82:	b2c0      	uxtb	r0, r0
 8009f84:	4770      	bx	lr
 8009f86:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009f8a:	2b05      	cmp	r3, #5
 8009f8c:	d801      	bhi.n	8009f92 <__hexdig_fun+0x1a>
 8009f8e:	3847      	subs	r0, #71	@ 0x47
 8009f90:	e7f7      	b.n	8009f82 <__hexdig_fun+0xa>
 8009f92:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009f96:	2b05      	cmp	r3, #5
 8009f98:	d801      	bhi.n	8009f9e <__hexdig_fun+0x26>
 8009f9a:	3827      	subs	r0, #39	@ 0x27
 8009f9c:	e7f1      	b.n	8009f82 <__hexdig_fun+0xa>
 8009f9e:	2000      	movs	r0, #0
 8009fa0:	4770      	bx	lr
	...

08009fa4 <__gethex>:
 8009fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa8:	b085      	sub	sp, #20
 8009faa:	468a      	mov	sl, r1
 8009fac:	9302      	str	r3, [sp, #8]
 8009fae:	680b      	ldr	r3, [r1, #0]
 8009fb0:	9001      	str	r0, [sp, #4]
 8009fb2:	4690      	mov	r8, r2
 8009fb4:	1c9c      	adds	r4, r3, #2
 8009fb6:	46a1      	mov	r9, r4
 8009fb8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009fbc:	2830      	cmp	r0, #48	@ 0x30
 8009fbe:	d0fa      	beq.n	8009fb6 <__gethex+0x12>
 8009fc0:	eba9 0303 	sub.w	r3, r9, r3
 8009fc4:	f1a3 0b02 	sub.w	fp, r3, #2
 8009fc8:	f7ff ffd6 	bl	8009f78 <__hexdig_fun>
 8009fcc:	4605      	mov	r5, r0
 8009fce:	2800      	cmp	r0, #0
 8009fd0:	d168      	bne.n	800a0a4 <__gethex+0x100>
 8009fd2:	49a0      	ldr	r1, [pc, #640]	@ (800a254 <__gethex+0x2b0>)
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	4648      	mov	r0, r9
 8009fd8:	f7fd f82e 	bl	8007038 <strncmp>
 8009fdc:	4607      	mov	r7, r0
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	d167      	bne.n	800a0b2 <__gethex+0x10e>
 8009fe2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009fe6:	4626      	mov	r6, r4
 8009fe8:	f7ff ffc6 	bl	8009f78 <__hexdig_fun>
 8009fec:	2800      	cmp	r0, #0
 8009fee:	d062      	beq.n	800a0b6 <__gethex+0x112>
 8009ff0:	4623      	mov	r3, r4
 8009ff2:	7818      	ldrb	r0, [r3, #0]
 8009ff4:	2830      	cmp	r0, #48	@ 0x30
 8009ff6:	4699      	mov	r9, r3
 8009ff8:	f103 0301 	add.w	r3, r3, #1
 8009ffc:	d0f9      	beq.n	8009ff2 <__gethex+0x4e>
 8009ffe:	f7ff ffbb 	bl	8009f78 <__hexdig_fun>
 800a002:	fab0 f580 	clz	r5, r0
 800a006:	096d      	lsrs	r5, r5, #5
 800a008:	f04f 0b01 	mov.w	fp, #1
 800a00c:	464a      	mov	r2, r9
 800a00e:	4616      	mov	r6, r2
 800a010:	3201      	adds	r2, #1
 800a012:	7830      	ldrb	r0, [r6, #0]
 800a014:	f7ff ffb0 	bl	8009f78 <__hexdig_fun>
 800a018:	2800      	cmp	r0, #0
 800a01a:	d1f8      	bne.n	800a00e <__gethex+0x6a>
 800a01c:	498d      	ldr	r1, [pc, #564]	@ (800a254 <__gethex+0x2b0>)
 800a01e:	2201      	movs	r2, #1
 800a020:	4630      	mov	r0, r6
 800a022:	f7fd f809 	bl	8007038 <strncmp>
 800a026:	2800      	cmp	r0, #0
 800a028:	d13f      	bne.n	800a0aa <__gethex+0x106>
 800a02a:	b944      	cbnz	r4, 800a03e <__gethex+0x9a>
 800a02c:	1c74      	adds	r4, r6, #1
 800a02e:	4622      	mov	r2, r4
 800a030:	4616      	mov	r6, r2
 800a032:	3201      	adds	r2, #1
 800a034:	7830      	ldrb	r0, [r6, #0]
 800a036:	f7ff ff9f 	bl	8009f78 <__hexdig_fun>
 800a03a:	2800      	cmp	r0, #0
 800a03c:	d1f8      	bne.n	800a030 <__gethex+0x8c>
 800a03e:	1ba4      	subs	r4, r4, r6
 800a040:	00a7      	lsls	r7, r4, #2
 800a042:	7833      	ldrb	r3, [r6, #0]
 800a044:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a048:	2b50      	cmp	r3, #80	@ 0x50
 800a04a:	d13e      	bne.n	800a0ca <__gethex+0x126>
 800a04c:	7873      	ldrb	r3, [r6, #1]
 800a04e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a050:	d033      	beq.n	800a0ba <__gethex+0x116>
 800a052:	2b2d      	cmp	r3, #45	@ 0x2d
 800a054:	d034      	beq.n	800a0c0 <__gethex+0x11c>
 800a056:	1c71      	adds	r1, r6, #1
 800a058:	2400      	movs	r4, #0
 800a05a:	7808      	ldrb	r0, [r1, #0]
 800a05c:	f7ff ff8c 	bl	8009f78 <__hexdig_fun>
 800a060:	1e43      	subs	r3, r0, #1
 800a062:	b2db      	uxtb	r3, r3
 800a064:	2b18      	cmp	r3, #24
 800a066:	d830      	bhi.n	800a0ca <__gethex+0x126>
 800a068:	f1a0 0210 	sub.w	r2, r0, #16
 800a06c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a070:	f7ff ff82 	bl	8009f78 <__hexdig_fun>
 800a074:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800a078:	fa5f fc8c 	uxtb.w	ip, ip
 800a07c:	f1bc 0f18 	cmp.w	ip, #24
 800a080:	f04f 030a 	mov.w	r3, #10
 800a084:	d91e      	bls.n	800a0c4 <__gethex+0x120>
 800a086:	b104      	cbz	r4, 800a08a <__gethex+0xe6>
 800a088:	4252      	negs	r2, r2
 800a08a:	4417      	add	r7, r2
 800a08c:	f8ca 1000 	str.w	r1, [sl]
 800a090:	b1ed      	cbz	r5, 800a0ce <__gethex+0x12a>
 800a092:	f1bb 0f00 	cmp.w	fp, #0
 800a096:	bf0c      	ite	eq
 800a098:	2506      	moveq	r5, #6
 800a09a:	2500      	movne	r5, #0
 800a09c:	4628      	mov	r0, r5
 800a09e:	b005      	add	sp, #20
 800a0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0a4:	2500      	movs	r5, #0
 800a0a6:	462c      	mov	r4, r5
 800a0a8:	e7b0      	b.n	800a00c <__gethex+0x68>
 800a0aa:	2c00      	cmp	r4, #0
 800a0ac:	d1c7      	bne.n	800a03e <__gethex+0x9a>
 800a0ae:	4627      	mov	r7, r4
 800a0b0:	e7c7      	b.n	800a042 <__gethex+0x9e>
 800a0b2:	464e      	mov	r6, r9
 800a0b4:	462f      	mov	r7, r5
 800a0b6:	2501      	movs	r5, #1
 800a0b8:	e7c3      	b.n	800a042 <__gethex+0x9e>
 800a0ba:	2400      	movs	r4, #0
 800a0bc:	1cb1      	adds	r1, r6, #2
 800a0be:	e7cc      	b.n	800a05a <__gethex+0xb6>
 800a0c0:	2401      	movs	r4, #1
 800a0c2:	e7fb      	b.n	800a0bc <__gethex+0x118>
 800a0c4:	fb03 0002 	mla	r0, r3, r2, r0
 800a0c8:	e7ce      	b.n	800a068 <__gethex+0xc4>
 800a0ca:	4631      	mov	r1, r6
 800a0cc:	e7de      	b.n	800a08c <__gethex+0xe8>
 800a0ce:	eba6 0309 	sub.w	r3, r6, r9
 800a0d2:	3b01      	subs	r3, #1
 800a0d4:	4629      	mov	r1, r5
 800a0d6:	2b07      	cmp	r3, #7
 800a0d8:	dc0a      	bgt.n	800a0f0 <__gethex+0x14c>
 800a0da:	9801      	ldr	r0, [sp, #4]
 800a0dc:	f7fd ff88 	bl	8007ff0 <_Balloc>
 800a0e0:	4604      	mov	r4, r0
 800a0e2:	b940      	cbnz	r0, 800a0f6 <__gethex+0x152>
 800a0e4:	4b5c      	ldr	r3, [pc, #368]	@ (800a258 <__gethex+0x2b4>)
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	21e4      	movs	r1, #228	@ 0xe4
 800a0ea:	485c      	ldr	r0, [pc, #368]	@ (800a25c <__gethex+0x2b8>)
 800a0ec:	f7ff fec0 	bl	8009e70 <__assert_func>
 800a0f0:	3101      	adds	r1, #1
 800a0f2:	105b      	asrs	r3, r3, #1
 800a0f4:	e7ef      	b.n	800a0d6 <__gethex+0x132>
 800a0f6:	f100 0a14 	add.w	sl, r0, #20
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	4655      	mov	r5, sl
 800a0fe:	469b      	mov	fp, r3
 800a100:	45b1      	cmp	r9, r6
 800a102:	d337      	bcc.n	800a174 <__gethex+0x1d0>
 800a104:	f845 bb04 	str.w	fp, [r5], #4
 800a108:	eba5 050a 	sub.w	r5, r5, sl
 800a10c:	10ad      	asrs	r5, r5, #2
 800a10e:	6125      	str	r5, [r4, #16]
 800a110:	4658      	mov	r0, fp
 800a112:	f7fe f85f 	bl	80081d4 <__hi0bits>
 800a116:	016d      	lsls	r5, r5, #5
 800a118:	f8d8 6000 	ldr.w	r6, [r8]
 800a11c:	1a2d      	subs	r5, r5, r0
 800a11e:	42b5      	cmp	r5, r6
 800a120:	dd54      	ble.n	800a1cc <__gethex+0x228>
 800a122:	1bad      	subs	r5, r5, r6
 800a124:	4629      	mov	r1, r5
 800a126:	4620      	mov	r0, r4
 800a128:	f7fe fbf3 	bl	8008912 <__any_on>
 800a12c:	4681      	mov	r9, r0
 800a12e:	b178      	cbz	r0, 800a150 <__gethex+0x1ac>
 800a130:	1e6b      	subs	r3, r5, #1
 800a132:	1159      	asrs	r1, r3, #5
 800a134:	f003 021f 	and.w	r2, r3, #31
 800a138:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a13c:	f04f 0901 	mov.w	r9, #1
 800a140:	fa09 f202 	lsl.w	r2, r9, r2
 800a144:	420a      	tst	r2, r1
 800a146:	d003      	beq.n	800a150 <__gethex+0x1ac>
 800a148:	454b      	cmp	r3, r9
 800a14a:	dc36      	bgt.n	800a1ba <__gethex+0x216>
 800a14c:	f04f 0902 	mov.w	r9, #2
 800a150:	4629      	mov	r1, r5
 800a152:	4620      	mov	r0, r4
 800a154:	f7ff febe 	bl	8009ed4 <rshift>
 800a158:	442f      	add	r7, r5
 800a15a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a15e:	42bb      	cmp	r3, r7
 800a160:	da42      	bge.n	800a1e8 <__gethex+0x244>
 800a162:	9801      	ldr	r0, [sp, #4]
 800a164:	4621      	mov	r1, r4
 800a166:	f7fd ff83 	bl	8008070 <_Bfree>
 800a16a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a16c:	2300      	movs	r3, #0
 800a16e:	6013      	str	r3, [r2, #0]
 800a170:	25a3      	movs	r5, #163	@ 0xa3
 800a172:	e793      	b.n	800a09c <__gethex+0xf8>
 800a174:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a178:	2a2e      	cmp	r2, #46	@ 0x2e
 800a17a:	d012      	beq.n	800a1a2 <__gethex+0x1fe>
 800a17c:	2b20      	cmp	r3, #32
 800a17e:	d104      	bne.n	800a18a <__gethex+0x1e6>
 800a180:	f845 bb04 	str.w	fp, [r5], #4
 800a184:	f04f 0b00 	mov.w	fp, #0
 800a188:	465b      	mov	r3, fp
 800a18a:	7830      	ldrb	r0, [r6, #0]
 800a18c:	9303      	str	r3, [sp, #12]
 800a18e:	f7ff fef3 	bl	8009f78 <__hexdig_fun>
 800a192:	9b03      	ldr	r3, [sp, #12]
 800a194:	f000 000f 	and.w	r0, r0, #15
 800a198:	4098      	lsls	r0, r3
 800a19a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a19e:	3304      	adds	r3, #4
 800a1a0:	e7ae      	b.n	800a100 <__gethex+0x15c>
 800a1a2:	45b1      	cmp	r9, r6
 800a1a4:	d8ea      	bhi.n	800a17c <__gethex+0x1d8>
 800a1a6:	492b      	ldr	r1, [pc, #172]	@ (800a254 <__gethex+0x2b0>)
 800a1a8:	9303      	str	r3, [sp, #12]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	4630      	mov	r0, r6
 800a1ae:	f7fc ff43 	bl	8007038 <strncmp>
 800a1b2:	9b03      	ldr	r3, [sp, #12]
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	d1e1      	bne.n	800a17c <__gethex+0x1d8>
 800a1b8:	e7a2      	b.n	800a100 <__gethex+0x15c>
 800a1ba:	1ea9      	subs	r1, r5, #2
 800a1bc:	4620      	mov	r0, r4
 800a1be:	f7fe fba8 	bl	8008912 <__any_on>
 800a1c2:	2800      	cmp	r0, #0
 800a1c4:	d0c2      	beq.n	800a14c <__gethex+0x1a8>
 800a1c6:	f04f 0903 	mov.w	r9, #3
 800a1ca:	e7c1      	b.n	800a150 <__gethex+0x1ac>
 800a1cc:	da09      	bge.n	800a1e2 <__gethex+0x23e>
 800a1ce:	1b75      	subs	r5, r6, r5
 800a1d0:	4621      	mov	r1, r4
 800a1d2:	9801      	ldr	r0, [sp, #4]
 800a1d4:	462a      	mov	r2, r5
 800a1d6:	f7fe f963 	bl	80084a0 <__lshift>
 800a1da:	1b7f      	subs	r7, r7, r5
 800a1dc:	4604      	mov	r4, r0
 800a1de:	f100 0a14 	add.w	sl, r0, #20
 800a1e2:	f04f 0900 	mov.w	r9, #0
 800a1e6:	e7b8      	b.n	800a15a <__gethex+0x1b6>
 800a1e8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a1ec:	42bd      	cmp	r5, r7
 800a1ee:	dd6f      	ble.n	800a2d0 <__gethex+0x32c>
 800a1f0:	1bed      	subs	r5, r5, r7
 800a1f2:	42ae      	cmp	r6, r5
 800a1f4:	dc34      	bgt.n	800a260 <__gethex+0x2bc>
 800a1f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a1fa:	2b02      	cmp	r3, #2
 800a1fc:	d022      	beq.n	800a244 <__gethex+0x2a0>
 800a1fe:	2b03      	cmp	r3, #3
 800a200:	d024      	beq.n	800a24c <__gethex+0x2a8>
 800a202:	2b01      	cmp	r3, #1
 800a204:	d115      	bne.n	800a232 <__gethex+0x28e>
 800a206:	42ae      	cmp	r6, r5
 800a208:	d113      	bne.n	800a232 <__gethex+0x28e>
 800a20a:	2e01      	cmp	r6, #1
 800a20c:	d10b      	bne.n	800a226 <__gethex+0x282>
 800a20e:	9a02      	ldr	r2, [sp, #8]
 800a210:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a214:	6013      	str	r3, [r2, #0]
 800a216:	2301      	movs	r3, #1
 800a218:	6123      	str	r3, [r4, #16]
 800a21a:	f8ca 3000 	str.w	r3, [sl]
 800a21e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a220:	2562      	movs	r5, #98	@ 0x62
 800a222:	601c      	str	r4, [r3, #0]
 800a224:	e73a      	b.n	800a09c <__gethex+0xf8>
 800a226:	1e71      	subs	r1, r6, #1
 800a228:	4620      	mov	r0, r4
 800a22a:	f7fe fb72 	bl	8008912 <__any_on>
 800a22e:	2800      	cmp	r0, #0
 800a230:	d1ed      	bne.n	800a20e <__gethex+0x26a>
 800a232:	9801      	ldr	r0, [sp, #4]
 800a234:	4621      	mov	r1, r4
 800a236:	f7fd ff1b 	bl	8008070 <_Bfree>
 800a23a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a23c:	2300      	movs	r3, #0
 800a23e:	6013      	str	r3, [r2, #0]
 800a240:	2550      	movs	r5, #80	@ 0x50
 800a242:	e72b      	b.n	800a09c <__gethex+0xf8>
 800a244:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a246:	2b00      	cmp	r3, #0
 800a248:	d1f3      	bne.n	800a232 <__gethex+0x28e>
 800a24a:	e7e0      	b.n	800a20e <__gethex+0x26a>
 800a24c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d1dd      	bne.n	800a20e <__gethex+0x26a>
 800a252:	e7ee      	b.n	800a232 <__gethex+0x28e>
 800a254:	0800ab98 	.word	0x0800ab98
 800a258:	0800aa31 	.word	0x0800aa31
 800a25c:	0800ad46 	.word	0x0800ad46
 800a260:	1e6f      	subs	r7, r5, #1
 800a262:	f1b9 0f00 	cmp.w	r9, #0
 800a266:	d130      	bne.n	800a2ca <__gethex+0x326>
 800a268:	b127      	cbz	r7, 800a274 <__gethex+0x2d0>
 800a26a:	4639      	mov	r1, r7
 800a26c:	4620      	mov	r0, r4
 800a26e:	f7fe fb50 	bl	8008912 <__any_on>
 800a272:	4681      	mov	r9, r0
 800a274:	117a      	asrs	r2, r7, #5
 800a276:	2301      	movs	r3, #1
 800a278:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a27c:	f007 071f 	and.w	r7, r7, #31
 800a280:	40bb      	lsls	r3, r7
 800a282:	4213      	tst	r3, r2
 800a284:	4629      	mov	r1, r5
 800a286:	4620      	mov	r0, r4
 800a288:	bf18      	it	ne
 800a28a:	f049 0902 	orrne.w	r9, r9, #2
 800a28e:	f7ff fe21 	bl	8009ed4 <rshift>
 800a292:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a296:	1b76      	subs	r6, r6, r5
 800a298:	2502      	movs	r5, #2
 800a29a:	f1b9 0f00 	cmp.w	r9, #0
 800a29e:	d047      	beq.n	800a330 <__gethex+0x38c>
 800a2a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a2a4:	2b02      	cmp	r3, #2
 800a2a6:	d015      	beq.n	800a2d4 <__gethex+0x330>
 800a2a8:	2b03      	cmp	r3, #3
 800a2aa:	d017      	beq.n	800a2dc <__gethex+0x338>
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d109      	bne.n	800a2c4 <__gethex+0x320>
 800a2b0:	f019 0f02 	tst.w	r9, #2
 800a2b4:	d006      	beq.n	800a2c4 <__gethex+0x320>
 800a2b6:	f8da 3000 	ldr.w	r3, [sl]
 800a2ba:	ea49 0903 	orr.w	r9, r9, r3
 800a2be:	f019 0f01 	tst.w	r9, #1
 800a2c2:	d10e      	bne.n	800a2e2 <__gethex+0x33e>
 800a2c4:	f045 0510 	orr.w	r5, r5, #16
 800a2c8:	e032      	b.n	800a330 <__gethex+0x38c>
 800a2ca:	f04f 0901 	mov.w	r9, #1
 800a2ce:	e7d1      	b.n	800a274 <__gethex+0x2d0>
 800a2d0:	2501      	movs	r5, #1
 800a2d2:	e7e2      	b.n	800a29a <__gethex+0x2f6>
 800a2d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2d6:	f1c3 0301 	rsb	r3, r3, #1
 800a2da:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a2dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d0f0      	beq.n	800a2c4 <__gethex+0x320>
 800a2e2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a2e6:	f104 0314 	add.w	r3, r4, #20
 800a2ea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a2ee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a2f2:	f04f 0c00 	mov.w	ip, #0
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2fc:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800a300:	d01b      	beq.n	800a33a <__gethex+0x396>
 800a302:	3201      	adds	r2, #1
 800a304:	6002      	str	r2, [r0, #0]
 800a306:	2d02      	cmp	r5, #2
 800a308:	f104 0314 	add.w	r3, r4, #20
 800a30c:	d13c      	bne.n	800a388 <__gethex+0x3e4>
 800a30e:	f8d8 2000 	ldr.w	r2, [r8]
 800a312:	3a01      	subs	r2, #1
 800a314:	42b2      	cmp	r2, r6
 800a316:	d109      	bne.n	800a32c <__gethex+0x388>
 800a318:	1171      	asrs	r1, r6, #5
 800a31a:	2201      	movs	r2, #1
 800a31c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a320:	f006 061f 	and.w	r6, r6, #31
 800a324:	fa02 f606 	lsl.w	r6, r2, r6
 800a328:	421e      	tst	r6, r3
 800a32a:	d13a      	bne.n	800a3a2 <__gethex+0x3fe>
 800a32c:	f045 0520 	orr.w	r5, r5, #32
 800a330:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a332:	601c      	str	r4, [r3, #0]
 800a334:	9b02      	ldr	r3, [sp, #8]
 800a336:	601f      	str	r7, [r3, #0]
 800a338:	e6b0      	b.n	800a09c <__gethex+0xf8>
 800a33a:	4299      	cmp	r1, r3
 800a33c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a340:	d8d9      	bhi.n	800a2f6 <__gethex+0x352>
 800a342:	68a3      	ldr	r3, [r4, #8]
 800a344:	459b      	cmp	fp, r3
 800a346:	db17      	blt.n	800a378 <__gethex+0x3d4>
 800a348:	6861      	ldr	r1, [r4, #4]
 800a34a:	9801      	ldr	r0, [sp, #4]
 800a34c:	3101      	adds	r1, #1
 800a34e:	f7fd fe4f 	bl	8007ff0 <_Balloc>
 800a352:	4681      	mov	r9, r0
 800a354:	b918      	cbnz	r0, 800a35e <__gethex+0x3ba>
 800a356:	4b1a      	ldr	r3, [pc, #104]	@ (800a3c0 <__gethex+0x41c>)
 800a358:	4602      	mov	r2, r0
 800a35a:	2184      	movs	r1, #132	@ 0x84
 800a35c:	e6c5      	b.n	800a0ea <__gethex+0x146>
 800a35e:	6922      	ldr	r2, [r4, #16]
 800a360:	3202      	adds	r2, #2
 800a362:	f104 010c 	add.w	r1, r4, #12
 800a366:	0092      	lsls	r2, r2, #2
 800a368:	300c      	adds	r0, #12
 800a36a:	f7ff fd6b 	bl	8009e44 <memcpy>
 800a36e:	4621      	mov	r1, r4
 800a370:	9801      	ldr	r0, [sp, #4]
 800a372:	f7fd fe7d 	bl	8008070 <_Bfree>
 800a376:	464c      	mov	r4, r9
 800a378:	6923      	ldr	r3, [r4, #16]
 800a37a:	1c5a      	adds	r2, r3, #1
 800a37c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a380:	6122      	str	r2, [r4, #16]
 800a382:	2201      	movs	r2, #1
 800a384:	615a      	str	r2, [r3, #20]
 800a386:	e7be      	b.n	800a306 <__gethex+0x362>
 800a388:	6922      	ldr	r2, [r4, #16]
 800a38a:	455a      	cmp	r2, fp
 800a38c:	dd0b      	ble.n	800a3a6 <__gethex+0x402>
 800a38e:	2101      	movs	r1, #1
 800a390:	4620      	mov	r0, r4
 800a392:	f7ff fd9f 	bl	8009ed4 <rshift>
 800a396:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a39a:	3701      	adds	r7, #1
 800a39c:	42bb      	cmp	r3, r7
 800a39e:	f6ff aee0 	blt.w	800a162 <__gethex+0x1be>
 800a3a2:	2501      	movs	r5, #1
 800a3a4:	e7c2      	b.n	800a32c <__gethex+0x388>
 800a3a6:	f016 061f 	ands.w	r6, r6, #31
 800a3aa:	d0fa      	beq.n	800a3a2 <__gethex+0x3fe>
 800a3ac:	4453      	add	r3, sl
 800a3ae:	f1c6 0620 	rsb	r6, r6, #32
 800a3b2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a3b6:	f7fd ff0d 	bl	80081d4 <__hi0bits>
 800a3ba:	42b0      	cmp	r0, r6
 800a3bc:	dbe7      	blt.n	800a38e <__gethex+0x3ea>
 800a3be:	e7f0      	b.n	800a3a2 <__gethex+0x3fe>
 800a3c0:	0800aa31 	.word	0x0800aa31

0800a3c4 <L_shift>:
 800a3c4:	f1c2 0208 	rsb	r2, r2, #8
 800a3c8:	0092      	lsls	r2, r2, #2
 800a3ca:	b570      	push	{r4, r5, r6, lr}
 800a3cc:	f1c2 0620 	rsb	r6, r2, #32
 800a3d0:	6843      	ldr	r3, [r0, #4]
 800a3d2:	6804      	ldr	r4, [r0, #0]
 800a3d4:	fa03 f506 	lsl.w	r5, r3, r6
 800a3d8:	432c      	orrs	r4, r5
 800a3da:	40d3      	lsrs	r3, r2
 800a3dc:	6004      	str	r4, [r0, #0]
 800a3de:	f840 3f04 	str.w	r3, [r0, #4]!
 800a3e2:	4288      	cmp	r0, r1
 800a3e4:	d3f4      	bcc.n	800a3d0 <L_shift+0xc>
 800a3e6:	bd70      	pop	{r4, r5, r6, pc}

0800a3e8 <__match>:
 800a3e8:	b530      	push	{r4, r5, lr}
 800a3ea:	6803      	ldr	r3, [r0, #0]
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3f2:	b914      	cbnz	r4, 800a3fa <__match+0x12>
 800a3f4:	6003      	str	r3, [r0, #0]
 800a3f6:	2001      	movs	r0, #1
 800a3f8:	bd30      	pop	{r4, r5, pc}
 800a3fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3fe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a402:	2d19      	cmp	r5, #25
 800a404:	bf98      	it	ls
 800a406:	3220      	addls	r2, #32
 800a408:	42a2      	cmp	r2, r4
 800a40a:	d0f0      	beq.n	800a3ee <__match+0x6>
 800a40c:	2000      	movs	r0, #0
 800a40e:	e7f3      	b.n	800a3f8 <__match+0x10>

0800a410 <__hexnan>:
 800a410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a414:	680b      	ldr	r3, [r1, #0]
 800a416:	6801      	ldr	r1, [r0, #0]
 800a418:	115e      	asrs	r6, r3, #5
 800a41a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a41e:	f013 031f 	ands.w	r3, r3, #31
 800a422:	b087      	sub	sp, #28
 800a424:	bf18      	it	ne
 800a426:	3604      	addne	r6, #4
 800a428:	2500      	movs	r5, #0
 800a42a:	1f37      	subs	r7, r6, #4
 800a42c:	4682      	mov	sl, r0
 800a42e:	4690      	mov	r8, r2
 800a430:	9301      	str	r3, [sp, #4]
 800a432:	f846 5c04 	str.w	r5, [r6, #-4]
 800a436:	46b9      	mov	r9, r7
 800a438:	463c      	mov	r4, r7
 800a43a:	9502      	str	r5, [sp, #8]
 800a43c:	46ab      	mov	fp, r5
 800a43e:	784a      	ldrb	r2, [r1, #1]
 800a440:	1c4b      	adds	r3, r1, #1
 800a442:	9303      	str	r3, [sp, #12]
 800a444:	b342      	cbz	r2, 800a498 <__hexnan+0x88>
 800a446:	4610      	mov	r0, r2
 800a448:	9105      	str	r1, [sp, #20]
 800a44a:	9204      	str	r2, [sp, #16]
 800a44c:	f7ff fd94 	bl	8009f78 <__hexdig_fun>
 800a450:	2800      	cmp	r0, #0
 800a452:	d151      	bne.n	800a4f8 <__hexnan+0xe8>
 800a454:	9a04      	ldr	r2, [sp, #16]
 800a456:	9905      	ldr	r1, [sp, #20]
 800a458:	2a20      	cmp	r2, #32
 800a45a:	d818      	bhi.n	800a48e <__hexnan+0x7e>
 800a45c:	9b02      	ldr	r3, [sp, #8]
 800a45e:	459b      	cmp	fp, r3
 800a460:	dd13      	ble.n	800a48a <__hexnan+0x7a>
 800a462:	454c      	cmp	r4, r9
 800a464:	d206      	bcs.n	800a474 <__hexnan+0x64>
 800a466:	2d07      	cmp	r5, #7
 800a468:	dc04      	bgt.n	800a474 <__hexnan+0x64>
 800a46a:	462a      	mov	r2, r5
 800a46c:	4649      	mov	r1, r9
 800a46e:	4620      	mov	r0, r4
 800a470:	f7ff ffa8 	bl	800a3c4 <L_shift>
 800a474:	4544      	cmp	r4, r8
 800a476:	d952      	bls.n	800a51e <__hexnan+0x10e>
 800a478:	2300      	movs	r3, #0
 800a47a:	f1a4 0904 	sub.w	r9, r4, #4
 800a47e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a482:	f8cd b008 	str.w	fp, [sp, #8]
 800a486:	464c      	mov	r4, r9
 800a488:	461d      	mov	r5, r3
 800a48a:	9903      	ldr	r1, [sp, #12]
 800a48c:	e7d7      	b.n	800a43e <__hexnan+0x2e>
 800a48e:	2a29      	cmp	r2, #41	@ 0x29
 800a490:	d157      	bne.n	800a542 <__hexnan+0x132>
 800a492:	3102      	adds	r1, #2
 800a494:	f8ca 1000 	str.w	r1, [sl]
 800a498:	f1bb 0f00 	cmp.w	fp, #0
 800a49c:	d051      	beq.n	800a542 <__hexnan+0x132>
 800a49e:	454c      	cmp	r4, r9
 800a4a0:	d206      	bcs.n	800a4b0 <__hexnan+0xa0>
 800a4a2:	2d07      	cmp	r5, #7
 800a4a4:	dc04      	bgt.n	800a4b0 <__hexnan+0xa0>
 800a4a6:	462a      	mov	r2, r5
 800a4a8:	4649      	mov	r1, r9
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	f7ff ff8a 	bl	800a3c4 <L_shift>
 800a4b0:	4544      	cmp	r4, r8
 800a4b2:	d936      	bls.n	800a522 <__hexnan+0x112>
 800a4b4:	f1a8 0204 	sub.w	r2, r8, #4
 800a4b8:	4623      	mov	r3, r4
 800a4ba:	f853 1b04 	ldr.w	r1, [r3], #4
 800a4be:	f842 1f04 	str.w	r1, [r2, #4]!
 800a4c2:	429f      	cmp	r7, r3
 800a4c4:	d2f9      	bcs.n	800a4ba <__hexnan+0xaa>
 800a4c6:	1b3b      	subs	r3, r7, r4
 800a4c8:	f023 0303 	bic.w	r3, r3, #3
 800a4cc:	3304      	adds	r3, #4
 800a4ce:	3401      	adds	r4, #1
 800a4d0:	3e03      	subs	r6, #3
 800a4d2:	42b4      	cmp	r4, r6
 800a4d4:	bf88      	it	hi
 800a4d6:	2304      	movhi	r3, #4
 800a4d8:	4443      	add	r3, r8
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f843 2b04 	str.w	r2, [r3], #4
 800a4e0:	429f      	cmp	r7, r3
 800a4e2:	d2fb      	bcs.n	800a4dc <__hexnan+0xcc>
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	b91b      	cbnz	r3, 800a4f0 <__hexnan+0xe0>
 800a4e8:	4547      	cmp	r7, r8
 800a4ea:	d128      	bne.n	800a53e <__hexnan+0x12e>
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	603b      	str	r3, [r7, #0]
 800a4f0:	2005      	movs	r0, #5
 800a4f2:	b007      	add	sp, #28
 800a4f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4f8:	3501      	adds	r5, #1
 800a4fa:	2d08      	cmp	r5, #8
 800a4fc:	f10b 0b01 	add.w	fp, fp, #1
 800a500:	dd06      	ble.n	800a510 <__hexnan+0x100>
 800a502:	4544      	cmp	r4, r8
 800a504:	d9c1      	bls.n	800a48a <__hexnan+0x7a>
 800a506:	2300      	movs	r3, #0
 800a508:	f844 3c04 	str.w	r3, [r4, #-4]
 800a50c:	2501      	movs	r5, #1
 800a50e:	3c04      	subs	r4, #4
 800a510:	6822      	ldr	r2, [r4, #0]
 800a512:	f000 000f 	and.w	r0, r0, #15
 800a516:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a51a:	6020      	str	r0, [r4, #0]
 800a51c:	e7b5      	b.n	800a48a <__hexnan+0x7a>
 800a51e:	2508      	movs	r5, #8
 800a520:	e7b3      	b.n	800a48a <__hexnan+0x7a>
 800a522:	9b01      	ldr	r3, [sp, #4]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d0dd      	beq.n	800a4e4 <__hexnan+0xd4>
 800a528:	f1c3 0320 	rsb	r3, r3, #32
 800a52c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a530:	40da      	lsrs	r2, r3
 800a532:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a536:	4013      	ands	r3, r2
 800a538:	f846 3c04 	str.w	r3, [r6, #-4]
 800a53c:	e7d2      	b.n	800a4e4 <__hexnan+0xd4>
 800a53e:	3f04      	subs	r7, #4
 800a540:	e7d0      	b.n	800a4e4 <__hexnan+0xd4>
 800a542:	2004      	movs	r0, #4
 800a544:	e7d5      	b.n	800a4f2 <__hexnan+0xe2>

0800a546 <__ascii_mbtowc>:
 800a546:	b082      	sub	sp, #8
 800a548:	b901      	cbnz	r1, 800a54c <__ascii_mbtowc+0x6>
 800a54a:	a901      	add	r1, sp, #4
 800a54c:	b142      	cbz	r2, 800a560 <__ascii_mbtowc+0x1a>
 800a54e:	b14b      	cbz	r3, 800a564 <__ascii_mbtowc+0x1e>
 800a550:	7813      	ldrb	r3, [r2, #0]
 800a552:	600b      	str	r3, [r1, #0]
 800a554:	7812      	ldrb	r2, [r2, #0]
 800a556:	1e10      	subs	r0, r2, #0
 800a558:	bf18      	it	ne
 800a55a:	2001      	movne	r0, #1
 800a55c:	b002      	add	sp, #8
 800a55e:	4770      	bx	lr
 800a560:	4610      	mov	r0, r2
 800a562:	e7fb      	b.n	800a55c <__ascii_mbtowc+0x16>
 800a564:	f06f 0001 	mvn.w	r0, #1
 800a568:	e7f8      	b.n	800a55c <__ascii_mbtowc+0x16>

0800a56a <_realloc_r>:
 800a56a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a56e:	4680      	mov	r8, r0
 800a570:	4615      	mov	r5, r2
 800a572:	460c      	mov	r4, r1
 800a574:	b921      	cbnz	r1, 800a580 <_realloc_r+0x16>
 800a576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a57a:	4611      	mov	r1, r2
 800a57c:	f7fd bcac 	b.w	8007ed8 <_malloc_r>
 800a580:	b92a      	cbnz	r2, 800a58e <_realloc_r+0x24>
 800a582:	f7fd fc35 	bl	8007df0 <_free_r>
 800a586:	2400      	movs	r4, #0
 800a588:	4620      	mov	r0, r4
 800a58a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a58e:	f000 f840 	bl	800a612 <_malloc_usable_size_r>
 800a592:	4285      	cmp	r5, r0
 800a594:	4606      	mov	r6, r0
 800a596:	d802      	bhi.n	800a59e <_realloc_r+0x34>
 800a598:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a59c:	d8f4      	bhi.n	800a588 <_realloc_r+0x1e>
 800a59e:	4629      	mov	r1, r5
 800a5a0:	4640      	mov	r0, r8
 800a5a2:	f7fd fc99 	bl	8007ed8 <_malloc_r>
 800a5a6:	4607      	mov	r7, r0
 800a5a8:	2800      	cmp	r0, #0
 800a5aa:	d0ec      	beq.n	800a586 <_realloc_r+0x1c>
 800a5ac:	42b5      	cmp	r5, r6
 800a5ae:	462a      	mov	r2, r5
 800a5b0:	4621      	mov	r1, r4
 800a5b2:	bf28      	it	cs
 800a5b4:	4632      	movcs	r2, r6
 800a5b6:	f7ff fc45 	bl	8009e44 <memcpy>
 800a5ba:	4621      	mov	r1, r4
 800a5bc:	4640      	mov	r0, r8
 800a5be:	f7fd fc17 	bl	8007df0 <_free_r>
 800a5c2:	463c      	mov	r4, r7
 800a5c4:	e7e0      	b.n	800a588 <_realloc_r+0x1e>

0800a5c6 <__ascii_wctomb>:
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	4608      	mov	r0, r1
 800a5ca:	b141      	cbz	r1, 800a5de <__ascii_wctomb+0x18>
 800a5cc:	2aff      	cmp	r2, #255	@ 0xff
 800a5ce:	d904      	bls.n	800a5da <__ascii_wctomb+0x14>
 800a5d0:	228a      	movs	r2, #138	@ 0x8a
 800a5d2:	601a      	str	r2, [r3, #0]
 800a5d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a5d8:	4770      	bx	lr
 800a5da:	700a      	strb	r2, [r1, #0]
 800a5dc:	2001      	movs	r0, #1
 800a5de:	4770      	bx	lr

0800a5e0 <fiprintf>:
 800a5e0:	b40e      	push	{r1, r2, r3}
 800a5e2:	b503      	push	{r0, r1, lr}
 800a5e4:	4601      	mov	r1, r0
 800a5e6:	ab03      	add	r3, sp, #12
 800a5e8:	4805      	ldr	r0, [pc, #20]	@ (800a600 <fiprintf+0x20>)
 800a5ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5ee:	6800      	ldr	r0, [r0, #0]
 800a5f0:	9301      	str	r3, [sp, #4]
 800a5f2:	f7ff f9b5 	bl	8009960 <_vfiprintf_r>
 800a5f6:	b002      	add	sp, #8
 800a5f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5fc:	b003      	add	sp, #12
 800a5fe:	4770      	bx	lr
 800a600:	2000001c 	.word	0x2000001c

0800a604 <abort>:
 800a604:	b508      	push	{r3, lr}
 800a606:	2006      	movs	r0, #6
 800a608:	f000 f834 	bl	800a674 <raise>
 800a60c:	2001      	movs	r0, #1
 800a60e:	f7f7 ff5b 	bl	80024c8 <_exit>

0800a612 <_malloc_usable_size_r>:
 800a612:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a616:	1f18      	subs	r0, r3, #4
 800a618:	2b00      	cmp	r3, #0
 800a61a:	bfbc      	itt	lt
 800a61c:	580b      	ldrlt	r3, [r1, r0]
 800a61e:	18c0      	addlt	r0, r0, r3
 800a620:	4770      	bx	lr

0800a622 <_raise_r>:
 800a622:	291f      	cmp	r1, #31
 800a624:	b538      	push	{r3, r4, r5, lr}
 800a626:	4605      	mov	r5, r0
 800a628:	460c      	mov	r4, r1
 800a62a:	d904      	bls.n	800a636 <_raise_r+0x14>
 800a62c:	2316      	movs	r3, #22
 800a62e:	6003      	str	r3, [r0, #0]
 800a630:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a634:	bd38      	pop	{r3, r4, r5, pc}
 800a636:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a638:	b112      	cbz	r2, 800a640 <_raise_r+0x1e>
 800a63a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a63e:	b94b      	cbnz	r3, 800a654 <_raise_r+0x32>
 800a640:	4628      	mov	r0, r5
 800a642:	f000 f831 	bl	800a6a8 <_getpid_r>
 800a646:	4622      	mov	r2, r4
 800a648:	4601      	mov	r1, r0
 800a64a:	4628      	mov	r0, r5
 800a64c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a650:	f000 b818 	b.w	800a684 <_kill_r>
 800a654:	2b01      	cmp	r3, #1
 800a656:	d00a      	beq.n	800a66e <_raise_r+0x4c>
 800a658:	1c59      	adds	r1, r3, #1
 800a65a:	d103      	bne.n	800a664 <_raise_r+0x42>
 800a65c:	2316      	movs	r3, #22
 800a65e:	6003      	str	r3, [r0, #0]
 800a660:	2001      	movs	r0, #1
 800a662:	e7e7      	b.n	800a634 <_raise_r+0x12>
 800a664:	2100      	movs	r1, #0
 800a666:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a66a:	4620      	mov	r0, r4
 800a66c:	4798      	blx	r3
 800a66e:	2000      	movs	r0, #0
 800a670:	e7e0      	b.n	800a634 <_raise_r+0x12>
	...

0800a674 <raise>:
 800a674:	4b02      	ldr	r3, [pc, #8]	@ (800a680 <raise+0xc>)
 800a676:	4601      	mov	r1, r0
 800a678:	6818      	ldr	r0, [r3, #0]
 800a67a:	f7ff bfd2 	b.w	800a622 <_raise_r>
 800a67e:	bf00      	nop
 800a680:	2000001c 	.word	0x2000001c

0800a684 <_kill_r>:
 800a684:	b538      	push	{r3, r4, r5, lr}
 800a686:	4d07      	ldr	r5, [pc, #28]	@ (800a6a4 <_kill_r+0x20>)
 800a688:	2300      	movs	r3, #0
 800a68a:	4604      	mov	r4, r0
 800a68c:	4608      	mov	r0, r1
 800a68e:	4611      	mov	r1, r2
 800a690:	602b      	str	r3, [r5, #0]
 800a692:	f7f7 ff09 	bl	80024a8 <_kill>
 800a696:	1c43      	adds	r3, r0, #1
 800a698:	d102      	bne.n	800a6a0 <_kill_r+0x1c>
 800a69a:	682b      	ldr	r3, [r5, #0]
 800a69c:	b103      	cbz	r3, 800a6a0 <_kill_r+0x1c>
 800a69e:	6023      	str	r3, [r4, #0]
 800a6a0:	bd38      	pop	{r3, r4, r5, pc}
 800a6a2:	bf00      	nop
 800a6a4:	2000049c 	.word	0x2000049c

0800a6a8 <_getpid_r>:
 800a6a8:	f7f7 bef6 	b.w	8002498 <_getpid>

0800a6ac <_init>:
 800a6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ae:	bf00      	nop
 800a6b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6b2:	bc08      	pop	{r3}
 800a6b4:	469e      	mov	lr, r3
 800a6b6:	4770      	bx	lr

0800a6b8 <_fini>:
 800a6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ba:	bf00      	nop
 800a6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6be:	bc08      	pop	{r3}
 800a6c0:	469e      	mov	lr, r3
 800a6c2:	4770      	bx	lr
