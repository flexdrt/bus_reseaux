
bus_reseau_tp1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059bc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08005b8c  08005b8c  00006b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cbc  08005cbc  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  08005cbc  08005cbc  00006cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cc4  08005cc4  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cc4  08005cc4  00006cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005cc8  08005cc8  00006cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005ccc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  2000006c  08005d38  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08005d38  000072f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce93  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c0  00000000  00000000  00013f2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  00015ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008b8  00000000  00000000  00016b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000228cc  00000000  00000000  000173d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec22  00000000  00000000  00039ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccf97  00000000  00000000  000488c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011585d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003658  00000000  00000000  001158a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  00118ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005b74 	.word	0x08005b74

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08005b74 	.word	0x08005b74

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_ldivmod>:
 80002d0:	b97b      	cbnz	r3, 80002f2 <__aeabi_ldivmod+0x22>
 80002d2:	b972      	cbnz	r2, 80002f2 <__aeabi_ldivmod+0x22>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bfbe      	ittt	lt
 80002d8:	2000      	movlt	r0, #0
 80002da:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002de:	e006      	blt.n	80002ee <__aeabi_ldivmod+0x1e>
 80002e0:	bf08      	it	eq
 80002e2:	2800      	cmpeq	r0, #0
 80002e4:	bf1c      	itt	ne
 80002e6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002ea:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ee:	f000 b9b5 	b.w	800065c <__aeabi_idiv0>
 80002f2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002fa:	2900      	cmp	r1, #0
 80002fc:	db09      	blt.n	8000312 <__aeabi_ldivmod+0x42>
 80002fe:	2b00      	cmp	r3, #0
 8000300:	db1a      	blt.n	8000338 <__aeabi_ldivmod+0x68>
 8000302:	f000 f84d 	bl	80003a0 <__udivmoddi4>
 8000306:	f8dd e004 	ldr.w	lr, [sp, #4]
 800030a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030e:	b004      	add	sp, #16
 8000310:	4770      	bx	lr
 8000312:	4240      	negs	r0, r0
 8000314:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000318:	2b00      	cmp	r3, #0
 800031a:	db1b      	blt.n	8000354 <__aeabi_ldivmod+0x84>
 800031c:	f000 f840 	bl	80003a0 <__udivmoddi4>
 8000320:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000324:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000328:	b004      	add	sp, #16
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	4252      	negs	r2, r2
 8000332:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000336:	4770      	bx	lr
 8000338:	4252      	negs	r2, r2
 800033a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033e:	f000 f82f 	bl	80003a0 <__udivmoddi4>
 8000342:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000346:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034a:	b004      	add	sp, #16
 800034c:	4240      	negs	r0, r0
 800034e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000352:	4770      	bx	lr
 8000354:	4252      	negs	r2, r2
 8000356:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035a:	f000 f821 	bl	80003a0 <__udivmoddi4>
 800035e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000362:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000366:	b004      	add	sp, #16
 8000368:	4252      	negs	r2, r2
 800036a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036e:	4770      	bx	lr

08000370 <__aeabi_uldivmod>:
 8000370:	b953      	cbnz	r3, 8000388 <__aeabi_uldivmod+0x18>
 8000372:	b94a      	cbnz	r2, 8000388 <__aeabi_uldivmod+0x18>
 8000374:	2900      	cmp	r1, #0
 8000376:	bf08      	it	eq
 8000378:	2800      	cmpeq	r0, #0
 800037a:	bf1c      	itt	ne
 800037c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000380:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000384:	f000 b96a 	b.w	800065c <__aeabi_idiv0>
 8000388:	f1ad 0c08 	sub.w	ip, sp, #8
 800038c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000390:	f000 f806 	bl	80003a0 <__udivmoddi4>
 8000394:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000398:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800039c:	b004      	add	sp, #16
 800039e:	4770      	bx	lr

080003a0 <__udivmoddi4>:
 80003a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003a4:	9d08      	ldr	r5, [sp, #32]
 80003a6:	460c      	mov	r4, r1
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d14e      	bne.n	800044a <__udivmoddi4+0xaa>
 80003ac:	4694      	mov	ip, r2
 80003ae:	458c      	cmp	ip, r1
 80003b0:	4686      	mov	lr, r0
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	d962      	bls.n	800047e <__udivmoddi4+0xde>
 80003b8:	b14a      	cbz	r2, 80003ce <__udivmoddi4+0x2e>
 80003ba:	f1c2 0320 	rsb	r3, r2, #32
 80003be:	4091      	lsls	r1, r2
 80003c0:	fa20 f303 	lsr.w	r3, r0, r3
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	4319      	orrs	r1, r3
 80003ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d2:	fa1f f68c 	uxth.w	r6, ip
 80003d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003de:	fb07 1114 	mls	r1, r7, r4, r1
 80003e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e6:	fb04 f106 	mul.w	r1, r4, r6
 80003ea:	4299      	cmp	r1, r3
 80003ec:	d90a      	bls.n	8000404 <__udivmoddi4+0x64>
 80003ee:	eb1c 0303 	adds.w	r3, ip, r3
 80003f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80003f6:	f080 8112 	bcs.w	800061e <__udivmoddi4+0x27e>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 810f 	bls.w	800061e <__udivmoddi4+0x27e>
 8000400:	3c02      	subs	r4, #2
 8000402:	4463      	add	r3, ip
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	fa1f f38e 	uxth.w	r3, lr
 800040a:	fbb1 f0f7 	udiv	r0, r1, r7
 800040e:	fb07 1110 	mls	r1, r7, r0, r1
 8000412:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000416:	fb00 f606 	mul.w	r6, r0, r6
 800041a:	429e      	cmp	r6, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x94>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000426:	f080 80fc 	bcs.w	8000622 <__udivmoddi4+0x282>
 800042a:	429e      	cmp	r6, r3
 800042c:	f240 80f9 	bls.w	8000622 <__udivmoddi4+0x282>
 8000430:	4463      	add	r3, ip
 8000432:	3802      	subs	r0, #2
 8000434:	1b9b      	subs	r3, r3, r6
 8000436:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800043a:	2100      	movs	r1, #0
 800043c:	b11d      	cbz	r5, 8000446 <__udivmoddi4+0xa6>
 800043e:	40d3      	lsrs	r3, r2
 8000440:	2200      	movs	r2, #0
 8000442:	e9c5 3200 	strd	r3, r2, [r5]
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	428b      	cmp	r3, r1
 800044c:	d905      	bls.n	800045a <__udivmoddi4+0xba>
 800044e:	b10d      	cbz	r5, 8000454 <__udivmoddi4+0xb4>
 8000450:	e9c5 0100 	strd	r0, r1, [r5]
 8000454:	2100      	movs	r1, #0
 8000456:	4608      	mov	r0, r1
 8000458:	e7f5      	b.n	8000446 <__udivmoddi4+0xa6>
 800045a:	fab3 f183 	clz	r1, r3
 800045e:	2900      	cmp	r1, #0
 8000460:	d146      	bne.n	80004f0 <__udivmoddi4+0x150>
 8000462:	42a3      	cmp	r3, r4
 8000464:	d302      	bcc.n	800046c <__udivmoddi4+0xcc>
 8000466:	4290      	cmp	r0, r2
 8000468:	f0c0 80f0 	bcc.w	800064c <__udivmoddi4+0x2ac>
 800046c:	1a86      	subs	r6, r0, r2
 800046e:	eb64 0303 	sbc.w	r3, r4, r3
 8000472:	2001      	movs	r0, #1
 8000474:	2d00      	cmp	r5, #0
 8000476:	d0e6      	beq.n	8000446 <__udivmoddi4+0xa6>
 8000478:	e9c5 6300 	strd	r6, r3, [r5]
 800047c:	e7e3      	b.n	8000446 <__udivmoddi4+0xa6>
 800047e:	2a00      	cmp	r2, #0
 8000480:	f040 8090 	bne.w	80005a4 <__udivmoddi4+0x204>
 8000484:	eba1 040c 	sub.w	r4, r1, ip
 8000488:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800048c:	fa1f f78c 	uxth.w	r7, ip
 8000490:	2101      	movs	r1, #1
 8000492:	fbb4 f6f8 	udiv	r6, r4, r8
 8000496:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800049a:	fb08 4416 	mls	r4, r8, r6, r4
 800049e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004a2:	fb07 f006 	mul.w	r0, r7, r6
 80004a6:	4298      	cmp	r0, r3
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x11c>
 80004aa:	eb1c 0303 	adds.w	r3, ip, r3
 80004ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x11a>
 80004b4:	4298      	cmp	r0, r3
 80004b6:	f200 80cd 	bhi.w	8000654 <__udivmoddi4+0x2b4>
 80004ba:	4626      	mov	r6, r4
 80004bc:	1a1c      	subs	r4, r3, r0
 80004be:	fa1f f38e 	uxth.w	r3, lr
 80004c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004c6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ce:	fb00 f707 	mul.w	r7, r0, r7
 80004d2:	429f      	cmp	r7, r3
 80004d4:	d908      	bls.n	80004e8 <__udivmoddi4+0x148>
 80004d6:	eb1c 0303 	adds.w	r3, ip, r3
 80004da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004de:	d202      	bcs.n	80004e6 <__udivmoddi4+0x146>
 80004e0:	429f      	cmp	r7, r3
 80004e2:	f200 80b0 	bhi.w	8000646 <__udivmoddi4+0x2a6>
 80004e6:	4620      	mov	r0, r4
 80004e8:	1bdb      	subs	r3, r3, r7
 80004ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004ee:	e7a5      	b.n	800043c <__udivmoddi4+0x9c>
 80004f0:	f1c1 0620 	rsb	r6, r1, #32
 80004f4:	408b      	lsls	r3, r1
 80004f6:	fa22 f706 	lsr.w	r7, r2, r6
 80004fa:	431f      	orrs	r7, r3
 80004fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000500:	fa04 f301 	lsl.w	r3, r4, r1
 8000504:	ea43 030c 	orr.w	r3, r3, ip
 8000508:	40f4      	lsrs	r4, r6
 800050a:	fa00 f801 	lsl.w	r8, r0, r1
 800050e:	0c38      	lsrs	r0, r7, #16
 8000510:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000514:	fbb4 fef0 	udiv	lr, r4, r0
 8000518:	fa1f fc87 	uxth.w	ip, r7
 800051c:	fb00 441e 	mls	r4, r0, lr, r4
 8000520:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000524:	fb0e f90c 	mul.w	r9, lr, ip
 8000528:	45a1      	cmp	r9, r4
 800052a:	fa02 f201 	lsl.w	r2, r2, r1
 800052e:	d90a      	bls.n	8000546 <__udivmoddi4+0x1a6>
 8000530:	193c      	adds	r4, r7, r4
 8000532:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000536:	f080 8084 	bcs.w	8000642 <__udivmoddi4+0x2a2>
 800053a:	45a1      	cmp	r9, r4
 800053c:	f240 8081 	bls.w	8000642 <__udivmoddi4+0x2a2>
 8000540:	f1ae 0e02 	sub.w	lr, lr, #2
 8000544:	443c      	add	r4, r7
 8000546:	eba4 0409 	sub.w	r4, r4, r9
 800054a:	fa1f f983 	uxth.w	r9, r3
 800054e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000552:	fb00 4413 	mls	r4, r0, r3, r4
 8000556:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800055a:	fb03 fc0c 	mul.w	ip, r3, ip
 800055e:	45a4      	cmp	ip, r4
 8000560:	d907      	bls.n	8000572 <__udivmoddi4+0x1d2>
 8000562:	193c      	adds	r4, r7, r4
 8000564:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000568:	d267      	bcs.n	800063a <__udivmoddi4+0x29a>
 800056a:	45a4      	cmp	ip, r4
 800056c:	d965      	bls.n	800063a <__udivmoddi4+0x29a>
 800056e:	3b02      	subs	r3, #2
 8000570:	443c      	add	r4, r7
 8000572:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000576:	fba0 9302 	umull	r9, r3, r0, r2
 800057a:	eba4 040c 	sub.w	r4, r4, ip
 800057e:	429c      	cmp	r4, r3
 8000580:	46ce      	mov	lr, r9
 8000582:	469c      	mov	ip, r3
 8000584:	d351      	bcc.n	800062a <__udivmoddi4+0x28a>
 8000586:	d04e      	beq.n	8000626 <__udivmoddi4+0x286>
 8000588:	b155      	cbz	r5, 80005a0 <__udivmoddi4+0x200>
 800058a:	ebb8 030e 	subs.w	r3, r8, lr
 800058e:	eb64 040c 	sbc.w	r4, r4, ip
 8000592:	fa04 f606 	lsl.w	r6, r4, r6
 8000596:	40cb      	lsrs	r3, r1
 8000598:	431e      	orrs	r6, r3
 800059a:	40cc      	lsrs	r4, r1
 800059c:	e9c5 6400 	strd	r6, r4, [r5]
 80005a0:	2100      	movs	r1, #0
 80005a2:	e750      	b.n	8000446 <__udivmoddi4+0xa6>
 80005a4:	f1c2 0320 	rsb	r3, r2, #32
 80005a8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80005b0:	fa24 f303 	lsr.w	r3, r4, r3
 80005b4:	4094      	lsls	r4, r2
 80005b6:	430c      	orrs	r4, r1
 80005b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005c0:	fa1f f78c 	uxth.w	r7, ip
 80005c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005c8:	fb08 3110 	mls	r1, r8, r0, r3
 80005cc:	0c23      	lsrs	r3, r4, #16
 80005ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005d2:	fb00 f107 	mul.w	r1, r0, r7
 80005d6:	4299      	cmp	r1, r3
 80005d8:	d908      	bls.n	80005ec <__udivmoddi4+0x24c>
 80005da:	eb1c 0303 	adds.w	r3, ip, r3
 80005de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80005e2:	d22c      	bcs.n	800063e <__udivmoddi4+0x29e>
 80005e4:	4299      	cmp	r1, r3
 80005e6:	d92a      	bls.n	800063e <__udivmoddi4+0x29e>
 80005e8:	3802      	subs	r0, #2
 80005ea:	4463      	add	r3, ip
 80005ec:	1a5b      	subs	r3, r3, r1
 80005ee:	b2a4      	uxth	r4, r4
 80005f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005f4:	fb08 3311 	mls	r3, r8, r1, r3
 80005f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005fc:	fb01 f307 	mul.w	r3, r1, r7
 8000600:	42a3      	cmp	r3, r4
 8000602:	d908      	bls.n	8000616 <__udivmoddi4+0x276>
 8000604:	eb1c 0404 	adds.w	r4, ip, r4
 8000608:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800060c:	d213      	bcs.n	8000636 <__udivmoddi4+0x296>
 800060e:	42a3      	cmp	r3, r4
 8000610:	d911      	bls.n	8000636 <__udivmoddi4+0x296>
 8000612:	3902      	subs	r1, #2
 8000614:	4464      	add	r4, ip
 8000616:	1ae4      	subs	r4, r4, r3
 8000618:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800061c:	e739      	b.n	8000492 <__udivmoddi4+0xf2>
 800061e:	4604      	mov	r4, r0
 8000620:	e6f0      	b.n	8000404 <__udivmoddi4+0x64>
 8000622:	4608      	mov	r0, r1
 8000624:	e706      	b.n	8000434 <__udivmoddi4+0x94>
 8000626:	45c8      	cmp	r8, r9
 8000628:	d2ae      	bcs.n	8000588 <__udivmoddi4+0x1e8>
 800062a:	ebb9 0e02 	subs.w	lr, r9, r2
 800062e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000632:	3801      	subs	r0, #1
 8000634:	e7a8      	b.n	8000588 <__udivmoddi4+0x1e8>
 8000636:	4631      	mov	r1, r6
 8000638:	e7ed      	b.n	8000616 <__udivmoddi4+0x276>
 800063a:	4603      	mov	r3, r0
 800063c:	e799      	b.n	8000572 <__udivmoddi4+0x1d2>
 800063e:	4630      	mov	r0, r6
 8000640:	e7d4      	b.n	80005ec <__udivmoddi4+0x24c>
 8000642:	46d6      	mov	lr, sl
 8000644:	e77f      	b.n	8000546 <__udivmoddi4+0x1a6>
 8000646:	4463      	add	r3, ip
 8000648:	3802      	subs	r0, #2
 800064a:	e74d      	b.n	80004e8 <__udivmoddi4+0x148>
 800064c:	4606      	mov	r6, r0
 800064e:	4623      	mov	r3, r4
 8000650:	4608      	mov	r0, r1
 8000652:	e70f      	b.n	8000474 <__udivmoddi4+0xd4>
 8000654:	3e02      	subs	r6, #2
 8000656:	4463      	add	r3, ip
 8000658:	e730      	b.n	80004bc <__udivmoddi4+0x11c>
 800065a:	bf00      	nop

0800065c <__aeabi_idiv0>:
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <BMP280_checkID>:
//HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 1, -1);

//HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, 1, -1);
//printf("Idreg: 0x%x\r\n", buf[0]); 

int BMP280_checkID(void) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af02      	add	r7, sp, #8


	//FOnctionnel au 23 oct 18h59 <<<<<<< aussi 9 nov 19h34 organisé

	uint8_t buf[10];
	buf[0]=BMP280_ID_REG;
 8000666:	23d0      	movs	r3, #208	@ 0xd0
 8000668:	713b      	strb	r3, [r7, #4]

	retour = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 1, -1);
 800066a:	23ee      	movs	r3, #238	@ 0xee
 800066c:	4619      	mov	r1, r3
 800066e:	1d3a      	adds	r2, r7, #4
 8000670:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2301      	movs	r3, #1
 8000678:	4815      	ldr	r0, [pc, #84]	@ (80006d0 <BMP280_checkID+0x70>)
 800067a:	f001 fde7 	bl	800224c <HAL_I2C_Master_Transmit>
 800067e:	4603      	mov	r3, r0
 8000680:	461a      	mov	r2, r3
 8000682:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <BMP280_checkID+0x74>)
 8000684:	701a      	strb	r2, [r3, #0]

	//printf("checkID : transmission in progress\r\n");

	if(retour != HAL_OK){
 8000686:	4b13      	ldr	r3, [pc, #76]	@ (80006d4 <BMP280_checkID+0x74>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d004      	beq.n	8000698 <BMP280_checkID+0x38>

		printf(" \n checkID : problem during transmission \r\n");
 800068e:	4812      	ldr	r0, [pc, #72]	@ (80006d8 <BMP280_checkID+0x78>)
 8000690:	f004 fbfa 	bl	8004e88 <puts>

		return 1;
 8000694:	2301      	movs	r3, #1
 8000696:	e016      	b.n	80006c6 <BMP280_checkID+0x66>
	else{
		//%%printf("no problem during transmission ... transmission complete -> reception in progress\r\n");
	}


	retour = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, 1, -1);
 8000698:	23ee      	movs	r3, #238	@ 0xee
 800069a:	4619      	mov	r1, r3
 800069c:	1d3a      	adds	r2, r7, #4
 800069e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	2301      	movs	r3, #1
 80006a6:	480a      	ldr	r0, [pc, #40]	@ (80006d0 <BMP280_checkID+0x70>)
 80006a8:	f001 fece 	bl	8002448 <HAL_I2C_Master_Receive>
 80006ac:	4603      	mov	r3, r0
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b08      	ldr	r3, [pc, #32]	@ (80006d4 <BMP280_checkID+0x74>)
 80006b2:	701a      	strb	r2, [r3, #0]
	if(retour != HAL_OK){
 80006b4:	4b07      	ldr	r3, [pc, #28]	@ (80006d4 <BMP280_checkID+0x74>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d004      	beq.n	80006c6 <BMP280_checkID+0x66>

		printf(" \n checkID : problem during reception I2C\r\n");
 80006bc:	4807      	ldr	r0, [pc, #28]	@ (80006dc <BMP280_checkID+0x7c>)
 80006be:	f004 fbe3 	bl	8004e88 <puts>

		return 1;
 80006c2:	2301      	movs	r3, #1
 80006c4:	e7ff      	b.n	80006c6 <BMP280_checkID+0x66>
	else{

		//^printf("\n reception complete ...  : Register Id content : 0x%x\r\n", buf[0]);
	}

}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	200000b8 	.word	0x200000b8
 80006d4:	20000088 	.word	0x20000088
 80006d8:	08005b8c 	.word	0x08005b8c
 80006dc:	08005bb8 	.word	0x08005bb8

080006e0 <BMP280_config>:




void BMP280_config(void) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af02      	add	r7, sp, #8
	uint8_t part1 = 0b010 << 5;  // Décalage de 5 bits
 80006e6:	2340      	movs	r3, #64	@ 0x40
 80006e8:	71fb      	strb	r3, [r7, #7]
	uint8_t part2 = 0b101 << 2;  // Décalage de 2 bits
 80006ea:	2314      	movs	r3, #20
 80006ec:	71bb      	strb	r3, [r7, #6]
	uint8_t part3 = 0b11;        // Pas de décalage
 80006ee:	2303      	movs	r3, #3
 80006f0:	717b      	strb	r3, [r7, #5]
	printf("Part3 (0b11)       = %u\r\n", part3);   // Affiche 3



	 */
	uint8_t sumPart=part1+part2+part3;
 80006f2:	79fa      	ldrb	r2, [r7, #7]
 80006f4:	79bb      	ldrb	r3, [r7, #6]
 80006f6:	4413      	add	r3, r2
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	797b      	ldrb	r3, [r7, #5]
 80006fc:	4413      	add	r3, r2
 80006fe:	713b      	strb	r3, [r7, #4]
	//^^printf(" sum of parts = Part1+Part2+Part3 = %u \r\n",sumPart);   // Affiche 3
	uint8_t config = part1 | part2 | part3;
 8000700:	79fa      	ldrb	r2, [r7, #7]
 8000702:	79bb      	ldrb	r3, [r7, #6]
 8000704:	4313      	orrs	r3, r2
 8000706:	b2da      	uxtb	r2, r3
 8000708:	797b      	ldrb	r3, [r7, #5]
 800070a:	4313      	orrs	r3, r2
 800070c:	70fb      	strb	r3, [r7, #3]


	uint8_t buf[2];


	buf[0] = ctrl_meas;
 800070e:	4b19      	ldr	r3, [pc, #100]	@ (8000774 <BMP280_config+0x94>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	703b      	strb	r3, [r7, #0]

	buf[1] = config;  //mot binaire a ecrire pour conf correctement 
 8000714:	78fb      	ldrb	r3, [r7, #3]
 8000716:	707b      	strb	r3, [r7, #1]

	retour = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 2,HAL_MAX_DELAY);
 8000718:	23ee      	movs	r3, #238	@ 0xee
 800071a:	4619      	mov	r1, r3
 800071c:	463a      	mov	r2, r7
 800071e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	2302      	movs	r3, #2
 8000726:	4814      	ldr	r0, [pc, #80]	@ (8000778 <BMP280_config+0x98>)
 8000728:	f001 fd90 	bl	800224c <HAL_I2C_Master_Transmit>
 800072c:	4603      	mov	r3, r0
 800072e:	461a      	mov	r2, r3
 8000730:	4b12      	ldr	r3, [pc, #72]	@ (800077c <BMP280_config+0x9c>)
 8000732:	701a      	strb	r2, [r3, #0]

	//%%printf("configuration : transmission in progress\r\n");

	if (retour != HAL_OK) {
 8000734:	4b11      	ldr	r3, [pc, #68]	@ (800077c <BMP280_config+0x9c>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d002      	beq.n	8000742 <BMP280_config+0x62>

		printf("\n config: problem during transmission \r\n\r\n");
 800073c:	4810      	ldr	r0, [pc, #64]	@ (8000780 <BMP280_config+0xa0>)
 800073e:	f004 fba3 	bl	8004e88 <puts>

	else{
		//%%printf("config : no problem during transmission ... transmission complete -> reception in progress\r\n");
	}

	retour = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 8000742:	23ee      	movs	r3, #238	@ 0xee
 8000744:	4619      	mov	r1, r3
 8000746:	463a      	mov	r2, r7
 8000748:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800074c:	9300      	str	r3, [sp, #0]
 800074e:	2301      	movs	r3, #1
 8000750:	4809      	ldr	r0, [pc, #36]	@ (8000778 <BMP280_config+0x98>)
 8000752:	f001 fe79 	bl	8002448 <HAL_I2C_Master_Receive>
 8000756:	4603      	mov	r3, r0
 8000758:	461a      	mov	r2, r3
 800075a:	4b08      	ldr	r3, [pc, #32]	@ (800077c <BMP280_config+0x9c>)
 800075c:	701a      	strb	r2, [r3, #0]

	if (retour != HAL_OK) {
 800075e:	4b07      	ldr	r3, [pc, #28]	@ (800077c <BMP280_config+0x9c>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d002      	beq.n	800076c <BMP280_config+0x8c>

		printf("\n config : problem during reception I2C\r\n");
 8000766:	4807      	ldr	r0, [pc, #28]	@ (8000784 <BMP280_config+0xa4>)
 8000768:	f004 fb8e 	bl	8004e88 <puts>

	}



}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000000 	.word	0x20000000
 8000778:	200000b8 	.word	0x200000b8
 800077c:	20000088 	.word	0x20000088
 8000780:	08005be4 	.word	0x08005be4
 8000784:	08005c10 	.word	0x08005c10

08000788 <BMP280_calib>:

void BMP280_calib(void) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	@ 0x28
 800078c:	af02      	add	r7, sp, #8
	//on demande la lecture avec le transmit

	//BMP280_TRIM_REG_MSB  est déclarée dans BMP280_vincent.h

	// l'adresse de la variable BMP280_TRIM_REG_MSB est passée a la fonction qui attends une adresse en paramètre (celle sur laquelle pointerait le pointeur pData)
	retour = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &BMP280_TRIM_REG_MSB,1, HAL_MAX_DELAY);
 800078e:	23ee      	movs	r3, #238	@ 0xee
 8000790:	4619      	mov	r1, r3
 8000792:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000796:	9300      	str	r3, [sp, #0]
 8000798:	2301      	movs	r3, #1
 800079a:	4a4b      	ldr	r2, [pc, #300]	@ (80008c8 <BMP280_calib+0x140>)
 800079c:	484b      	ldr	r0, [pc, #300]	@ (80008cc <BMP280_calib+0x144>)
 800079e:	f001 fd55 	bl	800224c <HAL_I2C_Master_Transmit>
 80007a2:	4603      	mov	r3, r0
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b4a      	ldr	r3, [pc, #296]	@ (80008d0 <BMP280_calib+0x148>)
 80007a8:	701a      	strb	r2, [r3, #0]

	if (retour != HAL_OK) {
 80007aa:	4b49      	ldr	r3, [pc, #292]	@ (80008d0 <BMP280_calib+0x148>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	f040 8086 	bne.w	80008c0 <BMP280_calib+0x138>
		//printf("Probleme calib I2C\r\n");
		return;
	}
	//on lit la réponse qu'on stocke dans le buffer buf_data
	retour = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf_data, 24,HAL_MAX_DELAY);
 80007b4:	23ee      	movs	r3, #238	@ 0xee
 80007b6:	4619      	mov	r1, r3
 80007b8:	1d3a      	adds	r2, r7, #4
 80007ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	2318      	movs	r3, #24
 80007c2:	4842      	ldr	r0, [pc, #264]	@ (80008cc <BMP280_calib+0x144>)
 80007c4:	f001 fe40 	bl	8002448 <HAL_I2C_Master_Receive>
 80007c8:	4603      	mov	r3, r0
 80007ca:	461a      	mov	r2, r3
 80007cc:	4b40      	ldr	r3, [pc, #256]	@ (80008d0 <BMP280_calib+0x148>)
 80007ce:	701a      	strb	r2, [r3, #0]

	}
	else {	//on affiche les données d'étallonage reçues

	}
	dig_T1 = buf_data[0] | (buf_data[1] << 8);
 80007d0:	793b      	ldrb	r3, [r7, #4]
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	797b      	ldrb	r3, [r7, #5]
 80007d6:	021b      	lsls	r3, r3, #8
 80007d8:	b21b      	sxth	r3, r3
 80007da:	4313      	orrs	r3, r2
 80007dc:	b21b      	sxth	r3, r3
 80007de:	b29a      	uxth	r2, r3
 80007e0:	4b3c      	ldr	r3, [pc, #240]	@ (80008d4 <BMP280_calib+0x14c>)
 80007e2:	801a      	strh	r2, [r3, #0]
	dig_T2 = buf_data[2] | (buf_data[3] << 8);
 80007e4:	79bb      	ldrb	r3, [r7, #6]
 80007e6:	b21a      	sxth	r2, r3
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	021b      	lsls	r3, r3, #8
 80007ec:	b21b      	sxth	r3, r3
 80007ee:	4313      	orrs	r3, r2
 80007f0:	b21a      	sxth	r2, r3
 80007f2:	4b39      	ldr	r3, [pc, #228]	@ (80008d8 <BMP280_calib+0x150>)
 80007f4:	801a      	strh	r2, [r3, #0]
	dig_T3 = buf_data[4] | (buf_data[5] << 8);
 80007f6:	7a3b      	ldrb	r3, [r7, #8]
 80007f8:	b21a      	sxth	r2, r3
 80007fa:	7a7b      	ldrb	r3, [r7, #9]
 80007fc:	021b      	lsls	r3, r3, #8
 80007fe:	b21b      	sxth	r3, r3
 8000800:	4313      	orrs	r3, r2
 8000802:	b21a      	sxth	r2, r3
 8000804:	4b35      	ldr	r3, [pc, #212]	@ (80008dc <BMP280_calib+0x154>)
 8000806:	801a      	strh	r2, [r3, #0]

	dig_P1 = buf_data[6] | (buf_data[7] << 8);
 8000808:	7abb      	ldrb	r3, [r7, #10]
 800080a:	b21a      	sxth	r2, r3
 800080c:	7afb      	ldrb	r3, [r7, #11]
 800080e:	021b      	lsls	r3, r3, #8
 8000810:	b21b      	sxth	r3, r3
 8000812:	4313      	orrs	r3, r2
 8000814:	b21b      	sxth	r3, r3
 8000816:	b29a      	uxth	r2, r3
 8000818:	4b31      	ldr	r3, [pc, #196]	@ (80008e0 <BMP280_calib+0x158>)
 800081a:	801a      	strh	r2, [r3, #0]
	dig_P2 = buf_data[8] | (buf_data[9] << 8);
 800081c:	7b3b      	ldrb	r3, [r7, #12]
 800081e:	b21a      	sxth	r2, r3
 8000820:	7b7b      	ldrb	r3, [r7, #13]
 8000822:	021b      	lsls	r3, r3, #8
 8000824:	b21b      	sxth	r3, r3
 8000826:	4313      	orrs	r3, r2
 8000828:	b21a      	sxth	r2, r3
 800082a:	4b2e      	ldr	r3, [pc, #184]	@ (80008e4 <BMP280_calib+0x15c>)
 800082c:	801a      	strh	r2, [r3, #0]
	dig_P3 = buf_data[10] | (buf_data[11] << 8);
 800082e:	7bbb      	ldrb	r3, [r7, #14]
 8000830:	b21a      	sxth	r2, r3
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	021b      	lsls	r3, r3, #8
 8000836:	b21b      	sxth	r3, r3
 8000838:	4313      	orrs	r3, r2
 800083a:	b21a      	sxth	r2, r3
 800083c:	4b2a      	ldr	r3, [pc, #168]	@ (80008e8 <BMP280_calib+0x160>)
 800083e:	801a      	strh	r2, [r3, #0]
	dig_P4 = buf_data[12] | (buf_data[13] << 8);
 8000840:	7c3b      	ldrb	r3, [r7, #16]
 8000842:	b21a      	sxth	r2, r3
 8000844:	7c7b      	ldrb	r3, [r7, #17]
 8000846:	021b      	lsls	r3, r3, #8
 8000848:	b21b      	sxth	r3, r3
 800084a:	4313      	orrs	r3, r2
 800084c:	b21a      	sxth	r2, r3
 800084e:	4b27      	ldr	r3, [pc, #156]	@ (80008ec <BMP280_calib+0x164>)
 8000850:	801a      	strh	r2, [r3, #0]
	dig_P5 = buf_data[14] | (buf_data[15] << 8);
 8000852:	7cbb      	ldrb	r3, [r7, #18]
 8000854:	b21a      	sxth	r2, r3
 8000856:	7cfb      	ldrb	r3, [r7, #19]
 8000858:	021b      	lsls	r3, r3, #8
 800085a:	b21b      	sxth	r3, r3
 800085c:	4313      	orrs	r3, r2
 800085e:	b21a      	sxth	r2, r3
 8000860:	4b23      	ldr	r3, [pc, #140]	@ (80008f0 <BMP280_calib+0x168>)
 8000862:	801a      	strh	r2, [r3, #0]
	dig_P6 = buf_data[16] | (buf_data[17] << 8);
 8000864:	7d3b      	ldrb	r3, [r7, #20]
 8000866:	b21a      	sxth	r2, r3
 8000868:	7d7b      	ldrb	r3, [r7, #21]
 800086a:	021b      	lsls	r3, r3, #8
 800086c:	b21b      	sxth	r3, r3
 800086e:	4313      	orrs	r3, r2
 8000870:	b21a      	sxth	r2, r3
 8000872:	4b20      	ldr	r3, [pc, #128]	@ (80008f4 <BMP280_calib+0x16c>)
 8000874:	801a      	strh	r2, [r3, #0]
	dig_P7 = buf_data[18] | (buf_data[19] << 8);
 8000876:	7dbb      	ldrb	r3, [r7, #22]
 8000878:	b21a      	sxth	r2, r3
 800087a:	7dfb      	ldrb	r3, [r7, #23]
 800087c:	021b      	lsls	r3, r3, #8
 800087e:	b21b      	sxth	r3, r3
 8000880:	4313      	orrs	r3, r2
 8000882:	b21a      	sxth	r2, r3
 8000884:	4b1c      	ldr	r3, [pc, #112]	@ (80008f8 <BMP280_calib+0x170>)
 8000886:	801a      	strh	r2, [r3, #0]
	dig_P8 = buf_data[20] | (buf_data[21] << 8);
 8000888:	7e3b      	ldrb	r3, [r7, #24]
 800088a:	b21a      	sxth	r2, r3
 800088c:	7e7b      	ldrb	r3, [r7, #25]
 800088e:	021b      	lsls	r3, r3, #8
 8000890:	b21b      	sxth	r3, r3
 8000892:	4313      	orrs	r3, r2
 8000894:	b21a      	sxth	r2, r3
 8000896:	4b19      	ldr	r3, [pc, #100]	@ (80008fc <BMP280_calib+0x174>)
 8000898:	801a      	strh	r2, [r3, #0]
	dig_P9 = buf_data[22] | (buf_data[23] << 8);
 800089a:	7ebb      	ldrb	r3, [r7, #26]
 800089c:	b21a      	sxth	r2, r3
 800089e:	7efb      	ldrb	r3, [r7, #27]
 80008a0:	021b      	lsls	r3, r3, #8
 80008a2:	b21b      	sxth	r3, r3
 80008a4:	4313      	orrs	r3, r2
 80008a6:	b21a      	sxth	r2, r3
 80008a8:	4b15      	ldr	r3, [pc, #84]	@ (8000900 <BMP280_calib+0x178>)
 80008aa:	801a      	strh	r2, [r3, #0]



	for (int i = 0; i < 24; i++) {
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
 80008b0:	e002      	b.n	80008b8 <BMP280_calib+0x130>
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	3301      	adds	r3, #1
 80008b6:	61fb      	str	r3, [r7, #28]
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	2b17      	cmp	r3, #23
 80008bc:	ddf9      	ble.n	80008b2 <BMP280_calib+0x12a>
 80008be:	e000      	b.n	80008c2 <BMP280_calib+0x13a>
		return;
 80008c0:	bf00      	nop
		//printf("dans boucle for //registre d'etallonage calib= 0x%x soit %d \r\n ", buf_data[i],buf_data[i]);


	}

}
 80008c2:	3720      	adds	r7, #32
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	08005c6a 	.word	0x08005c6a
 80008cc:	200000b8 	.word	0x200000b8
 80008d0:	20000088 	.word	0x20000088
 80008d4:	2000009c 	.word	0x2000009c
 80008d8:	2000009e 	.word	0x2000009e
 80008dc:	200000a0 	.word	0x200000a0
 80008e0:	200000a2 	.word	0x200000a2
 80008e4:	200000a4 	.word	0x200000a4
 80008e8:	200000a6 	.word	0x200000a6
 80008ec:	200000a8 	.word	0x200000a8
 80008f0:	200000aa 	.word	0x200000aa
 80008f4:	200000ac 	.word	0x200000ac
 80008f8:	200000ae 	.word	0x200000ae
 80008fc:	200000b0 	.word	0x200000b0
 8000900:	200000b2 	.word	0x200000b2

08000904 <BMP280_get_temperature>:

BMP280_S32_t BMP280_get_temperature() {
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af02      	add	r7, sp, #8
	//on demande la lecture avec le transmit

	//BMP280_TEMP_REG_MSB   est déclarée dans BMP280_vincent.h

	// l'adresse de la variable BMP280_TEMP_REG_MSB  est passée a la fonction qui attend une adresse en paramètre (celle sur laquelle pointerait le pointeur pData)
	retour = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &BMP280_TEMP_REG_MSB, 1,
 800090a:	23ee      	movs	r3, #238	@ 0xee
 800090c:	4619      	mov	r1, r3
 800090e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000912:	9300      	str	r3, [sp, #0]
 8000914:	2301      	movs	r3, #1
 8000916:	4a17      	ldr	r2, [pc, #92]	@ (8000974 <BMP280_get_temperature+0x70>)
 8000918:	4817      	ldr	r0, [pc, #92]	@ (8000978 <BMP280_get_temperature+0x74>)
 800091a:	f001 fc97 	bl	800224c <HAL_I2C_Master_Transmit>
 800091e:	4603      	mov	r3, r0
 8000920:	461a      	mov	r2, r3
 8000922:	4b16      	ldr	r3, [pc, #88]	@ (800097c <BMP280_get_temperature+0x78>)
 8000924:	701a      	strb	r2, [r3, #0]

	if (retour != HAL_OK) {
		//^printf("Probleme I2C\r\n");
	}
	//on lit la réponse qu'on stocke dans le buffer buf_data
	retour = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf_data, 3,HAL_MAX_DELAY);
 8000926:	23ee      	movs	r3, #238	@ 0xee
 8000928:	4619      	mov	r1, r3
 800092a:	463a      	mov	r2, r7
 800092c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000930:	9300      	str	r3, [sp, #0]
 8000932:	2303      	movs	r3, #3
 8000934:	4810      	ldr	r0, [pc, #64]	@ (8000978 <BMP280_get_temperature+0x74>)
 8000936:	f001 fd87 	bl	8002448 <HAL_I2C_Master_Receive>
 800093a:	4603      	mov	r3, r0
 800093c:	461a      	mov	r2, r3
 800093e:	4b0f      	ldr	r3, [pc, #60]	@ (800097c <BMP280_get_temperature+0x78>)
 8000940:	701a      	strb	r2, [r3, #0]

	if (retour != HAL_OK) {
 8000942:	4b0e      	ldr	r3, [pc, #56]	@ (800097c <BMP280_get_temperature+0x78>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <BMP280_get_temperature+0x4a>

		//^printf("problem i2c");

		return 1;
 800094a:	2301      	movs	r3, #1
 800094c:	e00d      	b.n	800096a <BMP280_get_temperature+0x66>
	}

	adc_T = ((BMP280_S32_t) (buf_data[0]) << 12)| ( (BMP280_S32_t) (buf_data[1]) << 4)| ( (BMP280_S32_t) (buf_data[2]) >> 4);
 800094e:	783b      	ldrb	r3, [r7, #0]
 8000950:	031a      	lsls	r2, r3, #12
 8000952:	787b      	ldrb	r3, [r7, #1]
 8000954:	011b      	lsls	r3, r3, #4
 8000956:	4313      	orrs	r3, r2
 8000958:	78ba      	ldrb	r2, [r7, #2]
 800095a:	0912      	lsrs	r2, r2, #4
 800095c:	b2d2      	uxtb	r2, r2
 800095e:	4313      	orrs	r3, r2
 8000960:	607b      	str	r3, [r7, #4]
	printf("Temperature adc_T: 0d ");
 8000962:	4807      	ldr	r0, [pc, #28]	@ (8000980 <BMP280_get_temperature+0x7c>)
 8000964:	f004 fa28 	bl	8004db8 <iprintf>

	//printf("%05lX", adc_T);

	//^printf("%d \r\n", adc_T);

	return adc_T;
 8000968:	687b      	ldr	r3, [r7, #4]
}
 800096a:	4618      	mov	r0, r3
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	08005c6b 	.word	0x08005c6b
 8000978:	200000b8 	.word	0x200000b8
 800097c:	20000088 	.word	0x20000088
 8000980:	08005c3c 	.word	0x08005c3c

08000984 <BMP280_get_pressure>:

BMP280_S32_t BMP280_get_pressure() {
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af02      	add	r7, sp, #8
	//on demande la lecture avec le transmit

	//BMP280_PRES_REG_MSB est déclarée dans BMP280_vincent.h

	// l'adresse de la variable BMP280_PRES_REG_MSB est passée a la fonction qui attend une adresse en paramètre (celle sur laquelle pointerait le pointeur pData)
	retour = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &BMP280_PRES_REG_MSB, 1,HAL_MAX_DELAY);
 800098a:	23ee      	movs	r3, #238	@ 0xee
 800098c:	4619      	mov	r1, r3
 800098e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000992:	9300      	str	r3, [sp, #0]
 8000994:	2301      	movs	r3, #1
 8000996:	4a15      	ldr	r2, [pc, #84]	@ (80009ec <BMP280_get_pressure+0x68>)
 8000998:	4815      	ldr	r0, [pc, #84]	@ (80009f0 <BMP280_get_pressure+0x6c>)
 800099a:	f001 fc57 	bl	800224c <HAL_I2C_Master_Transmit>
 800099e:	4603      	mov	r3, r0
 80009a0:	461a      	mov	r2, r3
 80009a2:	4b14      	ldr	r3, [pc, #80]	@ (80009f4 <BMP280_get_pressure+0x70>)
 80009a4:	701a      	strb	r2, [r3, #0]

	if (retour != HAL_OK) {
		//printf("problem i2c\r\n");
	}
	//on lit la réponse qu'on stocke dans le buffer buf_data
	retour = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf_data, 3,HAL_MAX_DELAY);
 80009a6:	23ee      	movs	r3, #238	@ 0xee
 80009a8:	4619      	mov	r1, r3
 80009aa:	463a      	mov	r2, r7
 80009ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	2303      	movs	r3, #3
 80009b4:	480e      	ldr	r0, [pc, #56]	@ (80009f0 <BMP280_get_pressure+0x6c>)
 80009b6:	f001 fd47 	bl	8002448 <HAL_I2C_Master_Receive>
 80009ba:	4603      	mov	r3, r0
 80009bc:	461a      	mov	r2, r3
 80009be:	4b0d      	ldr	r3, [pc, #52]	@ (80009f4 <BMP280_get_pressure+0x70>)
 80009c0:	701a      	strb	r2, [r3, #0]

	if (retour != HAL_OK) {
 80009c2:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <BMP280_get_pressure+0x70>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <BMP280_get_pressure+0x4a>

		//^printf("problem i2c \r\n");

		return 1;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e009      	b.n	80009e2 <BMP280_get_pressure+0x5e>
	}

	adc_P = ((BMP280_S32_t) (buf_data[0]) << 12) | ((BMP280_S32_t) (buf_data[1]) << 4) | ((BMP280_S32_t) (buf_data[2]) >> 4);
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	031a      	lsls	r2, r3, #12
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	011b      	lsls	r3, r3, #4
 80009d6:	431a      	orrs	r2, r3
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	111b      	asrs	r3, r3, #4
 80009dc:	4313      	orrs	r3, r2
 80009de:	60fb      	str	r3, [r7, #12]

	//^printf("%d\r\n", adc_P);



	return adc_P;
 80009e0:	68fb      	ldr	r3, [r7, #12]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	08005c6c 	.word	0x08005c6c
 80009f0:	200000b8 	.word	0x200000b8
 80009f4:	20000088 	.word	0x20000088

080009f8 <bmp280_compensate_T_int32>:

// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// t_fine carries fine temperature as global value
BMP280_S32_t t_fine;
BMP280_S32_t bmp280_compensate_T_int32(BMP280_S32_t adc_T)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b087      	sub	sp, #28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	BMP280_S32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((BMP280_S32_t)dig_T1<<1))) * ((BMP280_S32_t)dig_T2)) >> 11;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	10da      	asrs	r2, r3, #3
 8000a04:	4b19      	ldr	r3, [pc, #100]	@ (8000a6c <bmp280_compensate_T_int32+0x74>)
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	1ad3      	subs	r3, r2, r3
 8000a0c:	4a18      	ldr	r2, [pc, #96]	@ (8000a70 <bmp280_compensate_T_int32+0x78>)
 8000a0e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000a12:	fb02 f303 	mul.w	r3, r2, r3
 8000a16:	12db      	asrs	r3, r3, #11
 8000a18:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((BMP280_S32_t)dig_T1)) * ((adc_T>>4) - ((BMP280_S32_t)dig_T1))) >> 12) *((BMP280_S32_t)dig_T3)) >> 14;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	111b      	asrs	r3, r3, #4
 8000a1e:	4a13      	ldr	r2, [pc, #76]	@ (8000a6c <bmp280_compensate_T_int32+0x74>)
 8000a20:	8812      	ldrh	r2, [r2, #0]
 8000a22:	1a9b      	subs	r3, r3, r2
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	1112      	asrs	r2, r2, #4
 8000a28:	4910      	ldr	r1, [pc, #64]	@ (8000a6c <bmp280_compensate_T_int32+0x74>)
 8000a2a:	8809      	ldrh	r1, [r1, #0]
 8000a2c:	1a52      	subs	r2, r2, r1
 8000a2e:	fb02 f303 	mul.w	r3, r2, r3
 8000a32:	131b      	asrs	r3, r3, #12
 8000a34:	4a0f      	ldr	r2, [pc, #60]	@ (8000a74 <bmp280_compensate_T_int32+0x7c>)
 8000a36:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000a3a:	fb02 f303 	mul.w	r3, r2, r3
 8000a3e:	139b      	asrs	r3, r3, #14
 8000a40:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000a42:	697a      	ldr	r2, [r7, #20]
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	4413      	add	r3, r2
 8000a48:	4a0b      	ldr	r2, [pc, #44]	@ (8000a78 <bmp280_compensate_T_int32+0x80>)
 8000a4a:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a78 <bmp280_compensate_T_int32+0x80>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	4613      	mov	r3, r2
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	4413      	add	r3, r2
 8000a56:	3380      	adds	r3, #128	@ 0x80
 8000a58:	121b      	asrs	r3, r3, #8
 8000a5a:	60fb      	str	r3, [r7, #12]
	return T;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	371c      	adds	r7, #28
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	2000009c 	.word	0x2000009c
 8000a70:	2000009e 	.word	0x2000009e
 8000a74:	200000a0 	.word	0x200000a0
 8000a78:	200000b4 	.word	0x200000b4

08000a7c <bmp280_compensate_P_int64>:
// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa


BMP280_U32_t bmp280_compensate_P_int64(BMP280_S32_t adc_P)
{
 8000a7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000a80:	b0ca      	sub	sp, #296	@ 0x128
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	BMP280_S64_t var1, var2, p;
	var1 = ((BMP280_S64_t)t_fine) - 128000;
 8000a88:	4baf      	ldr	r3, [pc, #700]	@ (8000d48 <bmp280_compensate_P_int64+0x2cc>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	17da      	asrs	r2, r3, #31
 8000a8e:	461c      	mov	r4, r3
 8000a90:	4615      	mov	r5, r2
 8000a92:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8000a96:	f145 3bff 	adc.w	fp, r5, #4294967295	@ 0xffffffff
 8000a9a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (BMP280_S64_t)dig_P6;
 8000a9e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000aa2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000aa6:	fb03 f102 	mul.w	r1, r3, r2
 8000aaa:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000aae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000ab2:	fb02 f303 	mul.w	r3, r2, r3
 8000ab6:	18ca      	adds	r2, r1, r3
 8000ab8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000abc:	fba3 8903 	umull	r8, r9, r3, r3
 8000ac0:	eb02 0309 	add.w	r3, r2, r9
 8000ac4:	4699      	mov	r9, r3
 8000ac6:	4ba1      	ldr	r3, [pc, #644]	@ (8000d4c <bmp280_compensate_P_int64+0x2d0>)
 8000ac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000acc:	b21b      	sxth	r3, r3
 8000ace:	17da      	asrs	r2, r3, #31
 8000ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000ad4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000ad8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000adc:	4603      	mov	r3, r0
 8000ade:	fb03 f209 	mul.w	r2, r3, r9
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	fb08 f303 	mul.w	r3, r8, r3
 8000ae8:	4413      	add	r3, r2
 8000aea:	4602      	mov	r2, r0
 8000aec:	fba8 1202 	umull	r1, r2, r8, r2
 8000af0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000af4:	460a      	mov	r2, r1
 8000af6:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000afa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000afe:	4413      	add	r3, r2
 8000b00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000b04:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000b08:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8000b0c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(BMP280_S64_t)dig_P5)<<17);
 8000b10:	4b8f      	ldr	r3, [pc, #572]	@ (8000d50 <bmp280_compensate_P_int64+0x2d4>)
 8000b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b16:	b21b      	sxth	r3, r3
 8000b18:	17da      	asrs	r2, r3, #31
 8000b1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000b1e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000b22:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b26:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000b2a:	462a      	mov	r2, r5
 8000b2c:	fb02 f203 	mul.w	r2, r2, r3
 8000b30:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000b34:	4621      	mov	r1, r4
 8000b36:	fb01 f303 	mul.w	r3, r1, r3
 8000b3a:	441a      	add	r2, r3
 8000b3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b40:	4621      	mov	r1, r4
 8000b42:	fba3 1301 	umull	r1, r3, r3, r1
 8000b46:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000b4a:	460b      	mov	r3, r1
 8000b4c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000b54:	18d3      	adds	r3, r2, r3
 8000b56:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000b5a:	f04f 0000 	mov.w	r0, #0
 8000b5e:	f04f 0100 	mov.w	r1, #0
 8000b62:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000b66:	462b      	mov	r3, r5
 8000b68:	0459      	lsls	r1, r3, #17
 8000b6a:	4623      	mov	r3, r4
 8000b6c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000b70:	4623      	mov	r3, r4
 8000b72:	0458      	lsls	r0, r3, #17
 8000b74:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000b78:	1814      	adds	r4, r2, r0
 8000b7a:	643c      	str	r4, [r7, #64]	@ 0x40
 8000b7c:	414b      	adcs	r3, r1
 8000b7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8000b80:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000b84:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((BMP280_S64_t)dig_P4)<<35);
 8000b88:	4b72      	ldr	r3, [pc, #456]	@ (8000d54 <bmp280_compensate_P_int64+0x2d8>)
 8000b8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b8e:	b21b      	sxth	r3, r3
 8000b90:	17da      	asrs	r2, r3, #31
 8000b92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000b96:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	f04f 0100 	mov.w	r1, #0
 8000ba2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000ba6:	00d9      	lsls	r1, r3, #3
 8000ba8:	2000      	movs	r0, #0
 8000baa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000bae:	1814      	adds	r4, r2, r0
 8000bb0:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000bb2:	414b      	adcs	r3, r1
 8000bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000bb6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000bba:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (BMP280_S64_t)dig_P3)>>8) + ((var1 * (BMP280_S64_t)dig_P2)<<12);
 8000bbe:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000bc2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bc6:	fb03 f102 	mul.w	r1, r3, r2
 8000bca:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000bce:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bd2:	fb02 f303 	mul.w	r3, r2, r3
 8000bd6:	18ca      	adds	r2, r1, r3
 8000bd8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bdc:	fba3 1303 	umull	r1, r3, r3, r3
 8000be0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000be4:	460b      	mov	r3, r1
 8000be6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000bea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000bee:	18d3      	adds	r3, r2, r3
 8000bf0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000bf4:	4b58      	ldr	r3, [pc, #352]	@ (8000d58 <bmp280_compensate_P_int64+0x2dc>)
 8000bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bfa:	b21b      	sxth	r3, r3
 8000bfc:	17da      	asrs	r2, r3, #31
 8000bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000c02:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000c06:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000c0a:	462b      	mov	r3, r5
 8000c0c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000c10:	4642      	mov	r2, r8
 8000c12:	fb02 f203 	mul.w	r2, r2, r3
 8000c16:	464b      	mov	r3, r9
 8000c18:	4621      	mov	r1, r4
 8000c1a:	fb01 f303 	mul.w	r3, r1, r3
 8000c1e:	4413      	add	r3, r2
 8000c20:	4622      	mov	r2, r4
 8000c22:	4641      	mov	r1, r8
 8000c24:	fba2 1201 	umull	r1, r2, r2, r1
 8000c28:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000c2c:	460a      	mov	r2, r1
 8000c2e:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000c32:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000c36:	4413      	add	r3, r2
 8000c38:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000c3c:	f04f 0000 	mov.w	r0, #0
 8000c40:	f04f 0100 	mov.w	r1, #0
 8000c44:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000c48:	4623      	mov	r3, r4
 8000c4a:	0a18      	lsrs	r0, r3, #8
 8000c4c:	462b      	mov	r3, r5
 8000c4e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000c52:	462b      	mov	r3, r5
 8000c54:	1219      	asrs	r1, r3, #8
 8000c56:	4b41      	ldr	r3, [pc, #260]	@ (8000d5c <bmp280_compensate_P_int64+0x2e0>)
 8000c58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c5c:	b21b      	sxth	r3, r3
 8000c5e:	17da      	asrs	r2, r3, #31
 8000c60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000c64:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000c68:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000c6c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8000c70:	464a      	mov	r2, r9
 8000c72:	fb02 f203 	mul.w	r2, r2, r3
 8000c76:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000c7a:	4644      	mov	r4, r8
 8000c7c:	fb04 f303 	mul.w	r3, r4, r3
 8000c80:	441a      	add	r2, r3
 8000c82:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000c86:	4644      	mov	r4, r8
 8000c88:	fba3 4304 	umull	r4, r3, r3, r4
 8000c8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000c90:	4623      	mov	r3, r4
 8000c92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000c96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000c9a:	18d3      	adds	r3, r2, r3
 8000c9c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000ca0:	f04f 0200 	mov.w	r2, #0
 8000ca4:	f04f 0300 	mov.w	r3, #0
 8000ca8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8000cac:	464c      	mov	r4, r9
 8000cae:	0323      	lsls	r3, r4, #12
 8000cb0:	4644      	mov	r4, r8
 8000cb2:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000cb6:	4644      	mov	r4, r8
 8000cb8:	0322      	lsls	r2, r4, #12
 8000cba:	1884      	adds	r4, r0, r2
 8000cbc:	633c      	str	r4, [r7, #48]	@ 0x30
 8000cbe:	eb41 0303 	adc.w	r3, r1, r3
 8000cc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8000cc4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000cc8:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((BMP280_S64_t)1)<<47)+var1))*((BMP280_S64_t)dig_P1)>>33;
 8000ccc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000cd0:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000cd4:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8000cd8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000cdc:	4b20      	ldr	r3, [pc, #128]	@ (8000d60 <bmp280_compensate_P_int64+0x2e4>)
 8000cde:	881b      	ldrh	r3, [r3, #0]
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000ce8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000cec:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8000cf0:	462b      	mov	r3, r5
 8000cf2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8000cf6:	4642      	mov	r2, r8
 8000cf8:	fb02 f203 	mul.w	r2, r2, r3
 8000cfc:	464b      	mov	r3, r9
 8000cfe:	4621      	mov	r1, r4
 8000d00:	fb01 f303 	mul.w	r3, r1, r3
 8000d04:	4413      	add	r3, r2
 8000d06:	4622      	mov	r2, r4
 8000d08:	4641      	mov	r1, r8
 8000d0a:	fba2 1201 	umull	r1, r2, r2, r1
 8000d0e:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8000d12:	460a      	mov	r2, r1
 8000d14:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8000d18:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000d1c:	4413      	add	r3, r2
 8000d1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000d22:	f04f 0200 	mov.w	r2, #0
 8000d26:	f04f 0300 	mov.w	r3, #0
 8000d2a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000d2e:	4629      	mov	r1, r5
 8000d30:	104a      	asrs	r2, r1, #1
 8000d32:	4629      	mov	r1, r5
 8000d34:	17cb      	asrs	r3, r1, #31
 8000d36:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8000d3a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	d110      	bne.n	8000d64 <bmp280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 8000d42:	2300      	movs	r3, #0
 8000d44:	e154      	b.n	8000ff0 <bmp280_compensate_P_int64+0x574>
 8000d46:	bf00      	nop
 8000d48:	200000b4 	.word	0x200000b4
 8000d4c:	200000ac 	.word	0x200000ac
 8000d50:	200000aa 	.word	0x200000aa
 8000d54:	200000a8 	.word	0x200000a8
 8000d58:	200000a6 	.word	0x200000a6
 8000d5c:	200000a4 	.word	0x200000a4
 8000d60:	200000a2 	.word	0x200000a2
	}
	p = 1048576-adc_P;
 8000d64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000d68:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000d6c:	17da      	asrs	r2, r3, #31
 8000d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000d72:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000d76:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8000d7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000d7e:	105b      	asrs	r3, r3, #1
 8000d80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000d84:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000d88:	07db      	lsls	r3, r3, #31
 8000d8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000d8e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000d92:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000d96:	4621      	mov	r1, r4
 8000d98:	1a89      	subs	r1, r1, r2
 8000d9a:	67b9      	str	r1, [r7, #120]	@ 0x78
 8000d9c:	4629      	mov	r1, r5
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000da4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000da8:	4622      	mov	r2, r4
 8000daa:	462b      	mov	r3, r5
 8000dac:	1891      	adds	r1, r2, r2
 8000dae:	6239      	str	r1, [r7, #32]
 8000db0:	415b      	adcs	r3, r3
 8000db2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000db4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000db8:	4621      	mov	r1, r4
 8000dba:	1851      	adds	r1, r2, r1
 8000dbc:	61b9      	str	r1, [r7, #24]
 8000dbe:	4629      	mov	r1, r5
 8000dc0:	414b      	adcs	r3, r1
 8000dc2:	61fb      	str	r3, [r7, #28]
 8000dc4:	f04f 0200 	mov.w	r2, #0
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000dd0:	4649      	mov	r1, r9
 8000dd2:	018b      	lsls	r3, r1, #6
 8000dd4:	4641      	mov	r1, r8
 8000dd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000dda:	4641      	mov	r1, r8
 8000ddc:	018a      	lsls	r2, r1, #6
 8000dde:	4641      	mov	r1, r8
 8000de0:	1889      	adds	r1, r1, r2
 8000de2:	6139      	str	r1, [r7, #16]
 8000de4:	4649      	mov	r1, r9
 8000de6:	eb43 0101 	adc.w	r1, r3, r1
 8000dea:	6179      	str	r1, [r7, #20]
 8000dec:	f04f 0200 	mov.w	r2, #0
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000df8:	4649      	mov	r1, r9
 8000dfa:	008b      	lsls	r3, r1, #2
 8000dfc:	4641      	mov	r1, r8
 8000dfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000e02:	4641      	mov	r1, r8
 8000e04:	008a      	lsls	r2, r1, #2
 8000e06:	4610      	mov	r0, r2
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4622      	mov	r2, r4
 8000e0e:	189b      	adds	r3, r3, r2
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	460b      	mov	r3, r1
 8000e14:	462a      	mov	r2, r5
 8000e16:	eb42 0303 	adc.w	r3, r2, r3
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	f04f 0200 	mov.w	r2, #0
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000e28:	4649      	mov	r1, r9
 8000e2a:	008b      	lsls	r3, r1, #2
 8000e2c:	4641      	mov	r1, r8
 8000e2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000e32:	4641      	mov	r1, r8
 8000e34:	008a      	lsls	r2, r1, #2
 8000e36:	4610      	mov	r0, r2
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	4622      	mov	r2, r4
 8000e3e:	189b      	adds	r3, r3, r2
 8000e40:	673b      	str	r3, [r7, #112]	@ 0x70
 8000e42:	462b      	mov	r3, r5
 8000e44:	460a      	mov	r2, r1
 8000e46:	eb42 0303 	adc.w	r3, r2, r3
 8000e4a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000e4c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000e50:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000e54:	f7ff fa3c 	bl	80002d0 <__aeabi_ldivmod>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((BMP280_S64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8000e60:	4b66      	ldr	r3, [pc, #408]	@ (8000ffc <bmp280_compensate_P_int64+0x580>)
 8000e62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e66:	b21b      	sxth	r3, r3
 8000e68:	17da      	asrs	r2, r3, #31
 8000e6a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000e6c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000e6e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000e72:	f04f 0000 	mov.w	r0, #0
 8000e76:	f04f 0100 	mov.w	r1, #0
 8000e7a:	0b50      	lsrs	r0, r2, #13
 8000e7c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000e80:	1359      	asrs	r1, r3, #13
 8000e82:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000e86:	462b      	mov	r3, r5
 8000e88:	fb00 f203 	mul.w	r2, r0, r3
 8000e8c:	4623      	mov	r3, r4
 8000e8e:	fb03 f301 	mul.w	r3, r3, r1
 8000e92:	4413      	add	r3, r2
 8000e94:	4622      	mov	r2, r4
 8000e96:	fba2 1200 	umull	r1, r2, r2, r0
 8000e9a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000e9e:	460a      	mov	r2, r1
 8000ea0:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8000ea4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000ea8:	4413      	add	r3, r2
 8000eaa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000eae:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000eb2:	f04f 0000 	mov.w	r0, #0
 8000eb6:	f04f 0100 	mov.w	r1, #0
 8000eba:	0b50      	lsrs	r0, r2, #13
 8000ebc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000ec0:	1359      	asrs	r1, r3, #13
 8000ec2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8000ec6:	462b      	mov	r3, r5
 8000ec8:	fb00 f203 	mul.w	r2, r0, r3
 8000ecc:	4623      	mov	r3, r4
 8000ece:	fb03 f301 	mul.w	r3, r3, r1
 8000ed2:	4413      	add	r3, r2
 8000ed4:	4622      	mov	r2, r4
 8000ed6:	fba2 1200 	umull	r1, r2, r2, r0
 8000eda:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000ede:	460a      	mov	r2, r1
 8000ee0:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8000ee4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000ee8:	4413      	add	r3, r2
 8000eea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000eee:	f04f 0200 	mov.w	r2, #0
 8000ef2:	f04f 0300 	mov.w	r3, #0
 8000ef6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8000efa:	4621      	mov	r1, r4
 8000efc:	0e4a      	lsrs	r2, r1, #25
 8000efe:	4629      	mov	r1, r5
 8000f00:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000f04:	4629      	mov	r1, r5
 8000f06:	164b      	asrs	r3, r1, #25
 8000f08:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((BMP280_S64_t)dig_P8) * p) >> 19;
 8000f0c:	4b3c      	ldr	r3, [pc, #240]	@ (8001000 <bmp280_compensate_P_int64+0x584>)
 8000f0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f12:	b21b      	sxth	r3, r3
 8000f14:	17da      	asrs	r2, r3, #31
 8000f16:	663b      	str	r3, [r7, #96]	@ 0x60
 8000f18:	667a      	str	r2, [r7, #100]	@ 0x64
 8000f1a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000f1e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8000f22:	462a      	mov	r2, r5
 8000f24:	fb02 f203 	mul.w	r2, r2, r3
 8000f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000f2c:	4621      	mov	r1, r4
 8000f2e:	fb01 f303 	mul.w	r3, r1, r3
 8000f32:	4413      	add	r3, r2
 8000f34:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000f38:	4621      	mov	r1, r4
 8000f3a:	fba2 1201 	umull	r1, r2, r2, r1
 8000f3e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8000f42:	460a      	mov	r2, r1
 8000f44:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8000f48:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8000f4c:	4413      	add	r3, r2
 8000f4e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000f52:	f04f 0200 	mov.w	r2, #0
 8000f56:	f04f 0300 	mov.w	r3, #0
 8000f5a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8000f5e:	4621      	mov	r1, r4
 8000f60:	0cca      	lsrs	r2, r1, #19
 8000f62:	4629      	mov	r1, r5
 8000f64:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000f68:	4629      	mov	r1, r5
 8000f6a:	14cb      	asrs	r3, r1, #19
 8000f6c:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((BMP280_S64_t)dig_P7)<<4);
 8000f70:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8000f74:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000f78:	1884      	adds	r4, r0, r2
 8000f7a:	65bc      	str	r4, [r7, #88]	@ 0x58
 8000f7c:	eb41 0303 	adc.w	r3, r1, r3
 8000f80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000f82:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000f86:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8000f8a:	4621      	mov	r1, r4
 8000f8c:	1889      	adds	r1, r1, r2
 8000f8e:	6539      	str	r1, [r7, #80]	@ 0x50
 8000f90:	4629      	mov	r1, r5
 8000f92:	eb43 0101 	adc.w	r1, r3, r1
 8000f96:	6579      	str	r1, [r7, #84]	@ 0x54
 8000f98:	f04f 0000 	mov.w	r0, #0
 8000f9c:	f04f 0100 	mov.w	r1, #0
 8000fa0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8000fa4:	4623      	mov	r3, r4
 8000fa6:	0a18      	lsrs	r0, r3, #8
 8000fa8:	462b      	mov	r3, r5
 8000faa:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000fae:	462b      	mov	r3, r5
 8000fb0:	1219      	asrs	r1, r3, #8
 8000fb2:	4b14      	ldr	r3, [pc, #80]	@ (8001004 <bmp280_compensate_P_int64+0x588>)
 8000fb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb8:	b21b      	sxth	r3, r3
 8000fba:	17da      	asrs	r2, r3, #31
 8000fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000fbe:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000fc0:	f04f 0200 	mov.w	r2, #0
 8000fc4:	f04f 0300 	mov.w	r3, #0
 8000fc8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8000fcc:	464c      	mov	r4, r9
 8000fce:	0123      	lsls	r3, r4, #4
 8000fd0:	4644      	mov	r4, r8
 8000fd2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000fd6:	4644      	mov	r4, r8
 8000fd8:	0122      	lsls	r2, r4, #4
 8000fda:	1884      	adds	r4, r0, r2
 8000fdc:	603c      	str	r4, [r7, #0]
 8000fde:	eb41 0303 	adc.w	r3, r1, r3
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000fe8:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (BMP280_U32_t)p;
 8000fec:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000ffc:	200000b2 	.word	0x200000b2
 8001000:	200000b0 	.word	0x200000b0
 8001004:	200000ae 	.word	0x200000ae

08001008 <dial_pi>:





void dial_pi(){
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0

	if(strncmp(RxBuff, "GET_T", 5)==0) {
 800100e:	2205      	movs	r2, #5
 8001010:	491f      	ldr	r1, [pc, #124]	@ (8001090 <dial_pi+0x88>)
 8001012:	4820      	ldr	r0, [pc, #128]	@ (8001094 <dial_pi+0x8c>)
 8001014:	f004 f820 	bl	8005058 <strncmp>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d114      	bne.n	8001048 <dial_pi+0x40>


		//déclaration des variables contenant la température non compensée
		temp_uncompen= BMP280_get_temperature(); //récupérer la température
 800101e:	f7ff fc71 	bl	8000904 <BMP280_get_temperature>
 8001022:	4603      	mov	r3, r0
 8001024:	4a1c      	ldr	r2, [pc, #112]	@ (8001098 <dial_pi+0x90>)
 8001026:	6013      	str	r3, [r2, #0]

		//déclaration des variables contenant la température  compensée
		BMP280_U32_t temp_comp;


		temp_uncompen= BMP280_get_temperature(); //récupérer la température
 8001028:	f7ff fc6c 	bl	8000904 <BMP280_get_temperature>
 800102c:	4603      	mov	r3, r0
 800102e:	4a1a      	ldr	r2, [pc, #104]	@ (8001098 <dial_pi+0x90>)
 8001030:	6013      	str	r3, [r2, #0]

		temp_comp=bmp280_compensate_T_int32(temp_uncompen); //récupérer la température compensé
 8001032:	4b19      	ldr	r3, [pc, #100]	@ (8001098 <dial_pi+0x90>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fcde 	bl	80009f8 <bmp280_compensate_T_int32>
 800103c:	4603      	mov	r3, r0
 800103e:	607b      	str	r3, [r7, #4]

		printf("%u \r\n",temp_comp);// AFFICHÉ TEMPÉRATURE compensée sur l'usart
 8001040:	6879      	ldr	r1, [r7, #4]
 8001042:	4816      	ldr	r0, [pc, #88]	@ (800109c <dial_pi+0x94>)
 8001044:	f003 feb8 	bl	8004db8 <iprintf>
		//T=+12.50_C 	Température compensée sur 10 cafficher aractères
		//GET_P 	P=102300Pa

	}

	if (strncmp(RxBuff,"GET_P",5)==0){
 8001048:	2205      	movs	r2, #5
 800104a:	4915      	ldr	r1, [pc, #84]	@ (80010a0 <dial_pi+0x98>)
 800104c:	4811      	ldr	r0, [pc, #68]	@ (8001094 <dial_pi+0x8c>)
 800104e:	f004 f803 	bl	8005058 <strncmp>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d113      	bne.n	8001080 <dial_pi+0x78>

		//déclaration des variables contenant la pression non compensée
		pres_uncompen= BMP280_get_pressure(); //récupérer la température
 8001058:	f7ff fc94 	bl	8000984 <BMP280_get_pressure>
 800105c:	4603      	mov	r3, r0
 800105e:	4a11      	ldr	r2, [pc, #68]	@ (80010a4 <dial_pi+0x9c>)
 8001060:	6013      	str	r3, [r2, #0]
		//déclaration des variables contenant la pression  compensée
		BMP280_U32_t pres_comp;



		pres_uncompen=BMP280_get_pressure(); //récupérer la pression non compensée
 8001062:	f7ff fc8f 	bl	8000984 <BMP280_get_pressure>
 8001066:	4603      	mov	r3, r0
 8001068:	4a0e      	ldr	r2, [pc, #56]	@ (80010a4 <dial_pi+0x9c>)
 800106a:	6013      	str	r3, [r2, #0]

		pres_comp=bmp280_compensate_P_int64(pres_uncompen); //compenser la pression
 800106c:	4b0d      	ldr	r3, [pc, #52]	@ (80010a4 <dial_pi+0x9c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fd03 	bl	8000a7c <bmp280_compensate_P_int64>
 8001076:	6038      	str	r0, [r7, #0]



		printf("%u \r\n",pres_comp);
 8001078:	6839      	ldr	r1, [r7, #0]
 800107a:	4808      	ldr	r0, [pc, #32]	@ (800109c <dial_pi+0x94>)
 800107c:	f003 fe9c 	bl	8004db8 <iprintf>

	}

	if (strcmp(RxBuff,'GET_P')==0){
 8001080:	4909      	ldr	r1, [pc, #36]	@ (80010a8 <dial_pi+0xa0>)
 8001082:	4804      	ldr	r0, [pc, #16]	@ (8001094 <dial_pi+0x8c>)
 8001084:	f7ff f8c4 	bl	8000210 <strcmp>

	}



}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	08005c54 	.word	0x08005c54
 8001094:	2000008c 	.word	0x2000008c
 8001098:	20000094 	.word	0x20000094
 800109c:	08005c5c 	.word	0x08005c5c
 80010a0:	08005c64 	.word	0x08005c64
 80010a4:	20000098 	.word	0x20000098
 80010a8:	45545f50 	.word	0x45545f50

080010ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

	dial_pi();
 80010b4:	f7ff ffa8 	bl	8001008 <dial_pi>
	HAL_UART_Receive_IT(&huart1, RxBuff, RX_BUFF_SIZE);
 80010b8:	2207      	movs	r2, #7
 80010ba:	4904      	ldr	r1, [pc, #16]	@ (80010cc <HAL_UART_RxCpltCallback+0x20>)
 80010bc:	4804      	ldr	r0, [pc, #16]	@ (80010d0 <HAL_UART_RxCpltCallback+0x24>)
 80010be:	f002 fe3e 	bl	8003d3e <HAL_UART_Receive_IT>


}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	2000008c 	.word	0x2000008c
 80010d0:	2000010c 	.word	0x2000010c

080010d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d8:	f000 fbb0 	bl	800183c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010dc:	f000 f81a 	bl	8001114 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e0:	f000 f906 	bl	80012f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010e4:	f000 f8da 	bl	800129c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010e8:	f000 f880 	bl	80011ec <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80010ec:	f000 f8ac 	bl	8001248 <MX_USART1_UART_Init>
	printf("\n\ndébut (dans le main)\r\n");


	*/

	BMP280_checkID();
 80010f0:	f7ff fab6 	bl	8000660 <BMP280_checkID>
	BMP280_config();
 80010f4:	f7ff faf4 	bl	80006e0 <BMP280_config>


	BMP280_calib(); //récupère données étallonnage
 80010f8:	f7ff fb46 	bl	8000788 <BMP280_calib>
	}
	//fin partie CAN *******************************************
	 */


	HAL_UART_Receive_IT(&huart1, RxBuff,RX_BUFF_SIZE);
 80010fc:	2207      	movs	r2, #7
 80010fe:	4903      	ldr	r1, [pc, #12]	@ (800110c <main+0x38>)
 8001100:	4803      	ldr	r0, [pc, #12]	@ (8001110 <main+0x3c>)
 8001102:	f002 fe1c 	bl	8003d3e <HAL_UART_Receive_IT>
	//%%printf("fin avant while*********\r\n");
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001106:	bf00      	nop
 8001108:	e7fd      	b.n	8001106 <main+0x32>
 800110a:	bf00      	nop
 800110c:	2000008c 	.word	0x2000008c
 8001110:	2000010c 	.word	0x2000010c

08001114 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b094      	sub	sp, #80	@ 0x50
 8001118:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111a:	f107 031c 	add.w	r3, r7, #28
 800111e:	2234      	movs	r2, #52	@ 0x34
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f003 ff90 	bl	8005048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001128:	f107 0308 	add.w	r3, r7, #8
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001138:	2300      	movs	r3, #0
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	4b29      	ldr	r3, [pc, #164]	@ (80011e4 <SystemClock_Config+0xd0>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001140:	4a28      	ldr	r2, [pc, #160]	@ (80011e4 <SystemClock_Config+0xd0>)
 8001142:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001146:	6413      	str	r3, [r2, #64]	@ 0x40
 8001148:	4b26      	ldr	r3, [pc, #152]	@ (80011e4 <SystemClock_Config+0xd0>)
 800114a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001154:	2300      	movs	r3, #0
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	4b23      	ldr	r3, [pc, #140]	@ (80011e8 <SystemClock_Config+0xd4>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001160:	4a21      	ldr	r2, [pc, #132]	@ (80011e8 <SystemClock_Config+0xd4>)
 8001162:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	4b1f      	ldr	r3, [pc, #124]	@ (80011e8 <SystemClock_Config+0xd4>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001170:	603b      	str	r3, [r7, #0]
 8001172:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001174:	2302      	movs	r3, #2
 8001176:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001178:	2301      	movs	r3, #1
 800117a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800117c:	2310      	movs	r3, #16
 800117e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001180:	2302      	movs	r3, #2
 8001182:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001184:	2300      	movs	r3, #0
 8001186:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001188:	2308      	movs	r3, #8
 800118a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 800118c:	2354      	movs	r3, #84	@ 0x54
 800118e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001190:	2302      	movs	r3, #2
 8001192:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001194:	2302      	movs	r3, #2
 8001196:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001198:	2302      	movs	r3, #2
 800119a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119c:	f107 031c 	add.w	r3, r7, #28
 80011a0:	4618      	mov	r0, r3
 80011a2:	f002 fa53 	bl	800364c <HAL_RCC_OscConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80011ac:	f000 f920 	bl	80013f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b0:	230f      	movs	r3, #15
 80011b2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b4:	2302      	movs	r3, #2
 80011b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	2102      	movs	r1, #2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f001 fef3 	bl	8002fb8 <HAL_RCC_ClockConfig>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80011d8:	f000 f90a 	bl	80013f0 <Error_Handler>
  }
}
 80011dc:	bf00      	nop
 80011de:	3750      	adds	r7, #80	@ 0x50
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40007000 	.word	0x40007000

080011ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011f0:	4b12      	ldr	r3, [pc, #72]	@ (800123c <MX_I2C1_Init+0x50>)
 80011f2:	4a13      	ldr	r2, [pc, #76]	@ (8001240 <MX_I2C1_Init+0x54>)
 80011f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011f6:	4b11      	ldr	r3, [pc, #68]	@ (800123c <MX_I2C1_Init+0x50>)
 80011f8:	4a12      	ldr	r2, [pc, #72]	@ (8001244 <MX_I2C1_Init+0x58>)
 80011fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	@ (800123c <MX_I2C1_Init+0x50>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001202:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <MX_I2C1_Init+0x50>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001208:	4b0c      	ldr	r3, [pc, #48]	@ (800123c <MX_I2C1_Init+0x50>)
 800120a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800120e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001210:	4b0a      	ldr	r3, [pc, #40]	@ (800123c <MX_I2C1_Init+0x50>)
 8001212:	2200      	movs	r2, #0
 8001214:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001216:	4b09      	ldr	r3, [pc, #36]	@ (800123c <MX_I2C1_Init+0x50>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800121c:	4b07      	ldr	r3, [pc, #28]	@ (800123c <MX_I2C1_Init+0x50>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001222:	4b06      	ldr	r3, [pc, #24]	@ (800123c <MX_I2C1_Init+0x50>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001228:	4804      	ldr	r0, [pc, #16]	@ (800123c <MX_I2C1_Init+0x50>)
 800122a:	f000 fecb 	bl	8001fc4 <HAL_I2C_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001234:	f000 f8dc 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200000b8 	.word	0x200000b8
 8001240:	40005400 	.word	0x40005400
 8001244:	000186a0 	.word	0x000186a0

08001248 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800124c:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <MX_USART1_UART_Init+0x4c>)
 800124e:	4a12      	ldr	r2, [pc, #72]	@ (8001298 <MX_USART1_UART_Init+0x50>)
 8001250:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001252:	4b10      	ldr	r3, [pc, #64]	@ (8001294 <MX_USART1_UART_Init+0x4c>)
 8001254:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001258:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800125a:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <MX_USART1_UART_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001260:	4b0c      	ldr	r3, [pc, #48]	@ (8001294 <MX_USART1_UART_Init+0x4c>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001266:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <MX_USART1_UART_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800126c:	4b09      	ldr	r3, [pc, #36]	@ (8001294 <MX_USART1_UART_Init+0x4c>)
 800126e:	220c      	movs	r2, #12
 8001270:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001272:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <MX_USART1_UART_Init+0x4c>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001278:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <MX_USART1_UART_Init+0x4c>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800127e:	4805      	ldr	r0, [pc, #20]	@ (8001294 <MX_USART1_UART_Init+0x4c>)
 8001280:	f002 fc82 	bl	8003b88 <HAL_UART_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800128a:	f000 f8b1 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	2000010c 	.word	0x2000010c
 8001298:	40011000 	.word	0x40011000

0800129c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012a0:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012a2:	4a12      	ldr	r2, [pc, #72]	@ (80012ec <MX_USART2_UART_Init+0x50>)
 80012a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012a6:	4b10      	ldr	r3, [pc, #64]	@ (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ba:	4b0b      	ldr	r3, [pc, #44]	@ (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012c0:	4b09      	ldr	r3, [pc, #36]	@ (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012c2:	220c      	movs	r2, #12
 80012c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c6:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012cc:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012d2:	4805      	ldr	r0, [pc, #20]	@ (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012d4:	f002 fc58 	bl	8003b88 <HAL_UART_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012de:	f000 f887 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000154 	.word	0x20000154
 80012ec:	40004400 	.word	0x40004400

080012f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	@ 0x28
 80012f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
 8001304:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	4b36      	ldr	r3, [pc, #216]	@ (80013e4 <MX_GPIO_Init+0xf4>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	4a35      	ldr	r2, [pc, #212]	@ (80013e4 <MX_GPIO_Init+0xf4>)
 8001310:	f043 0304 	orr.w	r3, r3, #4
 8001314:	6313      	str	r3, [r2, #48]	@ 0x30
 8001316:	4b33      	ldr	r3, [pc, #204]	@ (80013e4 <MX_GPIO_Init+0xf4>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	f003 0304 	and.w	r3, r3, #4
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	4b2f      	ldr	r3, [pc, #188]	@ (80013e4 <MX_GPIO_Init+0xf4>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	4a2e      	ldr	r2, [pc, #184]	@ (80013e4 <MX_GPIO_Init+0xf4>)
 800132c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001330:	6313      	str	r3, [r2, #48]	@ 0x30
 8001332:	4b2c      	ldr	r3, [pc, #176]	@ (80013e4 <MX_GPIO_Init+0xf4>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	4b28      	ldr	r3, [pc, #160]	@ (80013e4 <MX_GPIO_Init+0xf4>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	4a27      	ldr	r2, [pc, #156]	@ (80013e4 <MX_GPIO_Init+0xf4>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6313      	str	r3, [r2, #48]	@ 0x30
 800134e:	4b25      	ldr	r3, [pc, #148]	@ (80013e4 <MX_GPIO_Init+0xf4>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	4b21      	ldr	r3, [pc, #132]	@ (80013e4 <MX_GPIO_Init+0xf4>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	4a20      	ldr	r2, [pc, #128]	@ (80013e4 <MX_GPIO_Init+0xf4>)
 8001364:	f043 0302 	orr.w	r3, r3, #2
 8001368:	6313      	str	r3, [r2, #48]	@ 0x30
 800136a:	4b1e      	ldr	r3, [pc, #120]	@ (80013e4 <MX_GPIO_Init+0xf4>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	2120      	movs	r1, #32
 800137a:	481b      	ldr	r0, [pc, #108]	@ (80013e8 <MX_GPIO_Init+0xf8>)
 800137c:	f000 fe08 	bl	8001f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001380:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001384:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001386:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800138a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	4619      	mov	r1, r3
 8001396:	4815      	ldr	r0, [pc, #84]	@ (80013ec <MX_GPIO_Init+0xfc>)
 8001398:	f000 fc66 	bl	8001c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800139c:	2320      	movs	r3, #32
 800139e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a0:	2301      	movs	r3, #1
 80013a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a8:	2300      	movs	r3, #0
 80013aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	4619      	mov	r1, r3
 80013b2:	480d      	ldr	r0, [pc, #52]	@ (80013e8 <MX_GPIO_Init+0xf8>)
 80013b4:	f000 fc58 	bl	8001c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : RASPBERRY_USART3_TX_Pin RASPBERRY_USART3_RX_Pin */
  GPIO_InitStruct.Pin = RASPBERRY_USART3_TX_Pin|RASPBERRY_USART3_RX_Pin;
 80013b8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80013bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c6:	2303      	movs	r3, #3
 80013c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013ca:	2307      	movs	r3, #7
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	@ (80013ec <MX_GPIO_Init+0xfc>)
 80013d6:	f000 fc47 	bl	8001c68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013da:	bf00      	nop
 80013dc:	3728      	adds	r7, #40	@ 0x28
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40020000 	.word	0x40020000
 80013ec:	40020800 	.word	0x40020800

080013f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f4:	b672      	cpsid	i
}
 80013f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <Error_Handler+0x8>

080013fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	4b10      	ldr	r3, [pc, #64]	@ (8001448 <HAL_MspInit+0x4c>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800140a:	4a0f      	ldr	r2, [pc, #60]	@ (8001448 <HAL_MspInit+0x4c>)
 800140c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001410:	6453      	str	r3, [r2, #68]	@ 0x44
 8001412:	4b0d      	ldr	r3, [pc, #52]	@ (8001448 <HAL_MspInit+0x4c>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001416:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	603b      	str	r3, [r7, #0]
 8001422:	4b09      	ldr	r3, [pc, #36]	@ (8001448 <HAL_MspInit+0x4c>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001426:	4a08      	ldr	r2, [pc, #32]	@ (8001448 <HAL_MspInit+0x4c>)
 8001428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800142c:	6413      	str	r3, [r2, #64]	@ 0x40
 800142e:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <HAL_MspInit+0x4c>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800143a:	2007      	movs	r0, #7
 800143c:	f000 fb40 	bl	8001ac0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40023800 	.word	0x40023800

0800144c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	@ 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a19      	ldr	r2, [pc, #100]	@ (80014d0 <HAL_I2C_MspInit+0x84>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d12c      	bne.n	80014c8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	4b18      	ldr	r3, [pc, #96]	@ (80014d4 <HAL_I2C_MspInit+0x88>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	4a17      	ldr	r2, [pc, #92]	@ (80014d4 <HAL_I2C_MspInit+0x88>)
 8001478:	f043 0302 	orr.w	r3, r3, #2
 800147c:	6313      	str	r3, [r2, #48]	@ 0x30
 800147e:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <HAL_I2C_MspInit+0x88>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800148a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800148e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001490:	2312      	movs	r3, #18
 8001492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001498:	2303      	movs	r3, #3
 800149a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800149c:	2304      	movs	r3, #4
 800149e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	4619      	mov	r1, r3
 80014a6:	480c      	ldr	r0, [pc, #48]	@ (80014d8 <HAL_I2C_MspInit+0x8c>)
 80014a8:	f000 fbde 	bl	8001c68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014ac:	2300      	movs	r3, #0
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	4b08      	ldr	r3, [pc, #32]	@ (80014d4 <HAL_I2C_MspInit+0x88>)
 80014b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b4:	4a07      	ldr	r2, [pc, #28]	@ (80014d4 <HAL_I2C_MspInit+0x88>)
 80014b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80014bc:	4b05      	ldr	r3, [pc, #20]	@ (80014d4 <HAL_I2C_MspInit+0x88>)
 80014be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80014c8:	bf00      	nop
 80014ca:	3728      	adds	r7, #40	@ 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40005400 	.word	0x40005400
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020400 	.word	0x40020400

080014dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08c      	sub	sp, #48	@ 0x30
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a36      	ldr	r2, [pc, #216]	@ (80015d4 <HAL_UART_MspInit+0xf8>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d135      	bne.n	800156a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	61bb      	str	r3, [r7, #24]
 8001502:	4b35      	ldr	r3, [pc, #212]	@ (80015d8 <HAL_UART_MspInit+0xfc>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001506:	4a34      	ldr	r2, [pc, #208]	@ (80015d8 <HAL_UART_MspInit+0xfc>)
 8001508:	f043 0310 	orr.w	r3, r3, #16
 800150c:	6453      	str	r3, [r2, #68]	@ 0x44
 800150e:	4b32      	ldr	r3, [pc, #200]	@ (80015d8 <HAL_UART_MspInit+0xfc>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001512:	f003 0310 	and.w	r3, r3, #16
 8001516:	61bb      	str	r3, [r7, #24]
 8001518:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	4b2e      	ldr	r3, [pc, #184]	@ (80015d8 <HAL_UART_MspInit+0xfc>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	4a2d      	ldr	r2, [pc, #180]	@ (80015d8 <HAL_UART_MspInit+0xfc>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6313      	str	r3, [r2, #48]	@ 0x30
 800152a:	4b2b      	ldr	r3, [pc, #172]	@ (80015d8 <HAL_UART_MspInit+0xfc>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RASPBERRY_USART1_TX_Pin|RASPBERRY_USART1_RX_Pin;
 8001536:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800153a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153c:	2302      	movs	r3, #2
 800153e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001544:	2303      	movs	r3, #3
 8001546:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001548:	2307      	movs	r3, #7
 800154a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	4619      	mov	r1, r3
 8001552:	4822      	ldr	r0, [pc, #136]	@ (80015dc <HAL_UART_MspInit+0x100>)
 8001554:	f000 fb88 	bl	8001c68 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001558:	2200      	movs	r2, #0
 800155a:	2100      	movs	r1, #0
 800155c:	2025      	movs	r0, #37	@ 0x25
 800155e:	f000 faba 	bl	8001ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001562:	2025      	movs	r0, #37	@ 0x25
 8001564:	f000 fad3 	bl	8001b0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001568:	e030      	b.n	80015cc <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a1c      	ldr	r2, [pc, #112]	@ (80015e0 <HAL_UART_MspInit+0x104>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d12b      	bne.n	80015cc <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001574:	2300      	movs	r3, #0
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	4b17      	ldr	r3, [pc, #92]	@ (80015d8 <HAL_UART_MspInit+0xfc>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157c:	4a16      	ldr	r2, [pc, #88]	@ (80015d8 <HAL_UART_MspInit+0xfc>)
 800157e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001582:	6413      	str	r3, [r2, #64]	@ 0x40
 8001584:	4b14      	ldr	r3, [pc, #80]	@ (80015d8 <HAL_UART_MspInit+0xfc>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	4b10      	ldr	r3, [pc, #64]	@ (80015d8 <HAL_UART_MspInit+0xfc>)
 8001596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001598:	4a0f      	ldr	r2, [pc, #60]	@ (80015d8 <HAL_UART_MspInit+0xfc>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a0:	4b0d      	ldr	r3, [pc, #52]	@ (80015d8 <HAL_UART_MspInit+0xfc>)
 80015a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = nucleo_USART2_TX_Pin|nucleo_USART2_RX_Pin;
 80015ac:	230c      	movs	r3, #12
 80015ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b8:	2303      	movs	r3, #3
 80015ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015bc:	2307      	movs	r3, #7
 80015be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c0:	f107 031c 	add.w	r3, r7, #28
 80015c4:	4619      	mov	r1, r3
 80015c6:	4805      	ldr	r0, [pc, #20]	@ (80015dc <HAL_UART_MspInit+0x100>)
 80015c8:	f000 fb4e 	bl	8001c68 <HAL_GPIO_Init>
}
 80015cc:	bf00      	nop
 80015ce:	3730      	adds	r7, #48	@ 0x30
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40011000 	.word	0x40011000
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020000 	.word	0x40020000
 80015e0:	40004400 	.word	0x40004400

080015e4 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  //HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);//trnasmission nucleo
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF); //transmission pi zero
 80015ec:	1d39      	adds	r1, r7, #4
 80015ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015f2:	2201      	movs	r2, #1
 80015f4:	4803      	ldr	r0, [pc, #12]	@ (8001604 <__io_putchar+0x20>)
 80015f6:	f002 fb17 	bl	8003c28 <HAL_UART_Transmit>
  return ch;
 80015fa:	687b      	ldr	r3, [r7, #4]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	2000010c 	.word	0x2000010c

08001608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <NMI_Handler+0x4>

08001610 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <HardFault_Handler+0x4>

08001618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <MemManage_Handler+0x4>

08001620 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <BusFault_Handler+0x4>

08001628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <UsageFault_Handler+0x4>

08001630 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800165e:	f000 f93f 	bl	80018e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800166c:	4802      	ldr	r0, [pc, #8]	@ (8001678 <USART1_IRQHandler+0x10>)
 800166e:	f002 fb8b 	bl	8003d88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	2000010c 	.word	0x2000010c

0800167c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	e00a      	b.n	80016a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800168e:	f3af 8000 	nop.w
 8001692:	4601      	mov	r1, r0
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	60ba      	str	r2, [r7, #8]
 800169a:	b2ca      	uxtb	r2, r1
 800169c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	3301      	adds	r3, #1
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	dbf0      	blt.n	800168e <_read+0x12>
  }

  return len;
 80016ac:	687b      	ldr	r3, [r7, #4]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	60f8      	str	r0, [r7, #12]
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	e009      	b.n	80016dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	60ba      	str	r2, [r7, #8]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff87 	bl	80015e4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	3301      	adds	r3, #1
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	dbf1      	blt.n	80016c8 <_write+0x12>
  }
  return len;
 80016e4:	687b      	ldr	r3, [r7, #4]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <_close>:

int _close(int file)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001716:	605a      	str	r2, [r3, #4]
  return 0;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <_isatty>:

int _isatty(int file)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800172e:	2301      	movs	r3, #1
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001760:	4a14      	ldr	r2, [pc, #80]	@ (80017b4 <_sbrk+0x5c>)
 8001762:	4b15      	ldr	r3, [pc, #84]	@ (80017b8 <_sbrk+0x60>)
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800176c:	4b13      	ldr	r3, [pc, #76]	@ (80017bc <_sbrk+0x64>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d102      	bne.n	800177a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001774:	4b11      	ldr	r3, [pc, #68]	@ (80017bc <_sbrk+0x64>)
 8001776:	4a12      	ldr	r2, [pc, #72]	@ (80017c0 <_sbrk+0x68>)
 8001778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800177a:	4b10      	ldr	r3, [pc, #64]	@ (80017bc <_sbrk+0x64>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	429a      	cmp	r2, r3
 8001786:	d207      	bcs.n	8001798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001788:	f003 fcbe 	bl	8005108 <__errno>
 800178c:	4603      	mov	r3, r0
 800178e:	220c      	movs	r2, #12
 8001790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001792:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001796:	e009      	b.n	80017ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001798:	4b08      	ldr	r3, [pc, #32]	@ (80017bc <_sbrk+0x64>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800179e:	4b07      	ldr	r3, [pc, #28]	@ (80017bc <_sbrk+0x64>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	4a05      	ldr	r2, [pc, #20]	@ (80017bc <_sbrk+0x64>)
 80017a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017aa:	68fb      	ldr	r3, [r7, #12]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20020000 	.word	0x20020000
 80017b8:	00000400 	.word	0x00000400
 80017bc:	2000019c 	.word	0x2000019c
 80017c0:	200002f0 	.word	0x200002f0

080017c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c8:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <SystemInit+0x20>)
 80017ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017ce:	4a05      	ldr	r2, [pc, #20]	@ (80017e4 <SystemInit+0x20>)
 80017d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001820 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017ec:	f7ff ffea 	bl	80017c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017f0:	480c      	ldr	r0, [pc, #48]	@ (8001824 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017f2:	490d      	ldr	r1, [pc, #52]	@ (8001828 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017f4:	4a0d      	ldr	r2, [pc, #52]	@ (800182c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f8:	e002      	b.n	8001800 <LoopCopyDataInit>

080017fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fe:	3304      	adds	r3, #4

08001800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001804:	d3f9      	bcc.n	80017fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001806:	4a0a      	ldr	r2, [pc, #40]	@ (8001830 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001808:	4c0a      	ldr	r4, [pc, #40]	@ (8001834 <LoopFillZerobss+0x22>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800180c:	e001      	b.n	8001812 <LoopFillZerobss>

0800180e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001810:	3204      	adds	r2, #4

08001812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001814:	d3fb      	bcc.n	800180e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001816:	f003 fc7d 	bl	8005114 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800181a:	f7ff fc5b 	bl	80010d4 <main>
  bx  lr    
 800181e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001820:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001828:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800182c:	08005ccc 	.word	0x08005ccc
  ldr r2, =_sbss
 8001830:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001834:	200002f0 	.word	0x200002f0

08001838 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001838:	e7fe      	b.n	8001838 <ADC_IRQHandler>
	...

0800183c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001840:	4b0e      	ldr	r3, [pc, #56]	@ (800187c <HAL_Init+0x40>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0d      	ldr	r2, [pc, #52]	@ (800187c <HAL_Init+0x40>)
 8001846:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800184a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800184c:	4b0b      	ldr	r3, [pc, #44]	@ (800187c <HAL_Init+0x40>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0a      	ldr	r2, [pc, #40]	@ (800187c <HAL_Init+0x40>)
 8001852:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001856:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001858:	4b08      	ldr	r3, [pc, #32]	@ (800187c <HAL_Init+0x40>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a07      	ldr	r2, [pc, #28]	@ (800187c <HAL_Init+0x40>)
 800185e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001862:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001864:	2003      	movs	r0, #3
 8001866:	f000 f92b 	bl	8001ac0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800186a:	2000      	movs	r0, #0
 800186c:	f000 f808 	bl	8001880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001870:	f7ff fdc4 	bl	80013fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023c00 	.word	0x40023c00

08001880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001888:	4b12      	ldr	r3, [pc, #72]	@ (80018d4 <HAL_InitTick+0x54>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b12      	ldr	r3, [pc, #72]	@ (80018d8 <HAL_InitTick+0x58>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	4619      	mov	r1, r3
 8001892:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001896:	fbb3 f3f1 	udiv	r3, r3, r1
 800189a:	fbb2 f3f3 	udiv	r3, r2, r3
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 f943 	bl	8001b2a <HAL_SYSTICK_Config>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e00e      	b.n	80018cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b0f      	cmp	r3, #15
 80018b2:	d80a      	bhi.n	80018ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b4:	2200      	movs	r2, #0
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018bc:	f000 f90b 	bl	8001ad6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c0:	4a06      	ldr	r2, [pc, #24]	@ (80018dc <HAL_InitTick+0x5c>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	e000      	b.n	80018cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000004 	.word	0x20000004
 80018d8:	2000000c 	.word	0x2000000c
 80018dc:	20000008 	.word	0x20000008

080018e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e4:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <HAL_IncTick+0x20>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <HAL_IncTick+0x24>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	4a04      	ldr	r2, [pc, #16]	@ (8001904 <HAL_IncTick+0x24>)
 80018f2:	6013      	str	r3, [r2, #0]
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	2000000c 	.word	0x2000000c
 8001904:	200001a0 	.word	0x200001a0

08001908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return uwTick;
 800190c:	4b03      	ldr	r3, [pc, #12]	@ (800191c <HAL_GetTick+0x14>)
 800190e:	681b      	ldr	r3, [r3, #0]
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	200001a0 	.word	0x200001a0

08001920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001930:	4b0c      	ldr	r3, [pc, #48]	@ (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800193c:	4013      	ands	r3, r2
 800193e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001948:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800194c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001952:	4a04      	ldr	r2, [pc, #16]	@ (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	60d3      	str	r3, [r2, #12]
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800196c:	4b04      	ldr	r3, [pc, #16]	@ (8001980 <__NVIC_GetPriorityGrouping+0x18>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	0a1b      	lsrs	r3, r3, #8
 8001972:	f003 0307 	and.w	r3, r3, #7
}
 8001976:	4618      	mov	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	2b00      	cmp	r3, #0
 8001994:	db0b      	blt.n	80019ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	f003 021f 	and.w	r2, r3, #31
 800199c:	4907      	ldr	r1, [pc, #28]	@ (80019bc <__NVIC_EnableIRQ+0x38>)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	095b      	lsrs	r3, r3, #5
 80019a4:	2001      	movs	r0, #1
 80019a6:	fa00 f202 	lsl.w	r2, r0, r2
 80019aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	e000e100 	.word	0xe000e100

080019c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	6039      	str	r1, [r7, #0]
 80019ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	db0a      	blt.n	80019ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	490c      	ldr	r1, [pc, #48]	@ (8001a0c <__NVIC_SetPriority+0x4c>)
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	0112      	lsls	r2, r2, #4
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	440b      	add	r3, r1
 80019e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e8:	e00a      	b.n	8001a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	4908      	ldr	r1, [pc, #32]	@ (8001a10 <__NVIC_SetPriority+0x50>)
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	3b04      	subs	r3, #4
 80019f8:	0112      	lsls	r2, r2, #4
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	440b      	add	r3, r1
 80019fe:	761a      	strb	r2, [r3, #24]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000e100 	.word	0xe000e100
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b089      	sub	sp, #36	@ 0x24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f1c3 0307 	rsb	r3, r3, #7
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	bf28      	it	cs
 8001a32:	2304      	movcs	r3, #4
 8001a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	2b06      	cmp	r3, #6
 8001a3c:	d902      	bls.n	8001a44 <NVIC_EncodePriority+0x30>
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3b03      	subs	r3, #3
 8001a42:	e000      	b.n	8001a46 <NVIC_EncodePriority+0x32>
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43da      	mvns	r2, r3
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	401a      	ands	r2, r3
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a5c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	fa01 f303 	lsl.w	r3, r1, r3
 8001a66:	43d9      	mvns	r1, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	4313      	orrs	r3, r2
         );
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3724      	adds	r7, #36	@ 0x24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
	...

08001a7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a8c:	d301      	bcc.n	8001a92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e00f      	b.n	8001ab2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a92:	4a0a      	ldr	r2, [pc, #40]	@ (8001abc <SysTick_Config+0x40>)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a9a:	210f      	movs	r1, #15
 8001a9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001aa0:	f7ff ff8e 	bl	80019c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa4:	4b05      	ldr	r3, [pc, #20]	@ (8001abc <SysTick_Config+0x40>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aaa:	4b04      	ldr	r3, [pc, #16]	@ (8001abc <SysTick_Config+0x40>)
 8001aac:	2207      	movs	r2, #7
 8001aae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	e000e010 	.word	0xe000e010

08001ac0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ff29 	bl	8001920 <__NVIC_SetPriorityGrouping>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b086      	sub	sp, #24
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	4603      	mov	r3, r0
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	607a      	str	r2, [r7, #4]
 8001ae2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae8:	f7ff ff3e 	bl	8001968 <__NVIC_GetPriorityGrouping>
 8001aec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	68b9      	ldr	r1, [r7, #8]
 8001af2:	6978      	ldr	r0, [r7, #20]
 8001af4:	f7ff ff8e 	bl	8001a14 <NVIC_EncodePriority>
 8001af8:	4602      	mov	r2, r0
 8001afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afe:	4611      	mov	r1, r2
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ff5d 	bl	80019c0 <__NVIC_SetPriority>
}
 8001b06:	bf00      	nop
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	4603      	mov	r3, r0
 8001b16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff31 	bl	8001984 <__NVIC_EnableIRQ>
}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff ffa2 	bl	8001a7c <SysTick_Config>
 8001b38:	4603      	mov	r3, r0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b084      	sub	sp, #16
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b4e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b50:	f7ff feda 	bl	8001908 <HAL_GetTick>
 8001b54:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d008      	beq.n	8001b74 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2280      	movs	r2, #128	@ 0x80
 8001b66:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e052      	b.n	8001c1a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0216 	bic.w	r2, r2, #22
 8001b82:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	695a      	ldr	r2, [r3, #20]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b92:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d103      	bne.n	8001ba4 <HAL_DMA_Abort+0x62>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d007      	beq.n	8001bb4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 0208 	bic.w	r2, r2, #8
 8001bb2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0201 	bic.w	r2, r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bc4:	e013      	b.n	8001bee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bc6:	f7ff fe9f 	bl	8001908 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b05      	cmp	r3, #5
 8001bd2:	d90c      	bls.n	8001bee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2203      	movs	r2, #3
 8001bde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e015      	b.n	8001c1a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1e4      	bne.n	8001bc6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c00:	223f      	movs	r2, #63	@ 0x3f
 8001c02:	409a      	lsls	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d004      	beq.n	8001c40 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2280      	movs	r2, #128	@ 0x80
 8001c3a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e00c      	b.n	8001c5a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2205      	movs	r2, #5
 8001c44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0201 	bic.w	r2, r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	@ 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
 8001c82:	e165      	b.n	8001f50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c84:	2201      	movs	r2, #1
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	4013      	ands	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	f040 8154 	bne.w	8001f4a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d005      	beq.n	8001cba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d130      	bne.n	8001d1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	091b      	lsrs	r3, r3, #4
 8001d06:	f003 0201 	and.w	r2, r3, #1
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	2b03      	cmp	r3, #3
 8001d26:	d017      	beq.n	8001d58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	2203      	movs	r2, #3
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d123      	bne.n	8001dac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	08da      	lsrs	r2, r3, #3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3208      	adds	r2, #8
 8001d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	220f      	movs	r2, #15
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	691a      	ldr	r2, [r3, #16]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	08da      	lsrs	r2, r3, #3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3208      	adds	r2, #8
 8001da6:	69b9      	ldr	r1, [r7, #24]
 8001da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	2203      	movs	r2, #3
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 0203 	and.w	r2, r3, #3
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 80ae 	beq.w	8001f4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	4b5d      	ldr	r3, [pc, #372]	@ (8001f68 <HAL_GPIO_Init+0x300>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df6:	4a5c      	ldr	r2, [pc, #368]	@ (8001f68 <HAL_GPIO_Init+0x300>)
 8001df8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dfe:	4b5a      	ldr	r3, [pc, #360]	@ (8001f68 <HAL_GPIO_Init+0x300>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e0a:	4a58      	ldr	r2, [pc, #352]	@ (8001f6c <HAL_GPIO_Init+0x304>)
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	089b      	lsrs	r3, r3, #2
 8001e10:	3302      	adds	r3, #2
 8001e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	220f      	movs	r2, #15
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a4f      	ldr	r2, [pc, #316]	@ (8001f70 <HAL_GPIO_Init+0x308>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d025      	beq.n	8001e82 <HAL_GPIO_Init+0x21a>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a4e      	ldr	r2, [pc, #312]	@ (8001f74 <HAL_GPIO_Init+0x30c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d01f      	beq.n	8001e7e <HAL_GPIO_Init+0x216>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a4d      	ldr	r2, [pc, #308]	@ (8001f78 <HAL_GPIO_Init+0x310>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d019      	beq.n	8001e7a <HAL_GPIO_Init+0x212>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a4c      	ldr	r2, [pc, #304]	@ (8001f7c <HAL_GPIO_Init+0x314>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d013      	beq.n	8001e76 <HAL_GPIO_Init+0x20e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a4b      	ldr	r2, [pc, #300]	@ (8001f80 <HAL_GPIO_Init+0x318>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d00d      	beq.n	8001e72 <HAL_GPIO_Init+0x20a>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a4a      	ldr	r2, [pc, #296]	@ (8001f84 <HAL_GPIO_Init+0x31c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d007      	beq.n	8001e6e <HAL_GPIO_Init+0x206>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a49      	ldr	r2, [pc, #292]	@ (8001f88 <HAL_GPIO_Init+0x320>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d101      	bne.n	8001e6a <HAL_GPIO_Init+0x202>
 8001e66:	2306      	movs	r3, #6
 8001e68:	e00c      	b.n	8001e84 <HAL_GPIO_Init+0x21c>
 8001e6a:	2307      	movs	r3, #7
 8001e6c:	e00a      	b.n	8001e84 <HAL_GPIO_Init+0x21c>
 8001e6e:	2305      	movs	r3, #5
 8001e70:	e008      	b.n	8001e84 <HAL_GPIO_Init+0x21c>
 8001e72:	2304      	movs	r3, #4
 8001e74:	e006      	b.n	8001e84 <HAL_GPIO_Init+0x21c>
 8001e76:	2303      	movs	r3, #3
 8001e78:	e004      	b.n	8001e84 <HAL_GPIO_Init+0x21c>
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e002      	b.n	8001e84 <HAL_GPIO_Init+0x21c>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <HAL_GPIO_Init+0x21c>
 8001e82:	2300      	movs	r3, #0
 8001e84:	69fa      	ldr	r2, [r7, #28]
 8001e86:	f002 0203 	and.w	r2, r2, #3
 8001e8a:	0092      	lsls	r2, r2, #2
 8001e8c:	4093      	lsls	r3, r2
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e94:	4935      	ldr	r1, [pc, #212]	@ (8001f6c <HAL_GPIO_Init+0x304>)
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	089b      	lsrs	r3, r3, #2
 8001e9a:	3302      	adds	r3, #2
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ea2:	4b3a      	ldr	r3, [pc, #232]	@ (8001f8c <HAL_GPIO_Init+0x324>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ec6:	4a31      	ldr	r2, [pc, #196]	@ (8001f8c <HAL_GPIO_Init+0x324>)
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ecc:	4b2f      	ldr	r3, [pc, #188]	@ (8001f8c <HAL_GPIO_Init+0x324>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ef0:	4a26      	ldr	r2, [pc, #152]	@ (8001f8c <HAL_GPIO_Init+0x324>)
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ef6:	4b25      	ldr	r3, [pc, #148]	@ (8001f8c <HAL_GPIO_Init+0x324>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	43db      	mvns	r3, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4013      	ands	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f1a:	4a1c      	ldr	r2, [pc, #112]	@ (8001f8c <HAL_GPIO_Init+0x324>)
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f20:	4b1a      	ldr	r3, [pc, #104]	@ (8001f8c <HAL_GPIO_Init+0x324>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f44:	4a11      	ldr	r2, [pc, #68]	@ (8001f8c <HAL_GPIO_Init+0x324>)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	61fb      	str	r3, [r7, #28]
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	2b0f      	cmp	r3, #15
 8001f54:	f67f ae96 	bls.w	8001c84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f58:	bf00      	nop
 8001f5a:	bf00      	nop
 8001f5c:	3724      	adds	r7, #36	@ 0x24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40013800 	.word	0x40013800
 8001f70:	40020000 	.word	0x40020000
 8001f74:	40020400 	.word	0x40020400
 8001f78:	40020800 	.word	0x40020800
 8001f7c:	40020c00 	.word	0x40020c00
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40021400 	.word	0x40021400
 8001f88:	40021800 	.word	0x40021800
 8001f8c:	40013c00 	.word	0x40013c00

08001f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	807b      	strh	r3, [r7, #2]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fa0:	787b      	ldrb	r3, [r7, #1]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fa6:	887a      	ldrh	r2, [r7, #2]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fac:	e003      	b.n	8001fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fae:	887b      	ldrh	r3, [r7, #2]
 8001fb0:	041a      	lsls	r2, r3, #16
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	619a      	str	r2, [r3, #24]
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
	...

08001fc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e12b      	b.n	800222e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d106      	bne.n	8001ff0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff fa2e 	bl	800144c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2224      	movs	r2, #36	@ 0x24
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0201 	bic.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002016:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002026:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002028:	f001 f8b8 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 800202c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	4a81      	ldr	r2, [pc, #516]	@ (8002238 <HAL_I2C_Init+0x274>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d807      	bhi.n	8002048 <HAL_I2C_Init+0x84>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4a80      	ldr	r2, [pc, #512]	@ (800223c <HAL_I2C_Init+0x278>)
 800203c:	4293      	cmp	r3, r2
 800203e:	bf94      	ite	ls
 8002040:	2301      	movls	r3, #1
 8002042:	2300      	movhi	r3, #0
 8002044:	b2db      	uxtb	r3, r3
 8002046:	e006      	b.n	8002056 <HAL_I2C_Init+0x92>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4a7d      	ldr	r2, [pc, #500]	@ (8002240 <HAL_I2C_Init+0x27c>)
 800204c:	4293      	cmp	r3, r2
 800204e:	bf94      	ite	ls
 8002050:	2301      	movls	r3, #1
 8002052:	2300      	movhi	r3, #0
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e0e7      	b.n	800222e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4a78      	ldr	r2, [pc, #480]	@ (8002244 <HAL_I2C_Init+0x280>)
 8002062:	fba2 2303 	umull	r2, r3, r2, r3
 8002066:	0c9b      	lsrs	r3, r3, #18
 8002068:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68ba      	ldr	r2, [r7, #8]
 800207a:	430a      	orrs	r2, r1
 800207c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	4a6a      	ldr	r2, [pc, #424]	@ (8002238 <HAL_I2C_Init+0x274>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d802      	bhi.n	8002098 <HAL_I2C_Init+0xd4>
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	3301      	adds	r3, #1
 8002096:	e009      	b.n	80020ac <HAL_I2C_Init+0xe8>
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800209e:	fb02 f303 	mul.w	r3, r2, r3
 80020a2:	4a69      	ldr	r2, [pc, #420]	@ (8002248 <HAL_I2C_Init+0x284>)
 80020a4:	fba2 2303 	umull	r2, r3, r2, r3
 80020a8:	099b      	lsrs	r3, r3, #6
 80020aa:	3301      	adds	r3, #1
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6812      	ldr	r2, [r2, #0]
 80020b0:	430b      	orrs	r3, r1
 80020b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80020be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	495c      	ldr	r1, [pc, #368]	@ (8002238 <HAL_I2C_Init+0x274>)
 80020c8:	428b      	cmp	r3, r1
 80020ca:	d819      	bhi.n	8002100 <HAL_I2C_Init+0x13c>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	1e59      	subs	r1, r3, #1
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80020da:	1c59      	adds	r1, r3, #1
 80020dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80020e0:	400b      	ands	r3, r1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00a      	beq.n	80020fc <HAL_I2C_Init+0x138>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	1e59      	subs	r1, r3, #1
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80020f4:	3301      	adds	r3, #1
 80020f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020fa:	e051      	b.n	80021a0 <HAL_I2C_Init+0x1dc>
 80020fc:	2304      	movs	r3, #4
 80020fe:	e04f      	b.n	80021a0 <HAL_I2C_Init+0x1dc>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d111      	bne.n	800212c <HAL_I2C_Init+0x168>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	1e58      	subs	r0, r3, #1
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6859      	ldr	r1, [r3, #4]
 8002110:	460b      	mov	r3, r1
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	440b      	add	r3, r1
 8002116:	fbb0 f3f3 	udiv	r3, r0, r3
 800211a:	3301      	adds	r3, #1
 800211c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002120:	2b00      	cmp	r3, #0
 8002122:	bf0c      	ite	eq
 8002124:	2301      	moveq	r3, #1
 8002126:	2300      	movne	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	e012      	b.n	8002152 <HAL_I2C_Init+0x18e>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	1e58      	subs	r0, r3, #1
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6859      	ldr	r1, [r3, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	0099      	lsls	r1, r3, #2
 800213c:	440b      	add	r3, r1
 800213e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002142:	3301      	adds	r3, #1
 8002144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002148:	2b00      	cmp	r3, #0
 800214a:	bf0c      	ite	eq
 800214c:	2301      	moveq	r3, #1
 800214e:	2300      	movne	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_I2C_Init+0x196>
 8002156:	2301      	movs	r3, #1
 8002158:	e022      	b.n	80021a0 <HAL_I2C_Init+0x1dc>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10e      	bne.n	8002180 <HAL_I2C_Init+0x1bc>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	1e58      	subs	r0, r3, #1
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6859      	ldr	r1, [r3, #4]
 800216a:	460b      	mov	r3, r1
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	440b      	add	r3, r1
 8002170:	fbb0 f3f3 	udiv	r3, r0, r3
 8002174:	3301      	adds	r3, #1
 8002176:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800217a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800217e:	e00f      	b.n	80021a0 <HAL_I2C_Init+0x1dc>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	1e58      	subs	r0, r3, #1
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6859      	ldr	r1, [r3, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	0099      	lsls	r1, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	fbb0 f3f3 	udiv	r3, r0, r3
 8002196:	3301      	adds	r3, #1
 8002198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800219c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	6809      	ldr	r1, [r1, #0]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69da      	ldr	r2, [r3, #28]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80021ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6911      	ldr	r1, [r2, #16]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68d2      	ldr	r2, [r2, #12]
 80021da:	4311      	orrs	r1, r2
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6812      	ldr	r2, [r2, #0]
 80021e0:	430b      	orrs	r3, r1
 80021e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	695a      	ldr	r2, [r3, #20]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0201 	orr.w	r2, r2, #1
 800220e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2220      	movs	r2, #32
 800221a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	000186a0 	.word	0x000186a0
 800223c:	001e847f 	.word	0x001e847f
 8002240:	003d08ff 	.word	0x003d08ff
 8002244:	431bde83 	.word	0x431bde83
 8002248:	10624dd3 	.word	0x10624dd3

0800224c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b088      	sub	sp, #32
 8002250:	af02      	add	r7, sp, #8
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	607a      	str	r2, [r7, #4]
 8002256:	461a      	mov	r2, r3
 8002258:	460b      	mov	r3, r1
 800225a:	817b      	strh	r3, [r7, #10]
 800225c:	4613      	mov	r3, r2
 800225e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002260:	f7ff fb52 	bl	8001908 <HAL_GetTick>
 8002264:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b20      	cmp	r3, #32
 8002270:	f040 80e0 	bne.w	8002434 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	2319      	movs	r3, #25
 800227a:	2201      	movs	r2, #1
 800227c:	4970      	ldr	r1, [pc, #448]	@ (8002440 <HAL_I2C_Master_Transmit+0x1f4>)
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 fc64 	bl	8002b4c <I2C_WaitOnFlagUntilTimeout>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800228a:	2302      	movs	r3, #2
 800228c:	e0d3      	b.n	8002436 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <HAL_I2C_Master_Transmit+0x50>
 8002298:	2302      	movs	r3, #2
 800229a:	e0cc      	b.n	8002436 <HAL_I2C_Master_Transmit+0x1ea>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d007      	beq.n	80022c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f042 0201 	orr.w	r2, r2, #1
 80022c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2221      	movs	r2, #33	@ 0x21
 80022d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2210      	movs	r2, #16
 80022de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	893a      	ldrh	r2, [r7, #8]
 80022f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	4a50      	ldr	r2, [pc, #320]	@ (8002444 <HAL_I2C_Master_Transmit+0x1f8>)
 8002302:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002304:	8979      	ldrh	r1, [r7, #10]
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	6a3a      	ldr	r2, [r7, #32]
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 face 	bl	80028ac <I2C_MasterRequestWrite>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e08d      	b.n	8002436 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800231a:	2300      	movs	r3, #0
 800231c:	613b      	str	r3, [r7, #16]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002330:	e066      	b.n	8002400 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	6a39      	ldr	r1, [r7, #32]
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 fd22 	bl	8002d80 <I2C_WaitOnTXEFlagUntilTimeout>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00d      	beq.n	800235e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002346:	2b04      	cmp	r3, #4
 8002348:	d107      	bne.n	800235a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002358:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e06b      	b.n	8002436 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002362:	781a      	ldrb	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236e:	1c5a      	adds	r2, r3, #1
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002378:	b29b      	uxth	r3, r3
 800237a:	3b01      	subs	r3, #1
 800237c:	b29a      	uxth	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002386:	3b01      	subs	r3, #1
 8002388:	b29a      	uxth	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b04      	cmp	r3, #4
 800239a:	d11b      	bne.n	80023d4 <HAL_I2C_Master_Transmit+0x188>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d017      	beq.n	80023d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a8:	781a      	ldrb	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b4:	1c5a      	adds	r2, r3, #1
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023be:	b29b      	uxth	r3, r3
 80023c0:	3b01      	subs	r3, #1
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023cc:	3b01      	subs	r3, #1
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	6a39      	ldr	r1, [r7, #32]
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 fd19 	bl	8002e10 <I2C_WaitOnBTFFlagUntilTimeout>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00d      	beq.n	8002400 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e8:	2b04      	cmp	r3, #4
 80023ea:	d107      	bne.n	80023fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e01a      	b.n	8002436 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002404:	2b00      	cmp	r3, #0
 8002406:	d194      	bne.n	8002332 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002416:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2220      	movs	r2, #32
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	e000      	b.n	8002436 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002434:	2302      	movs	r3, #2
  }
}
 8002436:	4618      	mov	r0, r3
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	00100002 	.word	0x00100002
 8002444:	ffff0000 	.word	0xffff0000

08002448 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08c      	sub	sp, #48	@ 0x30
 800244c:	af02      	add	r7, sp, #8
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	607a      	str	r2, [r7, #4]
 8002452:	461a      	mov	r2, r3
 8002454:	460b      	mov	r3, r1
 8002456:	817b      	strh	r3, [r7, #10]
 8002458:	4613      	mov	r3, r2
 800245a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800245c:	f7ff fa54 	bl	8001908 <HAL_GetTick>
 8002460:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b20      	cmp	r3, #32
 800246c:	f040 8217 	bne.w	800289e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	2319      	movs	r3, #25
 8002476:	2201      	movs	r2, #1
 8002478:	497c      	ldr	r1, [pc, #496]	@ (800266c <HAL_I2C_Master_Receive+0x224>)
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 fb66 	bl	8002b4c <I2C_WaitOnFlagUntilTimeout>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002486:	2302      	movs	r3, #2
 8002488:	e20a      	b.n	80028a0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002490:	2b01      	cmp	r3, #1
 8002492:	d101      	bne.n	8002498 <HAL_I2C_Master_Receive+0x50>
 8002494:	2302      	movs	r3, #2
 8002496:	e203      	b.n	80028a0 <HAL_I2C_Master_Receive+0x458>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d007      	beq.n	80024be <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f042 0201 	orr.w	r2, r2, #1
 80024bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2222      	movs	r2, #34	@ 0x22
 80024d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2210      	movs	r2, #16
 80024da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	893a      	ldrh	r2, [r7, #8]
 80024ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4a5c      	ldr	r2, [pc, #368]	@ (8002670 <HAL_I2C_Master_Receive+0x228>)
 80024fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002500:	8979      	ldrh	r1, [r7, #10]
 8002502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002504:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 fa52 	bl	80029b0 <I2C_MasterRequestRead>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e1c4      	b.n	80028a0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800251a:	2b00      	cmp	r3, #0
 800251c:	d113      	bne.n	8002546 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800251e:	2300      	movs	r3, #0
 8002520:	623b      	str	r3, [r7, #32]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	623b      	str	r3, [r7, #32]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	623b      	str	r3, [r7, #32]
 8002532:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	e198      	b.n	8002878 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800254a:	2b01      	cmp	r3, #1
 800254c:	d11b      	bne.n	8002586 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800255c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	61fb      	str	r3, [r7, #28]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	61fb      	str	r3, [r7, #28]
 8002572:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	e178      	b.n	8002878 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800258a:	2b02      	cmp	r3, #2
 800258c:	d11b      	bne.n	80025c6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800259c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ae:	2300      	movs	r3, #0
 80025b0:	61bb      	str	r3, [r7, #24]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	61bb      	str	r3, [r7, #24]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	61bb      	str	r3, [r7, #24]
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	e158      	b.n	8002878 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80025d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	617b      	str	r3, [r7, #20]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	617b      	str	r3, [r7, #20]
 80025ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80025ec:	e144      	b.n	8002878 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	f200 80f1 	bhi.w	80027da <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d123      	bne.n	8002648 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002600:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002602:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f000 fc4b 	bl	8002ea0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e145      	b.n	80028a0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691a      	ldr	r2, [r3, #16]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002630:	3b01      	subs	r3, #1
 8002632:	b29a      	uxth	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800263c:	b29b      	uxth	r3, r3
 800263e:	3b01      	subs	r3, #1
 8002640:	b29a      	uxth	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002646:	e117      	b.n	8002878 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800264c:	2b02      	cmp	r3, #2
 800264e:	d14e      	bne.n	80026ee <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002656:	2200      	movs	r2, #0
 8002658:	4906      	ldr	r1, [pc, #24]	@ (8002674 <HAL_I2C_Master_Receive+0x22c>)
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 fa76 	bl	8002b4c <I2C_WaitOnFlagUntilTimeout>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d008      	beq.n	8002678 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e11a      	b.n	80028a0 <HAL_I2C_Master_Receive+0x458>
 800266a:	bf00      	nop
 800266c:	00100002 	.word	0x00100002
 8002670:	ffff0000 	.word	0xffff0000
 8002674:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002686:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691a      	ldr	r2, [r3, #16]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	3b01      	subs	r3, #1
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026d6:	3b01      	subs	r3, #1
 80026d8:	b29a      	uxth	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80026ec:	e0c4      	b.n	8002878 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f4:	2200      	movs	r2, #0
 80026f6:	496c      	ldr	r1, [pc, #432]	@ (80028a8 <HAL_I2C_Master_Receive+0x460>)
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 fa27 	bl	8002b4c <I2C_WaitOnFlagUntilTimeout>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0cb      	b.n	80028a0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002716:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	691a      	ldr	r2, [r3, #16]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002734:	3b01      	subs	r3, #1
 8002736:	b29a      	uxth	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002740:	b29b      	uxth	r3, r3
 8002742:	3b01      	subs	r3, #1
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800274a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002750:	2200      	movs	r2, #0
 8002752:	4955      	ldr	r1, [pc, #340]	@ (80028a8 <HAL_I2C_Master_Receive+0x460>)
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 f9f9 	bl	8002b4c <I2C_WaitOnFlagUntilTimeout>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e09d      	b.n	80028a0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002772:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691a      	ldr	r2, [r3, #16]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002790:	3b01      	subs	r3, #1
 8002792:	b29a      	uxth	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800279c:	b29b      	uxth	r3, r3
 800279e:	3b01      	subs	r3, #1
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	691a      	ldr	r2, [r3, #16]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b8:	1c5a      	adds	r2, r3, #1
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c2:	3b01      	subs	r3, #1
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	3b01      	subs	r3, #1
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027d8:	e04e      	b.n	8002878 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 fb5e 	bl	8002ea0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e058      	b.n	80028a0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	691a      	ldr	r2, [r3, #16]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800280a:	3b01      	subs	r3, #1
 800280c:	b29a      	uxth	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002816:	b29b      	uxth	r3, r3
 8002818:	3b01      	subs	r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	2b04      	cmp	r3, #4
 800282c:	d124      	bne.n	8002878 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002832:	2b03      	cmp	r3, #3
 8002834:	d107      	bne.n	8002846 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002844:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	691a      	ldr	r2, [r3, #16]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002862:	3b01      	subs	r3, #1
 8002864:	b29a      	uxth	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800286e:	b29b      	uxth	r3, r3
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800287c:	2b00      	cmp	r3, #0
 800287e:	f47f aeb6 	bne.w	80025ee <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2220      	movs	r2, #32
 8002886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	e000      	b.n	80028a0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800289e:	2302      	movs	r3, #2
  }
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3728      	adds	r7, #40	@ 0x28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	00010004 	.word	0x00010004

080028ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af02      	add	r7, sp, #8
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	607a      	str	r2, [r7, #4]
 80028b6:	603b      	str	r3, [r7, #0]
 80028b8:	460b      	mov	r3, r1
 80028ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d006      	beq.n	80028d6 <I2C_MasterRequestWrite+0x2a>
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d003      	beq.n	80028d6 <I2C_MasterRequestWrite+0x2a>
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80028d4:	d108      	bne.n	80028e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	e00b      	b.n	8002900 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ec:	2b12      	cmp	r3, #18
 80028ee:	d107      	bne.n	8002900 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 f91d 	bl	8002b4c <I2C_WaitOnFlagUntilTimeout>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00d      	beq.n	8002934 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002922:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002926:	d103      	bne.n	8002930 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800292e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e035      	b.n	80029a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800293c:	d108      	bne.n	8002950 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800293e:	897b      	ldrh	r3, [r7, #10]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	461a      	mov	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800294c:	611a      	str	r2, [r3, #16]
 800294e:	e01b      	b.n	8002988 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002950:	897b      	ldrh	r3, [r7, #10]
 8002952:	11db      	asrs	r3, r3, #7
 8002954:	b2db      	uxtb	r3, r3
 8002956:	f003 0306 	and.w	r3, r3, #6
 800295a:	b2db      	uxtb	r3, r3
 800295c:	f063 030f 	orn	r3, r3, #15
 8002960:	b2da      	uxtb	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	490e      	ldr	r1, [pc, #56]	@ (80029a8 <I2C_MasterRequestWrite+0xfc>)
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 f966 	bl	8002c40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e010      	b.n	80029a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800297e:	897b      	ldrh	r3, [r7, #10]
 8002980:	b2da      	uxtb	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	4907      	ldr	r1, [pc, #28]	@ (80029ac <I2C_MasterRequestWrite+0x100>)
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 f956 	bl	8002c40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e000      	b.n	80029a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	00010008 	.word	0x00010008
 80029ac:	00010002 	.word	0x00010002

080029b0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b088      	sub	sp, #32
 80029b4:	af02      	add	r7, sp, #8
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	607a      	str	r2, [r7, #4]
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	460b      	mov	r3, r1
 80029be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80029d4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d006      	beq.n	80029ea <I2C_MasterRequestRead+0x3a>
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d003      	beq.n	80029ea <I2C_MasterRequestRead+0x3a>
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80029e8:	d108      	bne.n	80029fc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	e00b      	b.n	8002a14 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a00:	2b11      	cmp	r3, #17
 8002a02:	d107      	bne.n	8002a14 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f000 f893 	bl	8002b4c <I2C_WaitOnFlagUntilTimeout>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00d      	beq.n	8002a48 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a3a:	d103      	bne.n	8002a44 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a42:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e079      	b.n	8002b3c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a50:	d108      	bne.n	8002a64 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a52:	897b      	ldrh	r3, [r7, #10]
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	611a      	str	r2, [r3, #16]
 8002a62:	e05f      	b.n	8002b24 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a64:	897b      	ldrh	r3, [r7, #10]
 8002a66:	11db      	asrs	r3, r3, #7
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	f003 0306 	and.w	r3, r3, #6
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	f063 030f 	orn	r3, r3, #15
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	4930      	ldr	r1, [pc, #192]	@ (8002b44 <I2C_MasterRequestRead+0x194>)
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 f8dc 	bl	8002c40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e054      	b.n	8002b3c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a92:	897b      	ldrh	r3, [r7, #10]
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	4929      	ldr	r1, [pc, #164]	@ (8002b48 <I2C_MasterRequestRead+0x198>)
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 f8cc 	bl	8002c40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e044      	b.n	8002b3c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	613b      	str	r3, [r7, #16]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ad6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f831 	bl	8002b4c <I2C_WaitOnFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00d      	beq.n	8002b0c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002afa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002afe:	d103      	bne.n	8002b08 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b06:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e017      	b.n	8002b3c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002b0c:	897b      	ldrh	r3, [r7, #10]
 8002b0e:	11db      	asrs	r3, r3, #7
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	f003 0306 	and.w	r3, r3, #6
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	f063 030e 	orn	r3, r3, #14
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	4907      	ldr	r1, [pc, #28]	@ (8002b48 <I2C_MasterRequestRead+0x198>)
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 f888 	bl	8002c40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e000      	b.n	8002b3c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	00010008 	.word	0x00010008
 8002b48:	00010002 	.word	0x00010002

08002b4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b5c:	e048      	b.n	8002bf0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b64:	d044      	beq.n	8002bf0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b66:	f7fe fecf 	bl	8001908 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d302      	bcc.n	8002b7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d139      	bne.n	8002bf0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	0c1b      	lsrs	r3, r3, #16
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d10d      	bne.n	8002ba2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	43da      	mvns	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	4013      	ands	r3, r2
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	bf0c      	ite	eq
 8002b98:	2301      	moveq	r3, #1
 8002b9a:	2300      	movne	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	e00c      	b.n	8002bbc <I2C_WaitOnFlagUntilTimeout+0x70>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	43da      	mvns	r2, r3
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	4013      	ands	r3, r2
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	bf0c      	ite	eq
 8002bb4:	2301      	moveq	r3, #1
 8002bb6:	2300      	movne	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	461a      	mov	r2, r3
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d116      	bne.n	8002bf0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bdc:	f043 0220 	orr.w	r2, r3, #32
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e023      	b.n	8002c38 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	0c1b      	lsrs	r3, r3, #16
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d10d      	bne.n	8002c16 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	43da      	mvns	r2, r3
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	4013      	ands	r3, r2
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	bf0c      	ite	eq
 8002c0c:	2301      	moveq	r3, #1
 8002c0e:	2300      	movne	r3, #0
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	461a      	mov	r2, r3
 8002c14:	e00c      	b.n	8002c30 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	43da      	mvns	r2, r3
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	4013      	ands	r3, r2
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	bf0c      	ite	eq
 8002c28:	2301      	moveq	r3, #1
 8002c2a:	2300      	movne	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	461a      	mov	r2, r3
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d093      	beq.n	8002b5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
 8002c4c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c4e:	e071      	b.n	8002d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c5e:	d123      	bne.n	8002ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c6e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2220      	movs	r2, #32
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c94:	f043 0204 	orr.w	r2, r3, #4
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e067      	b.n	8002d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002cae:	d041      	beq.n	8002d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb0:	f7fe fe2a 	bl	8001908 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d302      	bcc.n	8002cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d136      	bne.n	8002d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	0c1b      	lsrs	r3, r3, #16
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d10c      	bne.n	8002cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	43da      	mvns	r2, r3
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	bf14      	ite	ne
 8002ce2:	2301      	movne	r3, #1
 8002ce4:	2300      	moveq	r3, #0
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	e00b      	b.n	8002d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	43da      	mvns	r2, r3
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	bf14      	ite	ne
 8002cfc:	2301      	movne	r3, #1
 8002cfe:	2300      	moveq	r3, #0
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d016      	beq.n	8002d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d20:	f043 0220 	orr.w	r2, r3, #32
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e021      	b.n	8002d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	0c1b      	lsrs	r3, r3, #16
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d10c      	bne.n	8002d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	43da      	mvns	r2, r3
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	bf14      	ite	ne
 8002d50:	2301      	movne	r3, #1
 8002d52:	2300      	moveq	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	e00b      	b.n	8002d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	43da      	mvns	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	4013      	ands	r3, r2
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	bf14      	ite	ne
 8002d6a:	2301      	movne	r3, #1
 8002d6c:	2300      	moveq	r3, #0
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f47f af6d 	bne.w	8002c50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d8c:	e034      	b.n	8002df8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 f8e3 	bl	8002f5a <I2C_IsAcknowledgeFailed>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e034      	b.n	8002e08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002da4:	d028      	beq.n	8002df8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002da6:	f7fe fdaf 	bl	8001908 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d302      	bcc.n	8002dbc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d11d      	bne.n	8002df8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dc6:	2b80      	cmp	r3, #128	@ 0x80
 8002dc8:	d016      	beq.n	8002df8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de4:	f043 0220 	orr.w	r2, r3, #32
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e007      	b.n	8002e08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e02:	2b80      	cmp	r3, #128	@ 0x80
 8002e04:	d1c3      	bne.n	8002d8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e1c:	e034      	b.n	8002e88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 f89b 	bl	8002f5a <I2C_IsAcknowledgeFailed>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e034      	b.n	8002e98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e34:	d028      	beq.n	8002e88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e36:	f7fe fd67 	bl	8001908 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d302      	bcc.n	8002e4c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d11d      	bne.n	8002e88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d016      	beq.n	8002e88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2220      	movs	r2, #32
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e74:	f043 0220 	orr.w	r2, r3, #32
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e007      	b.n	8002e98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d1c3      	bne.n	8002e1e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002eac:	e049      	b.n	8002f42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	f003 0310 	and.w	r3, r3, #16
 8002eb8:	2b10      	cmp	r3, #16
 8002eba:	d119      	bne.n	8002ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f06f 0210 	mvn.w	r2, #16
 8002ec4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e030      	b.n	8002f52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef0:	f7fe fd0a 	bl	8001908 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d302      	bcc.n	8002f06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d11d      	bne.n	8002f42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f10:	2b40      	cmp	r3, #64	@ 0x40
 8002f12:	d016      	beq.n	8002f42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2e:	f043 0220 	orr.w	r2, r3, #32
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e007      	b.n	8002f52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f4c:	2b40      	cmp	r3, #64	@ 0x40
 8002f4e:	d1ae      	bne.n	8002eae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f70:	d11b      	bne.n	8002faa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f7a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2220      	movs	r2, #32
 8002f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f96:	f043 0204 	orr.w	r2, r3, #4
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e0cc      	b.n	8003166 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fcc:	4b68      	ldr	r3, [pc, #416]	@ (8003170 <HAL_RCC_ClockConfig+0x1b8>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 030f 	and.w	r3, r3, #15
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d90c      	bls.n	8002ff4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fda:	4b65      	ldr	r3, [pc, #404]	@ (8003170 <HAL_RCC_ClockConfig+0x1b8>)
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe2:	4b63      	ldr	r3, [pc, #396]	@ (8003170 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e0b8      	b.n	8003166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d020      	beq.n	8003042 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	d005      	beq.n	8003018 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800300c:	4b59      	ldr	r3, [pc, #356]	@ (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	4a58      	ldr	r2, [pc, #352]	@ (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 8003012:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003016:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0308 	and.w	r3, r3, #8
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003024:	4b53      	ldr	r3, [pc, #332]	@ (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	4a52      	ldr	r2, [pc, #328]	@ (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 800302a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800302e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003030:	4b50      	ldr	r3, [pc, #320]	@ (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	494d      	ldr	r1, [pc, #308]	@ (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	4313      	orrs	r3, r2
 8003040:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d044      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d107      	bne.n	8003066 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003056:	4b47      	ldr	r3, [pc, #284]	@ (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d119      	bne.n	8003096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e07f      	b.n	8003166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b02      	cmp	r3, #2
 800306c:	d003      	beq.n	8003076 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003072:	2b03      	cmp	r3, #3
 8003074:	d107      	bne.n	8003086 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003076:	4b3f      	ldr	r3, [pc, #252]	@ (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d109      	bne.n	8003096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e06f      	b.n	8003166 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003086:	4b3b      	ldr	r3, [pc, #236]	@ (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e067      	b.n	8003166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003096:	4b37      	ldr	r3, [pc, #220]	@ (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f023 0203 	bic.w	r2, r3, #3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	4934      	ldr	r1, [pc, #208]	@ (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030a8:	f7fe fc2e 	bl	8001908 <HAL_GetTick>
 80030ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ae:	e00a      	b.n	80030c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b0:	f7fe fc2a 	bl	8001908 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030be:	4293      	cmp	r3, r2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e04f      	b.n	8003166 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c6:	4b2b      	ldr	r3, [pc, #172]	@ (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 020c 	and.w	r2, r3, #12
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d1eb      	bne.n	80030b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030d8:	4b25      	ldr	r3, [pc, #148]	@ (8003170 <HAL_RCC_ClockConfig+0x1b8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 030f 	and.w	r3, r3, #15
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d20c      	bcs.n	8003100 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e6:	4b22      	ldr	r3, [pc, #136]	@ (8003170 <HAL_RCC_ClockConfig+0x1b8>)
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ee:	4b20      	ldr	r3, [pc, #128]	@ (8003170 <HAL_RCC_ClockConfig+0x1b8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d001      	beq.n	8003100 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e032      	b.n	8003166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d008      	beq.n	800311e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800310c:	4b19      	ldr	r3, [pc, #100]	@ (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	4916      	ldr	r1, [pc, #88]	@ (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	4313      	orrs	r3, r2
 800311c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	2b00      	cmp	r3, #0
 8003128:	d009      	beq.n	800313e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800312a:	4b12      	ldr	r3, [pc, #72]	@ (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	490e      	ldr	r1, [pc, #56]	@ (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 800313a:	4313      	orrs	r3, r2
 800313c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800313e:	f000 f855 	bl	80031ec <HAL_RCC_GetSysClockFreq>
 8003142:	4602      	mov	r2, r0
 8003144:	4b0b      	ldr	r3, [pc, #44]	@ (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	091b      	lsrs	r3, r3, #4
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	490a      	ldr	r1, [pc, #40]	@ (8003178 <HAL_RCC_ClockConfig+0x1c0>)
 8003150:	5ccb      	ldrb	r3, [r1, r3]
 8003152:	fa22 f303 	lsr.w	r3, r2, r3
 8003156:	4a09      	ldr	r2, [pc, #36]	@ (800317c <HAL_RCC_ClockConfig+0x1c4>)
 8003158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800315a:	4b09      	ldr	r3, [pc, #36]	@ (8003180 <HAL_RCC_ClockConfig+0x1c8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f7fe fb8e 	bl	8001880 <HAL_InitTick>

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40023c00 	.word	0x40023c00
 8003174:	40023800 	.word	0x40023800
 8003178:	08005c70 	.word	0x08005c70
 800317c:	20000004 	.word	0x20000004
 8003180:	20000008 	.word	0x20000008

08003184 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003188:	4b03      	ldr	r3, [pc, #12]	@ (8003198 <HAL_RCC_GetHCLKFreq+0x14>)
 800318a:	681b      	ldr	r3, [r3, #0]
}
 800318c:	4618      	mov	r0, r3
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	20000004 	.word	0x20000004

0800319c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031a0:	f7ff fff0 	bl	8003184 <HAL_RCC_GetHCLKFreq>
 80031a4:	4602      	mov	r2, r0
 80031a6:	4b05      	ldr	r3, [pc, #20]	@ (80031bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	0a9b      	lsrs	r3, r3, #10
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	4903      	ldr	r1, [pc, #12]	@ (80031c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031b2:	5ccb      	ldrb	r3, [r1, r3]
 80031b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40023800 	.word	0x40023800
 80031c0:	08005c80 	.word	0x08005c80

080031c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031c8:	f7ff ffdc 	bl	8003184 <HAL_RCC_GetHCLKFreq>
 80031cc:	4602      	mov	r2, r0
 80031ce:	4b05      	ldr	r3, [pc, #20]	@ (80031e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	0b5b      	lsrs	r3, r3, #13
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	4903      	ldr	r1, [pc, #12]	@ (80031e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031da:	5ccb      	ldrb	r3, [r1, r3]
 80031dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40023800 	.word	0x40023800
 80031e8:	08005c80 	.word	0x08005c80

080031ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031f0:	b0ae      	sub	sp, #184	@ 0xb8
 80031f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003206:	2300      	movs	r3, #0
 8003208:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003212:	4bcb      	ldr	r3, [pc, #812]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x354>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 030c 	and.w	r3, r3, #12
 800321a:	2b0c      	cmp	r3, #12
 800321c:	f200 8206 	bhi.w	800362c <HAL_RCC_GetSysClockFreq+0x440>
 8003220:	a201      	add	r2, pc, #4	@ (adr r2, 8003228 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003226:	bf00      	nop
 8003228:	0800325d 	.word	0x0800325d
 800322c:	0800362d 	.word	0x0800362d
 8003230:	0800362d 	.word	0x0800362d
 8003234:	0800362d 	.word	0x0800362d
 8003238:	08003265 	.word	0x08003265
 800323c:	0800362d 	.word	0x0800362d
 8003240:	0800362d 	.word	0x0800362d
 8003244:	0800362d 	.word	0x0800362d
 8003248:	0800326d 	.word	0x0800326d
 800324c:	0800362d 	.word	0x0800362d
 8003250:	0800362d 	.word	0x0800362d
 8003254:	0800362d 	.word	0x0800362d
 8003258:	0800345d 	.word	0x0800345d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800325c:	4bb9      	ldr	r3, [pc, #740]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x358>)
 800325e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003262:	e1e7      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003264:	4bb8      	ldr	r3, [pc, #736]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003266:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800326a:	e1e3      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800326c:	4bb4      	ldr	r3, [pc, #720]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x354>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003274:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003278:	4bb1      	ldr	r3, [pc, #708]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x354>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d071      	beq.n	8003368 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003284:	4bae      	ldr	r3, [pc, #696]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x354>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	099b      	lsrs	r3, r3, #6
 800328a:	2200      	movs	r2, #0
 800328c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003290:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003294:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800329c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80032a0:	2300      	movs	r3, #0
 80032a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80032a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80032aa:	4622      	mov	r2, r4
 80032ac:	462b      	mov	r3, r5
 80032ae:	f04f 0000 	mov.w	r0, #0
 80032b2:	f04f 0100 	mov.w	r1, #0
 80032b6:	0159      	lsls	r1, r3, #5
 80032b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032bc:	0150      	lsls	r0, r2, #5
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	4621      	mov	r1, r4
 80032c4:	1a51      	subs	r1, r2, r1
 80032c6:	6439      	str	r1, [r7, #64]	@ 0x40
 80032c8:	4629      	mov	r1, r5
 80032ca:	eb63 0301 	sbc.w	r3, r3, r1
 80032ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80032d0:	f04f 0200 	mov.w	r2, #0
 80032d4:	f04f 0300 	mov.w	r3, #0
 80032d8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80032dc:	4649      	mov	r1, r9
 80032de:	018b      	lsls	r3, r1, #6
 80032e0:	4641      	mov	r1, r8
 80032e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032e6:	4641      	mov	r1, r8
 80032e8:	018a      	lsls	r2, r1, #6
 80032ea:	4641      	mov	r1, r8
 80032ec:	1a51      	subs	r1, r2, r1
 80032ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80032f0:	4649      	mov	r1, r9
 80032f2:	eb63 0301 	sbc.w	r3, r3, r1
 80032f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032f8:	f04f 0200 	mov.w	r2, #0
 80032fc:	f04f 0300 	mov.w	r3, #0
 8003300:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003304:	4649      	mov	r1, r9
 8003306:	00cb      	lsls	r3, r1, #3
 8003308:	4641      	mov	r1, r8
 800330a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800330e:	4641      	mov	r1, r8
 8003310:	00ca      	lsls	r2, r1, #3
 8003312:	4610      	mov	r0, r2
 8003314:	4619      	mov	r1, r3
 8003316:	4603      	mov	r3, r0
 8003318:	4622      	mov	r2, r4
 800331a:	189b      	adds	r3, r3, r2
 800331c:	633b      	str	r3, [r7, #48]	@ 0x30
 800331e:	462b      	mov	r3, r5
 8003320:	460a      	mov	r2, r1
 8003322:	eb42 0303 	adc.w	r3, r2, r3
 8003326:	637b      	str	r3, [r7, #52]	@ 0x34
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	f04f 0300 	mov.w	r3, #0
 8003330:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003334:	4629      	mov	r1, r5
 8003336:	024b      	lsls	r3, r1, #9
 8003338:	4621      	mov	r1, r4
 800333a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800333e:	4621      	mov	r1, r4
 8003340:	024a      	lsls	r2, r1, #9
 8003342:	4610      	mov	r0, r2
 8003344:	4619      	mov	r1, r3
 8003346:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800334a:	2200      	movs	r2, #0
 800334c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003350:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003354:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003358:	f7fd f80a 	bl	8000370 <__aeabi_uldivmod>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	4613      	mov	r3, r2
 8003362:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003366:	e067      	b.n	8003438 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003368:	4b75      	ldr	r3, [pc, #468]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x354>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	099b      	lsrs	r3, r3, #6
 800336e:	2200      	movs	r2, #0
 8003370:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003374:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003378:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800337c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003380:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003382:	2300      	movs	r3, #0
 8003384:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003386:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800338a:	4622      	mov	r2, r4
 800338c:	462b      	mov	r3, r5
 800338e:	f04f 0000 	mov.w	r0, #0
 8003392:	f04f 0100 	mov.w	r1, #0
 8003396:	0159      	lsls	r1, r3, #5
 8003398:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800339c:	0150      	lsls	r0, r2, #5
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	4621      	mov	r1, r4
 80033a4:	1a51      	subs	r1, r2, r1
 80033a6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80033a8:	4629      	mov	r1, r5
 80033aa:	eb63 0301 	sbc.w	r3, r3, r1
 80033ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	f04f 0300 	mov.w	r3, #0
 80033b8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80033bc:	4649      	mov	r1, r9
 80033be:	018b      	lsls	r3, r1, #6
 80033c0:	4641      	mov	r1, r8
 80033c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033c6:	4641      	mov	r1, r8
 80033c8:	018a      	lsls	r2, r1, #6
 80033ca:	4641      	mov	r1, r8
 80033cc:	ebb2 0a01 	subs.w	sl, r2, r1
 80033d0:	4649      	mov	r1, r9
 80033d2:	eb63 0b01 	sbc.w	fp, r3, r1
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033ea:	4692      	mov	sl, r2
 80033ec:	469b      	mov	fp, r3
 80033ee:	4623      	mov	r3, r4
 80033f0:	eb1a 0303 	adds.w	r3, sl, r3
 80033f4:	623b      	str	r3, [r7, #32]
 80033f6:	462b      	mov	r3, r5
 80033f8:	eb4b 0303 	adc.w	r3, fp, r3
 80033fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	f04f 0300 	mov.w	r3, #0
 8003406:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800340a:	4629      	mov	r1, r5
 800340c:	028b      	lsls	r3, r1, #10
 800340e:	4621      	mov	r1, r4
 8003410:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003414:	4621      	mov	r1, r4
 8003416:	028a      	lsls	r2, r1, #10
 8003418:	4610      	mov	r0, r2
 800341a:	4619      	mov	r1, r3
 800341c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003420:	2200      	movs	r2, #0
 8003422:	673b      	str	r3, [r7, #112]	@ 0x70
 8003424:	677a      	str	r2, [r7, #116]	@ 0x74
 8003426:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800342a:	f7fc ffa1 	bl	8000370 <__aeabi_uldivmod>
 800342e:	4602      	mov	r2, r0
 8003430:	460b      	mov	r3, r1
 8003432:	4613      	mov	r3, r2
 8003434:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003438:	4b41      	ldr	r3, [pc, #260]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x354>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	0c1b      	lsrs	r3, r3, #16
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	3301      	adds	r3, #1
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800344a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800344e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003452:	fbb2 f3f3 	udiv	r3, r2, r3
 8003456:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800345a:	e0eb      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800345c:	4b38      	ldr	r3, [pc, #224]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x354>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003464:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003468:	4b35      	ldr	r3, [pc, #212]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x354>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d06b      	beq.n	800354c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003474:	4b32      	ldr	r3, [pc, #200]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x354>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	099b      	lsrs	r3, r3, #6
 800347a:	2200      	movs	r2, #0
 800347c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800347e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003480:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003486:	663b      	str	r3, [r7, #96]	@ 0x60
 8003488:	2300      	movs	r3, #0
 800348a:	667b      	str	r3, [r7, #100]	@ 0x64
 800348c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003490:	4622      	mov	r2, r4
 8003492:	462b      	mov	r3, r5
 8003494:	f04f 0000 	mov.w	r0, #0
 8003498:	f04f 0100 	mov.w	r1, #0
 800349c:	0159      	lsls	r1, r3, #5
 800349e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034a2:	0150      	lsls	r0, r2, #5
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	4621      	mov	r1, r4
 80034aa:	1a51      	subs	r1, r2, r1
 80034ac:	61b9      	str	r1, [r7, #24]
 80034ae:	4629      	mov	r1, r5
 80034b0:	eb63 0301 	sbc.w	r3, r3, r1
 80034b4:	61fb      	str	r3, [r7, #28]
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80034c2:	4659      	mov	r1, fp
 80034c4:	018b      	lsls	r3, r1, #6
 80034c6:	4651      	mov	r1, sl
 80034c8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034cc:	4651      	mov	r1, sl
 80034ce:	018a      	lsls	r2, r1, #6
 80034d0:	4651      	mov	r1, sl
 80034d2:	ebb2 0801 	subs.w	r8, r2, r1
 80034d6:	4659      	mov	r1, fp
 80034d8:	eb63 0901 	sbc.w	r9, r3, r1
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034f0:	4690      	mov	r8, r2
 80034f2:	4699      	mov	r9, r3
 80034f4:	4623      	mov	r3, r4
 80034f6:	eb18 0303 	adds.w	r3, r8, r3
 80034fa:	613b      	str	r3, [r7, #16]
 80034fc:	462b      	mov	r3, r5
 80034fe:	eb49 0303 	adc.w	r3, r9, r3
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	f04f 0200 	mov.w	r2, #0
 8003508:	f04f 0300 	mov.w	r3, #0
 800350c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003510:	4629      	mov	r1, r5
 8003512:	024b      	lsls	r3, r1, #9
 8003514:	4621      	mov	r1, r4
 8003516:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800351a:	4621      	mov	r1, r4
 800351c:	024a      	lsls	r2, r1, #9
 800351e:	4610      	mov	r0, r2
 8003520:	4619      	mov	r1, r3
 8003522:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003526:	2200      	movs	r2, #0
 8003528:	65bb      	str	r3, [r7, #88]	@ 0x58
 800352a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800352c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003530:	f7fc ff1e 	bl	8000370 <__aeabi_uldivmod>
 8003534:	4602      	mov	r2, r0
 8003536:	460b      	mov	r3, r1
 8003538:	4613      	mov	r3, r2
 800353a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800353e:	e065      	b.n	800360c <HAL_RCC_GetSysClockFreq+0x420>
 8003540:	40023800 	.word	0x40023800
 8003544:	00f42400 	.word	0x00f42400
 8003548:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800354c:	4b3d      	ldr	r3, [pc, #244]	@ (8003644 <HAL_RCC_GetSysClockFreq+0x458>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	099b      	lsrs	r3, r3, #6
 8003552:	2200      	movs	r2, #0
 8003554:	4618      	mov	r0, r3
 8003556:	4611      	mov	r1, r2
 8003558:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800355c:	653b      	str	r3, [r7, #80]	@ 0x50
 800355e:	2300      	movs	r3, #0
 8003560:	657b      	str	r3, [r7, #84]	@ 0x54
 8003562:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003566:	4642      	mov	r2, r8
 8003568:	464b      	mov	r3, r9
 800356a:	f04f 0000 	mov.w	r0, #0
 800356e:	f04f 0100 	mov.w	r1, #0
 8003572:	0159      	lsls	r1, r3, #5
 8003574:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003578:	0150      	lsls	r0, r2, #5
 800357a:	4602      	mov	r2, r0
 800357c:	460b      	mov	r3, r1
 800357e:	4641      	mov	r1, r8
 8003580:	1a51      	subs	r1, r2, r1
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	4649      	mov	r1, r9
 8003586:	eb63 0301 	sbc.w	r3, r3, r1
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003598:	4659      	mov	r1, fp
 800359a:	018b      	lsls	r3, r1, #6
 800359c:	4651      	mov	r1, sl
 800359e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035a2:	4651      	mov	r1, sl
 80035a4:	018a      	lsls	r2, r1, #6
 80035a6:	4651      	mov	r1, sl
 80035a8:	1a54      	subs	r4, r2, r1
 80035aa:	4659      	mov	r1, fp
 80035ac:	eb63 0501 	sbc.w	r5, r3, r1
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	00eb      	lsls	r3, r5, #3
 80035ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035be:	00e2      	lsls	r2, r4, #3
 80035c0:	4614      	mov	r4, r2
 80035c2:	461d      	mov	r5, r3
 80035c4:	4643      	mov	r3, r8
 80035c6:	18e3      	adds	r3, r4, r3
 80035c8:	603b      	str	r3, [r7, #0]
 80035ca:	464b      	mov	r3, r9
 80035cc:	eb45 0303 	adc.w	r3, r5, r3
 80035d0:	607b      	str	r3, [r7, #4]
 80035d2:	f04f 0200 	mov.w	r2, #0
 80035d6:	f04f 0300 	mov.w	r3, #0
 80035da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035de:	4629      	mov	r1, r5
 80035e0:	028b      	lsls	r3, r1, #10
 80035e2:	4621      	mov	r1, r4
 80035e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035e8:	4621      	mov	r1, r4
 80035ea:	028a      	lsls	r2, r1, #10
 80035ec:	4610      	mov	r0, r2
 80035ee:	4619      	mov	r1, r3
 80035f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035f4:	2200      	movs	r2, #0
 80035f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035f8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80035fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80035fe:	f7fc feb7 	bl	8000370 <__aeabi_uldivmod>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	4613      	mov	r3, r2
 8003608:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800360c:	4b0d      	ldr	r3, [pc, #52]	@ (8003644 <HAL_RCC_GetSysClockFreq+0x458>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	0f1b      	lsrs	r3, r3, #28
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800361a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800361e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003622:	fbb2 f3f3 	udiv	r3, r2, r3
 8003626:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800362a:	e003      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800362c:	4b06      	ldr	r3, [pc, #24]	@ (8003648 <HAL_RCC_GetSysClockFreq+0x45c>)
 800362e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003632:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003634:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003638:	4618      	mov	r0, r3
 800363a:	37b8      	adds	r7, #184	@ 0xb8
 800363c:	46bd      	mov	sp, r7
 800363e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003642:	bf00      	nop
 8003644:	40023800 	.word	0x40023800
 8003648:	00f42400 	.word	0x00f42400

0800364c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e28d      	b.n	8003b7a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 8083 	beq.w	8003772 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800366c:	4b94      	ldr	r3, [pc, #592]	@ (80038c0 <HAL_RCC_OscConfig+0x274>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f003 030c 	and.w	r3, r3, #12
 8003674:	2b04      	cmp	r3, #4
 8003676:	d019      	beq.n	80036ac <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003678:	4b91      	ldr	r3, [pc, #580]	@ (80038c0 <HAL_RCC_OscConfig+0x274>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f003 030c 	and.w	r3, r3, #12
        || \
 8003680:	2b08      	cmp	r3, #8
 8003682:	d106      	bne.n	8003692 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003684:	4b8e      	ldr	r3, [pc, #568]	@ (80038c0 <HAL_RCC_OscConfig+0x274>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800368c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003690:	d00c      	beq.n	80036ac <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003692:	4b8b      	ldr	r3, [pc, #556]	@ (80038c0 <HAL_RCC_OscConfig+0x274>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800369a:	2b0c      	cmp	r3, #12
 800369c:	d112      	bne.n	80036c4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800369e:	4b88      	ldr	r3, [pc, #544]	@ (80038c0 <HAL_RCC_OscConfig+0x274>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036aa:	d10b      	bne.n	80036c4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ac:	4b84      	ldr	r3, [pc, #528]	@ (80038c0 <HAL_RCC_OscConfig+0x274>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d05b      	beq.n	8003770 <HAL_RCC_OscConfig+0x124>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d157      	bne.n	8003770 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e25a      	b.n	8003b7a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036cc:	d106      	bne.n	80036dc <HAL_RCC_OscConfig+0x90>
 80036ce:	4b7c      	ldr	r3, [pc, #496]	@ (80038c0 <HAL_RCC_OscConfig+0x274>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a7b      	ldr	r2, [pc, #492]	@ (80038c0 <HAL_RCC_OscConfig+0x274>)
 80036d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	e01d      	b.n	8003718 <HAL_RCC_OscConfig+0xcc>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036e4:	d10c      	bne.n	8003700 <HAL_RCC_OscConfig+0xb4>
 80036e6:	4b76      	ldr	r3, [pc, #472]	@ (80038c0 <HAL_RCC_OscConfig+0x274>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a75      	ldr	r2, [pc, #468]	@ (80038c0 <HAL_RCC_OscConfig+0x274>)
 80036ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036f0:	6013      	str	r3, [r2, #0]
 80036f2:	4b73      	ldr	r3, [pc, #460]	@ (80038c0 <HAL_RCC_OscConfig+0x274>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a72      	ldr	r2, [pc, #456]	@ (80038c0 <HAL_RCC_OscConfig+0x274>)
 80036f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036fc:	6013      	str	r3, [r2, #0]
 80036fe:	e00b      	b.n	8003718 <HAL_RCC_OscConfig+0xcc>
 8003700:	4b6f      	ldr	r3, [pc, #444]	@ (80038c0 <HAL_RCC_OscConfig+0x274>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a6e      	ldr	r2, [pc, #440]	@ (80038c0 <HAL_RCC_OscConfig+0x274>)
 8003706:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800370a:	6013      	str	r3, [r2, #0]
 800370c:	4b6c      	ldr	r3, [pc, #432]	@ (80038c0 <HAL_RCC_OscConfig+0x274>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a6b      	ldr	r2, [pc, #428]	@ (80038c0 <HAL_RCC_OscConfig+0x274>)
 8003712:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003716:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d013      	beq.n	8003748 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003720:	f7fe f8f2 	bl	8001908 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003728:	f7fe f8ee 	bl	8001908 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b64      	cmp	r3, #100	@ 0x64
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e21f      	b.n	8003b7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373a:	4b61      	ldr	r3, [pc, #388]	@ (80038c0 <HAL_RCC_OscConfig+0x274>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0f0      	beq.n	8003728 <HAL_RCC_OscConfig+0xdc>
 8003746:	e014      	b.n	8003772 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003748:	f7fe f8de 	bl	8001908 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003750:	f7fe f8da 	bl	8001908 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b64      	cmp	r3, #100	@ 0x64
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e20b      	b.n	8003b7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003762:	4b57      	ldr	r3, [pc, #348]	@ (80038c0 <HAL_RCC_OscConfig+0x274>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1f0      	bne.n	8003750 <HAL_RCC_OscConfig+0x104>
 800376e:	e000      	b.n	8003772 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d06f      	beq.n	800385e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800377e:	4b50      	ldr	r3, [pc, #320]	@ (80038c0 <HAL_RCC_OscConfig+0x274>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 030c 	and.w	r3, r3, #12
 8003786:	2b00      	cmp	r3, #0
 8003788:	d017      	beq.n	80037ba <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800378a:	4b4d      	ldr	r3, [pc, #308]	@ (80038c0 <HAL_RCC_OscConfig+0x274>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003792:	2b08      	cmp	r3, #8
 8003794:	d105      	bne.n	80037a2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003796:	4b4a      	ldr	r3, [pc, #296]	@ (80038c0 <HAL_RCC_OscConfig+0x274>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00b      	beq.n	80037ba <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037a2:	4b47      	ldr	r3, [pc, #284]	@ (80038c0 <HAL_RCC_OscConfig+0x274>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80037aa:	2b0c      	cmp	r3, #12
 80037ac:	d11c      	bne.n	80037e8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037ae:	4b44      	ldr	r3, [pc, #272]	@ (80038c0 <HAL_RCC_OscConfig+0x274>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d116      	bne.n	80037e8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ba:	4b41      	ldr	r3, [pc, #260]	@ (80038c0 <HAL_RCC_OscConfig+0x274>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d005      	beq.n	80037d2 <HAL_RCC_OscConfig+0x186>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d001      	beq.n	80037d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e1d3      	b.n	8003b7a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d2:	4b3b      	ldr	r3, [pc, #236]	@ (80038c0 <HAL_RCC_OscConfig+0x274>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	4937      	ldr	r1, [pc, #220]	@ (80038c0 <HAL_RCC_OscConfig+0x274>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037e6:	e03a      	b.n	800385e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d020      	beq.n	8003832 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037f0:	4b34      	ldr	r3, [pc, #208]	@ (80038c4 <HAL_RCC_OscConfig+0x278>)
 80037f2:	2201      	movs	r2, #1
 80037f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f6:	f7fe f887 	bl	8001908 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037fc:	e008      	b.n	8003810 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037fe:	f7fe f883 	bl	8001908 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e1b4      	b.n	8003b7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003810:	4b2b      	ldr	r3, [pc, #172]	@ (80038c0 <HAL_RCC_OscConfig+0x274>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0f0      	beq.n	80037fe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800381c:	4b28      	ldr	r3, [pc, #160]	@ (80038c0 <HAL_RCC_OscConfig+0x274>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	4925      	ldr	r1, [pc, #148]	@ (80038c0 <HAL_RCC_OscConfig+0x274>)
 800382c:	4313      	orrs	r3, r2
 800382e:	600b      	str	r3, [r1, #0]
 8003830:	e015      	b.n	800385e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003832:	4b24      	ldr	r3, [pc, #144]	@ (80038c4 <HAL_RCC_OscConfig+0x278>)
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003838:	f7fe f866 	bl	8001908 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003840:	f7fe f862 	bl	8001908 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e193      	b.n	8003b7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003852:	4b1b      	ldr	r3, [pc, #108]	@ (80038c0 <HAL_RCC_OscConfig+0x274>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1f0      	bne.n	8003840 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b00      	cmp	r3, #0
 8003868:	d036      	beq.n	80038d8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d016      	beq.n	80038a0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003872:	4b15      	ldr	r3, [pc, #84]	@ (80038c8 <HAL_RCC_OscConfig+0x27c>)
 8003874:	2201      	movs	r2, #1
 8003876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003878:	f7fe f846 	bl	8001908 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003880:	f7fe f842 	bl	8001908 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e173      	b.n	8003b7a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003892:	4b0b      	ldr	r3, [pc, #44]	@ (80038c0 <HAL_RCC_OscConfig+0x274>)
 8003894:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d0f0      	beq.n	8003880 <HAL_RCC_OscConfig+0x234>
 800389e:	e01b      	b.n	80038d8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038a0:	4b09      	ldr	r3, [pc, #36]	@ (80038c8 <HAL_RCC_OscConfig+0x27c>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a6:	f7fe f82f 	bl	8001908 <HAL_GetTick>
 80038aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ac:	e00e      	b.n	80038cc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ae:	f7fe f82b 	bl	8001908 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d907      	bls.n	80038cc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e15c      	b.n	8003b7a <HAL_RCC_OscConfig+0x52e>
 80038c0:	40023800 	.word	0x40023800
 80038c4:	42470000 	.word	0x42470000
 80038c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038cc:	4b8a      	ldr	r3, [pc, #552]	@ (8003af8 <HAL_RCC_OscConfig+0x4ac>)
 80038ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1ea      	bne.n	80038ae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 8097 	beq.w	8003a14 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038e6:	2300      	movs	r3, #0
 80038e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ea:	4b83      	ldr	r3, [pc, #524]	@ (8003af8 <HAL_RCC_OscConfig+0x4ac>)
 80038ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10f      	bne.n	8003916 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038f6:	2300      	movs	r3, #0
 80038f8:	60bb      	str	r3, [r7, #8]
 80038fa:	4b7f      	ldr	r3, [pc, #508]	@ (8003af8 <HAL_RCC_OscConfig+0x4ac>)
 80038fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fe:	4a7e      	ldr	r2, [pc, #504]	@ (8003af8 <HAL_RCC_OscConfig+0x4ac>)
 8003900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003904:	6413      	str	r3, [r2, #64]	@ 0x40
 8003906:	4b7c      	ldr	r3, [pc, #496]	@ (8003af8 <HAL_RCC_OscConfig+0x4ac>)
 8003908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800390e:	60bb      	str	r3, [r7, #8]
 8003910:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003912:	2301      	movs	r3, #1
 8003914:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003916:	4b79      	ldr	r3, [pc, #484]	@ (8003afc <HAL_RCC_OscConfig+0x4b0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800391e:	2b00      	cmp	r3, #0
 8003920:	d118      	bne.n	8003954 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003922:	4b76      	ldr	r3, [pc, #472]	@ (8003afc <HAL_RCC_OscConfig+0x4b0>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a75      	ldr	r2, [pc, #468]	@ (8003afc <HAL_RCC_OscConfig+0x4b0>)
 8003928:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800392c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800392e:	f7fd ffeb 	bl	8001908 <HAL_GetTick>
 8003932:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003934:	e008      	b.n	8003948 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003936:	f7fd ffe7 	bl	8001908 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e118      	b.n	8003b7a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003948:	4b6c      	ldr	r3, [pc, #432]	@ (8003afc <HAL_RCC_OscConfig+0x4b0>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0f0      	beq.n	8003936 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d106      	bne.n	800396a <HAL_RCC_OscConfig+0x31e>
 800395c:	4b66      	ldr	r3, [pc, #408]	@ (8003af8 <HAL_RCC_OscConfig+0x4ac>)
 800395e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003960:	4a65      	ldr	r2, [pc, #404]	@ (8003af8 <HAL_RCC_OscConfig+0x4ac>)
 8003962:	f043 0301 	orr.w	r3, r3, #1
 8003966:	6713      	str	r3, [r2, #112]	@ 0x70
 8003968:	e01c      	b.n	80039a4 <HAL_RCC_OscConfig+0x358>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	2b05      	cmp	r3, #5
 8003970:	d10c      	bne.n	800398c <HAL_RCC_OscConfig+0x340>
 8003972:	4b61      	ldr	r3, [pc, #388]	@ (8003af8 <HAL_RCC_OscConfig+0x4ac>)
 8003974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003976:	4a60      	ldr	r2, [pc, #384]	@ (8003af8 <HAL_RCC_OscConfig+0x4ac>)
 8003978:	f043 0304 	orr.w	r3, r3, #4
 800397c:	6713      	str	r3, [r2, #112]	@ 0x70
 800397e:	4b5e      	ldr	r3, [pc, #376]	@ (8003af8 <HAL_RCC_OscConfig+0x4ac>)
 8003980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003982:	4a5d      	ldr	r2, [pc, #372]	@ (8003af8 <HAL_RCC_OscConfig+0x4ac>)
 8003984:	f043 0301 	orr.w	r3, r3, #1
 8003988:	6713      	str	r3, [r2, #112]	@ 0x70
 800398a:	e00b      	b.n	80039a4 <HAL_RCC_OscConfig+0x358>
 800398c:	4b5a      	ldr	r3, [pc, #360]	@ (8003af8 <HAL_RCC_OscConfig+0x4ac>)
 800398e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003990:	4a59      	ldr	r2, [pc, #356]	@ (8003af8 <HAL_RCC_OscConfig+0x4ac>)
 8003992:	f023 0301 	bic.w	r3, r3, #1
 8003996:	6713      	str	r3, [r2, #112]	@ 0x70
 8003998:	4b57      	ldr	r3, [pc, #348]	@ (8003af8 <HAL_RCC_OscConfig+0x4ac>)
 800399a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800399c:	4a56      	ldr	r2, [pc, #344]	@ (8003af8 <HAL_RCC_OscConfig+0x4ac>)
 800399e:	f023 0304 	bic.w	r3, r3, #4
 80039a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d015      	beq.n	80039d8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ac:	f7fd ffac 	bl	8001908 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b2:	e00a      	b.n	80039ca <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b4:	f7fd ffa8 	bl	8001908 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e0d7      	b.n	8003b7a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ca:	4b4b      	ldr	r3, [pc, #300]	@ (8003af8 <HAL_RCC_OscConfig+0x4ac>)
 80039cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0ee      	beq.n	80039b4 <HAL_RCC_OscConfig+0x368>
 80039d6:	e014      	b.n	8003a02 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d8:	f7fd ff96 	bl	8001908 <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039de:	e00a      	b.n	80039f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039e0:	f7fd ff92 	bl	8001908 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e0c1      	b.n	8003b7a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039f6:	4b40      	ldr	r3, [pc, #256]	@ (8003af8 <HAL_RCC_OscConfig+0x4ac>)
 80039f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1ee      	bne.n	80039e0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a02:	7dfb      	ldrb	r3, [r7, #23]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d105      	bne.n	8003a14 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a08:	4b3b      	ldr	r3, [pc, #236]	@ (8003af8 <HAL_RCC_OscConfig+0x4ac>)
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0c:	4a3a      	ldr	r2, [pc, #232]	@ (8003af8 <HAL_RCC_OscConfig+0x4ac>)
 8003a0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a12:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 80ad 	beq.w	8003b78 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a1e:	4b36      	ldr	r3, [pc, #216]	@ (8003af8 <HAL_RCC_OscConfig+0x4ac>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 030c 	and.w	r3, r3, #12
 8003a26:	2b08      	cmp	r3, #8
 8003a28:	d060      	beq.n	8003aec <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d145      	bne.n	8003abe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a32:	4b33      	ldr	r3, [pc, #204]	@ (8003b00 <HAL_RCC_OscConfig+0x4b4>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a38:	f7fd ff66 	bl	8001908 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a40:	f7fd ff62 	bl	8001908 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e093      	b.n	8003b7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a52:	4b29      	ldr	r3, [pc, #164]	@ (8003af8 <HAL_RCC_OscConfig+0x4ac>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1f0      	bne.n	8003a40 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	69da      	ldr	r2, [r3, #28]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	431a      	orrs	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6c:	019b      	lsls	r3, r3, #6
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a74:	085b      	lsrs	r3, r3, #1
 8003a76:	3b01      	subs	r3, #1
 8003a78:	041b      	lsls	r3, r3, #16
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a80:	061b      	lsls	r3, r3, #24
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a88:	071b      	lsls	r3, r3, #28
 8003a8a:	491b      	ldr	r1, [pc, #108]	@ (8003af8 <HAL_RCC_OscConfig+0x4ac>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a90:	4b1b      	ldr	r3, [pc, #108]	@ (8003b00 <HAL_RCC_OscConfig+0x4b4>)
 8003a92:	2201      	movs	r2, #1
 8003a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a96:	f7fd ff37 	bl	8001908 <HAL_GetTick>
 8003a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9c:	e008      	b.n	8003ab0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a9e:	f7fd ff33 	bl	8001908 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e064      	b.n	8003b7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab0:	4b11      	ldr	r3, [pc, #68]	@ (8003af8 <HAL_RCC_OscConfig+0x4ac>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0f0      	beq.n	8003a9e <HAL_RCC_OscConfig+0x452>
 8003abc:	e05c      	b.n	8003b78 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003abe:	4b10      	ldr	r3, [pc, #64]	@ (8003b00 <HAL_RCC_OscConfig+0x4b4>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac4:	f7fd ff20 	bl	8001908 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003acc:	f7fd ff1c 	bl	8001908 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e04d      	b.n	8003b7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ade:	4b06      	ldr	r3, [pc, #24]	@ (8003af8 <HAL_RCC_OscConfig+0x4ac>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f0      	bne.n	8003acc <HAL_RCC_OscConfig+0x480>
 8003aea:	e045      	b.n	8003b78 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d107      	bne.n	8003b04 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e040      	b.n	8003b7a <HAL_RCC_OscConfig+0x52e>
 8003af8:	40023800 	.word	0x40023800
 8003afc:	40007000 	.word	0x40007000
 8003b00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b04:	4b1f      	ldr	r3, [pc, #124]	@ (8003b84 <HAL_RCC_OscConfig+0x538>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d030      	beq.n	8003b74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d129      	bne.n	8003b74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d122      	bne.n	8003b74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b34:	4013      	ands	r3, r2
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d119      	bne.n	8003b74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b4a:	085b      	lsrs	r3, r3, #1
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d10f      	bne.n	8003b74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d107      	bne.n	8003b74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b6e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d001      	beq.n	8003b78 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e000      	b.n	8003b7a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40023800 	.word	0x40023800

08003b88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e042      	b.n	8003c20 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d106      	bne.n	8003bb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7fd fc94 	bl	80014dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2224      	movs	r2, #36	@ 0x24
 8003bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003bca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 fdbd 	bl	800474c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	691a      	ldr	r2, [r3, #16]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003be0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	695a      	ldr	r2, [r3, #20]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2220      	movs	r2, #32
 8003c14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b08a      	sub	sp, #40	@ 0x28
 8003c2c:	af02      	add	r7, sp, #8
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	603b      	str	r3, [r7, #0]
 8003c34:	4613      	mov	r3, r2
 8003c36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b20      	cmp	r3, #32
 8003c46:	d175      	bne.n	8003d34 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d002      	beq.n	8003c54 <HAL_UART_Transmit+0x2c>
 8003c4e:	88fb      	ldrh	r3, [r7, #6]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e06e      	b.n	8003d36 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2221      	movs	r2, #33	@ 0x21
 8003c62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c66:	f7fd fe4f 	bl	8001908 <HAL_GetTick>
 8003c6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	88fa      	ldrh	r2, [r7, #6]
 8003c70:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	88fa      	ldrh	r2, [r7, #6]
 8003c76:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c80:	d108      	bne.n	8003c94 <HAL_UART_Transmit+0x6c>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d104      	bne.n	8003c94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	61bb      	str	r3, [r7, #24]
 8003c92:	e003      	b.n	8003c9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c9c:	e02e      	b.n	8003cfc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	2180      	movs	r1, #128	@ 0x80
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f000 fb1f 	bl	80042ec <UART_WaitOnFlagUntilTimeout>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d005      	beq.n	8003cc0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e03a      	b.n	8003d36 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10b      	bne.n	8003cde <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	3302      	adds	r3, #2
 8003cda:	61bb      	str	r3, [r7, #24]
 8003cdc:	e007      	b.n	8003cee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	781a      	ldrb	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	3301      	adds	r3, #1
 8003cec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1cb      	bne.n	8003c9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	2140      	movs	r1, #64	@ 0x40
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 faeb 	bl	80042ec <UART_WaitOnFlagUntilTimeout>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d005      	beq.n	8003d28 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e006      	b.n	8003d36 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	e000      	b.n	8003d36 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003d34:	2302      	movs	r3, #2
  }
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3720      	adds	r7, #32
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b084      	sub	sp, #16
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	60b9      	str	r1, [r7, #8]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b20      	cmp	r3, #32
 8003d56:	d112      	bne.n	8003d7e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d002      	beq.n	8003d64 <HAL_UART_Receive_IT+0x26>
 8003d5e:	88fb      	ldrh	r3, [r7, #6]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e00b      	b.n	8003d80 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d6e:	88fb      	ldrh	r3, [r7, #6]
 8003d70:	461a      	mov	r2, r3
 8003d72:	68b9      	ldr	r1, [r7, #8]
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 fb12 	bl	800439e <UART_Start_Receive_IT>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	e000      	b.n	8003d80 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003d7e:	2302      	movs	r3, #2
  }
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b0ba      	sub	sp, #232	@ 0xe8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003dc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10f      	bne.n	8003dee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dd2:	f003 0320 	and.w	r3, r3, #32
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d009      	beq.n	8003dee <HAL_UART_IRQHandler+0x66>
 8003dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dde:	f003 0320 	and.w	r3, r3, #32
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 fbf2 	bl	80045d0 <UART_Receive_IT>
      return;
 8003dec:	e25b      	b.n	80042a6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003dee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 80de 	beq.w	8003fb4 <HAL_UART_IRQHandler+0x22c>
 8003df8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d106      	bne.n	8003e12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e08:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 80d1 	beq.w	8003fb4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00b      	beq.n	8003e36 <HAL_UART_IRQHandler+0xae>
 8003e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d005      	beq.n	8003e36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e2e:	f043 0201 	orr.w	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e3a:	f003 0304 	and.w	r3, r3, #4
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00b      	beq.n	8003e5a <HAL_UART_IRQHandler+0xd2>
 8003e42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d005      	beq.n	8003e5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e52:	f043 0202 	orr.w	r2, r3, #2
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00b      	beq.n	8003e7e <HAL_UART_IRQHandler+0xf6>
 8003e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d005      	beq.n	8003e7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e76:	f043 0204 	orr.w	r2, r3, #4
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d011      	beq.n	8003eae <HAL_UART_IRQHandler+0x126>
 8003e8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e8e:	f003 0320 	and.w	r3, r3, #32
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d105      	bne.n	8003ea2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d005      	beq.n	8003eae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea6:	f043 0208 	orr.w	r2, r3, #8
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 81f2 	beq.w	800429c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ebc:	f003 0320 	and.w	r3, r3, #32
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d008      	beq.n	8003ed6 <HAL_UART_IRQHandler+0x14e>
 8003ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ec8:	f003 0320 	and.w	r3, r3, #32
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d002      	beq.n	8003ed6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 fb7d 	bl	80045d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee0:	2b40      	cmp	r3, #64	@ 0x40
 8003ee2:	bf0c      	ite	eq
 8003ee4:	2301      	moveq	r3, #1
 8003ee6:	2300      	movne	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d103      	bne.n	8003f02 <HAL_UART_IRQHandler+0x17a>
 8003efa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d04f      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 fa85 	bl	8004412 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f12:	2b40      	cmp	r3, #64	@ 0x40
 8003f14:	d141      	bne.n	8003f9a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3314      	adds	r3, #20
 8003f1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f24:	e853 3f00 	ldrex	r3, [r3]
 8003f28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003f2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3314      	adds	r3, #20
 8003f3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003f42:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003f46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003f4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003f52:	e841 2300 	strex	r3, r2, [r1]
 8003f56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003f5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1d9      	bne.n	8003f16 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d013      	beq.n	8003f92 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f6e:	4a7e      	ldr	r2, [pc, #504]	@ (8004168 <HAL_UART_IRQHandler+0x3e0>)
 8003f70:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fd fe53 	bl	8001c22 <HAL_DMA_Abort_IT>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d016      	beq.n	8003fb0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f90:	e00e      	b.n	8003fb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f994 	bl	80042c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f98:	e00a      	b.n	8003fb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f990 	bl	80042c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa0:	e006      	b.n	8003fb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f98c 	bl	80042c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003fae:	e175      	b.n	800429c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb0:	bf00      	nop
    return;
 8003fb2:	e173      	b.n	800429c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	f040 814f 	bne.w	800425c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fc2:	f003 0310 	and.w	r3, r3, #16
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 8148 	beq.w	800425c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fd0:	f003 0310 	and.w	r3, r3, #16
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 8141 	beq.w	800425c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60bb      	str	r3, [r7, #8]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	60bb      	str	r3, [r7, #8]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	60bb      	str	r3, [r7, #8]
 8003fee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ffa:	2b40      	cmp	r3, #64	@ 0x40
 8003ffc:	f040 80b6 	bne.w	800416c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800400c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 8145 	beq.w	80042a0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800401a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800401e:	429a      	cmp	r2, r3
 8004020:	f080 813e 	bcs.w	80042a0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800402a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004036:	f000 8088 	beq.w	800414a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	330c      	adds	r3, #12
 8004040:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004044:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004048:	e853 3f00 	ldrex	r3, [r3]
 800404c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004050:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004054:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004058:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	330c      	adds	r3, #12
 8004062:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004066:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800406a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004072:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004076:	e841 2300 	strex	r3, r2, [r1]
 800407a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800407e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1d9      	bne.n	800403a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3314      	adds	r3, #20
 800408c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004090:	e853 3f00 	ldrex	r3, [r3]
 8004094:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004096:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004098:	f023 0301 	bic.w	r3, r3, #1
 800409c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3314      	adds	r3, #20
 80040a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80040aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80040ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80040b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80040b6:	e841 2300 	strex	r3, r2, [r1]
 80040ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80040bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1e1      	bne.n	8004086 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	3314      	adds	r3, #20
 80040c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040cc:	e853 3f00 	ldrex	r3, [r3]
 80040d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80040d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	3314      	adds	r3, #20
 80040e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80040e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80040e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80040ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80040ee:	e841 2300 	strex	r3, r2, [r1]
 80040f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80040f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1e3      	bne.n	80040c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2220      	movs	r2, #32
 80040fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	330c      	adds	r3, #12
 800410e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004110:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004112:	e853 3f00 	ldrex	r3, [r3]
 8004116:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004118:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800411a:	f023 0310 	bic.w	r3, r3, #16
 800411e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	330c      	adds	r3, #12
 8004128:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800412c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800412e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004130:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004132:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004134:	e841 2300 	strex	r3, r2, [r1]
 8004138:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800413a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1e3      	bne.n	8004108 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004144:	4618      	mov	r0, r3
 8004146:	f7fd fcfc 	bl	8001b42 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2202      	movs	r2, #2
 800414e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004158:	b29b      	uxth	r3, r3
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	b29b      	uxth	r3, r3
 800415e:	4619      	mov	r1, r3
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f8b7 	bl	80042d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004166:	e09b      	b.n	80042a0 <HAL_UART_IRQHandler+0x518>
 8004168:	080044d9 	.word	0x080044d9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004174:	b29b      	uxth	r3, r3
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 808e 	beq.w	80042a4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004188:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800418c:	2b00      	cmp	r3, #0
 800418e:	f000 8089 	beq.w	80042a4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	330c      	adds	r3, #12
 8004198:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800419c:	e853 3f00 	ldrex	r3, [r3]
 80041a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	330c      	adds	r3, #12
 80041b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80041b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80041b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041be:	e841 2300 	strex	r3, r2, [r1]
 80041c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1e3      	bne.n	8004192 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3314      	adds	r3, #20
 80041d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d4:	e853 3f00 	ldrex	r3, [r3]
 80041d8:	623b      	str	r3, [r7, #32]
   return(result);
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	f023 0301 	bic.w	r3, r3, #1
 80041e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	3314      	adds	r3, #20
 80041ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80041ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80041f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041f6:	e841 2300 	strex	r3, r2, [r1]
 80041fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1e3      	bne.n	80041ca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2220      	movs	r2, #32
 8004206:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	330c      	adds	r3, #12
 8004216:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	e853 3f00 	ldrex	r3, [r3]
 800421e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f023 0310 	bic.w	r3, r3, #16
 8004226:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	330c      	adds	r3, #12
 8004230:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004234:	61fa      	str	r2, [r7, #28]
 8004236:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004238:	69b9      	ldr	r1, [r7, #24]
 800423a:	69fa      	ldr	r2, [r7, #28]
 800423c:	e841 2300 	strex	r3, r2, [r1]
 8004240:	617b      	str	r3, [r7, #20]
   return(result);
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1e3      	bne.n	8004210 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800424e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004252:	4619      	mov	r1, r3
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f83d 	bl	80042d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800425a:	e023      	b.n	80042a4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800425c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004260:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004264:	2b00      	cmp	r3, #0
 8004266:	d009      	beq.n	800427c <HAL_UART_IRQHandler+0x4f4>
 8004268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800426c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f943 	bl	8004500 <UART_Transmit_IT>
    return;
 800427a:	e014      	b.n	80042a6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800427c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00e      	beq.n	80042a6 <HAL_UART_IRQHandler+0x51e>
 8004288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800428c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004290:	2b00      	cmp	r3, #0
 8004292:	d008      	beq.n	80042a6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f983 	bl	80045a0 <UART_EndTransmit_IT>
    return;
 800429a:	e004      	b.n	80042a6 <HAL_UART_IRQHandler+0x51e>
    return;
 800429c:	bf00      	nop
 800429e:	e002      	b.n	80042a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80042a0:	bf00      	nop
 80042a2:	e000      	b.n	80042a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80042a4:	bf00      	nop
  }
}
 80042a6:	37e8      	adds	r7, #232	@ 0xe8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	460b      	mov	r3, r1
 80042de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	603b      	str	r3, [r7, #0]
 80042f8:	4613      	mov	r3, r2
 80042fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042fc:	e03b      	b.n	8004376 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042fe:	6a3b      	ldr	r3, [r7, #32]
 8004300:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004304:	d037      	beq.n	8004376 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004306:	f7fd faff 	bl	8001908 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	6a3a      	ldr	r2, [r7, #32]
 8004312:	429a      	cmp	r2, r3
 8004314:	d302      	bcc.n	800431c <UART_WaitOnFlagUntilTimeout+0x30>
 8004316:	6a3b      	ldr	r3, [r7, #32]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e03a      	b.n	8004396 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	f003 0304 	and.w	r3, r3, #4
 800432a:	2b00      	cmp	r3, #0
 800432c:	d023      	beq.n	8004376 <UART_WaitOnFlagUntilTimeout+0x8a>
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	2b80      	cmp	r3, #128	@ 0x80
 8004332:	d020      	beq.n	8004376 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2b40      	cmp	r3, #64	@ 0x40
 8004338:	d01d      	beq.n	8004376 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0308 	and.w	r3, r3, #8
 8004344:	2b08      	cmp	r3, #8
 8004346:	d116      	bne.n	8004376 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004348:	2300      	movs	r3, #0
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	617b      	str	r3, [r7, #20]
 800435c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 f857 	bl	8004412 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2208      	movs	r2, #8
 8004368:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e00f      	b.n	8004396 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4013      	ands	r3, r2
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	429a      	cmp	r2, r3
 8004384:	bf0c      	ite	eq
 8004386:	2301      	moveq	r3, #1
 8004388:	2300      	movne	r3, #0
 800438a:	b2db      	uxtb	r3, r3
 800438c:	461a      	mov	r2, r3
 800438e:	79fb      	ldrb	r3, [r7, #7]
 8004390:	429a      	cmp	r2, r3
 8004392:	d0b4      	beq.n	80042fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3718      	adds	r7, #24
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800439e:	b480      	push	{r7}
 80043a0:	b085      	sub	sp, #20
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	60f8      	str	r0, [r7, #12]
 80043a6:	60b9      	str	r1, [r7, #8]
 80043a8:	4613      	mov	r3, r2
 80043aa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	88fa      	ldrh	r2, [r7, #6]
 80043b6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	88fa      	ldrh	r2, [r7, #6]
 80043bc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2222      	movs	r2, #34	@ 0x22
 80043c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d007      	beq.n	80043e4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043e2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	695a      	ldr	r2, [r3, #20]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0201 	orr.w	r2, r2, #1
 80043f2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0220 	orr.w	r2, r2, #32
 8004402:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004412:	b480      	push	{r7}
 8004414:	b095      	sub	sp, #84	@ 0x54
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	330c      	adds	r3, #12
 8004420:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004424:	e853 3f00 	ldrex	r3, [r3]
 8004428:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800442a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800442c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004430:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	330c      	adds	r3, #12
 8004438:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800443a:	643a      	str	r2, [r7, #64]	@ 0x40
 800443c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004440:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004442:	e841 2300 	strex	r3, r2, [r1]
 8004446:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1e5      	bne.n	800441a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	3314      	adds	r3, #20
 8004454:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	e853 3f00 	ldrex	r3, [r3]
 800445c:	61fb      	str	r3, [r7, #28]
   return(result);
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	f023 0301 	bic.w	r3, r3, #1
 8004464:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3314      	adds	r3, #20
 800446c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800446e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004470:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004472:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004474:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004476:	e841 2300 	strex	r3, r2, [r1]
 800447a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800447c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1e5      	bne.n	800444e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004486:	2b01      	cmp	r3, #1
 8004488:	d119      	bne.n	80044be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	330c      	adds	r3, #12
 8004490:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	e853 3f00 	ldrex	r3, [r3]
 8004498:	60bb      	str	r3, [r7, #8]
   return(result);
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f023 0310 	bic.w	r3, r3, #16
 80044a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	330c      	adds	r3, #12
 80044a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044aa:	61ba      	str	r2, [r7, #24]
 80044ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ae:	6979      	ldr	r1, [r7, #20]
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	e841 2300 	strex	r3, r2, [r1]
 80044b6:	613b      	str	r3, [r7, #16]
   return(result);
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1e5      	bne.n	800448a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2220      	movs	r2, #32
 80044c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80044cc:	bf00      	nop
 80044ce:	3754      	adds	r7, #84	@ 0x54
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f7ff fee4 	bl	80042c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044f8:	bf00      	nop
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b21      	cmp	r3, #33	@ 0x21
 8004512:	d13e      	bne.n	8004592 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800451c:	d114      	bne.n	8004548 <UART_Transmit_IT+0x48>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d110      	bne.n	8004548 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	881b      	ldrh	r3, [r3, #0]
 8004530:	461a      	mov	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800453a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	1c9a      	adds	r2, r3, #2
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	621a      	str	r2, [r3, #32]
 8004546:	e008      	b.n	800455a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	1c59      	adds	r1, r3, #1
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6211      	str	r1, [r2, #32]
 8004552:	781a      	ldrb	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800455e:	b29b      	uxth	r3, r3
 8004560:	3b01      	subs	r3, #1
 8004562:	b29b      	uxth	r3, r3
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	4619      	mov	r1, r3
 8004568:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10f      	bne.n	800458e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800457c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68da      	ldr	r2, [r3, #12]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800458c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	e000      	b.n	8004594 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004592:	2302      	movs	r3, #2
  }
}
 8004594:	4618      	mov	r0, r3
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68da      	ldr	r2, [r3, #12]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2220      	movs	r2, #32
 80045bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f7ff fe73 	bl	80042ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08c      	sub	sp, #48	@ 0x30
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b22      	cmp	r3, #34	@ 0x22
 80045e2:	f040 80ae 	bne.w	8004742 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045ee:	d117      	bne.n	8004620 <UART_Receive_IT+0x50>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d113      	bne.n	8004620 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80045f8:	2300      	movs	r3, #0
 80045fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004600:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	b29b      	uxth	r3, r3
 800460a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800460e:	b29a      	uxth	r2, r3
 8004610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004612:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004618:	1c9a      	adds	r2, r3, #2
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	629a      	str	r2, [r3, #40]	@ 0x28
 800461e:	e026      	b.n	800466e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004624:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004626:	2300      	movs	r3, #0
 8004628:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004632:	d007      	beq.n	8004644 <UART_Receive_IT+0x74>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10a      	bne.n	8004652 <UART_Receive_IT+0x82>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d106      	bne.n	8004652 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	b2da      	uxtb	r2, r3
 800464c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800464e:	701a      	strb	r2, [r3, #0]
 8004650:	e008      	b.n	8004664 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	b2db      	uxtb	r3, r3
 800465a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800465e:	b2da      	uxtb	r2, r3
 8004660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004662:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004672:	b29b      	uxth	r3, r3
 8004674:	3b01      	subs	r3, #1
 8004676:	b29b      	uxth	r3, r3
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	4619      	mov	r1, r3
 800467c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800467e:	2b00      	cmp	r3, #0
 8004680:	d15d      	bne.n	800473e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68da      	ldr	r2, [r3, #12]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 0220 	bic.w	r2, r2, #32
 8004690:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68da      	ldr	r2, [r3, #12]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	695a      	ldr	r2, [r3, #20]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0201 	bic.w	r2, r2, #1
 80046b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d135      	bne.n	8004734 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	330c      	adds	r3, #12
 80046d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	e853 3f00 	ldrex	r3, [r3]
 80046dc:	613b      	str	r3, [r7, #16]
   return(result);
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f023 0310 	bic.w	r3, r3, #16
 80046e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	330c      	adds	r3, #12
 80046ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046ee:	623a      	str	r2, [r7, #32]
 80046f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f2:	69f9      	ldr	r1, [r7, #28]
 80046f4:	6a3a      	ldr	r2, [r7, #32]
 80046f6:	e841 2300 	strex	r3, r2, [r1]
 80046fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1e5      	bne.n	80046ce <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0310 	and.w	r3, r3, #16
 800470c:	2b10      	cmp	r3, #16
 800470e:	d10a      	bne.n	8004726 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004710:	2300      	movs	r3, #0
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800472a:	4619      	mov	r1, r3
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f7ff fdd1 	bl	80042d4 <HAL_UARTEx_RxEventCallback>
 8004732:	e002      	b.n	800473a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f7fc fcb9 	bl	80010ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	e002      	b.n	8004744 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	e000      	b.n	8004744 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004742:	2302      	movs	r3, #2
  }
}
 8004744:	4618      	mov	r0, r3
 8004746:	3730      	adds	r7, #48	@ 0x30
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800474c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004750:	b0c0      	sub	sp, #256	@ 0x100
 8004752:	af00      	add	r7, sp, #0
 8004754:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004768:	68d9      	ldr	r1, [r3, #12]
 800476a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	ea40 0301 	orr.w	r3, r0, r1
 8004774:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	431a      	orrs	r2, r3
 8004784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	431a      	orrs	r2, r3
 800478c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	4313      	orrs	r3, r2
 8004794:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80047a4:	f021 010c 	bic.w	r1, r1, #12
 80047a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80047b2:	430b      	orrs	r3, r1
 80047b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80047c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c6:	6999      	ldr	r1, [r3, #24]
 80047c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	ea40 0301 	orr.w	r3, r0, r1
 80047d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	4b8f      	ldr	r3, [pc, #572]	@ (8004a18 <UART_SetConfig+0x2cc>)
 80047dc:	429a      	cmp	r2, r3
 80047de:	d005      	beq.n	80047ec <UART_SetConfig+0xa0>
 80047e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	4b8d      	ldr	r3, [pc, #564]	@ (8004a1c <UART_SetConfig+0x2d0>)
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d104      	bne.n	80047f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047ec:	f7fe fcea 	bl	80031c4 <HAL_RCC_GetPCLK2Freq>
 80047f0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80047f4:	e003      	b.n	80047fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047f6:	f7fe fcd1 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 80047fa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004808:	f040 810c 	bne.w	8004a24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800480c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004810:	2200      	movs	r2, #0
 8004812:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004816:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800481a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800481e:	4622      	mov	r2, r4
 8004820:	462b      	mov	r3, r5
 8004822:	1891      	adds	r1, r2, r2
 8004824:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004826:	415b      	adcs	r3, r3
 8004828:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800482a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800482e:	4621      	mov	r1, r4
 8004830:	eb12 0801 	adds.w	r8, r2, r1
 8004834:	4629      	mov	r1, r5
 8004836:	eb43 0901 	adc.w	r9, r3, r1
 800483a:	f04f 0200 	mov.w	r2, #0
 800483e:	f04f 0300 	mov.w	r3, #0
 8004842:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004846:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800484a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800484e:	4690      	mov	r8, r2
 8004850:	4699      	mov	r9, r3
 8004852:	4623      	mov	r3, r4
 8004854:	eb18 0303 	adds.w	r3, r8, r3
 8004858:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800485c:	462b      	mov	r3, r5
 800485e:	eb49 0303 	adc.w	r3, r9, r3
 8004862:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004872:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004876:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800487a:	460b      	mov	r3, r1
 800487c:	18db      	adds	r3, r3, r3
 800487e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004880:	4613      	mov	r3, r2
 8004882:	eb42 0303 	adc.w	r3, r2, r3
 8004886:	657b      	str	r3, [r7, #84]	@ 0x54
 8004888:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800488c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004890:	f7fb fd6e 	bl	8000370 <__aeabi_uldivmod>
 8004894:	4602      	mov	r2, r0
 8004896:	460b      	mov	r3, r1
 8004898:	4b61      	ldr	r3, [pc, #388]	@ (8004a20 <UART_SetConfig+0x2d4>)
 800489a:	fba3 2302 	umull	r2, r3, r3, r2
 800489e:	095b      	lsrs	r3, r3, #5
 80048a0:	011c      	lsls	r4, r3, #4
 80048a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048a6:	2200      	movs	r2, #0
 80048a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80048ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80048b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80048b4:	4642      	mov	r2, r8
 80048b6:	464b      	mov	r3, r9
 80048b8:	1891      	adds	r1, r2, r2
 80048ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80048bc:	415b      	adcs	r3, r3
 80048be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80048c4:	4641      	mov	r1, r8
 80048c6:	eb12 0a01 	adds.w	sl, r2, r1
 80048ca:	4649      	mov	r1, r9
 80048cc:	eb43 0b01 	adc.w	fp, r3, r1
 80048d0:	f04f 0200 	mov.w	r2, #0
 80048d4:	f04f 0300 	mov.w	r3, #0
 80048d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048e4:	4692      	mov	sl, r2
 80048e6:	469b      	mov	fp, r3
 80048e8:	4643      	mov	r3, r8
 80048ea:	eb1a 0303 	adds.w	r3, sl, r3
 80048ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80048f2:	464b      	mov	r3, r9
 80048f4:	eb4b 0303 	adc.w	r3, fp, r3
 80048f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80048fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004908:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800490c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004910:	460b      	mov	r3, r1
 8004912:	18db      	adds	r3, r3, r3
 8004914:	643b      	str	r3, [r7, #64]	@ 0x40
 8004916:	4613      	mov	r3, r2
 8004918:	eb42 0303 	adc.w	r3, r2, r3
 800491c:	647b      	str	r3, [r7, #68]	@ 0x44
 800491e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004922:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004926:	f7fb fd23 	bl	8000370 <__aeabi_uldivmod>
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	4611      	mov	r1, r2
 8004930:	4b3b      	ldr	r3, [pc, #236]	@ (8004a20 <UART_SetConfig+0x2d4>)
 8004932:	fba3 2301 	umull	r2, r3, r3, r1
 8004936:	095b      	lsrs	r3, r3, #5
 8004938:	2264      	movs	r2, #100	@ 0x64
 800493a:	fb02 f303 	mul.w	r3, r2, r3
 800493e:	1acb      	subs	r3, r1, r3
 8004940:	00db      	lsls	r3, r3, #3
 8004942:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004946:	4b36      	ldr	r3, [pc, #216]	@ (8004a20 <UART_SetConfig+0x2d4>)
 8004948:	fba3 2302 	umull	r2, r3, r3, r2
 800494c:	095b      	lsrs	r3, r3, #5
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004954:	441c      	add	r4, r3
 8004956:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800495a:	2200      	movs	r2, #0
 800495c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004960:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004964:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004968:	4642      	mov	r2, r8
 800496a:	464b      	mov	r3, r9
 800496c:	1891      	adds	r1, r2, r2
 800496e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004970:	415b      	adcs	r3, r3
 8004972:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004974:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004978:	4641      	mov	r1, r8
 800497a:	1851      	adds	r1, r2, r1
 800497c:	6339      	str	r1, [r7, #48]	@ 0x30
 800497e:	4649      	mov	r1, r9
 8004980:	414b      	adcs	r3, r1
 8004982:	637b      	str	r3, [r7, #52]	@ 0x34
 8004984:	f04f 0200 	mov.w	r2, #0
 8004988:	f04f 0300 	mov.w	r3, #0
 800498c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004990:	4659      	mov	r1, fp
 8004992:	00cb      	lsls	r3, r1, #3
 8004994:	4651      	mov	r1, sl
 8004996:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800499a:	4651      	mov	r1, sl
 800499c:	00ca      	lsls	r2, r1, #3
 800499e:	4610      	mov	r0, r2
 80049a0:	4619      	mov	r1, r3
 80049a2:	4603      	mov	r3, r0
 80049a4:	4642      	mov	r2, r8
 80049a6:	189b      	adds	r3, r3, r2
 80049a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049ac:	464b      	mov	r3, r9
 80049ae:	460a      	mov	r2, r1
 80049b0:	eb42 0303 	adc.w	r3, r2, r3
 80049b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80049c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80049c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80049cc:	460b      	mov	r3, r1
 80049ce:	18db      	adds	r3, r3, r3
 80049d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049d2:	4613      	mov	r3, r2
 80049d4:	eb42 0303 	adc.w	r3, r2, r3
 80049d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80049de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80049e2:	f7fb fcc5 	bl	8000370 <__aeabi_uldivmod>
 80049e6:	4602      	mov	r2, r0
 80049e8:	460b      	mov	r3, r1
 80049ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004a20 <UART_SetConfig+0x2d4>)
 80049ec:	fba3 1302 	umull	r1, r3, r3, r2
 80049f0:	095b      	lsrs	r3, r3, #5
 80049f2:	2164      	movs	r1, #100	@ 0x64
 80049f4:	fb01 f303 	mul.w	r3, r1, r3
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	3332      	adds	r3, #50	@ 0x32
 80049fe:	4a08      	ldr	r2, [pc, #32]	@ (8004a20 <UART_SetConfig+0x2d4>)
 8004a00:	fba2 2303 	umull	r2, r3, r2, r3
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	f003 0207 	and.w	r2, r3, #7
 8004a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4422      	add	r2, r4
 8004a12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a14:	e106      	b.n	8004c24 <UART_SetConfig+0x4d8>
 8004a16:	bf00      	nop
 8004a18:	40011000 	.word	0x40011000
 8004a1c:	40011400 	.word	0x40011400
 8004a20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004a2e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004a32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004a36:	4642      	mov	r2, r8
 8004a38:	464b      	mov	r3, r9
 8004a3a:	1891      	adds	r1, r2, r2
 8004a3c:	6239      	str	r1, [r7, #32]
 8004a3e:	415b      	adcs	r3, r3
 8004a40:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a46:	4641      	mov	r1, r8
 8004a48:	1854      	adds	r4, r2, r1
 8004a4a:	4649      	mov	r1, r9
 8004a4c:	eb43 0501 	adc.w	r5, r3, r1
 8004a50:	f04f 0200 	mov.w	r2, #0
 8004a54:	f04f 0300 	mov.w	r3, #0
 8004a58:	00eb      	lsls	r3, r5, #3
 8004a5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a5e:	00e2      	lsls	r2, r4, #3
 8004a60:	4614      	mov	r4, r2
 8004a62:	461d      	mov	r5, r3
 8004a64:	4643      	mov	r3, r8
 8004a66:	18e3      	adds	r3, r4, r3
 8004a68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a6c:	464b      	mov	r3, r9
 8004a6e:	eb45 0303 	adc.w	r3, r5, r3
 8004a72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a82:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a86:	f04f 0200 	mov.w	r2, #0
 8004a8a:	f04f 0300 	mov.w	r3, #0
 8004a8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004a92:	4629      	mov	r1, r5
 8004a94:	008b      	lsls	r3, r1, #2
 8004a96:	4621      	mov	r1, r4
 8004a98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a9c:	4621      	mov	r1, r4
 8004a9e:	008a      	lsls	r2, r1, #2
 8004aa0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004aa4:	f7fb fc64 	bl	8000370 <__aeabi_uldivmod>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4b60      	ldr	r3, [pc, #384]	@ (8004c30 <UART_SetConfig+0x4e4>)
 8004aae:	fba3 2302 	umull	r2, r3, r3, r2
 8004ab2:	095b      	lsrs	r3, r3, #5
 8004ab4:	011c      	lsls	r4, r3, #4
 8004ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004aba:	2200      	movs	r2, #0
 8004abc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ac0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ac4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ac8:	4642      	mov	r2, r8
 8004aca:	464b      	mov	r3, r9
 8004acc:	1891      	adds	r1, r2, r2
 8004ace:	61b9      	str	r1, [r7, #24]
 8004ad0:	415b      	adcs	r3, r3
 8004ad2:	61fb      	str	r3, [r7, #28]
 8004ad4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ad8:	4641      	mov	r1, r8
 8004ada:	1851      	adds	r1, r2, r1
 8004adc:	6139      	str	r1, [r7, #16]
 8004ade:	4649      	mov	r1, r9
 8004ae0:	414b      	adcs	r3, r1
 8004ae2:	617b      	str	r3, [r7, #20]
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	f04f 0300 	mov.w	r3, #0
 8004aec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004af0:	4659      	mov	r1, fp
 8004af2:	00cb      	lsls	r3, r1, #3
 8004af4:	4651      	mov	r1, sl
 8004af6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004afa:	4651      	mov	r1, sl
 8004afc:	00ca      	lsls	r2, r1, #3
 8004afe:	4610      	mov	r0, r2
 8004b00:	4619      	mov	r1, r3
 8004b02:	4603      	mov	r3, r0
 8004b04:	4642      	mov	r2, r8
 8004b06:	189b      	adds	r3, r3, r2
 8004b08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b0c:	464b      	mov	r3, r9
 8004b0e:	460a      	mov	r2, r1
 8004b10:	eb42 0303 	adc.w	r3, r2, r3
 8004b14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b22:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	f04f 0300 	mov.w	r3, #0
 8004b2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004b30:	4649      	mov	r1, r9
 8004b32:	008b      	lsls	r3, r1, #2
 8004b34:	4641      	mov	r1, r8
 8004b36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b3a:	4641      	mov	r1, r8
 8004b3c:	008a      	lsls	r2, r1, #2
 8004b3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004b42:	f7fb fc15 	bl	8000370 <__aeabi_uldivmod>
 8004b46:	4602      	mov	r2, r0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4611      	mov	r1, r2
 8004b4c:	4b38      	ldr	r3, [pc, #224]	@ (8004c30 <UART_SetConfig+0x4e4>)
 8004b4e:	fba3 2301 	umull	r2, r3, r3, r1
 8004b52:	095b      	lsrs	r3, r3, #5
 8004b54:	2264      	movs	r2, #100	@ 0x64
 8004b56:	fb02 f303 	mul.w	r3, r2, r3
 8004b5a:	1acb      	subs	r3, r1, r3
 8004b5c:	011b      	lsls	r3, r3, #4
 8004b5e:	3332      	adds	r3, #50	@ 0x32
 8004b60:	4a33      	ldr	r2, [pc, #204]	@ (8004c30 <UART_SetConfig+0x4e4>)
 8004b62:	fba2 2303 	umull	r2, r3, r2, r3
 8004b66:	095b      	lsrs	r3, r3, #5
 8004b68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b6c:	441c      	add	r4, r3
 8004b6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b72:	2200      	movs	r2, #0
 8004b74:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b76:	677a      	str	r2, [r7, #116]	@ 0x74
 8004b78:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004b7c:	4642      	mov	r2, r8
 8004b7e:	464b      	mov	r3, r9
 8004b80:	1891      	adds	r1, r2, r2
 8004b82:	60b9      	str	r1, [r7, #8]
 8004b84:	415b      	adcs	r3, r3
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b8c:	4641      	mov	r1, r8
 8004b8e:	1851      	adds	r1, r2, r1
 8004b90:	6039      	str	r1, [r7, #0]
 8004b92:	4649      	mov	r1, r9
 8004b94:	414b      	adcs	r3, r1
 8004b96:	607b      	str	r3, [r7, #4]
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ba4:	4659      	mov	r1, fp
 8004ba6:	00cb      	lsls	r3, r1, #3
 8004ba8:	4651      	mov	r1, sl
 8004baa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bae:	4651      	mov	r1, sl
 8004bb0:	00ca      	lsls	r2, r1, #3
 8004bb2:	4610      	mov	r0, r2
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	4642      	mov	r2, r8
 8004bba:	189b      	adds	r3, r3, r2
 8004bbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bbe:	464b      	mov	r3, r9
 8004bc0:	460a      	mov	r2, r1
 8004bc2:	eb42 0303 	adc.w	r3, r2, r3
 8004bc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004bd2:	667a      	str	r2, [r7, #100]	@ 0x64
 8004bd4:	f04f 0200 	mov.w	r2, #0
 8004bd8:	f04f 0300 	mov.w	r3, #0
 8004bdc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004be0:	4649      	mov	r1, r9
 8004be2:	008b      	lsls	r3, r1, #2
 8004be4:	4641      	mov	r1, r8
 8004be6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bea:	4641      	mov	r1, r8
 8004bec:	008a      	lsls	r2, r1, #2
 8004bee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004bf2:	f7fb fbbd 	bl	8000370 <__aeabi_uldivmod>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8004c30 <UART_SetConfig+0x4e4>)
 8004bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8004c00:	095b      	lsrs	r3, r3, #5
 8004c02:	2164      	movs	r1, #100	@ 0x64
 8004c04:	fb01 f303 	mul.w	r3, r1, r3
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	3332      	adds	r3, #50	@ 0x32
 8004c0e:	4a08      	ldr	r2, [pc, #32]	@ (8004c30 <UART_SetConfig+0x4e4>)
 8004c10:	fba2 2303 	umull	r2, r3, r2, r3
 8004c14:	095b      	lsrs	r3, r3, #5
 8004c16:	f003 020f 	and.w	r2, r3, #15
 8004c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4422      	add	r2, r4
 8004c22:	609a      	str	r2, [r3, #8]
}
 8004c24:	bf00      	nop
 8004c26:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c30:	51eb851f 	.word	0x51eb851f

08004c34 <std>:
 8004c34:	2300      	movs	r3, #0
 8004c36:	b510      	push	{r4, lr}
 8004c38:	4604      	mov	r4, r0
 8004c3a:	e9c0 3300 	strd	r3, r3, [r0]
 8004c3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c42:	6083      	str	r3, [r0, #8]
 8004c44:	8181      	strh	r1, [r0, #12]
 8004c46:	6643      	str	r3, [r0, #100]	@ 0x64
 8004c48:	81c2      	strh	r2, [r0, #14]
 8004c4a:	6183      	str	r3, [r0, #24]
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	2208      	movs	r2, #8
 8004c50:	305c      	adds	r0, #92	@ 0x5c
 8004c52:	f000 f9f9 	bl	8005048 <memset>
 8004c56:	4b0d      	ldr	r3, [pc, #52]	@ (8004c8c <std+0x58>)
 8004c58:	6263      	str	r3, [r4, #36]	@ 0x24
 8004c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c90 <std+0x5c>)
 8004c5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c94 <std+0x60>)
 8004c60:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004c62:	4b0d      	ldr	r3, [pc, #52]	@ (8004c98 <std+0x64>)
 8004c64:	6323      	str	r3, [r4, #48]	@ 0x30
 8004c66:	4b0d      	ldr	r3, [pc, #52]	@ (8004c9c <std+0x68>)
 8004c68:	6224      	str	r4, [r4, #32]
 8004c6a:	429c      	cmp	r4, r3
 8004c6c:	d006      	beq.n	8004c7c <std+0x48>
 8004c6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004c72:	4294      	cmp	r4, r2
 8004c74:	d002      	beq.n	8004c7c <std+0x48>
 8004c76:	33d0      	adds	r3, #208	@ 0xd0
 8004c78:	429c      	cmp	r4, r3
 8004c7a:	d105      	bne.n	8004c88 <std+0x54>
 8004c7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c84:	f000 ba6a 	b.w	800515c <__retarget_lock_init_recursive>
 8004c88:	bd10      	pop	{r4, pc}
 8004c8a:	bf00      	nop
 8004c8c:	08004e99 	.word	0x08004e99
 8004c90:	08004ebb 	.word	0x08004ebb
 8004c94:	08004ef3 	.word	0x08004ef3
 8004c98:	08004f17 	.word	0x08004f17
 8004c9c:	200001a4 	.word	0x200001a4

08004ca0 <stdio_exit_handler>:
 8004ca0:	4a02      	ldr	r2, [pc, #8]	@ (8004cac <stdio_exit_handler+0xc>)
 8004ca2:	4903      	ldr	r1, [pc, #12]	@ (8004cb0 <stdio_exit_handler+0x10>)
 8004ca4:	4803      	ldr	r0, [pc, #12]	@ (8004cb4 <stdio_exit_handler+0x14>)
 8004ca6:	f000 b869 	b.w	8004d7c <_fwalk_sglue>
 8004caa:	bf00      	nop
 8004cac:	20000010 	.word	0x20000010
 8004cb0:	080059fd 	.word	0x080059fd
 8004cb4:	20000020 	.word	0x20000020

08004cb8 <cleanup_stdio>:
 8004cb8:	6841      	ldr	r1, [r0, #4]
 8004cba:	4b0c      	ldr	r3, [pc, #48]	@ (8004cec <cleanup_stdio+0x34>)
 8004cbc:	4299      	cmp	r1, r3
 8004cbe:	b510      	push	{r4, lr}
 8004cc0:	4604      	mov	r4, r0
 8004cc2:	d001      	beq.n	8004cc8 <cleanup_stdio+0x10>
 8004cc4:	f000 fe9a 	bl	80059fc <_fflush_r>
 8004cc8:	68a1      	ldr	r1, [r4, #8]
 8004cca:	4b09      	ldr	r3, [pc, #36]	@ (8004cf0 <cleanup_stdio+0x38>)
 8004ccc:	4299      	cmp	r1, r3
 8004cce:	d002      	beq.n	8004cd6 <cleanup_stdio+0x1e>
 8004cd0:	4620      	mov	r0, r4
 8004cd2:	f000 fe93 	bl	80059fc <_fflush_r>
 8004cd6:	68e1      	ldr	r1, [r4, #12]
 8004cd8:	4b06      	ldr	r3, [pc, #24]	@ (8004cf4 <cleanup_stdio+0x3c>)
 8004cda:	4299      	cmp	r1, r3
 8004cdc:	d004      	beq.n	8004ce8 <cleanup_stdio+0x30>
 8004cde:	4620      	mov	r0, r4
 8004ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ce4:	f000 be8a 	b.w	80059fc <_fflush_r>
 8004ce8:	bd10      	pop	{r4, pc}
 8004cea:	bf00      	nop
 8004cec:	200001a4 	.word	0x200001a4
 8004cf0:	2000020c 	.word	0x2000020c
 8004cf4:	20000274 	.word	0x20000274

08004cf8 <global_stdio_init.part.0>:
 8004cf8:	b510      	push	{r4, lr}
 8004cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8004d28 <global_stdio_init.part.0+0x30>)
 8004cfc:	4c0b      	ldr	r4, [pc, #44]	@ (8004d2c <global_stdio_init.part.0+0x34>)
 8004cfe:	4a0c      	ldr	r2, [pc, #48]	@ (8004d30 <global_stdio_init.part.0+0x38>)
 8004d00:	601a      	str	r2, [r3, #0]
 8004d02:	4620      	mov	r0, r4
 8004d04:	2200      	movs	r2, #0
 8004d06:	2104      	movs	r1, #4
 8004d08:	f7ff ff94 	bl	8004c34 <std>
 8004d0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004d10:	2201      	movs	r2, #1
 8004d12:	2109      	movs	r1, #9
 8004d14:	f7ff ff8e 	bl	8004c34 <std>
 8004d18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004d1c:	2202      	movs	r2, #2
 8004d1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d22:	2112      	movs	r1, #18
 8004d24:	f7ff bf86 	b.w	8004c34 <std>
 8004d28:	200002dc 	.word	0x200002dc
 8004d2c:	200001a4 	.word	0x200001a4
 8004d30:	08004ca1 	.word	0x08004ca1

08004d34 <__sfp_lock_acquire>:
 8004d34:	4801      	ldr	r0, [pc, #4]	@ (8004d3c <__sfp_lock_acquire+0x8>)
 8004d36:	f000 ba12 	b.w	800515e <__retarget_lock_acquire_recursive>
 8004d3a:	bf00      	nop
 8004d3c:	200002e5 	.word	0x200002e5

08004d40 <__sfp_lock_release>:
 8004d40:	4801      	ldr	r0, [pc, #4]	@ (8004d48 <__sfp_lock_release+0x8>)
 8004d42:	f000 ba0d 	b.w	8005160 <__retarget_lock_release_recursive>
 8004d46:	bf00      	nop
 8004d48:	200002e5 	.word	0x200002e5

08004d4c <__sinit>:
 8004d4c:	b510      	push	{r4, lr}
 8004d4e:	4604      	mov	r4, r0
 8004d50:	f7ff fff0 	bl	8004d34 <__sfp_lock_acquire>
 8004d54:	6a23      	ldr	r3, [r4, #32]
 8004d56:	b11b      	cbz	r3, 8004d60 <__sinit+0x14>
 8004d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d5c:	f7ff bff0 	b.w	8004d40 <__sfp_lock_release>
 8004d60:	4b04      	ldr	r3, [pc, #16]	@ (8004d74 <__sinit+0x28>)
 8004d62:	6223      	str	r3, [r4, #32]
 8004d64:	4b04      	ldr	r3, [pc, #16]	@ (8004d78 <__sinit+0x2c>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1f5      	bne.n	8004d58 <__sinit+0xc>
 8004d6c:	f7ff ffc4 	bl	8004cf8 <global_stdio_init.part.0>
 8004d70:	e7f2      	b.n	8004d58 <__sinit+0xc>
 8004d72:	bf00      	nop
 8004d74:	08004cb9 	.word	0x08004cb9
 8004d78:	200002dc 	.word	0x200002dc

08004d7c <_fwalk_sglue>:
 8004d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d80:	4607      	mov	r7, r0
 8004d82:	4688      	mov	r8, r1
 8004d84:	4614      	mov	r4, r2
 8004d86:	2600      	movs	r6, #0
 8004d88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d8c:	f1b9 0901 	subs.w	r9, r9, #1
 8004d90:	d505      	bpl.n	8004d9e <_fwalk_sglue+0x22>
 8004d92:	6824      	ldr	r4, [r4, #0]
 8004d94:	2c00      	cmp	r4, #0
 8004d96:	d1f7      	bne.n	8004d88 <_fwalk_sglue+0xc>
 8004d98:	4630      	mov	r0, r6
 8004d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d9e:	89ab      	ldrh	r3, [r5, #12]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d907      	bls.n	8004db4 <_fwalk_sglue+0x38>
 8004da4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004da8:	3301      	adds	r3, #1
 8004daa:	d003      	beq.n	8004db4 <_fwalk_sglue+0x38>
 8004dac:	4629      	mov	r1, r5
 8004dae:	4638      	mov	r0, r7
 8004db0:	47c0      	blx	r8
 8004db2:	4306      	orrs	r6, r0
 8004db4:	3568      	adds	r5, #104	@ 0x68
 8004db6:	e7e9      	b.n	8004d8c <_fwalk_sglue+0x10>

08004db8 <iprintf>:
 8004db8:	b40f      	push	{r0, r1, r2, r3}
 8004dba:	b507      	push	{r0, r1, r2, lr}
 8004dbc:	4906      	ldr	r1, [pc, #24]	@ (8004dd8 <iprintf+0x20>)
 8004dbe:	ab04      	add	r3, sp, #16
 8004dc0:	6808      	ldr	r0, [r1, #0]
 8004dc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dc6:	6881      	ldr	r1, [r0, #8]
 8004dc8:	9301      	str	r3, [sp, #4]
 8004dca:	f000 faed 	bl	80053a8 <_vfiprintf_r>
 8004dce:	b003      	add	sp, #12
 8004dd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004dd4:	b004      	add	sp, #16
 8004dd6:	4770      	bx	lr
 8004dd8:	2000001c 	.word	0x2000001c

08004ddc <_puts_r>:
 8004ddc:	6a03      	ldr	r3, [r0, #32]
 8004dde:	b570      	push	{r4, r5, r6, lr}
 8004de0:	6884      	ldr	r4, [r0, #8]
 8004de2:	4605      	mov	r5, r0
 8004de4:	460e      	mov	r6, r1
 8004de6:	b90b      	cbnz	r3, 8004dec <_puts_r+0x10>
 8004de8:	f7ff ffb0 	bl	8004d4c <__sinit>
 8004dec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004dee:	07db      	lsls	r3, r3, #31
 8004df0:	d405      	bmi.n	8004dfe <_puts_r+0x22>
 8004df2:	89a3      	ldrh	r3, [r4, #12]
 8004df4:	0598      	lsls	r0, r3, #22
 8004df6:	d402      	bmi.n	8004dfe <_puts_r+0x22>
 8004df8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004dfa:	f000 f9b0 	bl	800515e <__retarget_lock_acquire_recursive>
 8004dfe:	89a3      	ldrh	r3, [r4, #12]
 8004e00:	0719      	lsls	r1, r3, #28
 8004e02:	d502      	bpl.n	8004e0a <_puts_r+0x2e>
 8004e04:	6923      	ldr	r3, [r4, #16]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d135      	bne.n	8004e76 <_puts_r+0x9a>
 8004e0a:	4621      	mov	r1, r4
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	f000 f8c5 	bl	8004f9c <__swsetup_r>
 8004e12:	b380      	cbz	r0, 8004e76 <_puts_r+0x9a>
 8004e14:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004e18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e1a:	07da      	lsls	r2, r3, #31
 8004e1c:	d405      	bmi.n	8004e2a <_puts_r+0x4e>
 8004e1e:	89a3      	ldrh	r3, [r4, #12]
 8004e20:	059b      	lsls	r3, r3, #22
 8004e22:	d402      	bmi.n	8004e2a <_puts_r+0x4e>
 8004e24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e26:	f000 f99b 	bl	8005160 <__retarget_lock_release_recursive>
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	bd70      	pop	{r4, r5, r6, pc}
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	da04      	bge.n	8004e3c <_puts_r+0x60>
 8004e32:	69a2      	ldr	r2, [r4, #24]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	dc17      	bgt.n	8004e68 <_puts_r+0x8c>
 8004e38:	290a      	cmp	r1, #10
 8004e3a:	d015      	beq.n	8004e68 <_puts_r+0x8c>
 8004e3c:	6823      	ldr	r3, [r4, #0]
 8004e3e:	1c5a      	adds	r2, r3, #1
 8004e40:	6022      	str	r2, [r4, #0]
 8004e42:	7019      	strb	r1, [r3, #0]
 8004e44:	68a3      	ldr	r3, [r4, #8]
 8004e46:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	60a3      	str	r3, [r4, #8]
 8004e4e:	2900      	cmp	r1, #0
 8004e50:	d1ed      	bne.n	8004e2e <_puts_r+0x52>
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	da11      	bge.n	8004e7a <_puts_r+0x9e>
 8004e56:	4622      	mov	r2, r4
 8004e58:	210a      	movs	r1, #10
 8004e5a:	4628      	mov	r0, r5
 8004e5c:	f000 f85f 	bl	8004f1e <__swbuf_r>
 8004e60:	3001      	adds	r0, #1
 8004e62:	d0d7      	beq.n	8004e14 <_puts_r+0x38>
 8004e64:	250a      	movs	r5, #10
 8004e66:	e7d7      	b.n	8004e18 <_puts_r+0x3c>
 8004e68:	4622      	mov	r2, r4
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	f000 f857 	bl	8004f1e <__swbuf_r>
 8004e70:	3001      	adds	r0, #1
 8004e72:	d1e7      	bne.n	8004e44 <_puts_r+0x68>
 8004e74:	e7ce      	b.n	8004e14 <_puts_r+0x38>
 8004e76:	3e01      	subs	r6, #1
 8004e78:	e7e4      	b.n	8004e44 <_puts_r+0x68>
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	1c5a      	adds	r2, r3, #1
 8004e7e:	6022      	str	r2, [r4, #0]
 8004e80:	220a      	movs	r2, #10
 8004e82:	701a      	strb	r2, [r3, #0]
 8004e84:	e7ee      	b.n	8004e64 <_puts_r+0x88>
	...

08004e88 <puts>:
 8004e88:	4b02      	ldr	r3, [pc, #8]	@ (8004e94 <puts+0xc>)
 8004e8a:	4601      	mov	r1, r0
 8004e8c:	6818      	ldr	r0, [r3, #0]
 8004e8e:	f7ff bfa5 	b.w	8004ddc <_puts_r>
 8004e92:	bf00      	nop
 8004e94:	2000001c 	.word	0x2000001c

08004e98 <__sread>:
 8004e98:	b510      	push	{r4, lr}
 8004e9a:	460c      	mov	r4, r1
 8004e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ea0:	f000 f90e 	bl	80050c0 <_read_r>
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	bfab      	itete	ge
 8004ea8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004eaa:	89a3      	ldrhlt	r3, [r4, #12]
 8004eac:	181b      	addge	r3, r3, r0
 8004eae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004eb2:	bfac      	ite	ge
 8004eb4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004eb6:	81a3      	strhlt	r3, [r4, #12]
 8004eb8:	bd10      	pop	{r4, pc}

08004eba <__swrite>:
 8004eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ebe:	461f      	mov	r7, r3
 8004ec0:	898b      	ldrh	r3, [r1, #12]
 8004ec2:	05db      	lsls	r3, r3, #23
 8004ec4:	4605      	mov	r5, r0
 8004ec6:	460c      	mov	r4, r1
 8004ec8:	4616      	mov	r6, r2
 8004eca:	d505      	bpl.n	8004ed8 <__swrite+0x1e>
 8004ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f000 f8e2 	bl	800509c <_lseek_r>
 8004ed8:	89a3      	ldrh	r3, [r4, #12]
 8004eda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ede:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ee2:	81a3      	strh	r3, [r4, #12]
 8004ee4:	4632      	mov	r2, r6
 8004ee6:	463b      	mov	r3, r7
 8004ee8:	4628      	mov	r0, r5
 8004eea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004eee:	f000 b8f9 	b.w	80050e4 <_write_r>

08004ef2 <__sseek>:
 8004ef2:	b510      	push	{r4, lr}
 8004ef4:	460c      	mov	r4, r1
 8004ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004efa:	f000 f8cf 	bl	800509c <_lseek_r>
 8004efe:	1c43      	adds	r3, r0, #1
 8004f00:	89a3      	ldrh	r3, [r4, #12]
 8004f02:	bf15      	itete	ne
 8004f04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004f06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004f0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004f0e:	81a3      	strheq	r3, [r4, #12]
 8004f10:	bf18      	it	ne
 8004f12:	81a3      	strhne	r3, [r4, #12]
 8004f14:	bd10      	pop	{r4, pc}

08004f16 <__sclose>:
 8004f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f1a:	f000 b8af 	b.w	800507c <_close_r>

08004f1e <__swbuf_r>:
 8004f1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f20:	460e      	mov	r6, r1
 8004f22:	4614      	mov	r4, r2
 8004f24:	4605      	mov	r5, r0
 8004f26:	b118      	cbz	r0, 8004f30 <__swbuf_r+0x12>
 8004f28:	6a03      	ldr	r3, [r0, #32]
 8004f2a:	b90b      	cbnz	r3, 8004f30 <__swbuf_r+0x12>
 8004f2c:	f7ff ff0e 	bl	8004d4c <__sinit>
 8004f30:	69a3      	ldr	r3, [r4, #24]
 8004f32:	60a3      	str	r3, [r4, #8]
 8004f34:	89a3      	ldrh	r3, [r4, #12]
 8004f36:	071a      	lsls	r2, r3, #28
 8004f38:	d501      	bpl.n	8004f3e <__swbuf_r+0x20>
 8004f3a:	6923      	ldr	r3, [r4, #16]
 8004f3c:	b943      	cbnz	r3, 8004f50 <__swbuf_r+0x32>
 8004f3e:	4621      	mov	r1, r4
 8004f40:	4628      	mov	r0, r5
 8004f42:	f000 f82b 	bl	8004f9c <__swsetup_r>
 8004f46:	b118      	cbz	r0, 8004f50 <__swbuf_r+0x32>
 8004f48:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004f4c:	4638      	mov	r0, r7
 8004f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f50:	6823      	ldr	r3, [r4, #0]
 8004f52:	6922      	ldr	r2, [r4, #16]
 8004f54:	1a98      	subs	r0, r3, r2
 8004f56:	6963      	ldr	r3, [r4, #20]
 8004f58:	b2f6      	uxtb	r6, r6
 8004f5a:	4283      	cmp	r3, r0
 8004f5c:	4637      	mov	r7, r6
 8004f5e:	dc05      	bgt.n	8004f6c <__swbuf_r+0x4e>
 8004f60:	4621      	mov	r1, r4
 8004f62:	4628      	mov	r0, r5
 8004f64:	f000 fd4a 	bl	80059fc <_fflush_r>
 8004f68:	2800      	cmp	r0, #0
 8004f6a:	d1ed      	bne.n	8004f48 <__swbuf_r+0x2a>
 8004f6c:	68a3      	ldr	r3, [r4, #8]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	60a3      	str	r3, [r4, #8]
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	1c5a      	adds	r2, r3, #1
 8004f76:	6022      	str	r2, [r4, #0]
 8004f78:	701e      	strb	r6, [r3, #0]
 8004f7a:	6962      	ldr	r2, [r4, #20]
 8004f7c:	1c43      	adds	r3, r0, #1
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d004      	beq.n	8004f8c <__swbuf_r+0x6e>
 8004f82:	89a3      	ldrh	r3, [r4, #12]
 8004f84:	07db      	lsls	r3, r3, #31
 8004f86:	d5e1      	bpl.n	8004f4c <__swbuf_r+0x2e>
 8004f88:	2e0a      	cmp	r6, #10
 8004f8a:	d1df      	bne.n	8004f4c <__swbuf_r+0x2e>
 8004f8c:	4621      	mov	r1, r4
 8004f8e:	4628      	mov	r0, r5
 8004f90:	f000 fd34 	bl	80059fc <_fflush_r>
 8004f94:	2800      	cmp	r0, #0
 8004f96:	d0d9      	beq.n	8004f4c <__swbuf_r+0x2e>
 8004f98:	e7d6      	b.n	8004f48 <__swbuf_r+0x2a>
	...

08004f9c <__swsetup_r>:
 8004f9c:	b538      	push	{r3, r4, r5, lr}
 8004f9e:	4b29      	ldr	r3, [pc, #164]	@ (8005044 <__swsetup_r+0xa8>)
 8004fa0:	4605      	mov	r5, r0
 8004fa2:	6818      	ldr	r0, [r3, #0]
 8004fa4:	460c      	mov	r4, r1
 8004fa6:	b118      	cbz	r0, 8004fb0 <__swsetup_r+0x14>
 8004fa8:	6a03      	ldr	r3, [r0, #32]
 8004faa:	b90b      	cbnz	r3, 8004fb0 <__swsetup_r+0x14>
 8004fac:	f7ff fece 	bl	8004d4c <__sinit>
 8004fb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fb4:	0719      	lsls	r1, r3, #28
 8004fb6:	d422      	bmi.n	8004ffe <__swsetup_r+0x62>
 8004fb8:	06da      	lsls	r2, r3, #27
 8004fba:	d407      	bmi.n	8004fcc <__swsetup_r+0x30>
 8004fbc:	2209      	movs	r2, #9
 8004fbe:	602a      	str	r2, [r5, #0]
 8004fc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fc4:	81a3      	strh	r3, [r4, #12]
 8004fc6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004fca:	e033      	b.n	8005034 <__swsetup_r+0x98>
 8004fcc:	0758      	lsls	r0, r3, #29
 8004fce:	d512      	bpl.n	8004ff6 <__swsetup_r+0x5a>
 8004fd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004fd2:	b141      	cbz	r1, 8004fe6 <__swsetup_r+0x4a>
 8004fd4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004fd8:	4299      	cmp	r1, r3
 8004fda:	d002      	beq.n	8004fe2 <__swsetup_r+0x46>
 8004fdc:	4628      	mov	r0, r5
 8004fde:	f000 f8c1 	bl	8005164 <_free_r>
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	6363      	str	r3, [r4, #52]	@ 0x34
 8004fe6:	89a3      	ldrh	r3, [r4, #12]
 8004fe8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004fec:	81a3      	strh	r3, [r4, #12]
 8004fee:	2300      	movs	r3, #0
 8004ff0:	6063      	str	r3, [r4, #4]
 8004ff2:	6923      	ldr	r3, [r4, #16]
 8004ff4:	6023      	str	r3, [r4, #0]
 8004ff6:	89a3      	ldrh	r3, [r4, #12]
 8004ff8:	f043 0308 	orr.w	r3, r3, #8
 8004ffc:	81a3      	strh	r3, [r4, #12]
 8004ffe:	6923      	ldr	r3, [r4, #16]
 8005000:	b94b      	cbnz	r3, 8005016 <__swsetup_r+0x7a>
 8005002:	89a3      	ldrh	r3, [r4, #12]
 8005004:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005008:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800500c:	d003      	beq.n	8005016 <__swsetup_r+0x7a>
 800500e:	4621      	mov	r1, r4
 8005010:	4628      	mov	r0, r5
 8005012:	f000 fd41 	bl	8005a98 <__smakebuf_r>
 8005016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800501a:	f013 0201 	ands.w	r2, r3, #1
 800501e:	d00a      	beq.n	8005036 <__swsetup_r+0x9a>
 8005020:	2200      	movs	r2, #0
 8005022:	60a2      	str	r2, [r4, #8]
 8005024:	6962      	ldr	r2, [r4, #20]
 8005026:	4252      	negs	r2, r2
 8005028:	61a2      	str	r2, [r4, #24]
 800502a:	6922      	ldr	r2, [r4, #16]
 800502c:	b942      	cbnz	r2, 8005040 <__swsetup_r+0xa4>
 800502e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005032:	d1c5      	bne.n	8004fc0 <__swsetup_r+0x24>
 8005034:	bd38      	pop	{r3, r4, r5, pc}
 8005036:	0799      	lsls	r1, r3, #30
 8005038:	bf58      	it	pl
 800503a:	6962      	ldrpl	r2, [r4, #20]
 800503c:	60a2      	str	r2, [r4, #8]
 800503e:	e7f4      	b.n	800502a <__swsetup_r+0x8e>
 8005040:	2000      	movs	r0, #0
 8005042:	e7f7      	b.n	8005034 <__swsetup_r+0x98>
 8005044:	2000001c 	.word	0x2000001c

08005048 <memset>:
 8005048:	4402      	add	r2, r0
 800504a:	4603      	mov	r3, r0
 800504c:	4293      	cmp	r3, r2
 800504e:	d100      	bne.n	8005052 <memset+0xa>
 8005050:	4770      	bx	lr
 8005052:	f803 1b01 	strb.w	r1, [r3], #1
 8005056:	e7f9      	b.n	800504c <memset+0x4>

08005058 <strncmp>:
 8005058:	b510      	push	{r4, lr}
 800505a:	b16a      	cbz	r2, 8005078 <strncmp+0x20>
 800505c:	3901      	subs	r1, #1
 800505e:	1884      	adds	r4, r0, r2
 8005060:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005064:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005068:	429a      	cmp	r2, r3
 800506a:	d103      	bne.n	8005074 <strncmp+0x1c>
 800506c:	42a0      	cmp	r0, r4
 800506e:	d001      	beq.n	8005074 <strncmp+0x1c>
 8005070:	2a00      	cmp	r2, #0
 8005072:	d1f5      	bne.n	8005060 <strncmp+0x8>
 8005074:	1ad0      	subs	r0, r2, r3
 8005076:	bd10      	pop	{r4, pc}
 8005078:	4610      	mov	r0, r2
 800507a:	e7fc      	b.n	8005076 <strncmp+0x1e>

0800507c <_close_r>:
 800507c:	b538      	push	{r3, r4, r5, lr}
 800507e:	4d06      	ldr	r5, [pc, #24]	@ (8005098 <_close_r+0x1c>)
 8005080:	2300      	movs	r3, #0
 8005082:	4604      	mov	r4, r0
 8005084:	4608      	mov	r0, r1
 8005086:	602b      	str	r3, [r5, #0]
 8005088:	f7fc fb31 	bl	80016ee <_close>
 800508c:	1c43      	adds	r3, r0, #1
 800508e:	d102      	bne.n	8005096 <_close_r+0x1a>
 8005090:	682b      	ldr	r3, [r5, #0]
 8005092:	b103      	cbz	r3, 8005096 <_close_r+0x1a>
 8005094:	6023      	str	r3, [r4, #0]
 8005096:	bd38      	pop	{r3, r4, r5, pc}
 8005098:	200002e0 	.word	0x200002e0

0800509c <_lseek_r>:
 800509c:	b538      	push	{r3, r4, r5, lr}
 800509e:	4d07      	ldr	r5, [pc, #28]	@ (80050bc <_lseek_r+0x20>)
 80050a0:	4604      	mov	r4, r0
 80050a2:	4608      	mov	r0, r1
 80050a4:	4611      	mov	r1, r2
 80050a6:	2200      	movs	r2, #0
 80050a8:	602a      	str	r2, [r5, #0]
 80050aa:	461a      	mov	r2, r3
 80050ac:	f7fc fb46 	bl	800173c <_lseek>
 80050b0:	1c43      	adds	r3, r0, #1
 80050b2:	d102      	bne.n	80050ba <_lseek_r+0x1e>
 80050b4:	682b      	ldr	r3, [r5, #0]
 80050b6:	b103      	cbz	r3, 80050ba <_lseek_r+0x1e>
 80050b8:	6023      	str	r3, [r4, #0]
 80050ba:	bd38      	pop	{r3, r4, r5, pc}
 80050bc:	200002e0 	.word	0x200002e0

080050c0 <_read_r>:
 80050c0:	b538      	push	{r3, r4, r5, lr}
 80050c2:	4d07      	ldr	r5, [pc, #28]	@ (80050e0 <_read_r+0x20>)
 80050c4:	4604      	mov	r4, r0
 80050c6:	4608      	mov	r0, r1
 80050c8:	4611      	mov	r1, r2
 80050ca:	2200      	movs	r2, #0
 80050cc:	602a      	str	r2, [r5, #0]
 80050ce:	461a      	mov	r2, r3
 80050d0:	f7fc fad4 	bl	800167c <_read>
 80050d4:	1c43      	adds	r3, r0, #1
 80050d6:	d102      	bne.n	80050de <_read_r+0x1e>
 80050d8:	682b      	ldr	r3, [r5, #0]
 80050da:	b103      	cbz	r3, 80050de <_read_r+0x1e>
 80050dc:	6023      	str	r3, [r4, #0]
 80050de:	bd38      	pop	{r3, r4, r5, pc}
 80050e0:	200002e0 	.word	0x200002e0

080050e4 <_write_r>:
 80050e4:	b538      	push	{r3, r4, r5, lr}
 80050e6:	4d07      	ldr	r5, [pc, #28]	@ (8005104 <_write_r+0x20>)
 80050e8:	4604      	mov	r4, r0
 80050ea:	4608      	mov	r0, r1
 80050ec:	4611      	mov	r1, r2
 80050ee:	2200      	movs	r2, #0
 80050f0:	602a      	str	r2, [r5, #0]
 80050f2:	461a      	mov	r2, r3
 80050f4:	f7fc fadf 	bl	80016b6 <_write>
 80050f8:	1c43      	adds	r3, r0, #1
 80050fa:	d102      	bne.n	8005102 <_write_r+0x1e>
 80050fc:	682b      	ldr	r3, [r5, #0]
 80050fe:	b103      	cbz	r3, 8005102 <_write_r+0x1e>
 8005100:	6023      	str	r3, [r4, #0]
 8005102:	bd38      	pop	{r3, r4, r5, pc}
 8005104:	200002e0 	.word	0x200002e0

08005108 <__errno>:
 8005108:	4b01      	ldr	r3, [pc, #4]	@ (8005110 <__errno+0x8>)
 800510a:	6818      	ldr	r0, [r3, #0]
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	2000001c 	.word	0x2000001c

08005114 <__libc_init_array>:
 8005114:	b570      	push	{r4, r5, r6, lr}
 8005116:	4d0d      	ldr	r5, [pc, #52]	@ (800514c <__libc_init_array+0x38>)
 8005118:	4c0d      	ldr	r4, [pc, #52]	@ (8005150 <__libc_init_array+0x3c>)
 800511a:	1b64      	subs	r4, r4, r5
 800511c:	10a4      	asrs	r4, r4, #2
 800511e:	2600      	movs	r6, #0
 8005120:	42a6      	cmp	r6, r4
 8005122:	d109      	bne.n	8005138 <__libc_init_array+0x24>
 8005124:	4d0b      	ldr	r5, [pc, #44]	@ (8005154 <__libc_init_array+0x40>)
 8005126:	4c0c      	ldr	r4, [pc, #48]	@ (8005158 <__libc_init_array+0x44>)
 8005128:	f000 fd24 	bl	8005b74 <_init>
 800512c:	1b64      	subs	r4, r4, r5
 800512e:	10a4      	asrs	r4, r4, #2
 8005130:	2600      	movs	r6, #0
 8005132:	42a6      	cmp	r6, r4
 8005134:	d105      	bne.n	8005142 <__libc_init_array+0x2e>
 8005136:	bd70      	pop	{r4, r5, r6, pc}
 8005138:	f855 3b04 	ldr.w	r3, [r5], #4
 800513c:	4798      	blx	r3
 800513e:	3601      	adds	r6, #1
 8005140:	e7ee      	b.n	8005120 <__libc_init_array+0xc>
 8005142:	f855 3b04 	ldr.w	r3, [r5], #4
 8005146:	4798      	blx	r3
 8005148:	3601      	adds	r6, #1
 800514a:	e7f2      	b.n	8005132 <__libc_init_array+0x1e>
 800514c:	08005cc4 	.word	0x08005cc4
 8005150:	08005cc4 	.word	0x08005cc4
 8005154:	08005cc4 	.word	0x08005cc4
 8005158:	08005cc8 	.word	0x08005cc8

0800515c <__retarget_lock_init_recursive>:
 800515c:	4770      	bx	lr

0800515e <__retarget_lock_acquire_recursive>:
 800515e:	4770      	bx	lr

08005160 <__retarget_lock_release_recursive>:
 8005160:	4770      	bx	lr
	...

08005164 <_free_r>:
 8005164:	b538      	push	{r3, r4, r5, lr}
 8005166:	4605      	mov	r5, r0
 8005168:	2900      	cmp	r1, #0
 800516a:	d041      	beq.n	80051f0 <_free_r+0x8c>
 800516c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005170:	1f0c      	subs	r4, r1, #4
 8005172:	2b00      	cmp	r3, #0
 8005174:	bfb8      	it	lt
 8005176:	18e4      	addlt	r4, r4, r3
 8005178:	f000 f8e0 	bl	800533c <__malloc_lock>
 800517c:	4a1d      	ldr	r2, [pc, #116]	@ (80051f4 <_free_r+0x90>)
 800517e:	6813      	ldr	r3, [r2, #0]
 8005180:	b933      	cbnz	r3, 8005190 <_free_r+0x2c>
 8005182:	6063      	str	r3, [r4, #4]
 8005184:	6014      	str	r4, [r2, #0]
 8005186:	4628      	mov	r0, r5
 8005188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800518c:	f000 b8dc 	b.w	8005348 <__malloc_unlock>
 8005190:	42a3      	cmp	r3, r4
 8005192:	d908      	bls.n	80051a6 <_free_r+0x42>
 8005194:	6820      	ldr	r0, [r4, #0]
 8005196:	1821      	adds	r1, r4, r0
 8005198:	428b      	cmp	r3, r1
 800519a:	bf01      	itttt	eq
 800519c:	6819      	ldreq	r1, [r3, #0]
 800519e:	685b      	ldreq	r3, [r3, #4]
 80051a0:	1809      	addeq	r1, r1, r0
 80051a2:	6021      	streq	r1, [r4, #0]
 80051a4:	e7ed      	b.n	8005182 <_free_r+0x1e>
 80051a6:	461a      	mov	r2, r3
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	b10b      	cbz	r3, 80051b0 <_free_r+0x4c>
 80051ac:	42a3      	cmp	r3, r4
 80051ae:	d9fa      	bls.n	80051a6 <_free_r+0x42>
 80051b0:	6811      	ldr	r1, [r2, #0]
 80051b2:	1850      	adds	r0, r2, r1
 80051b4:	42a0      	cmp	r0, r4
 80051b6:	d10b      	bne.n	80051d0 <_free_r+0x6c>
 80051b8:	6820      	ldr	r0, [r4, #0]
 80051ba:	4401      	add	r1, r0
 80051bc:	1850      	adds	r0, r2, r1
 80051be:	4283      	cmp	r3, r0
 80051c0:	6011      	str	r1, [r2, #0]
 80051c2:	d1e0      	bne.n	8005186 <_free_r+0x22>
 80051c4:	6818      	ldr	r0, [r3, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	6053      	str	r3, [r2, #4]
 80051ca:	4408      	add	r0, r1
 80051cc:	6010      	str	r0, [r2, #0]
 80051ce:	e7da      	b.n	8005186 <_free_r+0x22>
 80051d0:	d902      	bls.n	80051d8 <_free_r+0x74>
 80051d2:	230c      	movs	r3, #12
 80051d4:	602b      	str	r3, [r5, #0]
 80051d6:	e7d6      	b.n	8005186 <_free_r+0x22>
 80051d8:	6820      	ldr	r0, [r4, #0]
 80051da:	1821      	adds	r1, r4, r0
 80051dc:	428b      	cmp	r3, r1
 80051de:	bf04      	itt	eq
 80051e0:	6819      	ldreq	r1, [r3, #0]
 80051e2:	685b      	ldreq	r3, [r3, #4]
 80051e4:	6063      	str	r3, [r4, #4]
 80051e6:	bf04      	itt	eq
 80051e8:	1809      	addeq	r1, r1, r0
 80051ea:	6021      	streq	r1, [r4, #0]
 80051ec:	6054      	str	r4, [r2, #4]
 80051ee:	e7ca      	b.n	8005186 <_free_r+0x22>
 80051f0:	bd38      	pop	{r3, r4, r5, pc}
 80051f2:	bf00      	nop
 80051f4:	200002ec 	.word	0x200002ec

080051f8 <sbrk_aligned>:
 80051f8:	b570      	push	{r4, r5, r6, lr}
 80051fa:	4e0f      	ldr	r6, [pc, #60]	@ (8005238 <sbrk_aligned+0x40>)
 80051fc:	460c      	mov	r4, r1
 80051fe:	6831      	ldr	r1, [r6, #0]
 8005200:	4605      	mov	r5, r0
 8005202:	b911      	cbnz	r1, 800520a <sbrk_aligned+0x12>
 8005204:	f000 fca6 	bl	8005b54 <_sbrk_r>
 8005208:	6030      	str	r0, [r6, #0]
 800520a:	4621      	mov	r1, r4
 800520c:	4628      	mov	r0, r5
 800520e:	f000 fca1 	bl	8005b54 <_sbrk_r>
 8005212:	1c43      	adds	r3, r0, #1
 8005214:	d103      	bne.n	800521e <sbrk_aligned+0x26>
 8005216:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800521a:	4620      	mov	r0, r4
 800521c:	bd70      	pop	{r4, r5, r6, pc}
 800521e:	1cc4      	adds	r4, r0, #3
 8005220:	f024 0403 	bic.w	r4, r4, #3
 8005224:	42a0      	cmp	r0, r4
 8005226:	d0f8      	beq.n	800521a <sbrk_aligned+0x22>
 8005228:	1a21      	subs	r1, r4, r0
 800522a:	4628      	mov	r0, r5
 800522c:	f000 fc92 	bl	8005b54 <_sbrk_r>
 8005230:	3001      	adds	r0, #1
 8005232:	d1f2      	bne.n	800521a <sbrk_aligned+0x22>
 8005234:	e7ef      	b.n	8005216 <sbrk_aligned+0x1e>
 8005236:	bf00      	nop
 8005238:	200002e8 	.word	0x200002e8

0800523c <_malloc_r>:
 800523c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005240:	1ccd      	adds	r5, r1, #3
 8005242:	f025 0503 	bic.w	r5, r5, #3
 8005246:	3508      	adds	r5, #8
 8005248:	2d0c      	cmp	r5, #12
 800524a:	bf38      	it	cc
 800524c:	250c      	movcc	r5, #12
 800524e:	2d00      	cmp	r5, #0
 8005250:	4606      	mov	r6, r0
 8005252:	db01      	blt.n	8005258 <_malloc_r+0x1c>
 8005254:	42a9      	cmp	r1, r5
 8005256:	d904      	bls.n	8005262 <_malloc_r+0x26>
 8005258:	230c      	movs	r3, #12
 800525a:	6033      	str	r3, [r6, #0]
 800525c:	2000      	movs	r0, #0
 800525e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005262:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005338 <_malloc_r+0xfc>
 8005266:	f000 f869 	bl	800533c <__malloc_lock>
 800526a:	f8d8 3000 	ldr.w	r3, [r8]
 800526e:	461c      	mov	r4, r3
 8005270:	bb44      	cbnz	r4, 80052c4 <_malloc_r+0x88>
 8005272:	4629      	mov	r1, r5
 8005274:	4630      	mov	r0, r6
 8005276:	f7ff ffbf 	bl	80051f8 <sbrk_aligned>
 800527a:	1c43      	adds	r3, r0, #1
 800527c:	4604      	mov	r4, r0
 800527e:	d158      	bne.n	8005332 <_malloc_r+0xf6>
 8005280:	f8d8 4000 	ldr.w	r4, [r8]
 8005284:	4627      	mov	r7, r4
 8005286:	2f00      	cmp	r7, #0
 8005288:	d143      	bne.n	8005312 <_malloc_r+0xd6>
 800528a:	2c00      	cmp	r4, #0
 800528c:	d04b      	beq.n	8005326 <_malloc_r+0xea>
 800528e:	6823      	ldr	r3, [r4, #0]
 8005290:	4639      	mov	r1, r7
 8005292:	4630      	mov	r0, r6
 8005294:	eb04 0903 	add.w	r9, r4, r3
 8005298:	f000 fc5c 	bl	8005b54 <_sbrk_r>
 800529c:	4581      	cmp	r9, r0
 800529e:	d142      	bne.n	8005326 <_malloc_r+0xea>
 80052a0:	6821      	ldr	r1, [r4, #0]
 80052a2:	1a6d      	subs	r5, r5, r1
 80052a4:	4629      	mov	r1, r5
 80052a6:	4630      	mov	r0, r6
 80052a8:	f7ff ffa6 	bl	80051f8 <sbrk_aligned>
 80052ac:	3001      	adds	r0, #1
 80052ae:	d03a      	beq.n	8005326 <_malloc_r+0xea>
 80052b0:	6823      	ldr	r3, [r4, #0]
 80052b2:	442b      	add	r3, r5
 80052b4:	6023      	str	r3, [r4, #0]
 80052b6:	f8d8 3000 	ldr.w	r3, [r8]
 80052ba:	685a      	ldr	r2, [r3, #4]
 80052bc:	bb62      	cbnz	r2, 8005318 <_malloc_r+0xdc>
 80052be:	f8c8 7000 	str.w	r7, [r8]
 80052c2:	e00f      	b.n	80052e4 <_malloc_r+0xa8>
 80052c4:	6822      	ldr	r2, [r4, #0]
 80052c6:	1b52      	subs	r2, r2, r5
 80052c8:	d420      	bmi.n	800530c <_malloc_r+0xd0>
 80052ca:	2a0b      	cmp	r2, #11
 80052cc:	d917      	bls.n	80052fe <_malloc_r+0xc2>
 80052ce:	1961      	adds	r1, r4, r5
 80052d0:	42a3      	cmp	r3, r4
 80052d2:	6025      	str	r5, [r4, #0]
 80052d4:	bf18      	it	ne
 80052d6:	6059      	strne	r1, [r3, #4]
 80052d8:	6863      	ldr	r3, [r4, #4]
 80052da:	bf08      	it	eq
 80052dc:	f8c8 1000 	streq.w	r1, [r8]
 80052e0:	5162      	str	r2, [r4, r5]
 80052e2:	604b      	str	r3, [r1, #4]
 80052e4:	4630      	mov	r0, r6
 80052e6:	f000 f82f 	bl	8005348 <__malloc_unlock>
 80052ea:	f104 000b 	add.w	r0, r4, #11
 80052ee:	1d23      	adds	r3, r4, #4
 80052f0:	f020 0007 	bic.w	r0, r0, #7
 80052f4:	1ac2      	subs	r2, r0, r3
 80052f6:	bf1c      	itt	ne
 80052f8:	1a1b      	subne	r3, r3, r0
 80052fa:	50a3      	strne	r3, [r4, r2]
 80052fc:	e7af      	b.n	800525e <_malloc_r+0x22>
 80052fe:	6862      	ldr	r2, [r4, #4]
 8005300:	42a3      	cmp	r3, r4
 8005302:	bf0c      	ite	eq
 8005304:	f8c8 2000 	streq.w	r2, [r8]
 8005308:	605a      	strne	r2, [r3, #4]
 800530a:	e7eb      	b.n	80052e4 <_malloc_r+0xa8>
 800530c:	4623      	mov	r3, r4
 800530e:	6864      	ldr	r4, [r4, #4]
 8005310:	e7ae      	b.n	8005270 <_malloc_r+0x34>
 8005312:	463c      	mov	r4, r7
 8005314:	687f      	ldr	r7, [r7, #4]
 8005316:	e7b6      	b.n	8005286 <_malloc_r+0x4a>
 8005318:	461a      	mov	r2, r3
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	42a3      	cmp	r3, r4
 800531e:	d1fb      	bne.n	8005318 <_malloc_r+0xdc>
 8005320:	2300      	movs	r3, #0
 8005322:	6053      	str	r3, [r2, #4]
 8005324:	e7de      	b.n	80052e4 <_malloc_r+0xa8>
 8005326:	230c      	movs	r3, #12
 8005328:	6033      	str	r3, [r6, #0]
 800532a:	4630      	mov	r0, r6
 800532c:	f000 f80c 	bl	8005348 <__malloc_unlock>
 8005330:	e794      	b.n	800525c <_malloc_r+0x20>
 8005332:	6005      	str	r5, [r0, #0]
 8005334:	e7d6      	b.n	80052e4 <_malloc_r+0xa8>
 8005336:	bf00      	nop
 8005338:	200002ec 	.word	0x200002ec

0800533c <__malloc_lock>:
 800533c:	4801      	ldr	r0, [pc, #4]	@ (8005344 <__malloc_lock+0x8>)
 800533e:	f7ff bf0e 	b.w	800515e <__retarget_lock_acquire_recursive>
 8005342:	bf00      	nop
 8005344:	200002e4 	.word	0x200002e4

08005348 <__malloc_unlock>:
 8005348:	4801      	ldr	r0, [pc, #4]	@ (8005350 <__malloc_unlock+0x8>)
 800534a:	f7ff bf09 	b.w	8005160 <__retarget_lock_release_recursive>
 800534e:	bf00      	nop
 8005350:	200002e4 	.word	0x200002e4

08005354 <__sfputc_r>:
 8005354:	6893      	ldr	r3, [r2, #8]
 8005356:	3b01      	subs	r3, #1
 8005358:	2b00      	cmp	r3, #0
 800535a:	b410      	push	{r4}
 800535c:	6093      	str	r3, [r2, #8]
 800535e:	da08      	bge.n	8005372 <__sfputc_r+0x1e>
 8005360:	6994      	ldr	r4, [r2, #24]
 8005362:	42a3      	cmp	r3, r4
 8005364:	db01      	blt.n	800536a <__sfputc_r+0x16>
 8005366:	290a      	cmp	r1, #10
 8005368:	d103      	bne.n	8005372 <__sfputc_r+0x1e>
 800536a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800536e:	f7ff bdd6 	b.w	8004f1e <__swbuf_r>
 8005372:	6813      	ldr	r3, [r2, #0]
 8005374:	1c58      	adds	r0, r3, #1
 8005376:	6010      	str	r0, [r2, #0]
 8005378:	7019      	strb	r1, [r3, #0]
 800537a:	4608      	mov	r0, r1
 800537c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005380:	4770      	bx	lr

08005382 <__sfputs_r>:
 8005382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005384:	4606      	mov	r6, r0
 8005386:	460f      	mov	r7, r1
 8005388:	4614      	mov	r4, r2
 800538a:	18d5      	adds	r5, r2, r3
 800538c:	42ac      	cmp	r4, r5
 800538e:	d101      	bne.n	8005394 <__sfputs_r+0x12>
 8005390:	2000      	movs	r0, #0
 8005392:	e007      	b.n	80053a4 <__sfputs_r+0x22>
 8005394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005398:	463a      	mov	r2, r7
 800539a:	4630      	mov	r0, r6
 800539c:	f7ff ffda 	bl	8005354 <__sfputc_r>
 80053a0:	1c43      	adds	r3, r0, #1
 80053a2:	d1f3      	bne.n	800538c <__sfputs_r+0xa>
 80053a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080053a8 <_vfiprintf_r>:
 80053a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ac:	460d      	mov	r5, r1
 80053ae:	b09d      	sub	sp, #116	@ 0x74
 80053b0:	4614      	mov	r4, r2
 80053b2:	4698      	mov	r8, r3
 80053b4:	4606      	mov	r6, r0
 80053b6:	b118      	cbz	r0, 80053c0 <_vfiprintf_r+0x18>
 80053b8:	6a03      	ldr	r3, [r0, #32]
 80053ba:	b90b      	cbnz	r3, 80053c0 <_vfiprintf_r+0x18>
 80053bc:	f7ff fcc6 	bl	8004d4c <__sinit>
 80053c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80053c2:	07d9      	lsls	r1, r3, #31
 80053c4:	d405      	bmi.n	80053d2 <_vfiprintf_r+0x2a>
 80053c6:	89ab      	ldrh	r3, [r5, #12]
 80053c8:	059a      	lsls	r2, r3, #22
 80053ca:	d402      	bmi.n	80053d2 <_vfiprintf_r+0x2a>
 80053cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80053ce:	f7ff fec6 	bl	800515e <__retarget_lock_acquire_recursive>
 80053d2:	89ab      	ldrh	r3, [r5, #12]
 80053d4:	071b      	lsls	r3, r3, #28
 80053d6:	d501      	bpl.n	80053dc <_vfiprintf_r+0x34>
 80053d8:	692b      	ldr	r3, [r5, #16]
 80053da:	b99b      	cbnz	r3, 8005404 <_vfiprintf_r+0x5c>
 80053dc:	4629      	mov	r1, r5
 80053de:	4630      	mov	r0, r6
 80053e0:	f7ff fddc 	bl	8004f9c <__swsetup_r>
 80053e4:	b170      	cbz	r0, 8005404 <_vfiprintf_r+0x5c>
 80053e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80053e8:	07dc      	lsls	r4, r3, #31
 80053ea:	d504      	bpl.n	80053f6 <_vfiprintf_r+0x4e>
 80053ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80053f0:	b01d      	add	sp, #116	@ 0x74
 80053f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053f6:	89ab      	ldrh	r3, [r5, #12]
 80053f8:	0598      	lsls	r0, r3, #22
 80053fa:	d4f7      	bmi.n	80053ec <_vfiprintf_r+0x44>
 80053fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80053fe:	f7ff feaf 	bl	8005160 <__retarget_lock_release_recursive>
 8005402:	e7f3      	b.n	80053ec <_vfiprintf_r+0x44>
 8005404:	2300      	movs	r3, #0
 8005406:	9309      	str	r3, [sp, #36]	@ 0x24
 8005408:	2320      	movs	r3, #32
 800540a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800540e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005412:	2330      	movs	r3, #48	@ 0x30
 8005414:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80055c4 <_vfiprintf_r+0x21c>
 8005418:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800541c:	f04f 0901 	mov.w	r9, #1
 8005420:	4623      	mov	r3, r4
 8005422:	469a      	mov	sl, r3
 8005424:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005428:	b10a      	cbz	r2, 800542e <_vfiprintf_r+0x86>
 800542a:	2a25      	cmp	r2, #37	@ 0x25
 800542c:	d1f9      	bne.n	8005422 <_vfiprintf_r+0x7a>
 800542e:	ebba 0b04 	subs.w	fp, sl, r4
 8005432:	d00b      	beq.n	800544c <_vfiprintf_r+0xa4>
 8005434:	465b      	mov	r3, fp
 8005436:	4622      	mov	r2, r4
 8005438:	4629      	mov	r1, r5
 800543a:	4630      	mov	r0, r6
 800543c:	f7ff ffa1 	bl	8005382 <__sfputs_r>
 8005440:	3001      	adds	r0, #1
 8005442:	f000 80a7 	beq.w	8005594 <_vfiprintf_r+0x1ec>
 8005446:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005448:	445a      	add	r2, fp
 800544a:	9209      	str	r2, [sp, #36]	@ 0x24
 800544c:	f89a 3000 	ldrb.w	r3, [sl]
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 809f 	beq.w	8005594 <_vfiprintf_r+0x1ec>
 8005456:	2300      	movs	r3, #0
 8005458:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800545c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005460:	f10a 0a01 	add.w	sl, sl, #1
 8005464:	9304      	str	r3, [sp, #16]
 8005466:	9307      	str	r3, [sp, #28]
 8005468:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800546c:	931a      	str	r3, [sp, #104]	@ 0x68
 800546e:	4654      	mov	r4, sl
 8005470:	2205      	movs	r2, #5
 8005472:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005476:	4853      	ldr	r0, [pc, #332]	@ (80055c4 <_vfiprintf_r+0x21c>)
 8005478:	f7fa feda 	bl	8000230 <memchr>
 800547c:	9a04      	ldr	r2, [sp, #16]
 800547e:	b9d8      	cbnz	r0, 80054b8 <_vfiprintf_r+0x110>
 8005480:	06d1      	lsls	r1, r2, #27
 8005482:	bf44      	itt	mi
 8005484:	2320      	movmi	r3, #32
 8005486:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800548a:	0713      	lsls	r3, r2, #28
 800548c:	bf44      	itt	mi
 800548e:	232b      	movmi	r3, #43	@ 0x2b
 8005490:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005494:	f89a 3000 	ldrb.w	r3, [sl]
 8005498:	2b2a      	cmp	r3, #42	@ 0x2a
 800549a:	d015      	beq.n	80054c8 <_vfiprintf_r+0x120>
 800549c:	9a07      	ldr	r2, [sp, #28]
 800549e:	4654      	mov	r4, sl
 80054a0:	2000      	movs	r0, #0
 80054a2:	f04f 0c0a 	mov.w	ip, #10
 80054a6:	4621      	mov	r1, r4
 80054a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054ac:	3b30      	subs	r3, #48	@ 0x30
 80054ae:	2b09      	cmp	r3, #9
 80054b0:	d94b      	bls.n	800554a <_vfiprintf_r+0x1a2>
 80054b2:	b1b0      	cbz	r0, 80054e2 <_vfiprintf_r+0x13a>
 80054b4:	9207      	str	r2, [sp, #28]
 80054b6:	e014      	b.n	80054e2 <_vfiprintf_r+0x13a>
 80054b8:	eba0 0308 	sub.w	r3, r0, r8
 80054bc:	fa09 f303 	lsl.w	r3, r9, r3
 80054c0:	4313      	orrs	r3, r2
 80054c2:	9304      	str	r3, [sp, #16]
 80054c4:	46a2      	mov	sl, r4
 80054c6:	e7d2      	b.n	800546e <_vfiprintf_r+0xc6>
 80054c8:	9b03      	ldr	r3, [sp, #12]
 80054ca:	1d19      	adds	r1, r3, #4
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	9103      	str	r1, [sp, #12]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	bfbb      	ittet	lt
 80054d4:	425b      	neglt	r3, r3
 80054d6:	f042 0202 	orrlt.w	r2, r2, #2
 80054da:	9307      	strge	r3, [sp, #28]
 80054dc:	9307      	strlt	r3, [sp, #28]
 80054de:	bfb8      	it	lt
 80054e0:	9204      	strlt	r2, [sp, #16]
 80054e2:	7823      	ldrb	r3, [r4, #0]
 80054e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80054e6:	d10a      	bne.n	80054fe <_vfiprintf_r+0x156>
 80054e8:	7863      	ldrb	r3, [r4, #1]
 80054ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80054ec:	d132      	bne.n	8005554 <_vfiprintf_r+0x1ac>
 80054ee:	9b03      	ldr	r3, [sp, #12]
 80054f0:	1d1a      	adds	r2, r3, #4
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	9203      	str	r2, [sp, #12]
 80054f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80054fa:	3402      	adds	r4, #2
 80054fc:	9305      	str	r3, [sp, #20]
 80054fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80055d4 <_vfiprintf_r+0x22c>
 8005502:	7821      	ldrb	r1, [r4, #0]
 8005504:	2203      	movs	r2, #3
 8005506:	4650      	mov	r0, sl
 8005508:	f7fa fe92 	bl	8000230 <memchr>
 800550c:	b138      	cbz	r0, 800551e <_vfiprintf_r+0x176>
 800550e:	9b04      	ldr	r3, [sp, #16]
 8005510:	eba0 000a 	sub.w	r0, r0, sl
 8005514:	2240      	movs	r2, #64	@ 0x40
 8005516:	4082      	lsls	r2, r0
 8005518:	4313      	orrs	r3, r2
 800551a:	3401      	adds	r4, #1
 800551c:	9304      	str	r3, [sp, #16]
 800551e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005522:	4829      	ldr	r0, [pc, #164]	@ (80055c8 <_vfiprintf_r+0x220>)
 8005524:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005528:	2206      	movs	r2, #6
 800552a:	f7fa fe81 	bl	8000230 <memchr>
 800552e:	2800      	cmp	r0, #0
 8005530:	d03f      	beq.n	80055b2 <_vfiprintf_r+0x20a>
 8005532:	4b26      	ldr	r3, [pc, #152]	@ (80055cc <_vfiprintf_r+0x224>)
 8005534:	bb1b      	cbnz	r3, 800557e <_vfiprintf_r+0x1d6>
 8005536:	9b03      	ldr	r3, [sp, #12]
 8005538:	3307      	adds	r3, #7
 800553a:	f023 0307 	bic.w	r3, r3, #7
 800553e:	3308      	adds	r3, #8
 8005540:	9303      	str	r3, [sp, #12]
 8005542:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005544:	443b      	add	r3, r7
 8005546:	9309      	str	r3, [sp, #36]	@ 0x24
 8005548:	e76a      	b.n	8005420 <_vfiprintf_r+0x78>
 800554a:	fb0c 3202 	mla	r2, ip, r2, r3
 800554e:	460c      	mov	r4, r1
 8005550:	2001      	movs	r0, #1
 8005552:	e7a8      	b.n	80054a6 <_vfiprintf_r+0xfe>
 8005554:	2300      	movs	r3, #0
 8005556:	3401      	adds	r4, #1
 8005558:	9305      	str	r3, [sp, #20]
 800555a:	4619      	mov	r1, r3
 800555c:	f04f 0c0a 	mov.w	ip, #10
 8005560:	4620      	mov	r0, r4
 8005562:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005566:	3a30      	subs	r2, #48	@ 0x30
 8005568:	2a09      	cmp	r2, #9
 800556a:	d903      	bls.n	8005574 <_vfiprintf_r+0x1cc>
 800556c:	2b00      	cmp	r3, #0
 800556e:	d0c6      	beq.n	80054fe <_vfiprintf_r+0x156>
 8005570:	9105      	str	r1, [sp, #20]
 8005572:	e7c4      	b.n	80054fe <_vfiprintf_r+0x156>
 8005574:	fb0c 2101 	mla	r1, ip, r1, r2
 8005578:	4604      	mov	r4, r0
 800557a:	2301      	movs	r3, #1
 800557c:	e7f0      	b.n	8005560 <_vfiprintf_r+0x1b8>
 800557e:	ab03      	add	r3, sp, #12
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	462a      	mov	r2, r5
 8005584:	4b12      	ldr	r3, [pc, #72]	@ (80055d0 <_vfiprintf_r+0x228>)
 8005586:	a904      	add	r1, sp, #16
 8005588:	4630      	mov	r0, r6
 800558a:	f3af 8000 	nop.w
 800558e:	4607      	mov	r7, r0
 8005590:	1c78      	adds	r0, r7, #1
 8005592:	d1d6      	bne.n	8005542 <_vfiprintf_r+0x19a>
 8005594:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005596:	07d9      	lsls	r1, r3, #31
 8005598:	d405      	bmi.n	80055a6 <_vfiprintf_r+0x1fe>
 800559a:	89ab      	ldrh	r3, [r5, #12]
 800559c:	059a      	lsls	r2, r3, #22
 800559e:	d402      	bmi.n	80055a6 <_vfiprintf_r+0x1fe>
 80055a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80055a2:	f7ff fddd 	bl	8005160 <__retarget_lock_release_recursive>
 80055a6:	89ab      	ldrh	r3, [r5, #12]
 80055a8:	065b      	lsls	r3, r3, #25
 80055aa:	f53f af1f 	bmi.w	80053ec <_vfiprintf_r+0x44>
 80055ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80055b0:	e71e      	b.n	80053f0 <_vfiprintf_r+0x48>
 80055b2:	ab03      	add	r3, sp, #12
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	462a      	mov	r2, r5
 80055b8:	4b05      	ldr	r3, [pc, #20]	@ (80055d0 <_vfiprintf_r+0x228>)
 80055ba:	a904      	add	r1, sp, #16
 80055bc:	4630      	mov	r0, r6
 80055be:	f000 f879 	bl	80056b4 <_printf_i>
 80055c2:	e7e4      	b.n	800558e <_vfiprintf_r+0x1e6>
 80055c4:	08005c88 	.word	0x08005c88
 80055c8:	08005c92 	.word	0x08005c92
 80055cc:	00000000 	.word	0x00000000
 80055d0:	08005383 	.word	0x08005383
 80055d4:	08005c8e 	.word	0x08005c8e

080055d8 <_printf_common>:
 80055d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055dc:	4616      	mov	r6, r2
 80055de:	4698      	mov	r8, r3
 80055e0:	688a      	ldr	r2, [r1, #8]
 80055e2:	690b      	ldr	r3, [r1, #16]
 80055e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055e8:	4293      	cmp	r3, r2
 80055ea:	bfb8      	it	lt
 80055ec:	4613      	movlt	r3, r2
 80055ee:	6033      	str	r3, [r6, #0]
 80055f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80055f4:	4607      	mov	r7, r0
 80055f6:	460c      	mov	r4, r1
 80055f8:	b10a      	cbz	r2, 80055fe <_printf_common+0x26>
 80055fa:	3301      	adds	r3, #1
 80055fc:	6033      	str	r3, [r6, #0]
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	0699      	lsls	r1, r3, #26
 8005602:	bf42      	ittt	mi
 8005604:	6833      	ldrmi	r3, [r6, #0]
 8005606:	3302      	addmi	r3, #2
 8005608:	6033      	strmi	r3, [r6, #0]
 800560a:	6825      	ldr	r5, [r4, #0]
 800560c:	f015 0506 	ands.w	r5, r5, #6
 8005610:	d106      	bne.n	8005620 <_printf_common+0x48>
 8005612:	f104 0a19 	add.w	sl, r4, #25
 8005616:	68e3      	ldr	r3, [r4, #12]
 8005618:	6832      	ldr	r2, [r6, #0]
 800561a:	1a9b      	subs	r3, r3, r2
 800561c:	42ab      	cmp	r3, r5
 800561e:	dc26      	bgt.n	800566e <_printf_common+0x96>
 8005620:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005624:	6822      	ldr	r2, [r4, #0]
 8005626:	3b00      	subs	r3, #0
 8005628:	bf18      	it	ne
 800562a:	2301      	movne	r3, #1
 800562c:	0692      	lsls	r2, r2, #26
 800562e:	d42b      	bmi.n	8005688 <_printf_common+0xb0>
 8005630:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005634:	4641      	mov	r1, r8
 8005636:	4638      	mov	r0, r7
 8005638:	47c8      	blx	r9
 800563a:	3001      	adds	r0, #1
 800563c:	d01e      	beq.n	800567c <_printf_common+0xa4>
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	6922      	ldr	r2, [r4, #16]
 8005642:	f003 0306 	and.w	r3, r3, #6
 8005646:	2b04      	cmp	r3, #4
 8005648:	bf02      	ittt	eq
 800564a:	68e5      	ldreq	r5, [r4, #12]
 800564c:	6833      	ldreq	r3, [r6, #0]
 800564e:	1aed      	subeq	r5, r5, r3
 8005650:	68a3      	ldr	r3, [r4, #8]
 8005652:	bf0c      	ite	eq
 8005654:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005658:	2500      	movne	r5, #0
 800565a:	4293      	cmp	r3, r2
 800565c:	bfc4      	itt	gt
 800565e:	1a9b      	subgt	r3, r3, r2
 8005660:	18ed      	addgt	r5, r5, r3
 8005662:	2600      	movs	r6, #0
 8005664:	341a      	adds	r4, #26
 8005666:	42b5      	cmp	r5, r6
 8005668:	d11a      	bne.n	80056a0 <_printf_common+0xc8>
 800566a:	2000      	movs	r0, #0
 800566c:	e008      	b.n	8005680 <_printf_common+0xa8>
 800566e:	2301      	movs	r3, #1
 8005670:	4652      	mov	r2, sl
 8005672:	4641      	mov	r1, r8
 8005674:	4638      	mov	r0, r7
 8005676:	47c8      	blx	r9
 8005678:	3001      	adds	r0, #1
 800567a:	d103      	bne.n	8005684 <_printf_common+0xac>
 800567c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005684:	3501      	adds	r5, #1
 8005686:	e7c6      	b.n	8005616 <_printf_common+0x3e>
 8005688:	18e1      	adds	r1, r4, r3
 800568a:	1c5a      	adds	r2, r3, #1
 800568c:	2030      	movs	r0, #48	@ 0x30
 800568e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005692:	4422      	add	r2, r4
 8005694:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005698:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800569c:	3302      	adds	r3, #2
 800569e:	e7c7      	b.n	8005630 <_printf_common+0x58>
 80056a0:	2301      	movs	r3, #1
 80056a2:	4622      	mov	r2, r4
 80056a4:	4641      	mov	r1, r8
 80056a6:	4638      	mov	r0, r7
 80056a8:	47c8      	blx	r9
 80056aa:	3001      	adds	r0, #1
 80056ac:	d0e6      	beq.n	800567c <_printf_common+0xa4>
 80056ae:	3601      	adds	r6, #1
 80056b0:	e7d9      	b.n	8005666 <_printf_common+0x8e>
	...

080056b4 <_printf_i>:
 80056b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056b8:	7e0f      	ldrb	r7, [r1, #24]
 80056ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80056bc:	2f78      	cmp	r7, #120	@ 0x78
 80056be:	4691      	mov	r9, r2
 80056c0:	4680      	mov	r8, r0
 80056c2:	460c      	mov	r4, r1
 80056c4:	469a      	mov	sl, r3
 80056c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80056ca:	d807      	bhi.n	80056dc <_printf_i+0x28>
 80056cc:	2f62      	cmp	r7, #98	@ 0x62
 80056ce:	d80a      	bhi.n	80056e6 <_printf_i+0x32>
 80056d0:	2f00      	cmp	r7, #0
 80056d2:	f000 80d2 	beq.w	800587a <_printf_i+0x1c6>
 80056d6:	2f58      	cmp	r7, #88	@ 0x58
 80056d8:	f000 80b9 	beq.w	800584e <_printf_i+0x19a>
 80056dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80056e4:	e03a      	b.n	800575c <_printf_i+0xa8>
 80056e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80056ea:	2b15      	cmp	r3, #21
 80056ec:	d8f6      	bhi.n	80056dc <_printf_i+0x28>
 80056ee:	a101      	add	r1, pc, #4	@ (adr r1, 80056f4 <_printf_i+0x40>)
 80056f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056f4:	0800574d 	.word	0x0800574d
 80056f8:	08005761 	.word	0x08005761
 80056fc:	080056dd 	.word	0x080056dd
 8005700:	080056dd 	.word	0x080056dd
 8005704:	080056dd 	.word	0x080056dd
 8005708:	080056dd 	.word	0x080056dd
 800570c:	08005761 	.word	0x08005761
 8005710:	080056dd 	.word	0x080056dd
 8005714:	080056dd 	.word	0x080056dd
 8005718:	080056dd 	.word	0x080056dd
 800571c:	080056dd 	.word	0x080056dd
 8005720:	08005861 	.word	0x08005861
 8005724:	0800578b 	.word	0x0800578b
 8005728:	0800581b 	.word	0x0800581b
 800572c:	080056dd 	.word	0x080056dd
 8005730:	080056dd 	.word	0x080056dd
 8005734:	08005883 	.word	0x08005883
 8005738:	080056dd 	.word	0x080056dd
 800573c:	0800578b 	.word	0x0800578b
 8005740:	080056dd 	.word	0x080056dd
 8005744:	080056dd 	.word	0x080056dd
 8005748:	08005823 	.word	0x08005823
 800574c:	6833      	ldr	r3, [r6, #0]
 800574e:	1d1a      	adds	r2, r3, #4
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	6032      	str	r2, [r6, #0]
 8005754:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005758:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800575c:	2301      	movs	r3, #1
 800575e:	e09d      	b.n	800589c <_printf_i+0x1e8>
 8005760:	6833      	ldr	r3, [r6, #0]
 8005762:	6820      	ldr	r0, [r4, #0]
 8005764:	1d19      	adds	r1, r3, #4
 8005766:	6031      	str	r1, [r6, #0]
 8005768:	0606      	lsls	r6, r0, #24
 800576a:	d501      	bpl.n	8005770 <_printf_i+0xbc>
 800576c:	681d      	ldr	r5, [r3, #0]
 800576e:	e003      	b.n	8005778 <_printf_i+0xc4>
 8005770:	0645      	lsls	r5, r0, #25
 8005772:	d5fb      	bpl.n	800576c <_printf_i+0xb8>
 8005774:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005778:	2d00      	cmp	r5, #0
 800577a:	da03      	bge.n	8005784 <_printf_i+0xd0>
 800577c:	232d      	movs	r3, #45	@ 0x2d
 800577e:	426d      	negs	r5, r5
 8005780:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005784:	4859      	ldr	r0, [pc, #356]	@ (80058ec <_printf_i+0x238>)
 8005786:	230a      	movs	r3, #10
 8005788:	e011      	b.n	80057ae <_printf_i+0xfa>
 800578a:	6821      	ldr	r1, [r4, #0]
 800578c:	6833      	ldr	r3, [r6, #0]
 800578e:	0608      	lsls	r0, r1, #24
 8005790:	f853 5b04 	ldr.w	r5, [r3], #4
 8005794:	d402      	bmi.n	800579c <_printf_i+0xe8>
 8005796:	0649      	lsls	r1, r1, #25
 8005798:	bf48      	it	mi
 800579a:	b2ad      	uxthmi	r5, r5
 800579c:	2f6f      	cmp	r7, #111	@ 0x6f
 800579e:	4853      	ldr	r0, [pc, #332]	@ (80058ec <_printf_i+0x238>)
 80057a0:	6033      	str	r3, [r6, #0]
 80057a2:	bf14      	ite	ne
 80057a4:	230a      	movne	r3, #10
 80057a6:	2308      	moveq	r3, #8
 80057a8:	2100      	movs	r1, #0
 80057aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80057ae:	6866      	ldr	r6, [r4, #4]
 80057b0:	60a6      	str	r6, [r4, #8]
 80057b2:	2e00      	cmp	r6, #0
 80057b4:	bfa2      	ittt	ge
 80057b6:	6821      	ldrge	r1, [r4, #0]
 80057b8:	f021 0104 	bicge.w	r1, r1, #4
 80057bc:	6021      	strge	r1, [r4, #0]
 80057be:	b90d      	cbnz	r5, 80057c4 <_printf_i+0x110>
 80057c0:	2e00      	cmp	r6, #0
 80057c2:	d04b      	beq.n	800585c <_printf_i+0x1a8>
 80057c4:	4616      	mov	r6, r2
 80057c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80057ca:	fb03 5711 	mls	r7, r3, r1, r5
 80057ce:	5dc7      	ldrb	r7, [r0, r7]
 80057d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057d4:	462f      	mov	r7, r5
 80057d6:	42bb      	cmp	r3, r7
 80057d8:	460d      	mov	r5, r1
 80057da:	d9f4      	bls.n	80057c6 <_printf_i+0x112>
 80057dc:	2b08      	cmp	r3, #8
 80057de:	d10b      	bne.n	80057f8 <_printf_i+0x144>
 80057e0:	6823      	ldr	r3, [r4, #0]
 80057e2:	07df      	lsls	r7, r3, #31
 80057e4:	d508      	bpl.n	80057f8 <_printf_i+0x144>
 80057e6:	6923      	ldr	r3, [r4, #16]
 80057e8:	6861      	ldr	r1, [r4, #4]
 80057ea:	4299      	cmp	r1, r3
 80057ec:	bfde      	ittt	le
 80057ee:	2330      	movle	r3, #48	@ 0x30
 80057f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057f4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80057f8:	1b92      	subs	r2, r2, r6
 80057fa:	6122      	str	r2, [r4, #16]
 80057fc:	f8cd a000 	str.w	sl, [sp]
 8005800:	464b      	mov	r3, r9
 8005802:	aa03      	add	r2, sp, #12
 8005804:	4621      	mov	r1, r4
 8005806:	4640      	mov	r0, r8
 8005808:	f7ff fee6 	bl	80055d8 <_printf_common>
 800580c:	3001      	adds	r0, #1
 800580e:	d14a      	bne.n	80058a6 <_printf_i+0x1f2>
 8005810:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005814:	b004      	add	sp, #16
 8005816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800581a:	6823      	ldr	r3, [r4, #0]
 800581c:	f043 0320 	orr.w	r3, r3, #32
 8005820:	6023      	str	r3, [r4, #0]
 8005822:	4833      	ldr	r0, [pc, #204]	@ (80058f0 <_printf_i+0x23c>)
 8005824:	2778      	movs	r7, #120	@ 0x78
 8005826:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800582a:	6823      	ldr	r3, [r4, #0]
 800582c:	6831      	ldr	r1, [r6, #0]
 800582e:	061f      	lsls	r7, r3, #24
 8005830:	f851 5b04 	ldr.w	r5, [r1], #4
 8005834:	d402      	bmi.n	800583c <_printf_i+0x188>
 8005836:	065f      	lsls	r7, r3, #25
 8005838:	bf48      	it	mi
 800583a:	b2ad      	uxthmi	r5, r5
 800583c:	6031      	str	r1, [r6, #0]
 800583e:	07d9      	lsls	r1, r3, #31
 8005840:	bf44      	itt	mi
 8005842:	f043 0320 	orrmi.w	r3, r3, #32
 8005846:	6023      	strmi	r3, [r4, #0]
 8005848:	b11d      	cbz	r5, 8005852 <_printf_i+0x19e>
 800584a:	2310      	movs	r3, #16
 800584c:	e7ac      	b.n	80057a8 <_printf_i+0xf4>
 800584e:	4827      	ldr	r0, [pc, #156]	@ (80058ec <_printf_i+0x238>)
 8005850:	e7e9      	b.n	8005826 <_printf_i+0x172>
 8005852:	6823      	ldr	r3, [r4, #0]
 8005854:	f023 0320 	bic.w	r3, r3, #32
 8005858:	6023      	str	r3, [r4, #0]
 800585a:	e7f6      	b.n	800584a <_printf_i+0x196>
 800585c:	4616      	mov	r6, r2
 800585e:	e7bd      	b.n	80057dc <_printf_i+0x128>
 8005860:	6833      	ldr	r3, [r6, #0]
 8005862:	6825      	ldr	r5, [r4, #0]
 8005864:	6961      	ldr	r1, [r4, #20]
 8005866:	1d18      	adds	r0, r3, #4
 8005868:	6030      	str	r0, [r6, #0]
 800586a:	062e      	lsls	r6, r5, #24
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	d501      	bpl.n	8005874 <_printf_i+0x1c0>
 8005870:	6019      	str	r1, [r3, #0]
 8005872:	e002      	b.n	800587a <_printf_i+0x1c6>
 8005874:	0668      	lsls	r0, r5, #25
 8005876:	d5fb      	bpl.n	8005870 <_printf_i+0x1bc>
 8005878:	8019      	strh	r1, [r3, #0]
 800587a:	2300      	movs	r3, #0
 800587c:	6123      	str	r3, [r4, #16]
 800587e:	4616      	mov	r6, r2
 8005880:	e7bc      	b.n	80057fc <_printf_i+0x148>
 8005882:	6833      	ldr	r3, [r6, #0]
 8005884:	1d1a      	adds	r2, r3, #4
 8005886:	6032      	str	r2, [r6, #0]
 8005888:	681e      	ldr	r6, [r3, #0]
 800588a:	6862      	ldr	r2, [r4, #4]
 800588c:	2100      	movs	r1, #0
 800588e:	4630      	mov	r0, r6
 8005890:	f7fa fcce 	bl	8000230 <memchr>
 8005894:	b108      	cbz	r0, 800589a <_printf_i+0x1e6>
 8005896:	1b80      	subs	r0, r0, r6
 8005898:	6060      	str	r0, [r4, #4]
 800589a:	6863      	ldr	r3, [r4, #4]
 800589c:	6123      	str	r3, [r4, #16]
 800589e:	2300      	movs	r3, #0
 80058a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058a4:	e7aa      	b.n	80057fc <_printf_i+0x148>
 80058a6:	6923      	ldr	r3, [r4, #16]
 80058a8:	4632      	mov	r2, r6
 80058aa:	4649      	mov	r1, r9
 80058ac:	4640      	mov	r0, r8
 80058ae:	47d0      	blx	sl
 80058b0:	3001      	adds	r0, #1
 80058b2:	d0ad      	beq.n	8005810 <_printf_i+0x15c>
 80058b4:	6823      	ldr	r3, [r4, #0]
 80058b6:	079b      	lsls	r3, r3, #30
 80058b8:	d413      	bmi.n	80058e2 <_printf_i+0x22e>
 80058ba:	68e0      	ldr	r0, [r4, #12]
 80058bc:	9b03      	ldr	r3, [sp, #12]
 80058be:	4298      	cmp	r0, r3
 80058c0:	bfb8      	it	lt
 80058c2:	4618      	movlt	r0, r3
 80058c4:	e7a6      	b.n	8005814 <_printf_i+0x160>
 80058c6:	2301      	movs	r3, #1
 80058c8:	4632      	mov	r2, r6
 80058ca:	4649      	mov	r1, r9
 80058cc:	4640      	mov	r0, r8
 80058ce:	47d0      	blx	sl
 80058d0:	3001      	adds	r0, #1
 80058d2:	d09d      	beq.n	8005810 <_printf_i+0x15c>
 80058d4:	3501      	adds	r5, #1
 80058d6:	68e3      	ldr	r3, [r4, #12]
 80058d8:	9903      	ldr	r1, [sp, #12]
 80058da:	1a5b      	subs	r3, r3, r1
 80058dc:	42ab      	cmp	r3, r5
 80058de:	dcf2      	bgt.n	80058c6 <_printf_i+0x212>
 80058e0:	e7eb      	b.n	80058ba <_printf_i+0x206>
 80058e2:	2500      	movs	r5, #0
 80058e4:	f104 0619 	add.w	r6, r4, #25
 80058e8:	e7f5      	b.n	80058d6 <_printf_i+0x222>
 80058ea:	bf00      	nop
 80058ec:	08005c99 	.word	0x08005c99
 80058f0:	08005caa 	.word	0x08005caa

080058f4 <__sflush_r>:
 80058f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80058f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058fc:	0716      	lsls	r6, r2, #28
 80058fe:	4605      	mov	r5, r0
 8005900:	460c      	mov	r4, r1
 8005902:	d454      	bmi.n	80059ae <__sflush_r+0xba>
 8005904:	684b      	ldr	r3, [r1, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	dc02      	bgt.n	8005910 <__sflush_r+0x1c>
 800590a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800590c:	2b00      	cmp	r3, #0
 800590e:	dd48      	ble.n	80059a2 <__sflush_r+0xae>
 8005910:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005912:	2e00      	cmp	r6, #0
 8005914:	d045      	beq.n	80059a2 <__sflush_r+0xae>
 8005916:	2300      	movs	r3, #0
 8005918:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800591c:	682f      	ldr	r7, [r5, #0]
 800591e:	6a21      	ldr	r1, [r4, #32]
 8005920:	602b      	str	r3, [r5, #0]
 8005922:	d030      	beq.n	8005986 <__sflush_r+0x92>
 8005924:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005926:	89a3      	ldrh	r3, [r4, #12]
 8005928:	0759      	lsls	r1, r3, #29
 800592a:	d505      	bpl.n	8005938 <__sflush_r+0x44>
 800592c:	6863      	ldr	r3, [r4, #4]
 800592e:	1ad2      	subs	r2, r2, r3
 8005930:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005932:	b10b      	cbz	r3, 8005938 <__sflush_r+0x44>
 8005934:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005936:	1ad2      	subs	r2, r2, r3
 8005938:	2300      	movs	r3, #0
 800593a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800593c:	6a21      	ldr	r1, [r4, #32]
 800593e:	4628      	mov	r0, r5
 8005940:	47b0      	blx	r6
 8005942:	1c43      	adds	r3, r0, #1
 8005944:	89a3      	ldrh	r3, [r4, #12]
 8005946:	d106      	bne.n	8005956 <__sflush_r+0x62>
 8005948:	6829      	ldr	r1, [r5, #0]
 800594a:	291d      	cmp	r1, #29
 800594c:	d82b      	bhi.n	80059a6 <__sflush_r+0xb2>
 800594e:	4a2a      	ldr	r2, [pc, #168]	@ (80059f8 <__sflush_r+0x104>)
 8005950:	410a      	asrs	r2, r1
 8005952:	07d6      	lsls	r6, r2, #31
 8005954:	d427      	bmi.n	80059a6 <__sflush_r+0xb2>
 8005956:	2200      	movs	r2, #0
 8005958:	6062      	str	r2, [r4, #4]
 800595a:	04d9      	lsls	r1, r3, #19
 800595c:	6922      	ldr	r2, [r4, #16]
 800595e:	6022      	str	r2, [r4, #0]
 8005960:	d504      	bpl.n	800596c <__sflush_r+0x78>
 8005962:	1c42      	adds	r2, r0, #1
 8005964:	d101      	bne.n	800596a <__sflush_r+0x76>
 8005966:	682b      	ldr	r3, [r5, #0]
 8005968:	b903      	cbnz	r3, 800596c <__sflush_r+0x78>
 800596a:	6560      	str	r0, [r4, #84]	@ 0x54
 800596c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800596e:	602f      	str	r7, [r5, #0]
 8005970:	b1b9      	cbz	r1, 80059a2 <__sflush_r+0xae>
 8005972:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005976:	4299      	cmp	r1, r3
 8005978:	d002      	beq.n	8005980 <__sflush_r+0x8c>
 800597a:	4628      	mov	r0, r5
 800597c:	f7ff fbf2 	bl	8005164 <_free_r>
 8005980:	2300      	movs	r3, #0
 8005982:	6363      	str	r3, [r4, #52]	@ 0x34
 8005984:	e00d      	b.n	80059a2 <__sflush_r+0xae>
 8005986:	2301      	movs	r3, #1
 8005988:	4628      	mov	r0, r5
 800598a:	47b0      	blx	r6
 800598c:	4602      	mov	r2, r0
 800598e:	1c50      	adds	r0, r2, #1
 8005990:	d1c9      	bne.n	8005926 <__sflush_r+0x32>
 8005992:	682b      	ldr	r3, [r5, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d0c6      	beq.n	8005926 <__sflush_r+0x32>
 8005998:	2b1d      	cmp	r3, #29
 800599a:	d001      	beq.n	80059a0 <__sflush_r+0xac>
 800599c:	2b16      	cmp	r3, #22
 800599e:	d11e      	bne.n	80059de <__sflush_r+0xea>
 80059a0:	602f      	str	r7, [r5, #0]
 80059a2:	2000      	movs	r0, #0
 80059a4:	e022      	b.n	80059ec <__sflush_r+0xf8>
 80059a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059aa:	b21b      	sxth	r3, r3
 80059ac:	e01b      	b.n	80059e6 <__sflush_r+0xf2>
 80059ae:	690f      	ldr	r7, [r1, #16]
 80059b0:	2f00      	cmp	r7, #0
 80059b2:	d0f6      	beq.n	80059a2 <__sflush_r+0xae>
 80059b4:	0793      	lsls	r3, r2, #30
 80059b6:	680e      	ldr	r6, [r1, #0]
 80059b8:	bf08      	it	eq
 80059ba:	694b      	ldreq	r3, [r1, #20]
 80059bc:	600f      	str	r7, [r1, #0]
 80059be:	bf18      	it	ne
 80059c0:	2300      	movne	r3, #0
 80059c2:	eba6 0807 	sub.w	r8, r6, r7
 80059c6:	608b      	str	r3, [r1, #8]
 80059c8:	f1b8 0f00 	cmp.w	r8, #0
 80059cc:	dde9      	ble.n	80059a2 <__sflush_r+0xae>
 80059ce:	6a21      	ldr	r1, [r4, #32]
 80059d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80059d2:	4643      	mov	r3, r8
 80059d4:	463a      	mov	r2, r7
 80059d6:	4628      	mov	r0, r5
 80059d8:	47b0      	blx	r6
 80059da:	2800      	cmp	r0, #0
 80059dc:	dc08      	bgt.n	80059f0 <__sflush_r+0xfc>
 80059de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059e6:	81a3      	strh	r3, [r4, #12]
 80059e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80059ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059f0:	4407      	add	r7, r0
 80059f2:	eba8 0800 	sub.w	r8, r8, r0
 80059f6:	e7e7      	b.n	80059c8 <__sflush_r+0xd4>
 80059f8:	dfbffffe 	.word	0xdfbffffe

080059fc <_fflush_r>:
 80059fc:	b538      	push	{r3, r4, r5, lr}
 80059fe:	690b      	ldr	r3, [r1, #16]
 8005a00:	4605      	mov	r5, r0
 8005a02:	460c      	mov	r4, r1
 8005a04:	b913      	cbnz	r3, 8005a0c <_fflush_r+0x10>
 8005a06:	2500      	movs	r5, #0
 8005a08:	4628      	mov	r0, r5
 8005a0a:	bd38      	pop	{r3, r4, r5, pc}
 8005a0c:	b118      	cbz	r0, 8005a16 <_fflush_r+0x1a>
 8005a0e:	6a03      	ldr	r3, [r0, #32]
 8005a10:	b90b      	cbnz	r3, 8005a16 <_fflush_r+0x1a>
 8005a12:	f7ff f99b 	bl	8004d4c <__sinit>
 8005a16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d0f3      	beq.n	8005a06 <_fflush_r+0xa>
 8005a1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005a20:	07d0      	lsls	r0, r2, #31
 8005a22:	d404      	bmi.n	8005a2e <_fflush_r+0x32>
 8005a24:	0599      	lsls	r1, r3, #22
 8005a26:	d402      	bmi.n	8005a2e <_fflush_r+0x32>
 8005a28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a2a:	f7ff fb98 	bl	800515e <__retarget_lock_acquire_recursive>
 8005a2e:	4628      	mov	r0, r5
 8005a30:	4621      	mov	r1, r4
 8005a32:	f7ff ff5f 	bl	80058f4 <__sflush_r>
 8005a36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a38:	07da      	lsls	r2, r3, #31
 8005a3a:	4605      	mov	r5, r0
 8005a3c:	d4e4      	bmi.n	8005a08 <_fflush_r+0xc>
 8005a3e:	89a3      	ldrh	r3, [r4, #12]
 8005a40:	059b      	lsls	r3, r3, #22
 8005a42:	d4e1      	bmi.n	8005a08 <_fflush_r+0xc>
 8005a44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a46:	f7ff fb8b 	bl	8005160 <__retarget_lock_release_recursive>
 8005a4a:	e7dd      	b.n	8005a08 <_fflush_r+0xc>

08005a4c <__swhatbuf_r>:
 8005a4c:	b570      	push	{r4, r5, r6, lr}
 8005a4e:	460c      	mov	r4, r1
 8005a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a54:	2900      	cmp	r1, #0
 8005a56:	b096      	sub	sp, #88	@ 0x58
 8005a58:	4615      	mov	r5, r2
 8005a5a:	461e      	mov	r6, r3
 8005a5c:	da0d      	bge.n	8005a7a <__swhatbuf_r+0x2e>
 8005a5e:	89a3      	ldrh	r3, [r4, #12]
 8005a60:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005a64:	f04f 0100 	mov.w	r1, #0
 8005a68:	bf14      	ite	ne
 8005a6a:	2340      	movne	r3, #64	@ 0x40
 8005a6c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005a70:	2000      	movs	r0, #0
 8005a72:	6031      	str	r1, [r6, #0]
 8005a74:	602b      	str	r3, [r5, #0]
 8005a76:	b016      	add	sp, #88	@ 0x58
 8005a78:	bd70      	pop	{r4, r5, r6, pc}
 8005a7a:	466a      	mov	r2, sp
 8005a7c:	f000 f848 	bl	8005b10 <_fstat_r>
 8005a80:	2800      	cmp	r0, #0
 8005a82:	dbec      	blt.n	8005a5e <__swhatbuf_r+0x12>
 8005a84:	9901      	ldr	r1, [sp, #4]
 8005a86:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005a8a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005a8e:	4259      	negs	r1, r3
 8005a90:	4159      	adcs	r1, r3
 8005a92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a96:	e7eb      	b.n	8005a70 <__swhatbuf_r+0x24>

08005a98 <__smakebuf_r>:
 8005a98:	898b      	ldrh	r3, [r1, #12]
 8005a9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a9c:	079d      	lsls	r5, r3, #30
 8005a9e:	4606      	mov	r6, r0
 8005aa0:	460c      	mov	r4, r1
 8005aa2:	d507      	bpl.n	8005ab4 <__smakebuf_r+0x1c>
 8005aa4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005aa8:	6023      	str	r3, [r4, #0]
 8005aaa:	6123      	str	r3, [r4, #16]
 8005aac:	2301      	movs	r3, #1
 8005aae:	6163      	str	r3, [r4, #20]
 8005ab0:	b003      	add	sp, #12
 8005ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ab4:	ab01      	add	r3, sp, #4
 8005ab6:	466a      	mov	r2, sp
 8005ab8:	f7ff ffc8 	bl	8005a4c <__swhatbuf_r>
 8005abc:	9f00      	ldr	r7, [sp, #0]
 8005abe:	4605      	mov	r5, r0
 8005ac0:	4639      	mov	r1, r7
 8005ac2:	4630      	mov	r0, r6
 8005ac4:	f7ff fbba 	bl	800523c <_malloc_r>
 8005ac8:	b948      	cbnz	r0, 8005ade <__smakebuf_r+0x46>
 8005aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ace:	059a      	lsls	r2, r3, #22
 8005ad0:	d4ee      	bmi.n	8005ab0 <__smakebuf_r+0x18>
 8005ad2:	f023 0303 	bic.w	r3, r3, #3
 8005ad6:	f043 0302 	orr.w	r3, r3, #2
 8005ada:	81a3      	strh	r3, [r4, #12]
 8005adc:	e7e2      	b.n	8005aa4 <__smakebuf_r+0xc>
 8005ade:	89a3      	ldrh	r3, [r4, #12]
 8005ae0:	6020      	str	r0, [r4, #0]
 8005ae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ae6:	81a3      	strh	r3, [r4, #12]
 8005ae8:	9b01      	ldr	r3, [sp, #4]
 8005aea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005aee:	b15b      	cbz	r3, 8005b08 <__smakebuf_r+0x70>
 8005af0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005af4:	4630      	mov	r0, r6
 8005af6:	f000 f81d 	bl	8005b34 <_isatty_r>
 8005afa:	b128      	cbz	r0, 8005b08 <__smakebuf_r+0x70>
 8005afc:	89a3      	ldrh	r3, [r4, #12]
 8005afe:	f023 0303 	bic.w	r3, r3, #3
 8005b02:	f043 0301 	orr.w	r3, r3, #1
 8005b06:	81a3      	strh	r3, [r4, #12]
 8005b08:	89a3      	ldrh	r3, [r4, #12]
 8005b0a:	431d      	orrs	r5, r3
 8005b0c:	81a5      	strh	r5, [r4, #12]
 8005b0e:	e7cf      	b.n	8005ab0 <__smakebuf_r+0x18>

08005b10 <_fstat_r>:
 8005b10:	b538      	push	{r3, r4, r5, lr}
 8005b12:	4d07      	ldr	r5, [pc, #28]	@ (8005b30 <_fstat_r+0x20>)
 8005b14:	2300      	movs	r3, #0
 8005b16:	4604      	mov	r4, r0
 8005b18:	4608      	mov	r0, r1
 8005b1a:	4611      	mov	r1, r2
 8005b1c:	602b      	str	r3, [r5, #0]
 8005b1e:	f7fb fdf2 	bl	8001706 <_fstat>
 8005b22:	1c43      	adds	r3, r0, #1
 8005b24:	d102      	bne.n	8005b2c <_fstat_r+0x1c>
 8005b26:	682b      	ldr	r3, [r5, #0]
 8005b28:	b103      	cbz	r3, 8005b2c <_fstat_r+0x1c>
 8005b2a:	6023      	str	r3, [r4, #0]
 8005b2c:	bd38      	pop	{r3, r4, r5, pc}
 8005b2e:	bf00      	nop
 8005b30:	200002e0 	.word	0x200002e0

08005b34 <_isatty_r>:
 8005b34:	b538      	push	{r3, r4, r5, lr}
 8005b36:	4d06      	ldr	r5, [pc, #24]	@ (8005b50 <_isatty_r+0x1c>)
 8005b38:	2300      	movs	r3, #0
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	4608      	mov	r0, r1
 8005b3e:	602b      	str	r3, [r5, #0]
 8005b40:	f7fb fdf1 	bl	8001726 <_isatty>
 8005b44:	1c43      	adds	r3, r0, #1
 8005b46:	d102      	bne.n	8005b4e <_isatty_r+0x1a>
 8005b48:	682b      	ldr	r3, [r5, #0]
 8005b4a:	b103      	cbz	r3, 8005b4e <_isatty_r+0x1a>
 8005b4c:	6023      	str	r3, [r4, #0]
 8005b4e:	bd38      	pop	{r3, r4, r5, pc}
 8005b50:	200002e0 	.word	0x200002e0

08005b54 <_sbrk_r>:
 8005b54:	b538      	push	{r3, r4, r5, lr}
 8005b56:	4d06      	ldr	r5, [pc, #24]	@ (8005b70 <_sbrk_r+0x1c>)
 8005b58:	2300      	movs	r3, #0
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	4608      	mov	r0, r1
 8005b5e:	602b      	str	r3, [r5, #0]
 8005b60:	f7fb fdfa 	bl	8001758 <_sbrk>
 8005b64:	1c43      	adds	r3, r0, #1
 8005b66:	d102      	bne.n	8005b6e <_sbrk_r+0x1a>
 8005b68:	682b      	ldr	r3, [r5, #0]
 8005b6a:	b103      	cbz	r3, 8005b6e <_sbrk_r+0x1a>
 8005b6c:	6023      	str	r3, [r4, #0]
 8005b6e:	bd38      	pop	{r3, r4, r5, pc}
 8005b70:	200002e0 	.word	0x200002e0

08005b74 <_init>:
 8005b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b76:	bf00      	nop
 8005b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b7a:	bc08      	pop	{r3}
 8005b7c:	469e      	mov	lr, r3
 8005b7e:	4770      	bx	lr

08005b80 <_fini>:
 8005b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b82:	bf00      	nop
 8005b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b86:	bc08      	pop	{r3}
 8005b88:	469e      	mov	lr, r3
 8005b8a:	4770      	bx	lr
