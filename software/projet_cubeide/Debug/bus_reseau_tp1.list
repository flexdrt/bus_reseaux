
bus_reseau_tp1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4d4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  0800a6a8  0800a6a8  0000b6a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acd0  0800acd0  0000c1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800acd0  0800acd0  0000bcd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acd8  0800acd8  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acd8  0800acd8  0000bcd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800acdc  0800acdc  0000bcdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800ace0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  200001d8  0800aeb8  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  0800aeb8  0000c4ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec83  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000240d  00000000  00000000  0001ae8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  0001d298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009de  00000000  00000000  0001df38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022fb5  00000000  00000000  0001e916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010062  00000000  00000000  000418cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfa16  00000000  00000000  0005192d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00121343  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004af0  00000000  00000000  00121388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  00125e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a68c 	.word	0x0800a68c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800a68c 	.word	0x0800a68c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_ldivmod>:
 8000ce8:	b97b      	cbnz	r3, 8000d0a <__aeabi_ldivmod+0x22>
 8000cea:	b972      	cbnz	r2, 8000d0a <__aeabi_ldivmod+0x22>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bfbe      	ittt	lt
 8000cf0:	2000      	movlt	r0, #0
 8000cf2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cf6:	e006      	blt.n	8000d06 <__aeabi_ldivmod+0x1e>
 8000cf8:	bf08      	it	eq
 8000cfa:	2800      	cmpeq	r0, #0
 8000cfc:	bf1c      	itt	ne
 8000cfe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000d02:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d06:	f000 b9eb 	b.w	80010e0 <__aeabi_idiv0>
 8000d0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d12:	2900      	cmp	r1, #0
 8000d14:	db09      	blt.n	8000d2a <__aeabi_ldivmod+0x42>
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db1a      	blt.n	8000d50 <__aeabi_ldivmod+0x68>
 8000d1a:	f000 f883 	bl	8000e24 <__udivmoddi4>
 8000d1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d26:	b004      	add	sp, #16
 8000d28:	4770      	bx	lr
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db1b      	blt.n	8000d6c <__aeabi_ldivmod+0x84>
 8000d34:	f000 f876 	bl	8000e24 <__udivmoddi4>
 8000d38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d40:	b004      	add	sp, #16
 8000d42:	4240      	negs	r0, r0
 8000d44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d48:	4252      	negs	r2, r2
 8000d4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d4e:	4770      	bx	lr
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	f000 f865 	bl	8000e24 <__udivmoddi4>
 8000d5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d62:	b004      	add	sp, #16
 8000d64:	4240      	negs	r0, r0
 8000d66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d6a:	4770      	bx	lr
 8000d6c:	4252      	negs	r2, r2
 8000d6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d72:	f000 f857 	bl	8000e24 <__udivmoddi4>
 8000d76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d7e:	b004      	add	sp, #16
 8000d80:	4252      	negs	r2, r2
 8000d82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_uldivmod>:
 8000d88:	b953      	cbnz	r3, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8a:	b94a      	cbnz	r2, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	bf08      	it	eq
 8000d90:	2800      	cmpeq	r0, #0
 8000d92:	bf1c      	itt	ne
 8000d94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000d98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d9c:	f000 b9a0 	b.w	80010e0 <__aeabi_idiv0>
 8000da0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000da8:	f000 f83c 	bl	8000e24 <__udivmoddi4>
 8000dac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db4:	b004      	add	sp, #16
 8000db6:	4770      	bx	lr

08000db8 <__aeabi_d2lz>:
 8000db8:	b538      	push	{r3, r4, r5, lr}
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	460d      	mov	r5, r1
 8000dc2:	f7ff febb 	bl	8000b3c <__aeabi_dcmplt>
 8000dc6:	b928      	cbnz	r0, 8000dd4 <__aeabi_d2lz+0x1c>
 8000dc8:	4620      	mov	r0, r4
 8000dca:	4629      	mov	r1, r5
 8000dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dd0:	f000 b80a 	b.w	8000de8 <__aeabi_d2ulz>
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000dda:	f000 f805 	bl	8000de8 <__aeabi_d2ulz>
 8000dde:	4240      	negs	r0, r0
 8000de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de4:	bd38      	pop	{r3, r4, r5, pc}
 8000de6:	bf00      	nop

08000de8 <__aeabi_d2ulz>:
 8000de8:	b5d0      	push	{r4, r6, r7, lr}
 8000dea:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <__aeabi_d2ulz+0x34>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	4606      	mov	r6, r0
 8000df0:	460f      	mov	r7, r1
 8000df2:	f7ff fc31 	bl	8000658 <__aeabi_dmul>
 8000df6:	f7ff ff07 	bl	8000c08 <__aeabi_d2uiz>
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	f7ff fbb2 	bl	8000564 <__aeabi_ui2d>
 8000e00:	4b07      	ldr	r3, [pc, #28]	@ (8000e20 <__aeabi_d2ulz+0x38>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	f7ff fc28 	bl	8000658 <__aeabi_dmul>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	4639      	mov	r1, r7
 8000e10:	f7ff fa6a 	bl	80002e8 <__aeabi_dsub>
 8000e14:	f7ff fef8 	bl	8000c08 <__aeabi_d2uiz>
 8000e18:	4621      	mov	r1, r4
 8000e1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e1c:	3df00000 	.word	0x3df00000
 8000e20:	41f00000 	.word	0x41f00000

08000e24 <__udivmoddi4>:
 8000e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e28:	9d08      	ldr	r5, [sp, #32]
 8000e2a:	460c      	mov	r4, r1
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d14e      	bne.n	8000ece <__udivmoddi4+0xaa>
 8000e30:	4694      	mov	ip, r2
 8000e32:	458c      	cmp	ip, r1
 8000e34:	4686      	mov	lr, r0
 8000e36:	fab2 f282 	clz	r2, r2
 8000e3a:	d962      	bls.n	8000f02 <__udivmoddi4+0xde>
 8000e3c:	b14a      	cbz	r2, 8000e52 <__udivmoddi4+0x2e>
 8000e3e:	f1c2 0320 	rsb	r3, r2, #32
 8000e42:	4091      	lsls	r1, r2
 8000e44:	fa20 f303 	lsr.w	r3, r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	4319      	orrs	r1, r3
 8000e4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e56:	fa1f f68c 	uxth.w	r6, ip
 8000e5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e62:	fb07 1114 	mls	r1, r7, r4, r1
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb04 f106 	mul.w	r1, r4, r6
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	d90a      	bls.n	8000e88 <__udivmoddi4+0x64>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000e7a:	f080 8112 	bcs.w	80010a2 <__udivmoddi4+0x27e>
 8000e7e:	4299      	cmp	r1, r3
 8000e80:	f240 810f 	bls.w	80010a2 <__udivmoddi4+0x27e>
 8000e84:	3c02      	subs	r4, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1a59      	subs	r1, r3, r1
 8000e8a:	fa1f f38e 	uxth.w	r3, lr
 8000e8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e92:	fb07 1110 	mls	r1, r7, r0, r1
 8000e96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e9a:	fb00 f606 	mul.w	r6, r0, r6
 8000e9e:	429e      	cmp	r6, r3
 8000ea0:	d90a      	bls.n	8000eb8 <__udivmoddi4+0x94>
 8000ea2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000eaa:	f080 80fc 	bcs.w	80010a6 <__udivmoddi4+0x282>
 8000eae:	429e      	cmp	r6, r3
 8000eb0:	f240 80f9 	bls.w	80010a6 <__udivmoddi4+0x282>
 8000eb4:	4463      	add	r3, ip
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	1b9b      	subs	r3, r3, r6
 8000eba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	b11d      	cbz	r5, 8000eca <__udivmoddi4+0xa6>
 8000ec2:	40d3      	lsrs	r3, r2
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	e9c5 3200 	strd	r3, r2, [r5]
 8000eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d905      	bls.n	8000ede <__udivmoddi4+0xba>
 8000ed2:	b10d      	cbz	r5, 8000ed8 <__udivmoddi4+0xb4>
 8000ed4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4608      	mov	r0, r1
 8000edc:	e7f5      	b.n	8000eca <__udivmoddi4+0xa6>
 8000ede:	fab3 f183 	clz	r1, r3
 8000ee2:	2900      	cmp	r1, #0
 8000ee4:	d146      	bne.n	8000f74 <__udivmoddi4+0x150>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d302      	bcc.n	8000ef0 <__udivmoddi4+0xcc>
 8000eea:	4290      	cmp	r0, r2
 8000eec:	f0c0 80f0 	bcc.w	80010d0 <__udivmoddi4+0x2ac>
 8000ef0:	1a86      	subs	r6, r0, r2
 8000ef2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	2d00      	cmp	r5, #0
 8000efa:	d0e6      	beq.n	8000eca <__udivmoddi4+0xa6>
 8000efc:	e9c5 6300 	strd	r6, r3, [r5]
 8000f00:	e7e3      	b.n	8000eca <__udivmoddi4+0xa6>
 8000f02:	2a00      	cmp	r2, #0
 8000f04:	f040 8090 	bne.w	8001028 <__udivmoddi4+0x204>
 8000f08:	eba1 040c 	sub.w	r4, r1, ip
 8000f0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f10:	fa1f f78c 	uxth.w	r7, ip
 8000f14:	2101      	movs	r1, #1
 8000f16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000f22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f26:	fb07 f006 	mul.w	r0, r7, r6
 8000f2a:	4298      	cmp	r0, r3
 8000f2c:	d908      	bls.n	8000f40 <__udivmoddi4+0x11c>
 8000f2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f32:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000f36:	d202      	bcs.n	8000f3e <__udivmoddi4+0x11a>
 8000f38:	4298      	cmp	r0, r3
 8000f3a:	f200 80cd 	bhi.w	80010d8 <__udivmoddi4+0x2b4>
 8000f3e:	4626      	mov	r6, r4
 8000f40:	1a1c      	subs	r4, r3, r0
 8000f42:	fa1f f38e 	uxth.w	r3, lr
 8000f46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f52:	fb00 f707 	mul.w	r7, r0, r7
 8000f56:	429f      	cmp	r7, r3
 8000f58:	d908      	bls.n	8000f6c <__udivmoddi4+0x148>
 8000f5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f5e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000f62:	d202      	bcs.n	8000f6a <__udivmoddi4+0x146>
 8000f64:	429f      	cmp	r7, r3
 8000f66:	f200 80b0 	bhi.w	80010ca <__udivmoddi4+0x2a6>
 8000f6a:	4620      	mov	r0, r4
 8000f6c:	1bdb      	subs	r3, r3, r7
 8000f6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f72:	e7a5      	b.n	8000ec0 <__udivmoddi4+0x9c>
 8000f74:	f1c1 0620 	rsb	r6, r1, #32
 8000f78:	408b      	lsls	r3, r1
 8000f7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f7e:	431f      	orrs	r7, r3
 8000f80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f84:	fa04 f301 	lsl.w	r3, r4, r1
 8000f88:	ea43 030c 	orr.w	r3, r3, ip
 8000f8c:	40f4      	lsrs	r4, r6
 8000f8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f92:	0c38      	lsrs	r0, r7, #16
 8000f94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f98:	fbb4 fef0 	udiv	lr, r4, r0
 8000f9c:	fa1f fc87 	uxth.w	ip, r7
 8000fa0:	fb00 441e 	mls	r4, r0, lr, r4
 8000fa4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fa8:	fb0e f90c 	mul.w	r9, lr, ip
 8000fac:	45a1      	cmp	r9, r4
 8000fae:	fa02 f201 	lsl.w	r2, r2, r1
 8000fb2:	d90a      	bls.n	8000fca <__udivmoddi4+0x1a6>
 8000fb4:	193c      	adds	r4, r7, r4
 8000fb6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000fba:	f080 8084 	bcs.w	80010c6 <__udivmoddi4+0x2a2>
 8000fbe:	45a1      	cmp	r9, r4
 8000fc0:	f240 8081 	bls.w	80010c6 <__udivmoddi4+0x2a2>
 8000fc4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fc8:	443c      	add	r4, r7
 8000fca:	eba4 0409 	sub.w	r4, r4, r9
 8000fce:	fa1f f983 	uxth.w	r9, r3
 8000fd2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fd6:	fb00 4413 	mls	r4, r0, r3, r4
 8000fda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fde:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fe2:	45a4      	cmp	ip, r4
 8000fe4:	d907      	bls.n	8000ff6 <__udivmoddi4+0x1d2>
 8000fe6:	193c      	adds	r4, r7, r4
 8000fe8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000fec:	d267      	bcs.n	80010be <__udivmoddi4+0x29a>
 8000fee:	45a4      	cmp	ip, r4
 8000ff0:	d965      	bls.n	80010be <__udivmoddi4+0x29a>
 8000ff2:	3b02      	subs	r3, #2
 8000ff4:	443c      	add	r4, r7
 8000ff6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ffa:	fba0 9302 	umull	r9, r3, r0, r2
 8000ffe:	eba4 040c 	sub.w	r4, r4, ip
 8001002:	429c      	cmp	r4, r3
 8001004:	46ce      	mov	lr, r9
 8001006:	469c      	mov	ip, r3
 8001008:	d351      	bcc.n	80010ae <__udivmoddi4+0x28a>
 800100a:	d04e      	beq.n	80010aa <__udivmoddi4+0x286>
 800100c:	b155      	cbz	r5, 8001024 <__udivmoddi4+0x200>
 800100e:	ebb8 030e 	subs.w	r3, r8, lr
 8001012:	eb64 040c 	sbc.w	r4, r4, ip
 8001016:	fa04 f606 	lsl.w	r6, r4, r6
 800101a:	40cb      	lsrs	r3, r1
 800101c:	431e      	orrs	r6, r3
 800101e:	40cc      	lsrs	r4, r1
 8001020:	e9c5 6400 	strd	r6, r4, [r5]
 8001024:	2100      	movs	r1, #0
 8001026:	e750      	b.n	8000eca <__udivmoddi4+0xa6>
 8001028:	f1c2 0320 	rsb	r3, r2, #32
 800102c:	fa20 f103 	lsr.w	r1, r0, r3
 8001030:	fa0c fc02 	lsl.w	ip, ip, r2
 8001034:	fa24 f303 	lsr.w	r3, r4, r3
 8001038:	4094      	lsls	r4, r2
 800103a:	430c      	orrs	r4, r1
 800103c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001040:	fa00 fe02 	lsl.w	lr, r0, r2
 8001044:	fa1f f78c 	uxth.w	r7, ip
 8001048:	fbb3 f0f8 	udiv	r0, r3, r8
 800104c:	fb08 3110 	mls	r1, r8, r0, r3
 8001050:	0c23      	lsrs	r3, r4, #16
 8001052:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001056:	fb00 f107 	mul.w	r1, r0, r7
 800105a:	4299      	cmp	r1, r3
 800105c:	d908      	bls.n	8001070 <__udivmoddi4+0x24c>
 800105e:	eb1c 0303 	adds.w	r3, ip, r3
 8001062:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8001066:	d22c      	bcs.n	80010c2 <__udivmoddi4+0x29e>
 8001068:	4299      	cmp	r1, r3
 800106a:	d92a      	bls.n	80010c2 <__udivmoddi4+0x29e>
 800106c:	3802      	subs	r0, #2
 800106e:	4463      	add	r3, ip
 8001070:	1a5b      	subs	r3, r3, r1
 8001072:	b2a4      	uxth	r4, r4
 8001074:	fbb3 f1f8 	udiv	r1, r3, r8
 8001078:	fb08 3311 	mls	r3, r8, r1, r3
 800107c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001080:	fb01 f307 	mul.w	r3, r1, r7
 8001084:	42a3      	cmp	r3, r4
 8001086:	d908      	bls.n	800109a <__udivmoddi4+0x276>
 8001088:	eb1c 0404 	adds.w	r4, ip, r4
 800108c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8001090:	d213      	bcs.n	80010ba <__udivmoddi4+0x296>
 8001092:	42a3      	cmp	r3, r4
 8001094:	d911      	bls.n	80010ba <__udivmoddi4+0x296>
 8001096:	3902      	subs	r1, #2
 8001098:	4464      	add	r4, ip
 800109a:	1ae4      	subs	r4, r4, r3
 800109c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010a0:	e739      	b.n	8000f16 <__udivmoddi4+0xf2>
 80010a2:	4604      	mov	r4, r0
 80010a4:	e6f0      	b.n	8000e88 <__udivmoddi4+0x64>
 80010a6:	4608      	mov	r0, r1
 80010a8:	e706      	b.n	8000eb8 <__udivmoddi4+0x94>
 80010aa:	45c8      	cmp	r8, r9
 80010ac:	d2ae      	bcs.n	800100c <__udivmoddi4+0x1e8>
 80010ae:	ebb9 0e02 	subs.w	lr, r9, r2
 80010b2:	eb63 0c07 	sbc.w	ip, r3, r7
 80010b6:	3801      	subs	r0, #1
 80010b8:	e7a8      	b.n	800100c <__udivmoddi4+0x1e8>
 80010ba:	4631      	mov	r1, r6
 80010bc:	e7ed      	b.n	800109a <__udivmoddi4+0x276>
 80010be:	4603      	mov	r3, r0
 80010c0:	e799      	b.n	8000ff6 <__udivmoddi4+0x1d2>
 80010c2:	4630      	mov	r0, r6
 80010c4:	e7d4      	b.n	8001070 <__udivmoddi4+0x24c>
 80010c6:	46d6      	mov	lr, sl
 80010c8:	e77f      	b.n	8000fca <__udivmoddi4+0x1a6>
 80010ca:	4463      	add	r3, ip
 80010cc:	3802      	subs	r0, #2
 80010ce:	e74d      	b.n	8000f6c <__udivmoddi4+0x148>
 80010d0:	4606      	mov	r6, r0
 80010d2:	4623      	mov	r3, r4
 80010d4:	4608      	mov	r0, r1
 80010d6:	e70f      	b.n	8000ef8 <__udivmoddi4+0xd4>
 80010d8:	3e02      	subs	r6, #2
 80010da:	4463      	add	r3, ip
 80010dc:	e730      	b.n	8000f40 <__udivmoddi4+0x11c>
 80010de:	bf00      	nop

080010e0 <__aeabi_idiv0>:
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop

080010e4 <BMP280_checkID>:
//HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 1, -1);

//HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, 1, -1);
//printf("Idreg: 0x%x\r\n", buf[0]); 

int BMP280_checkID(void) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af02      	add	r7, sp, #8


	//FOnctionnel au 23 oct 18h59 <<<<<<< aussi 9 nov 19h34 organisé

	uint8_t buf[10];
	buf[0]=BMP280_ID_REG;
 80010ea:	23d0      	movs	r3, #208	@ 0xd0
 80010ec:	713b      	strb	r3, [r7, #4]

	retour = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 1, -1);
 80010ee:	23ee      	movs	r3, #238	@ 0xee
 80010f0:	4619      	mov	r1, r3
 80010f2:	1d3a      	adds	r2, r7, #4
 80010f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	2301      	movs	r3, #1
 80010fc:	4815      	ldr	r0, [pc, #84]	@ (8001154 <BMP280_checkID+0x70>)
 80010fe:	f002 f9f7 	bl	80034f0 <HAL_I2C_Master_Transmit>
 8001102:	4603      	mov	r3, r0
 8001104:	461a      	mov	r2, r3
 8001106:	4b14      	ldr	r3, [pc, #80]	@ (8001158 <BMP280_checkID+0x74>)
 8001108:	701a      	strb	r2, [r3, #0]

	//printf("checkID : transmission in progress\r\n");

	if(retour != HAL_OK){
 800110a:	4b13      	ldr	r3, [pc, #76]	@ (8001158 <BMP280_checkID+0x74>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d004      	beq.n	800111c <BMP280_checkID+0x38>

		printf(" \n checkID : problem during transmission \r\n");
 8001112:	4812      	ldr	r0, [pc, #72]	@ (800115c <BMP280_checkID+0x78>)
 8001114:	f005 fe76 	bl	8006e04 <puts>

		return 1;
 8001118:	2301      	movs	r3, #1
 800111a:	e016      	b.n	800114a <BMP280_checkID+0x66>
	else{
		//%%printf("no problem during transmission ... transmission complete -> reception in progress\r\n");
	}


	retour = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, 1, -1);
 800111c:	23ee      	movs	r3, #238	@ 0xee
 800111e:	4619      	mov	r1, r3
 8001120:	1d3a      	adds	r2, r7, #4
 8001122:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	2301      	movs	r3, #1
 800112a:	480a      	ldr	r0, [pc, #40]	@ (8001154 <BMP280_checkID+0x70>)
 800112c:	f002 fade 	bl	80036ec <HAL_I2C_Master_Receive>
 8001130:	4603      	mov	r3, r0
 8001132:	461a      	mov	r2, r3
 8001134:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <BMP280_checkID+0x74>)
 8001136:	701a      	strb	r2, [r3, #0]
	if(retour != HAL_OK){
 8001138:	4b07      	ldr	r3, [pc, #28]	@ (8001158 <BMP280_checkID+0x74>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d004      	beq.n	800114a <BMP280_checkID+0x66>

		printf(" \n checkID : problem during reception I2C\r\n");
 8001140:	4807      	ldr	r0, [pc, #28]	@ (8001160 <BMP280_checkID+0x7c>)
 8001142:	f005 fe5f 	bl	8006e04 <puts>

		return 1;
 8001146:	2301      	movs	r3, #1
 8001148:	e7ff      	b.n	800114a <BMP280_checkID+0x66>
	else{

		//^printf("\n reception complete ...  : Register Id content : 0x%x\r\n", buf[0]);
	}

}
 800114a:	4618      	mov	r0, r3
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000274 	.word	0x20000274
 8001158:	200001f4 	.word	0x200001f4
 800115c:	0800a6a8 	.word	0x0800a6a8
 8001160:	0800a6d4 	.word	0x0800a6d4

08001164 <BMP280_config>:




void BMP280_config(void) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af02      	add	r7, sp, #8
	uint8_t part1 = 0b010 << 5;  // Décalage de 5 bits
 800116a:	2340      	movs	r3, #64	@ 0x40
 800116c:	71fb      	strb	r3, [r7, #7]
	uint8_t part2 = 0b101 << 2;  // Décalage de 2 bits
 800116e:	2314      	movs	r3, #20
 8001170:	71bb      	strb	r3, [r7, #6]
	uint8_t part3 = 0b11;        // Pas de décalage
 8001172:	2303      	movs	r3, #3
 8001174:	717b      	strb	r3, [r7, #5]
	printf("Part3 (0b11)       = %u\r\n", part3);   // Affiche 3



	 */
	uint8_t sumPart=part1+part2+part3;
 8001176:	79fa      	ldrb	r2, [r7, #7]
 8001178:	79bb      	ldrb	r3, [r7, #6]
 800117a:	4413      	add	r3, r2
 800117c:	b2da      	uxtb	r2, r3
 800117e:	797b      	ldrb	r3, [r7, #5]
 8001180:	4413      	add	r3, r2
 8001182:	713b      	strb	r3, [r7, #4]
	//^^printf(" sum of parts = Part1+Part2+Part3 = %u \r\n",sumPart);   // Affiche 3
	uint8_t config = part1 | part2 | part3;
 8001184:	79fa      	ldrb	r2, [r7, #7]
 8001186:	79bb      	ldrb	r3, [r7, #6]
 8001188:	4313      	orrs	r3, r2
 800118a:	b2da      	uxtb	r2, r3
 800118c:	797b      	ldrb	r3, [r7, #5]
 800118e:	4313      	orrs	r3, r2
 8001190:	70fb      	strb	r3, [r7, #3]


	uint8_t buf[2];


	buf[0] = ctrl_meas;
 8001192:	4b19      	ldr	r3, [pc, #100]	@ (80011f8 <BMP280_config+0x94>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	703b      	strb	r3, [r7, #0]

	buf[1] = config;  //mot binaire a ecrire pour conf correctement 
 8001198:	78fb      	ldrb	r3, [r7, #3]
 800119a:	707b      	strb	r3, [r7, #1]

	retour = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 2,HAL_MAX_DELAY);
 800119c:	23ee      	movs	r3, #238	@ 0xee
 800119e:	4619      	mov	r1, r3
 80011a0:	463a      	mov	r2, r7
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2302      	movs	r3, #2
 80011aa:	4814      	ldr	r0, [pc, #80]	@ (80011fc <BMP280_config+0x98>)
 80011ac:	f002 f9a0 	bl	80034f0 <HAL_I2C_Master_Transmit>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461a      	mov	r2, r3
 80011b4:	4b12      	ldr	r3, [pc, #72]	@ (8001200 <BMP280_config+0x9c>)
 80011b6:	701a      	strb	r2, [r3, #0]

	//%%printf("configuration : transmission in progress\r\n");

	if (retour != HAL_OK) {
 80011b8:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <BMP280_config+0x9c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d002      	beq.n	80011c6 <BMP280_config+0x62>

		printf("\n config: problem during transmission \r\n\r\n");
 80011c0:	4810      	ldr	r0, [pc, #64]	@ (8001204 <BMP280_config+0xa0>)
 80011c2:	f005 fe1f 	bl	8006e04 <puts>

	else{
		//%%printf("config : no problem during transmission ... transmission complete -> reception in progress\r\n");
	}

	retour = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 80011c6:	23ee      	movs	r3, #238	@ 0xee
 80011c8:	4619      	mov	r1, r3
 80011ca:	463a      	mov	r2, r7
 80011cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	2301      	movs	r3, #1
 80011d4:	4809      	ldr	r0, [pc, #36]	@ (80011fc <BMP280_config+0x98>)
 80011d6:	f002 fa89 	bl	80036ec <HAL_I2C_Master_Receive>
 80011da:	4603      	mov	r3, r0
 80011dc:	461a      	mov	r2, r3
 80011de:	4b08      	ldr	r3, [pc, #32]	@ (8001200 <BMP280_config+0x9c>)
 80011e0:	701a      	strb	r2, [r3, #0]

	if (retour != HAL_OK) {
 80011e2:	4b07      	ldr	r3, [pc, #28]	@ (8001200 <BMP280_config+0x9c>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d002      	beq.n	80011f0 <BMP280_config+0x8c>

		printf("\n config : problem during reception I2C\r\n");
 80011ea:	4807      	ldr	r0, [pc, #28]	@ (8001208 <BMP280_config+0xa4>)
 80011ec:	f005 fe0a 	bl	8006e04 <puts>

	}



}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000000 	.word	0x20000000
 80011fc:	20000274 	.word	0x20000274
 8001200:	200001f4 	.word	0x200001f4
 8001204:	0800a700 	.word	0x0800a700
 8001208:	0800a72c 	.word	0x0800a72c

0800120c <BMP280_calib>:

void BMP280_calib(void) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	@ 0x28
 8001210:	af02      	add	r7, sp, #8
	//on demande la lecture avec le transmit

	//BMP280_TRIM_REG_MSB  est déclarée dans BMP280_vincent.h

	// l'adresse de la variable BMP280_TRIM_REG_MSB est passée a la fonction qui attends une adresse en paramètre (celle sur laquelle pointerait le pointeur pData)
	retour = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &BMP280_TRIM_REG_MSB,1, HAL_MAX_DELAY);
 8001212:	23ee      	movs	r3, #238	@ 0xee
 8001214:	4619      	mov	r1, r3
 8001216:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	2301      	movs	r3, #1
 800121e:	4a4b      	ldr	r2, [pc, #300]	@ (800134c <BMP280_calib+0x140>)
 8001220:	484b      	ldr	r0, [pc, #300]	@ (8001350 <BMP280_calib+0x144>)
 8001222:	f002 f965 	bl	80034f0 <HAL_I2C_Master_Transmit>
 8001226:	4603      	mov	r3, r0
 8001228:	461a      	mov	r2, r3
 800122a:	4b4a      	ldr	r3, [pc, #296]	@ (8001354 <BMP280_calib+0x148>)
 800122c:	701a      	strb	r2, [r3, #0]

	if (retour != HAL_OK) {
 800122e:	4b49      	ldr	r3, [pc, #292]	@ (8001354 <BMP280_calib+0x148>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	f040 8085 	bne.w	8001342 <BMP280_calib+0x136>
		//printf("Probleme calib I2C\r\n");
		return;
	}
	//on lit la réponse qu'on stocke dans le buffer buf_data
	retour = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf_data, 24,HAL_MAX_DELAY);
 8001238:	23ee      	movs	r3, #238	@ 0xee
 800123a:	4619      	mov	r1, r3
 800123c:	1d3a      	adds	r2, r7, #4
 800123e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	2318      	movs	r3, #24
 8001246:	4842      	ldr	r0, [pc, #264]	@ (8001350 <BMP280_calib+0x144>)
 8001248:	f002 fa50 	bl	80036ec <HAL_I2C_Master_Receive>
 800124c:	4603      	mov	r3, r0
 800124e:	461a      	mov	r2, r3
 8001250:	4b40      	ldr	r3, [pc, #256]	@ (8001354 <BMP280_calib+0x148>)
 8001252:	701a      	strb	r2, [r3, #0]

	}
	else {	//on affiche les données d'étallonage reçues

	}
	dig_T1 = buf_data[0] | (buf_data[1] << 8);
 8001254:	793b      	ldrb	r3, [r7, #4]
 8001256:	b21a      	sxth	r2, r3
 8001258:	797b      	ldrb	r3, [r7, #5]
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	b21b      	sxth	r3, r3
 800125e:	4313      	orrs	r3, r2
 8001260:	b21b      	sxth	r3, r3
 8001262:	b29a      	uxth	r2, r3
 8001264:	4b3c      	ldr	r3, [pc, #240]	@ (8001358 <BMP280_calib+0x14c>)
 8001266:	801a      	strh	r2, [r3, #0]
	dig_T2 = buf_data[2] | (buf_data[3] << 8);
 8001268:	79bb      	ldrb	r3, [r7, #6]
 800126a:	b21a      	sxth	r2, r3
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	021b      	lsls	r3, r3, #8
 8001270:	b21b      	sxth	r3, r3
 8001272:	4313      	orrs	r3, r2
 8001274:	b21a      	sxth	r2, r3
 8001276:	4b39      	ldr	r3, [pc, #228]	@ (800135c <BMP280_calib+0x150>)
 8001278:	801a      	strh	r2, [r3, #0]
	dig_T3 = buf_data[4] | (buf_data[5] << 8);
 800127a:	7a3b      	ldrb	r3, [r7, #8]
 800127c:	b21a      	sxth	r2, r3
 800127e:	7a7b      	ldrb	r3, [r7, #9]
 8001280:	021b      	lsls	r3, r3, #8
 8001282:	b21b      	sxth	r3, r3
 8001284:	4313      	orrs	r3, r2
 8001286:	b21a      	sxth	r2, r3
 8001288:	4b35      	ldr	r3, [pc, #212]	@ (8001360 <BMP280_calib+0x154>)
 800128a:	801a      	strh	r2, [r3, #0]

	dig_P1 = buf_data[6] | (buf_data[7] << 8);
 800128c:	7abb      	ldrb	r3, [r7, #10]
 800128e:	b21a      	sxth	r2, r3
 8001290:	7afb      	ldrb	r3, [r7, #11]
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	b21b      	sxth	r3, r3
 8001296:	4313      	orrs	r3, r2
 8001298:	b21a      	sxth	r2, r3
 800129a:	4b32      	ldr	r3, [pc, #200]	@ (8001364 <BMP280_calib+0x158>)
 800129c:	801a      	strh	r2, [r3, #0]
	dig_P2 = buf_data[8] | (buf_data[9] << 8);
 800129e:	7b3b      	ldrb	r3, [r7, #12]
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	7b7b      	ldrb	r3, [r7, #13]
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	4313      	orrs	r3, r2
 80012aa:	b21a      	sxth	r2, r3
 80012ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001368 <BMP280_calib+0x15c>)
 80012ae:	801a      	strh	r2, [r3, #0]
	dig_P3 = buf_data[10] | (buf_data[11] << 8);
 80012b0:	7bbb      	ldrb	r3, [r7, #14]
 80012b2:	b21a      	sxth	r2, r3
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	b21b      	sxth	r3, r3
 80012ba:	4313      	orrs	r3, r2
 80012bc:	b21a      	sxth	r2, r3
 80012be:	4b2b      	ldr	r3, [pc, #172]	@ (800136c <BMP280_calib+0x160>)
 80012c0:	801a      	strh	r2, [r3, #0]
	dig_P4 = buf_data[12] | (buf_data[13] << 8);
 80012c2:	7c3b      	ldrb	r3, [r7, #16]
 80012c4:	b21a      	sxth	r2, r3
 80012c6:	7c7b      	ldrb	r3, [r7, #17]
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	b21b      	sxth	r3, r3
 80012cc:	4313      	orrs	r3, r2
 80012ce:	b21a      	sxth	r2, r3
 80012d0:	4b27      	ldr	r3, [pc, #156]	@ (8001370 <BMP280_calib+0x164>)
 80012d2:	801a      	strh	r2, [r3, #0]
	dig_P5 = buf_data[14] | (buf_data[15] << 8);
 80012d4:	7cbb      	ldrb	r3, [r7, #18]
 80012d6:	b21a      	sxth	r2, r3
 80012d8:	7cfb      	ldrb	r3, [r7, #19]
 80012da:	021b      	lsls	r3, r3, #8
 80012dc:	b21b      	sxth	r3, r3
 80012de:	4313      	orrs	r3, r2
 80012e0:	b21a      	sxth	r2, r3
 80012e2:	4b24      	ldr	r3, [pc, #144]	@ (8001374 <BMP280_calib+0x168>)
 80012e4:	801a      	strh	r2, [r3, #0]
	dig_P6 = buf_data[16] | (buf_data[17] << 8);
 80012e6:	7d3b      	ldrb	r3, [r7, #20]
 80012e8:	b21a      	sxth	r2, r3
 80012ea:	7d7b      	ldrb	r3, [r7, #21]
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	4313      	orrs	r3, r2
 80012f2:	b21a      	sxth	r2, r3
 80012f4:	4b20      	ldr	r3, [pc, #128]	@ (8001378 <BMP280_calib+0x16c>)
 80012f6:	801a      	strh	r2, [r3, #0]
	dig_P7 = buf_data[18] | (buf_data[19] << 8);
 80012f8:	7dbb      	ldrb	r3, [r7, #22]
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	7dfb      	ldrb	r3, [r7, #23]
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	b21b      	sxth	r3, r3
 8001302:	4313      	orrs	r3, r2
 8001304:	b21a      	sxth	r2, r3
 8001306:	4b1d      	ldr	r3, [pc, #116]	@ (800137c <BMP280_calib+0x170>)
 8001308:	801a      	strh	r2, [r3, #0]
	dig_P8 = buf_data[20] | (buf_data[21] << 8);
 800130a:	7e3b      	ldrb	r3, [r7, #24]
 800130c:	b21a      	sxth	r2, r3
 800130e:	7e7b      	ldrb	r3, [r7, #25]
 8001310:	021b      	lsls	r3, r3, #8
 8001312:	b21b      	sxth	r3, r3
 8001314:	4313      	orrs	r3, r2
 8001316:	b21a      	sxth	r2, r3
 8001318:	4b19      	ldr	r3, [pc, #100]	@ (8001380 <BMP280_calib+0x174>)
 800131a:	801a      	strh	r2, [r3, #0]
	dig_P9 = buf_data[22] | (buf_data[23] << 8);
 800131c:	7ebb      	ldrb	r3, [r7, #26]
 800131e:	b21a      	sxth	r2, r3
 8001320:	7efb      	ldrb	r3, [r7, #27]
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	b21b      	sxth	r3, r3
 8001326:	4313      	orrs	r3, r2
 8001328:	b21a      	sxth	r2, r3
 800132a:	4b16      	ldr	r3, [pc, #88]	@ (8001384 <BMP280_calib+0x178>)
 800132c:	801a      	strh	r2, [r3, #0]



	for (int i = 0; i < 24; i++) {
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
 8001332:	e002      	b.n	800133a <BMP280_calib+0x12e>
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	3301      	adds	r3, #1
 8001338:	61fb      	str	r3, [r7, #28]
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	2b17      	cmp	r3, #23
 800133e:	ddf9      	ble.n	8001334 <BMP280_calib+0x128>
 8001340:	e000      	b.n	8001344 <BMP280_calib+0x138>
		return;
 8001342:	bf00      	nop
		//printf("dans boucle for //registre d'etallonage calib= 0x%x soit %d \r\n ", buf_data[i],buf_data[i]);


	}

}
 8001344:	3720      	adds	r7, #32
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	0800a886 	.word	0x0800a886
 8001350:	20000274 	.word	0x20000274
 8001354:	200001f4 	.word	0x200001f4
 8001358:	20000230 	.word	0x20000230
 800135c:	20000232 	.word	0x20000232
 8001360:	20000234 	.word	0x20000234
 8001364:	20000236 	.word	0x20000236
 8001368:	20000238 	.word	0x20000238
 800136c:	2000023a 	.word	0x2000023a
 8001370:	2000023c 	.word	0x2000023c
 8001374:	2000023e 	.word	0x2000023e
 8001378:	20000240 	.word	0x20000240
 800137c:	20000242 	.word	0x20000242
 8001380:	20000244 	.word	0x20000244
 8001384:	20000246 	.word	0x20000246

08001388 <BMP280_get_temperature>:

BMP280_S32_t BMP280_get_temperature() {
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af02      	add	r7, sp, #8
	//on demande la lecture avec le transmit

	//BMP280_TEMP_REG_MSB   est déclarée dans BMP280_vincent.h

	// l'adresse de la variable BMP280_TEMP_REG_MSB  est passée a la fonction qui attend une adresse en paramètre (celle sur laquelle pointerait le pointeur pData)
	retour = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &BMP280_TEMP_REG_MSB, 1,
 800138e:	23ee      	movs	r3, #238	@ 0xee
 8001390:	4619      	mov	r1, r3
 8001392:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	2301      	movs	r3, #1
 800139a:	4a15      	ldr	r2, [pc, #84]	@ (80013f0 <BMP280_get_temperature+0x68>)
 800139c:	4815      	ldr	r0, [pc, #84]	@ (80013f4 <BMP280_get_temperature+0x6c>)
 800139e:	f002 f8a7 	bl	80034f0 <HAL_I2C_Master_Transmit>
 80013a2:	4603      	mov	r3, r0
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b14      	ldr	r3, [pc, #80]	@ (80013f8 <BMP280_get_temperature+0x70>)
 80013a8:	701a      	strb	r2, [r3, #0]

	if (retour != HAL_OK) {
		//^printf("Probleme I2C\r\n");
	}
	//on lit la réponse qu'on stocke dans le buffer buf_data
	retour = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf_data, 3,HAL_MAX_DELAY);
 80013aa:	23ee      	movs	r3, #238	@ 0xee
 80013ac:	4619      	mov	r1, r3
 80013ae:	463a      	mov	r2, r7
 80013b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	2303      	movs	r3, #3
 80013b8:	480e      	ldr	r0, [pc, #56]	@ (80013f4 <BMP280_get_temperature+0x6c>)
 80013ba:	f002 f997 	bl	80036ec <HAL_I2C_Master_Receive>
 80013be:	4603      	mov	r3, r0
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b0d      	ldr	r3, [pc, #52]	@ (80013f8 <BMP280_get_temperature+0x70>)
 80013c4:	701a      	strb	r2, [r3, #0]

	if (retour != HAL_OK) {
 80013c6:	4b0c      	ldr	r3, [pc, #48]	@ (80013f8 <BMP280_get_temperature+0x70>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <BMP280_get_temperature+0x4a>

		//^printf("problem i2c");

		return 1;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e00a      	b.n	80013e8 <BMP280_get_temperature+0x60>
	}

	adc_T = ((BMP280_S32_t) (buf_data[0]) << 12)| ( (BMP280_S32_t) (buf_data[1]) << 4)| ( (BMP280_S32_t) (buf_data[2]) >> 4);
 80013d2:	783b      	ldrb	r3, [r7, #0]
 80013d4:	031a      	lsls	r2, r3, #12
 80013d6:	787b      	ldrb	r3, [r7, #1]
 80013d8:	011b      	lsls	r3, r3, #4
 80013da:	4313      	orrs	r3, r2
 80013dc:	78ba      	ldrb	r2, [r7, #2]
 80013de:	0912      	lsrs	r2, r2, #4
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	4313      	orrs	r3, r2
 80013e4:	607b      	str	r3, [r7, #4]

	//printf("%05lX", adc_T);

	//^printf("%d \r\n", adc_T);

	return adc_T;
 80013e6:	687b      	ldr	r3, [r7, #4]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	0800a887 	.word	0x0800a887
 80013f4:	20000274 	.word	0x20000274
 80013f8:	200001f4 	.word	0x200001f4

080013fc <BMP280_get_pressure>:

BMP280_S32_t BMP280_get_pressure() {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af02      	add	r7, sp, #8
	//on demande la lecture avec le transmit

	//BMP280_PRES_REG_MSB est déclarée dans BMP280_vincent.h

	// l'adresse de la variable BMP280_PRES_REG_MSB est passée a la fonction qui attend une adresse en paramètre (celle sur laquelle pointerait le pointeur pData)
	retour = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &BMP280_PRES_REG_MSB, 1,HAL_MAX_DELAY);
 8001402:	23ee      	movs	r3, #238	@ 0xee
 8001404:	4619      	mov	r1, r3
 8001406:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	2301      	movs	r3, #1
 800140e:	4a15      	ldr	r2, [pc, #84]	@ (8001464 <BMP280_get_pressure+0x68>)
 8001410:	4815      	ldr	r0, [pc, #84]	@ (8001468 <BMP280_get_pressure+0x6c>)
 8001412:	f002 f86d 	bl	80034f0 <HAL_I2C_Master_Transmit>
 8001416:	4603      	mov	r3, r0
 8001418:	461a      	mov	r2, r3
 800141a:	4b14      	ldr	r3, [pc, #80]	@ (800146c <BMP280_get_pressure+0x70>)
 800141c:	701a      	strb	r2, [r3, #0]

	if (retour != HAL_OK) {
		//printf("problem i2c\r\n");
	}
	//on lit la réponse qu'on stocke dans le buffer buf_data
	retour = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf_data, 3,HAL_MAX_DELAY);
 800141e:	23ee      	movs	r3, #238	@ 0xee
 8001420:	4619      	mov	r1, r3
 8001422:	463a      	mov	r2, r7
 8001424:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	2303      	movs	r3, #3
 800142c:	480e      	ldr	r0, [pc, #56]	@ (8001468 <BMP280_get_pressure+0x6c>)
 800142e:	f002 f95d 	bl	80036ec <HAL_I2C_Master_Receive>
 8001432:	4603      	mov	r3, r0
 8001434:	461a      	mov	r2, r3
 8001436:	4b0d      	ldr	r3, [pc, #52]	@ (800146c <BMP280_get_pressure+0x70>)
 8001438:	701a      	strb	r2, [r3, #0]

	if (retour != HAL_OK) {
 800143a:	4b0c      	ldr	r3, [pc, #48]	@ (800146c <BMP280_get_pressure+0x70>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <BMP280_get_pressure+0x4a>

		//^printf("problem i2c \r\n");

		return 1;
 8001442:	2301      	movs	r3, #1
 8001444:	e009      	b.n	800145a <BMP280_get_pressure+0x5e>
	}

	adc_P = ((BMP280_S32_t) (buf_data[0]) << 12) | ((BMP280_S32_t) (buf_data[1]) << 4) | ((BMP280_S32_t) (buf_data[2]) >> 4);
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	031a      	lsls	r2, r3, #12
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	011b      	lsls	r3, r3, #4
 800144e:	431a      	orrs	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	111b      	asrs	r3, r3, #4
 8001454:	4313      	orrs	r3, r2
 8001456:	60fb      	str	r3, [r7, #12]

	//^printf("%d\r\n", adc_P);



	return adc_P;
 8001458:	68fb      	ldr	r3, [r7, #12]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	0800a888 	.word	0x0800a888
 8001468:	20000274 	.word	0x20000274
 800146c:	200001f4 	.word	0x200001f4

08001470 <bmp280_compensate_T_int32>:

// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// t_fine carries fine temperature as global value
BMP280_S32_t t_fine;
BMP280_S32_t bmp280_compensate_T_int32(BMP280_S32_t adc_T)
{
 8001470:	b480      	push	{r7}
 8001472:	b087      	sub	sp, #28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	BMP280_S32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((BMP280_S32_t)dig_T1<<1))) * ((BMP280_S32_t)dig_T2)) >> 11;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	10da      	asrs	r2, r3, #3
 800147c:	4b19      	ldr	r3, [pc, #100]	@ (80014e4 <bmp280_compensate_T_int32+0x74>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	4a18      	ldr	r2, [pc, #96]	@ (80014e8 <bmp280_compensate_T_int32+0x78>)
 8001486:	f9b2 2000 	ldrsh.w	r2, [r2]
 800148a:	fb02 f303 	mul.w	r3, r2, r3
 800148e:	12db      	asrs	r3, r3, #11
 8001490:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((BMP280_S32_t)dig_T1)) * ((adc_T>>4) - ((BMP280_S32_t)dig_T1))) >> 12) *((BMP280_S32_t)dig_T3)) >> 14;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	111b      	asrs	r3, r3, #4
 8001496:	4a13      	ldr	r2, [pc, #76]	@ (80014e4 <bmp280_compensate_T_int32+0x74>)
 8001498:	8812      	ldrh	r2, [r2, #0]
 800149a:	1a9b      	subs	r3, r3, r2
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	1112      	asrs	r2, r2, #4
 80014a0:	4910      	ldr	r1, [pc, #64]	@ (80014e4 <bmp280_compensate_T_int32+0x74>)
 80014a2:	8809      	ldrh	r1, [r1, #0]
 80014a4:	1a52      	subs	r2, r2, r1
 80014a6:	fb02 f303 	mul.w	r3, r2, r3
 80014aa:	131b      	asrs	r3, r3, #12
 80014ac:	4a0f      	ldr	r2, [pc, #60]	@ (80014ec <bmp280_compensate_T_int32+0x7c>)
 80014ae:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014b2:	fb02 f303 	mul.w	r3, r2, r3
 80014b6:	139b      	asrs	r3, r3, #14
 80014b8:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4413      	add	r3, r2
 80014c0:	4a0b      	ldr	r2, [pc, #44]	@ (80014f0 <bmp280_compensate_T_int32+0x80>)
 80014c2:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80014c4:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <bmp280_compensate_T_int32+0x80>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	3380      	adds	r3, #128	@ 0x80
 80014d0:	121b      	asrs	r3, r3, #8
 80014d2:	60fb      	str	r3, [r7, #12]
	return T;
 80014d4:	68fb      	ldr	r3, [r7, #12]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	371c      	adds	r7, #28
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000230 	.word	0x20000230
 80014e8:	20000232 	.word	0x20000232
 80014ec:	20000234 	.word	0x20000234
 80014f0:	20000248 	.word	0x20000248

080014f4 <bmp280_compensate_P_int64>:
 *
 *
 *
 */

{
 80014f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014f8:	b0ca      	sub	sp, #296	@ 0x128
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	BMP280_S64_t var1, var2, p;
	var1 = ((BMP280_S64_t)t_fine) - 128000;
 8001500:	4baf      	ldr	r3, [pc, #700]	@ (80017c0 <bmp280_compensate_P_int64+0x2cc>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	17da      	asrs	r2, r3, #31
 8001506:	461c      	mov	r4, r3
 8001508:	4615      	mov	r5, r2
 800150a:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800150e:	f145 3bff 	adc.w	fp, r5, #4294967295	@ 0xffffffff
 8001512:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (BMP280_S64_t)dig_P6;
 8001516:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800151a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800151e:	fb03 f102 	mul.w	r1, r3, r2
 8001522:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001526:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800152a:	fb02 f303 	mul.w	r3, r2, r3
 800152e:	18ca      	adds	r2, r1, r3
 8001530:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001534:	fba3 8903 	umull	r8, r9, r3, r3
 8001538:	eb02 0309 	add.w	r3, r2, r9
 800153c:	4699      	mov	r9, r3
 800153e:	4ba1      	ldr	r3, [pc, #644]	@ (80017c4 <bmp280_compensate_P_int64+0x2d0>)
 8001540:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001544:	b21b      	sxth	r3, r3
 8001546:	17da      	asrs	r2, r3, #31
 8001548:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800154c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001550:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001554:	4603      	mov	r3, r0
 8001556:	fb03 f209 	mul.w	r2, r3, r9
 800155a:	460b      	mov	r3, r1
 800155c:	fb08 f303 	mul.w	r3, r8, r3
 8001560:	4413      	add	r3, r2
 8001562:	4602      	mov	r2, r0
 8001564:	fba8 1202 	umull	r1, r2, r8, r2
 8001568:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800156c:	460a      	mov	r2, r1
 800156e:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8001572:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001576:	4413      	add	r3, r2
 8001578:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800157c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8001580:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8001584:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(BMP280_S64_t)dig_P5)<<17);
 8001588:	4b8f      	ldr	r3, [pc, #572]	@ (80017c8 <bmp280_compensate_P_int64+0x2d4>)
 800158a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800158e:	b21b      	sxth	r3, r3
 8001590:	17da      	asrs	r2, r3, #31
 8001592:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001596:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800159a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800159e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80015a2:	462a      	mov	r2, r5
 80015a4:	fb02 f203 	mul.w	r2, r2, r3
 80015a8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80015ac:	4621      	mov	r1, r4
 80015ae:	fb01 f303 	mul.w	r3, r1, r3
 80015b2:	441a      	add	r2, r3
 80015b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015b8:	4621      	mov	r1, r4
 80015ba:	fba3 1301 	umull	r1, r3, r3, r1
 80015be:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80015c2:	460b      	mov	r3, r1
 80015c4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80015c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80015cc:	18d3      	adds	r3, r2, r3
 80015ce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80015d2:	f04f 0000 	mov.w	r0, #0
 80015d6:	f04f 0100 	mov.w	r1, #0
 80015da:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80015de:	462b      	mov	r3, r5
 80015e0:	0459      	lsls	r1, r3, #17
 80015e2:	4623      	mov	r3, r4
 80015e4:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80015e8:	4623      	mov	r3, r4
 80015ea:	0458      	lsls	r0, r3, #17
 80015ec:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80015f0:	1814      	adds	r4, r2, r0
 80015f2:	643c      	str	r4, [r7, #64]	@ 0x40
 80015f4:	414b      	adcs	r3, r1
 80015f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80015f8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80015fc:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((BMP280_S64_t)dig_P4)<<35);
 8001600:	4b72      	ldr	r3, [pc, #456]	@ (80017cc <bmp280_compensate_P_int64+0x2d8>)
 8001602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001606:	b21b      	sxth	r3, r3
 8001608:	17da      	asrs	r2, r3, #31
 800160a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800160e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001612:	f04f 0000 	mov.w	r0, #0
 8001616:	f04f 0100 	mov.w	r1, #0
 800161a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800161e:	00d9      	lsls	r1, r3, #3
 8001620:	2000      	movs	r0, #0
 8001622:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001626:	1814      	adds	r4, r2, r0
 8001628:	63bc      	str	r4, [r7, #56]	@ 0x38
 800162a:	414b      	adcs	r3, r1
 800162c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800162e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001632:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (BMP280_S64_t)dig_P3)>>8) + ((var1 * (BMP280_S64_t)dig_P2)<<12);
 8001636:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800163a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800163e:	fb03 f102 	mul.w	r1, r3, r2
 8001642:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001646:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800164a:	fb02 f303 	mul.w	r3, r2, r3
 800164e:	18ca      	adds	r2, r1, r3
 8001650:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001654:	fba3 1303 	umull	r1, r3, r3, r3
 8001658:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800165c:	460b      	mov	r3, r1
 800165e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001666:	18d3      	adds	r3, r2, r3
 8001668:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800166c:	4b58      	ldr	r3, [pc, #352]	@ (80017d0 <bmp280_compensate_P_int64+0x2dc>)
 800166e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001672:	b21b      	sxth	r3, r3
 8001674:	17da      	asrs	r2, r3, #31
 8001676:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800167a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800167e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001682:	462b      	mov	r3, r5
 8001684:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001688:	4642      	mov	r2, r8
 800168a:	fb02 f203 	mul.w	r2, r2, r3
 800168e:	464b      	mov	r3, r9
 8001690:	4621      	mov	r1, r4
 8001692:	fb01 f303 	mul.w	r3, r1, r3
 8001696:	4413      	add	r3, r2
 8001698:	4622      	mov	r2, r4
 800169a:	4641      	mov	r1, r8
 800169c:	fba2 1201 	umull	r1, r2, r2, r1
 80016a0:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80016a4:	460a      	mov	r2, r1
 80016a6:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80016aa:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80016ae:	4413      	add	r3, r2
 80016b0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80016b4:	f04f 0000 	mov.w	r0, #0
 80016b8:	f04f 0100 	mov.w	r1, #0
 80016bc:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80016c0:	4623      	mov	r3, r4
 80016c2:	0a18      	lsrs	r0, r3, #8
 80016c4:	462b      	mov	r3, r5
 80016c6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80016ca:	462b      	mov	r3, r5
 80016cc:	1219      	asrs	r1, r3, #8
 80016ce:	4b41      	ldr	r3, [pc, #260]	@ (80017d4 <bmp280_compensate_P_int64+0x2e0>)
 80016d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	17da      	asrs	r2, r3, #31
 80016d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80016dc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80016e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80016e4:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 80016e8:	464a      	mov	r2, r9
 80016ea:	fb02 f203 	mul.w	r2, r2, r3
 80016ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80016f2:	4644      	mov	r4, r8
 80016f4:	fb04 f303 	mul.w	r3, r4, r3
 80016f8:	441a      	add	r2, r3
 80016fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80016fe:	4644      	mov	r4, r8
 8001700:	fba3 4304 	umull	r4, r3, r3, r4
 8001704:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001708:	4623      	mov	r3, r4
 800170a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800170e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001712:	18d3      	adds	r3, r2, r3
 8001714:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	f04f 0300 	mov.w	r3, #0
 8001720:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8001724:	464c      	mov	r4, r9
 8001726:	0323      	lsls	r3, r4, #12
 8001728:	4644      	mov	r4, r8
 800172a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800172e:	4644      	mov	r4, r8
 8001730:	0322      	lsls	r2, r4, #12
 8001732:	1884      	adds	r4, r0, r2
 8001734:	633c      	str	r4, [r7, #48]	@ 0x30
 8001736:	eb41 0303 	adc.w	r3, r1, r3
 800173a:	637b      	str	r3, [r7, #52]	@ 0x34
 800173c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001740:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((BMP280_S64_t)1)<<47)+var1))*((BMP280_S64_t)dig_P1)>>33;
 8001744:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001748:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 800174c:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8001750:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001754:	4b20      	ldr	r3, [pc, #128]	@ (80017d8 <bmp280_compensate_P_int64+0x2e4>)
 8001756:	f9b3 3000 	ldrsh.w	r3, [r3]
 800175a:	b21b      	sxth	r3, r3
 800175c:	17da      	asrs	r2, r3, #31
 800175e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001762:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001766:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800176a:	462b      	mov	r3, r5
 800176c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001770:	4642      	mov	r2, r8
 8001772:	fb02 f203 	mul.w	r2, r2, r3
 8001776:	464b      	mov	r3, r9
 8001778:	4621      	mov	r1, r4
 800177a:	fb01 f303 	mul.w	r3, r1, r3
 800177e:	4413      	add	r3, r2
 8001780:	4622      	mov	r2, r4
 8001782:	4641      	mov	r1, r8
 8001784:	fba2 1201 	umull	r1, r2, r2, r1
 8001788:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800178c:	460a      	mov	r2, r1
 800178e:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001792:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001796:	4413      	add	r3, r2
 8001798:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800179c:	f04f 0200 	mov.w	r2, #0
 80017a0:	f04f 0300 	mov.w	r3, #0
 80017a4:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80017a8:	4629      	mov	r1, r5
 80017aa:	104a      	asrs	r2, r1, #1
 80017ac:	4629      	mov	r1, r5
 80017ae:	17cb      	asrs	r3, r1, #31
 80017b0:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0){
 80017b4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80017b8:	4313      	orrs	r3, r2
 80017ba:	d10f      	bne.n	80017dc <bmp280_compensate_P_int64+0x2e8>
		return 0; // avoid exception caused by division by zero
 80017bc:	2300      	movs	r3, #0
 80017be:	e153      	b.n	8001a68 <bmp280_compensate_P_int64+0x574>
 80017c0:	20000248 	.word	0x20000248
 80017c4:	20000240 	.word	0x20000240
 80017c8:	2000023e 	.word	0x2000023e
 80017cc:	2000023c 	.word	0x2000023c
 80017d0:	2000023a 	.word	0x2000023a
 80017d4:	20000238 	.word	0x20000238
 80017d8:	20000236 	.word	0x20000236
	}
	p = 1048576-adc_P;
 80017dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80017e0:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 80017e4:	17da      	asrs	r2, r3, #31
 80017e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80017ea:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80017ee:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 80017f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80017f6:	105b      	asrs	r3, r3, #1
 80017f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80017fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001800:	07db      	lsls	r3, r3, #31
 8001802:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001806:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800180a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800180e:	4621      	mov	r1, r4
 8001810:	1a89      	subs	r1, r1, r2
 8001812:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001814:	4629      	mov	r1, r5
 8001816:	eb61 0303 	sbc.w	r3, r1, r3
 800181a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800181c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001820:	4622      	mov	r2, r4
 8001822:	462b      	mov	r3, r5
 8001824:	1891      	adds	r1, r2, r2
 8001826:	6239      	str	r1, [r7, #32]
 8001828:	415b      	adcs	r3, r3
 800182a:	627b      	str	r3, [r7, #36]	@ 0x24
 800182c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001830:	4621      	mov	r1, r4
 8001832:	1851      	adds	r1, r2, r1
 8001834:	61b9      	str	r1, [r7, #24]
 8001836:	4629      	mov	r1, r5
 8001838:	414b      	adcs	r3, r1
 800183a:	61fb      	str	r3, [r7, #28]
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	f04f 0300 	mov.w	r3, #0
 8001844:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001848:	4649      	mov	r1, r9
 800184a:	018b      	lsls	r3, r1, #6
 800184c:	4641      	mov	r1, r8
 800184e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001852:	4641      	mov	r1, r8
 8001854:	018a      	lsls	r2, r1, #6
 8001856:	4641      	mov	r1, r8
 8001858:	1889      	adds	r1, r1, r2
 800185a:	6139      	str	r1, [r7, #16]
 800185c:	4649      	mov	r1, r9
 800185e:	eb43 0101 	adc.w	r1, r3, r1
 8001862:	6179      	str	r1, [r7, #20]
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001870:	4649      	mov	r1, r9
 8001872:	008b      	lsls	r3, r1, #2
 8001874:	4641      	mov	r1, r8
 8001876:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800187a:	4641      	mov	r1, r8
 800187c:	008a      	lsls	r2, r1, #2
 800187e:	4610      	mov	r0, r2
 8001880:	4619      	mov	r1, r3
 8001882:	4603      	mov	r3, r0
 8001884:	4622      	mov	r2, r4
 8001886:	189b      	adds	r3, r3, r2
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	460b      	mov	r3, r1
 800188c:	462a      	mov	r2, r5
 800188e:	eb42 0303 	adc.w	r3, r2, r3
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80018a0:	4649      	mov	r1, r9
 80018a2:	008b      	lsls	r3, r1, #2
 80018a4:	4641      	mov	r1, r8
 80018a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018aa:	4641      	mov	r1, r8
 80018ac:	008a      	lsls	r2, r1, #2
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	4603      	mov	r3, r0
 80018b4:	4622      	mov	r2, r4
 80018b6:	189b      	adds	r3, r3, r2
 80018b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80018ba:	462b      	mov	r3, r5
 80018bc:	460a      	mov	r2, r1
 80018be:	eb42 0303 	adc.w	r3, r2, r3
 80018c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80018c4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80018c8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80018cc:	f7ff fa0c 	bl	8000ce8 <__aeabi_ldivmod>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((BMP280_S64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 80018d8:	4b66      	ldr	r3, [pc, #408]	@ (8001a74 <bmp280_compensate_P_int64+0x580>)
 80018da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018de:	b21b      	sxth	r3, r3
 80018e0:	17da      	asrs	r2, r3, #31
 80018e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80018e4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80018e6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80018ea:	f04f 0000 	mov.w	r0, #0
 80018ee:	f04f 0100 	mov.w	r1, #0
 80018f2:	0b50      	lsrs	r0, r2, #13
 80018f4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80018f8:	1359      	asrs	r1, r3, #13
 80018fa:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 80018fe:	462b      	mov	r3, r5
 8001900:	fb00 f203 	mul.w	r2, r0, r3
 8001904:	4623      	mov	r3, r4
 8001906:	fb03 f301 	mul.w	r3, r3, r1
 800190a:	4413      	add	r3, r2
 800190c:	4622      	mov	r2, r4
 800190e:	fba2 1200 	umull	r1, r2, r2, r0
 8001912:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001916:	460a      	mov	r2, r1
 8001918:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 800191c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001920:	4413      	add	r3, r2
 8001922:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001926:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800192a:	f04f 0000 	mov.w	r0, #0
 800192e:	f04f 0100 	mov.w	r1, #0
 8001932:	0b50      	lsrs	r0, r2, #13
 8001934:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001938:	1359      	asrs	r1, r3, #13
 800193a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800193e:	462b      	mov	r3, r5
 8001940:	fb00 f203 	mul.w	r2, r0, r3
 8001944:	4623      	mov	r3, r4
 8001946:	fb03 f301 	mul.w	r3, r3, r1
 800194a:	4413      	add	r3, r2
 800194c:	4622      	mov	r2, r4
 800194e:	fba2 1200 	umull	r1, r2, r2, r0
 8001952:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001956:	460a      	mov	r2, r1
 8001958:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 800195c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001960:	4413      	add	r3, r2
 8001962:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001966:	f04f 0200 	mov.w	r2, #0
 800196a:	f04f 0300 	mov.w	r3, #0
 800196e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001972:	4621      	mov	r1, r4
 8001974:	0e4a      	lsrs	r2, r1, #25
 8001976:	4629      	mov	r1, r5
 8001978:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800197c:	4629      	mov	r1, r5
 800197e:	164b      	asrs	r3, r1, #25
 8001980:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((BMP280_S64_t)dig_P8) * p) >> 19; p = ((p + var1 + var2) >> 8) + (((BMP280_S64_t)dig_P7)<<4);
 8001984:	4b3c      	ldr	r3, [pc, #240]	@ (8001a78 <bmp280_compensate_P_int64+0x584>)
 8001986:	f9b3 3000 	ldrsh.w	r3, [r3]
 800198a:	b21b      	sxth	r3, r3
 800198c:	17da      	asrs	r2, r3, #31
 800198e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001990:	667a      	str	r2, [r7, #100]	@ 0x64
 8001992:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001996:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800199a:	462a      	mov	r2, r5
 800199c:	fb02 f203 	mul.w	r2, r2, r3
 80019a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80019a4:	4621      	mov	r1, r4
 80019a6:	fb01 f303 	mul.w	r3, r1, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80019b0:	4621      	mov	r1, r4
 80019b2:	fba2 1201 	umull	r1, r2, r2, r1
 80019b6:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80019ba:	460a      	mov	r2, r1
 80019bc:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80019c0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80019c4:	4413      	add	r3, r2
 80019c6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 80019d6:	4621      	mov	r1, r4
 80019d8:	0cca      	lsrs	r2, r1, #19
 80019da:	4629      	mov	r1, r5
 80019dc:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80019e0:	4629      	mov	r1, r5
 80019e2:	14cb      	asrs	r3, r1, #19
 80019e4:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
 80019e8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 80019ec:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80019f0:	1884      	adds	r4, r0, r2
 80019f2:	65bc      	str	r4, [r7, #88]	@ 0x58
 80019f4:	eb41 0303 	adc.w	r3, r1, r3
 80019f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80019fa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80019fe:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001a02:	4621      	mov	r1, r4
 8001a04:	1889      	adds	r1, r1, r2
 8001a06:	6539      	str	r1, [r7, #80]	@ 0x50
 8001a08:	4629      	mov	r1, r5
 8001a0a:	eb43 0101 	adc.w	r1, r3, r1
 8001a0e:	6579      	str	r1, [r7, #84]	@ 0x54
 8001a10:	f04f 0000 	mov.w	r0, #0
 8001a14:	f04f 0100 	mov.w	r1, #0
 8001a18:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001a1c:	4623      	mov	r3, r4
 8001a1e:	0a18      	lsrs	r0, r3, #8
 8001a20:	462b      	mov	r3, r5
 8001a22:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a26:	462b      	mov	r3, r5
 8001a28:	1219      	asrs	r1, r3, #8
 8001a2a:	4b14      	ldr	r3, [pc, #80]	@ (8001a7c <bmp280_compensate_P_int64+0x588>)
 8001a2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a30:	b21b      	sxth	r3, r3
 8001a32:	17da      	asrs	r2, r3, #31
 8001a34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a36:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001a44:	464c      	mov	r4, r9
 8001a46:	0123      	lsls	r3, r4, #4
 8001a48:	4644      	mov	r4, r8
 8001a4a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001a4e:	4644      	mov	r4, r8
 8001a50:	0122      	lsls	r2, r4, #4
 8001a52:	1884      	adds	r4, r0, r2
 8001a54:	603c      	str	r4, [r7, #0]
 8001a56:	eb41 0303 	adc.w	r3, r1, r3
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001a60:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (BMP280_U32_t)p;
 8001a64:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a74:	20000246 	.word	0x20000246
 8001a78:	20000244 	.word	0x20000244
 8001a7c:	20000242 	.word	0x20000242

08001a80 <tx_can>:





HAL_StatusTypeDef tx_can(CAN_TxHeaderTypeDef pHeader2,uint8_t* aData2,uint32_t pTxMailbox2){
 8001a80:	b084      	sub	sp, #16
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	f107 0c10 	add.w	ip, r7, #16
 8001a8c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_StatusTypeDef error_out;
	//uint32_t pTxMailbox; // Variable pour stocker l'indice de la boîte aux lettres CAN

	// Envoi du message CAN avec l'angle de 90°
	HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(&hcan1, &pHeader2, aData2, &pTxMailbox2);
 8001a90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a96:	f107 0110 	add.w	r1, r7, #16
 8001a9a:	480c      	ldr	r0, [pc, #48]	@ (8001acc <tx_can+0x4c>)
 8001a9c:	f000 ffc1 	bl	8002a22 <HAL_CAN_AddTxMessage>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	71fb      	strb	r3, [r7, #7]
	error_out=status;
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	71bb      	strb	r3, [r7, #6]
	// Vérification du statut d'envoi
	if (status != HAL_OK) {
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <tx_can+0x36>
		// Gérer l'erreur d'envoi
		printf("erreur HAL_CAN_AddTxMessageCAN\r\n");
 8001aae:	4808      	ldr	r0, [pc, #32]	@ (8001ad0 <tx_can+0x50>)
 8001ab0:	f005 f9a8 	bl	8006e04 <puts>
 8001ab4:	e002      	b.n	8001abc <tx_can+0x3c>
	}
	else{
		printf("[tx_can]  envoi reussi\r\n");
 8001ab6:	4807      	ldr	r0, [pc, #28]	@ (8001ad4 <tx_can+0x54>)
 8001ab8:	f005 f9a4 	bl	8006e04 <puts>
	}

	return error_out;
 8001abc:	79bb      	ldrb	r3, [r7, #6]


}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ac8:	b004      	add	sp, #16
 8001aca:	4770      	bx	lr
 8001acc:	2000024c 	.word	0x2000024c
 8001ad0:	0800a758 	.word	0x0800a758
 8001ad4:	0800a778 	.word	0x0800a778

08001ad8 <enable_can>:

void enable_can(){
 8001ad8:	b590      	push	{r4, r7, lr}
 8001ada:	b087      	sub	sp, #28
 8001adc:	af04      	add	r7, sp, #16

	//********************Activer le module can***************************************************
	HAL_StatusTypeDef start_can= HAL_CAN_Start(&hcan1);
 8001ade:	4822      	ldr	r0, [pc, #136]	@ (8001b68 <enable_can+0x90>)
 8001ae0:	f000 ff5b 	bl	800299a <HAL_CAN_Start>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	71fb      	strb	r3, [r7, #7]
	if(start_can!= HAL_OK) {
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <enable_can+0x1e>

		// Gérer l'erreur de démarrage
		printf("erreur start can_config CAN\r\n");
 8001aee:	481f      	ldr	r0, [pc, #124]	@ (8001b6c <enable_can+0x94>)
 8001af0:	f005 f988 	bl	8006e04 <puts>
 8001af4:	e002      	b.n	8001afc <enable_can+0x24>

	}
	else{
		printf("[enable_can] start  CAN OK\r\n");
 8001af6:	481e      	ldr	r0, [pc, #120]	@ (8001b70 <enable_can+0x98>)
 8001af8:	f005 f984 	bl	8006e04 <puts>

	//CAN_TxHeaderTypeDef pHeader;
	//uint8_t aData[3];  // Tableau pour les données à transmettre

	// Configuration du champ pHeader
	pHeader.StdId = 0x61;          // Identifiant standard pour la commande "Angle"
 8001afc:	4b1d      	ldr	r3, [pc, #116]	@ (8001b74 <enable_can+0x9c>)
 8001afe:	2261      	movs	r2, #97	@ 0x61
 8001b00:	601a      	str	r2, [r3, #0]
	pHeader.IDE = CAN_ID_STD;      //(0x00000000U)  !< Standard Id
 8001b02:	4b1c      	ldr	r3, [pc, #112]	@ (8001b74 <enable_can+0x9c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
	pHeader.RTR = CAN_RTR_DATA;    //(0x00000000U)  !< Data frame
 8001b08:	4b1a      	ldr	r3, [pc, #104]	@ (8001b74 <enable_can+0x9c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
	pHeader.DLC = 2;
 8001b0e:	4b19      	ldr	r3, [pc, #100]	@ (8001b74 <enable_can+0x9c>)
 8001b10:	2202      	movs	r2, #2
 8001b12:	611a      	str	r2, [r3, #16]
	pHeader.TransmitGlobalTime = DISABLE;
 8001b14:	4b17      	ldr	r3, [pc, #92]	@ (8001b74 <enable_can+0x9c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	751a      	strb	r2, [r3, #20]

	aData[0] = 90;  // D0 : 90° en hexadécimal (0x5A)
 8001b1a:	4b17      	ldr	r3, [pc, #92]	@ (8001b78 <enable_can+0xa0>)
 8001b1c:	225a      	movs	r2, #90	@ 0x5a
 8001b1e:	701a      	strb	r2, [r3, #0]
	aData[1] = 0x00;  // D1 : Angle positif
 8001b20:	4b15      	ldr	r3, [pc, #84]	@ (8001b78 <enable_can+0xa0>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	705a      	strb	r2, [r3, #1]

	//*************************************transmission au can de la configuration**********************************
	HAL_StatusTypeDef conf_errout=tx_can(pHeader, aData, pTxMailbox);
 8001b26:	4b15      	ldr	r3, [pc, #84]	@ (8001b7c <enable_can+0xa4>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	4b12      	ldr	r3, [pc, #72]	@ (8001b74 <enable_can+0x9c>)
 8001b2c:	9203      	str	r2, [sp, #12]
 8001b2e:	4a12      	ldr	r2, [pc, #72]	@ (8001b78 <enable_can+0xa0>)
 8001b30:	9202      	str	r2, [sp, #8]
 8001b32:	466c      	mov	r4, sp
 8001b34:	f103 0210 	add.w	r2, r3, #16
 8001b38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b3c:	e884 0003 	stmia.w	r4, {r0, r1}
 8001b40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b42:	f7ff ff9d 	bl	8001a80 <tx_can>
 8001b46:	4603      	mov	r3, r0
 8001b48:	71bb      	strb	r3, [r7, #6]
	// Vérification du statut d'envoi
	if (conf_errout != HAL_OK) {
 8001b4a:	79bb      	ldrb	r3, [r7, #6]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <enable_can+0x80>
		// Gérer l'erreur d'envoi
		printf("erreur config_base_ CAN\r\n");
 8001b50:	480b      	ldr	r0, [pc, #44]	@ (8001b80 <enable_can+0xa8>)
 8001b52:	f005 f957 	bl	8006e04 <puts>
	}
	else{
		printf("config base  envoi reussi\r\n");
	}

}
 8001b56:	e002      	b.n	8001b5e <enable_can+0x86>
		printf("config base  envoi reussi\r\n");
 8001b58:	480a      	ldr	r0, [pc, #40]	@ (8001b84 <enable_can+0xac>)
 8001b5a:	f005 f953 	bl	8006e04 <puts>
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd90      	pop	{r4, r7, pc}
 8001b66:	bf00      	nop
 8001b68:	2000024c 	.word	0x2000024c
 8001b6c:	0800a790 	.word	0x0800a790
 8001b70:	0800a7b0 	.word	0x0800a7b0
 8001b74:	20000200 	.word	0x20000200
 8001b78:	20000218 	.word	0x20000218
 8001b7c:	2000021c 	.word	0x2000021c
 8001b80:	0800a7cc 	.word	0x0800a7cc
 8001b84:	0800a7e8 	.word	0x0800a7e8

08001b88 <can_change_temp>:


}


void can_change_temp(BMP280_U32_t temp_comp){
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]


	enable_can();
 8001b90:	f7ff ffa2 	bl	8001ad8 <enable_can>


//********temp_comp = temperature *******************************************


	if(fabs(temp_comp-old_temp)>2){
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d92d      	bls.n	8001bfa <can_change_temp+0x72>

		if(temp_comp>old_temp){//On bouge dans le sens 0x00 +
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d916      	bls.n	8001bd4 <can_change_temp+0x4c>

			aData[1]=0x00;
 8001ba6:	4b17      	ldr	r3, [pc, #92]	@ (8001c04 <can_change_temp+0x7c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	705a      	strb	r2, [r3, #1]
			aData[0]=(int)(10*(temp_comp-old_temp));
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	0092      	lsls	r2, r2, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	4b11      	ldr	r3, [pc, #68]	@ (8001c04 <can_change_temp+0x7c>)
 8001bc0:	701a      	strb	r2, [r3, #0]
			HAL_CAN_AddTxMessage(&hcan1, &pHeader, aData, &pTxMailbox);
 8001bc2:	4b11      	ldr	r3, [pc, #68]	@ (8001c08 <can_change_temp+0x80>)
 8001bc4:	4a0f      	ldr	r2, [pc, #60]	@ (8001c04 <can_change_temp+0x7c>)
 8001bc6:	4911      	ldr	r1, [pc, #68]	@ (8001c0c <can_change_temp+0x84>)
 8001bc8:	4811      	ldr	r0, [pc, #68]	@ (8001c10 <can_change_temp+0x88>)
 8001bca:	f000 ff2a 	bl	8002a22 <HAL_CAN_AddTxMessage>
			//printf("adata0= %d\r\n",aData[0]);

			old_temp=temp_comp;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	60fb      	str	r3, [r7, #12]


	//old_temp = temp_comp;//mise à jour de la température


}
 8001bd2:	e012      	b.n	8001bfa <can_change_temp+0x72>
			aData[1]=0x01;
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c04 <can_change_temp+0x7c>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	705a      	strb	r2, [r3, #1]
			aData[0]=(int)((old_temp-temp_comp));
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	4b07      	ldr	r3, [pc, #28]	@ (8001c04 <can_change_temp+0x7c>)
 8001be8:	701a      	strb	r2, [r3, #0]
			HAL_CAN_AddTxMessage(&hcan1, &pHeader, aData, &pTxMailbox);
 8001bea:	4b07      	ldr	r3, [pc, #28]	@ (8001c08 <can_change_temp+0x80>)
 8001bec:	4a05      	ldr	r2, [pc, #20]	@ (8001c04 <can_change_temp+0x7c>)
 8001bee:	4907      	ldr	r1, [pc, #28]	@ (8001c0c <can_change_temp+0x84>)
 8001bf0:	4807      	ldr	r0, [pc, #28]	@ (8001c10 <can_change_temp+0x88>)
 8001bf2:	f000 ff16 	bl	8002a22 <HAL_CAN_AddTxMessage>
			old_temp=temp_comp;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	60fb      	str	r3, [r7, #12]
}
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000218 	.word	0x20000218
 8001c08:	2000021c 	.word	0x2000021c
 8001c0c:	20000200 	.word	0x20000200
 8001c10:	2000024c 	.word	0x2000024c

08001c14 <dial_pi>:

//*********************************************************************************************

void dial_pi(){
 8001c14:	b5b0      	push	{r4, r5, r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af02      	add	r7, sp, #8

	if(strncmp(RxBuff, "GET_T", 5)==0) {
 8001c1a:	2205      	movs	r2, #5
 8001c1c:	494c      	ldr	r1, [pc, #304]	@ (8001d50 <dial_pi+0x13c>)
 8001c1e:	484d      	ldr	r0, [pc, #308]	@ (8001d54 <dial_pi+0x140>)
 8001c20:	f005 f9f8 	bl	8007014 <strncmp>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d148      	bne.n	8001cbc <dial_pi+0xa8>


		//déclaration des variables contenant la température non compensée
		temp_uncompen= BMP280_get_temperature(); //récupérer la température
 8001c2a:	f7ff fbad 	bl	8001388 <BMP280_get_temperature>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	4a49      	ldr	r2, [pc, #292]	@ (8001d58 <dial_pi+0x144>)
 8001c32:	6013      	str	r3, [r2, #0]

		//déclaration des variables contenant la température  compensée
		BMP280_U32_t temp_comp;


		temp_comp=bmp280_compensate_T_int32(temp_uncompen); //récupérer la température compensé
 8001c34:	4b48      	ldr	r3, [pc, #288]	@ (8001d58 <dial_pi+0x144>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff fc19 	bl	8001470 <bmp280_compensate_T_int32>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	607b      	str	r3, [r7, #4]

		//ancien printf
		//printf("%u \r\n",temp_comp);// AFFICHÉ TEMPÉRATURE compensée sur l'usart


		printf("T=%ld%ld.%ld%ld_C\r\n",(temp_comp/1000)%10,(temp_comp/100)%10,(temp_comp/10)%10,temp_comp%10);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a45      	ldr	r2, [pc, #276]	@ (8001d5c <dial_pi+0x148>)
 8001c46:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4a:	099a      	lsrs	r2, r3, #6
 8001c4c:	4b44      	ldr	r3, [pc, #272]	@ (8001d60 <dial_pi+0x14c>)
 8001c4e:	fba3 1302 	umull	r1, r3, r3, r2
 8001c52:	08d9      	lsrs	r1, r3, #3
 8001c54:	460b      	mov	r3, r1
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	440b      	add	r3, r1
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	1ad1      	subs	r1, r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a40      	ldr	r2, [pc, #256]	@ (8001d64 <dial_pi+0x150>)
 8001c62:	fba2 2303 	umull	r2, r3, r2, r3
 8001c66:	095a      	lsrs	r2, r3, #5
 8001c68:	4b3d      	ldr	r3, [pc, #244]	@ (8001d60 <dial_pi+0x14c>)
 8001c6a:	fba3 0302 	umull	r0, r3, r3, r2
 8001c6e:	08d8      	lsrs	r0, r3, #3
 8001c70:	4603      	mov	r3, r0
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4403      	add	r3, r0
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	1ad0      	subs	r0, r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a38      	ldr	r2, [pc, #224]	@ (8001d60 <dial_pi+0x14c>)
 8001c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c82:	08da      	lsrs	r2, r3, #3
 8001c84:	4b36      	ldr	r3, [pc, #216]	@ (8001d60 <dial_pi+0x14c>)
 8001c86:	fba3 4302 	umull	r4, r3, r3, r2
 8001c8a:	08dc      	lsrs	r4, r3, #3
 8001c8c:	4623      	mov	r3, r4
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4423      	add	r3, r4
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	1ad4      	subs	r4, r2, r3
 8001c96:	687d      	ldr	r5, [r7, #4]
 8001c98:	4b31      	ldr	r3, [pc, #196]	@ (8001d60 <dial_pi+0x14c>)
 8001c9a:	fba3 2305 	umull	r2, r3, r3, r5
 8001c9e:	08da      	lsrs	r2, r3, #3
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	1aea      	subs	r2, r5, r3
 8001caa:	9200      	str	r2, [sp, #0]
 8001cac:	4623      	mov	r3, r4
 8001cae:	4602      	mov	r2, r0
 8001cb0:	482d      	ldr	r0, [pc, #180]	@ (8001d68 <dial_pi+0x154>)
 8001cb2:	f005 f83f 	bl	8006d34 <iprintf>
		//T=+12.50_C 	Température compensée sur 10 cafficher aractères
		//GET_P 	P=102300Pa

		//HAL_Delay(1000);
		//interaction sur le moteur de la température
		can_change_temp(temp_comp);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff ff66 	bl	8001b88 <can_change_temp>


	}

	if (strncmp(RxBuff,"GET_P",5)==0){
 8001cbc:	2205      	movs	r2, #5
 8001cbe:	492b      	ldr	r1, [pc, #172]	@ (8001d6c <dial_pi+0x158>)
 8001cc0:	4824      	ldr	r0, [pc, #144]	@ (8001d54 <dial_pi+0x140>)
 8001cc2:	f005 f9a7 	bl	8007014 <strncmp>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d11c      	bne.n	8001d06 <dial_pi+0xf2>

		//déclaration des variables contenant la pression  compensée
		BMP280_U32_t pres_comp;


		pres_uncompen=BMP280_get_pressure(); //récupérer la pression non compensée
 8001ccc:	f7ff fb96 	bl	80013fc <BMP280_get_pressure>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	4a27      	ldr	r2, [pc, #156]	@ (8001d70 <dial_pi+0x15c>)
 8001cd4:	6013      	str	r3, [r2, #0]

		pres_comp=bmp280_compensate_P_int64(pres_uncompen); //compenser la pression
 8001cd6:	4b26      	ldr	r3, [pc, #152]	@ (8001d70 <dial_pi+0x15c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fc0a 	bl	80014f4 <bmp280_compensate_P_int64>
 8001ce0:	6038      	str	r0, [r7, #0]
		//printf("%u \r\n",pres_comp);
		//printf("div 256 *10⁵ %u \r\n", ((pres_comp) / (25600000) ));



		printf("P=%f_Pa  \r\n",((float)(pres_comp))/256);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	ee07 3a90 	vmov	s15, r3
 8001ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cec:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001d74 <dial_pi+0x160>
 8001cf0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001cf4:	ee16 0a90 	vmov	r0, s13
 8001cf8:	f7fe fc56 	bl	80005a8 <__aeabi_f2d>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	481d      	ldr	r0, [pc, #116]	@ (8001d78 <dial_pi+0x164>)
 8001d02:	f005 f817 	bl	8006d34 <iprintf>


	}

	if (strncmp(RxBuff,"SET_K=",10)==0){
 8001d06:	491d      	ldr	r1, [pc, #116]	@ (8001d7c <dial_pi+0x168>)
 8001d08:	4812      	ldr	r0, [pc, #72]	@ (8001d54 <dial_pi+0x140>)
 8001d0a:	f7fe fa81 	bl	8000210 <strcmp>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d108      	bne.n	8001d26 <dial_pi+0x112>
		//K_pid=RxBuff[7];
		K_pid=0;
 8001d14:	4b1a      	ldr	r3, [pc, #104]	@ (8001d80 <dial_pi+0x16c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]

		printf("K %d",K_pid);
 8001d1a:	4b19      	ldr	r3, [pc, #100]	@ (8001d80 <dial_pi+0x16c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4818      	ldr	r0, [pc, #96]	@ (8001d84 <dial_pi+0x170>)
 8001d22:	f005 f807 	bl	8006d34 <iprintf>

	}



	if(strncmp(RxBuff,"GET_A",5)==0){
 8001d26:	2205      	movs	r2, #5
 8001d28:	4917      	ldr	r1, [pc, #92]	@ (8001d88 <dial_pi+0x174>)
 8001d2a:	480a      	ldr	r0, [pc, #40]	@ (8001d54 <dial_pi+0x140>)
 8001d2c:	f005 f972 	bl	8007014 <strncmp>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d108      	bne.n	8001d48 <dial_pi+0x134>
		a_pid=145;
 8001d36:	4b15      	ldr	r3, [pc, #84]	@ (8001d8c <dial_pi+0x178>)
 8001d38:	2291      	movs	r2, #145	@ 0x91
 8001d3a:	601a      	str	r2, [r3, #0]
		printf("A=%d\r\n",a_pid);
 8001d3c:	4b13      	ldr	r3, [pc, #76]	@ (8001d8c <dial_pi+0x178>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4619      	mov	r1, r3
 8001d42:	4813      	ldr	r0, [pc, #76]	@ (8001d90 <dial_pi+0x17c>)
 8001d44:	f004 fff6 	bl	8006d34 <iprintf>
	}

	// Réinitialiser RxBuff après chaque commande
	//memset(RxBuff, 0, RX_BUFF_SIZE);

}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d50:	0800a830 	.word	0x0800a830
 8001d54:	200001f8 	.word	0x200001f8
 8001d58:	20000228 	.word	0x20000228
 8001d5c:	10624dd3 	.word	0x10624dd3
 8001d60:	cccccccd 	.word	0xcccccccd
 8001d64:	51eb851f 	.word	0x51eb851f
 8001d68:	0800a838 	.word	0x0800a838
 8001d6c:	0800a84c 	.word	0x0800a84c
 8001d70:	2000022c 	.word	0x2000022c
 8001d74:	43800000 	.word	0x43800000
 8001d78:	0800a854 	.word	0x0800a854
 8001d7c:	0800a860 	.word	0x0800a860
 8001d80:	20000220 	.word	0x20000220
 8001d84:	0800a868 	.word	0x0800a868
 8001d88:	0800a870 	.word	0x0800a870
 8001d8c:	20000224 	.word	0x20000224
 8001d90:	0800a878 	.word	0x0800a878

08001d94 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]

	dial_pi();
 8001d9c:	f7ff ff3a 	bl	8001c14 <dial_pi>
	HAL_UART_Receive_IT(&huart1, RxBuff, RX_BUFF_SIZE);
 8001da0:	2207      	movs	r2, #7
 8001da2:	4904      	ldr	r1, [pc, #16]	@ (8001db4 <HAL_UART_RxCpltCallback+0x20>)
 8001da4:	4804      	ldr	r0, [pc, #16]	@ (8001db8 <HAL_UART_RxCpltCallback+0x24>)
 8001da6:	f003 f91c 	bl	8004fe2 <HAL_UART_Receive_IT>


}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	200001f8 	.word	0x200001f8
 8001db8:	200002c8 	.word	0x200002c8

08001dbc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001dc0:	f000 fc5a 	bl	8002678 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001dc4:	f000 f824 	bl	8001e10 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001dc8:	f000 f946 	bl	8002058 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001dcc:	f000 f91a 	bl	8002004 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8001dd0:	f000 f8c0 	bl	8001f54 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8001dd4:	f000 f8ec 	bl	8001fb0 <MX_USART1_UART_Init>
	MX_CAN1_Init();
 8001dd8:	f000 f886 	bl	8001ee8 <MX_CAN1_Init>
	/* USER CODE BEGIN 2 */



	HAL_UART_Receive_IT(&huart1, RxBuff,RX_BUFF_SIZE);
 8001ddc:	2207      	movs	r2, #7
 8001dde:	4909      	ldr	r1, [pc, #36]	@ (8001e04 <main+0x48>)
 8001de0:	4809      	ldr	r0, [pc, #36]	@ (8001e08 <main+0x4c>)
 8001de2:	f003 f8fe 	bl	8004fe2 <HAL_UART_Receive_IT>

	//déclaration des variables contenant la température non compensée
	BMP280_U32_t temp_comp;
	BMP280_U32_t pres_comp;

	BMP280_checkID();
 8001de6:	f7ff f97d 	bl	80010e4 <BMP280_checkID>
	BMP280_config();
 8001dea:	f7ff f9bb 	bl	8001164 <BMP280_config>
	BMP280_calib(); //récupère données étallonnage
 8001dee:	f7ff fa0d 	bl	800120c <BMP280_calib>

	printf("main\r\n");
 8001df2:	4806      	ldr	r0, [pc, #24]	@ (8001e0c <main+0x50>)
 8001df4:	f005 f806 	bl	8006e04 <puts>

		//can_change_temp(temp_comp);

		//faire bouger le moteur en fonction de la température

		HAL_Delay(1000);
 8001df8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001dfc:	f000 fcae 	bl	800275c <HAL_Delay>
 8001e00:	e7fa      	b.n	8001df8 <main+0x3c>
 8001e02:	bf00      	nop
 8001e04:	200001f8 	.word	0x200001f8
 8001e08:	200002c8 	.word	0x200002c8
 8001e0c:	0800a880 	.word	0x0800a880

08001e10 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b094      	sub	sp, #80	@ 0x50
 8001e14:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e16:	f107 031c 	add.w	r3, r7, #28
 8001e1a:	2234      	movs	r2, #52	@ 0x34
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f005 f8f0 	bl	8007004 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e24:	f107 0308 	add.w	r3, r7, #8
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001e34:	2300      	movs	r3, #0
 8001e36:	607b      	str	r3, [r7, #4]
 8001e38:	4b29      	ldr	r3, [pc, #164]	@ (8001ee0 <SystemClock_Config+0xd0>)
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3c:	4a28      	ldr	r2, [pc, #160]	@ (8001ee0 <SystemClock_Config+0xd0>)
 8001e3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e42:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e44:	4b26      	ldr	r3, [pc, #152]	@ (8001ee0 <SystemClock_Config+0xd0>)
 8001e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e4c:	607b      	str	r3, [r7, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e50:	2300      	movs	r3, #0
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	4b23      	ldr	r3, [pc, #140]	@ (8001ee4 <SystemClock_Config+0xd4>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001e5c:	4a21      	ldr	r2, [pc, #132]	@ (8001ee4 <SystemClock_Config+0xd4>)
 8001e5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e62:	6013      	str	r3, [r2, #0]
 8001e64:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee4 <SystemClock_Config+0xd4>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e6c:	603b      	str	r3, [r7, #0]
 8001e6e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e70:	2302      	movs	r3, #2
 8001e72:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e74:	2301      	movs	r3, #1
 8001e76:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e78:	2310      	movs	r3, #16
 8001e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e80:	2300      	movs	r3, #0
 8001e82:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001e84:	2308      	movs	r3, #8
 8001e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 80;
 8001e88:	2350      	movs	r3, #80	@ 0x50
 8001e8a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e90:	2302      	movs	r3, #2
 8001e92:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001e94:	2302      	movs	r3, #2
 8001e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e98:	f107 031c 	add.w	r3, r7, #28
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f002 fd27 	bl	80048f0 <HAL_RCC_OscConfig>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8001ea8:	f000 f956 	bl	8002158 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eac:	230f      	movs	r3, #15
 8001eae:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001eb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ebc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ec2:	f107 0308 	add.w	r3, r7, #8
 8001ec6:	2102      	movs	r1, #2
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f002 f9c7 	bl	800425c <HAL_RCC_ClockConfig>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <SystemClock_Config+0xc8>
	{
		Error_Handler();
 8001ed4:	f000 f940 	bl	8002158 <Error_Handler>
	}
}
 8001ed8:	bf00      	nop
 8001eda:	3750      	adds	r7, #80	@ 0x50
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40007000 	.word	0x40007000

08001ee8 <MX_CAN1_Init>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8001eec:	4b17      	ldr	r3, [pc, #92]	@ (8001f4c <MX_CAN1_Init+0x64>)
 8001eee:	4a18      	ldr	r2, [pc, #96]	@ (8001f50 <MX_CAN1_Init+0x68>)
 8001ef0:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 5;
 8001ef2:	4b16      	ldr	r3, [pc, #88]	@ (8001f4c <MX_CAN1_Init+0x64>)
 8001ef4:	2205      	movs	r2, #5
 8001ef6:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001ef8:	4b14      	ldr	r3, [pc, #80]	@ (8001f4c <MX_CAN1_Init+0x64>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001efe:	4b13      	ldr	r3, [pc, #76]	@ (8001f4c <MX_CAN1_Init+0x64>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001f04:	4b11      	ldr	r3, [pc, #68]	@ (8001f4c <MX_CAN1_Init+0x64>)
 8001f06:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8001f0a:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f4c <MX_CAN1_Init+0x64>)
 8001f0e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001f12:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8001f14:	4b0d      	ldr	r3, [pc, #52]	@ (8001f4c <MX_CAN1_Init+0x64>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8001f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f4c <MX_CAN1_Init+0x64>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8001f20:	4b0a      	ldr	r3, [pc, #40]	@ (8001f4c <MX_CAN1_Init+0x64>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8001f26:	4b09      	ldr	r3, [pc, #36]	@ (8001f4c <MX_CAN1_Init+0x64>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001f2c:	4b07      	ldr	r3, [pc, #28]	@ (8001f4c <MX_CAN1_Init+0x64>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8001f32:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <MX_CAN1_Init+0x64>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001f38:	4804      	ldr	r0, [pc, #16]	@ (8001f4c <MX_CAN1_Init+0x64>)
 8001f3a:	f000 fc33 	bl	80027a4 <HAL_CAN_Init>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_CAN1_Init+0x60>
	{
		Error_Handler();
 8001f44:	f000 f908 	bl	8002158 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	2000024c 	.word	0x2000024c
 8001f50:	40006400 	.word	0x40006400

08001f54 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001f58:	4b12      	ldr	r3, [pc, #72]	@ (8001fa4 <MX_I2C1_Init+0x50>)
 8001f5a:	4a13      	ldr	r2, [pc, #76]	@ (8001fa8 <MX_I2C1_Init+0x54>)
 8001f5c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001f5e:	4b11      	ldr	r3, [pc, #68]	@ (8001fa4 <MX_I2C1_Init+0x50>)
 8001f60:	4a12      	ldr	r2, [pc, #72]	@ (8001fac <MX_I2C1_Init+0x58>)
 8001f62:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f64:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa4 <MX_I2C1_Init+0x50>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa4 <MX_I2C1_Init+0x50>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f70:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa4 <MX_I2C1_Init+0x50>)
 8001f72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f76:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f78:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa4 <MX_I2C1_Init+0x50>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001f7e:	4b09      	ldr	r3, [pc, #36]	@ (8001fa4 <MX_I2C1_Init+0x50>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f84:	4b07      	ldr	r3, [pc, #28]	@ (8001fa4 <MX_I2C1_Init+0x50>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f8a:	4b06      	ldr	r3, [pc, #24]	@ (8001fa4 <MX_I2C1_Init+0x50>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f90:	4804      	ldr	r0, [pc, #16]	@ (8001fa4 <MX_I2C1_Init+0x50>)
 8001f92:	f001 f969 	bl	8003268 <HAL_I2C_Init>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8001f9c:	f000 f8dc 	bl	8002158 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	20000274 	.word	0x20000274
 8001fa8:	40005400 	.word	0x40005400
 8001fac:	000186a0 	.word	0x000186a0

08001fb0 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001fb4:	4b11      	ldr	r3, [pc, #68]	@ (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fb6:	4a12      	ldr	r2, [pc, #72]	@ (8002000 <MX_USART1_UART_Init+0x50>)
 8001fb8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001fba:	4b10      	ldr	r3, [pc, #64]	@ (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fc0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001fce:	4b0b      	ldr	r3, [pc, #44]	@ (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001fd4:	4b09      	ldr	r3, [pc, #36]	@ (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fd6:	220c      	movs	r2, #12
 8001fd8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fda:	4b08      	ldr	r3, [pc, #32]	@ (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe0:	4b06      	ldr	r3, [pc, #24]	@ (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fe6:	4805      	ldr	r0, [pc, #20]	@ (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fe8:	f002 ff20 	bl	8004e2c <HAL_UART_Init>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8001ff2:	f000 f8b1 	bl	8002158 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200002c8 	.word	0x200002c8
 8002000:	40011000 	.word	0x40011000

08002004 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002008:	4b11      	ldr	r3, [pc, #68]	@ (8002050 <MX_USART2_UART_Init+0x4c>)
 800200a:	4a12      	ldr	r2, [pc, #72]	@ (8002054 <MX_USART2_UART_Init+0x50>)
 800200c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800200e:	4b10      	ldr	r3, [pc, #64]	@ (8002050 <MX_USART2_UART_Init+0x4c>)
 8002010:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002014:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002016:	4b0e      	ldr	r3, [pc, #56]	@ (8002050 <MX_USART2_UART_Init+0x4c>)
 8002018:	2200      	movs	r2, #0
 800201a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800201c:	4b0c      	ldr	r3, [pc, #48]	@ (8002050 <MX_USART2_UART_Init+0x4c>)
 800201e:	2200      	movs	r2, #0
 8002020:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002022:	4b0b      	ldr	r3, [pc, #44]	@ (8002050 <MX_USART2_UART_Init+0x4c>)
 8002024:	2200      	movs	r2, #0
 8002026:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002028:	4b09      	ldr	r3, [pc, #36]	@ (8002050 <MX_USART2_UART_Init+0x4c>)
 800202a:	220c      	movs	r2, #12
 800202c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800202e:	4b08      	ldr	r3, [pc, #32]	@ (8002050 <MX_USART2_UART_Init+0x4c>)
 8002030:	2200      	movs	r2, #0
 8002032:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002034:	4b06      	ldr	r3, [pc, #24]	@ (8002050 <MX_USART2_UART_Init+0x4c>)
 8002036:	2200      	movs	r2, #0
 8002038:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800203a:	4805      	ldr	r0, [pc, #20]	@ (8002050 <MX_USART2_UART_Init+0x4c>)
 800203c:	f002 fef6 	bl	8004e2c <HAL_UART_Init>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8002046:	f000 f887 	bl	8002158 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000310 	.word	0x20000310
 8002054:	40004400 	.word	0x40004400

08002058 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	@ 0x28
 800205c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205e:	f107 0314 	add.w	r3, r7, #20
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
 8002068:	609a      	str	r2, [r3, #8]
 800206a:	60da      	str	r2, [r3, #12]
 800206c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	4b36      	ldr	r3, [pc, #216]	@ (800214c <MX_GPIO_Init+0xf4>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002076:	4a35      	ldr	r2, [pc, #212]	@ (800214c <MX_GPIO_Init+0xf4>)
 8002078:	f043 0304 	orr.w	r3, r3, #4
 800207c:	6313      	str	r3, [r2, #48]	@ 0x30
 800207e:	4b33      	ldr	r3, [pc, #204]	@ (800214c <MX_GPIO_Init+0xf4>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	613b      	str	r3, [r7, #16]
 8002088:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	4b2f      	ldr	r3, [pc, #188]	@ (800214c <MX_GPIO_Init+0xf4>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002092:	4a2e      	ldr	r2, [pc, #184]	@ (800214c <MX_GPIO_Init+0xf4>)
 8002094:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002098:	6313      	str	r3, [r2, #48]	@ 0x30
 800209a:	4b2c      	ldr	r3, [pc, #176]	@ (800214c <MX_GPIO_Init+0xf4>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	4b28      	ldr	r3, [pc, #160]	@ (800214c <MX_GPIO_Init+0xf4>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ae:	4a27      	ldr	r2, [pc, #156]	@ (800214c <MX_GPIO_Init+0xf4>)
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020b6:	4b25      	ldr	r3, [pc, #148]	@ (800214c <MX_GPIO_Init+0xf4>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	4b21      	ldr	r3, [pc, #132]	@ (800214c <MX_GPIO_Init+0xf4>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ca:	4a20      	ldr	r2, [pc, #128]	@ (800214c <MX_GPIO_Init+0xf4>)
 80020cc:	f043 0302 	orr.w	r3, r3, #2
 80020d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020d2:	4b1e      	ldr	r3, [pc, #120]	@ (800214c <MX_GPIO_Init+0xf4>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	607b      	str	r3, [r7, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80020de:	2200      	movs	r2, #0
 80020e0:	2120      	movs	r1, #32
 80020e2:	481b      	ldr	r0, [pc, #108]	@ (8002150 <MX_GPIO_Init+0xf8>)
 80020e4:	f001 f8a6 	bl	8003234 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80020e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020ec:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020ee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80020f2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	4619      	mov	r1, r3
 80020fe:	4815      	ldr	r0, [pc, #84]	@ (8002154 <MX_GPIO_Init+0xfc>)
 8002100:	f000 ff04 	bl	8002f0c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8002104:	2320      	movs	r3, #32
 8002106:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002108:	2301      	movs	r3, #1
 800210a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002110:	2300      	movs	r3, #0
 8002112:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	4619      	mov	r1, r3
 800211a:	480d      	ldr	r0, [pc, #52]	@ (8002150 <MX_GPIO_Init+0xf8>)
 800211c:	f000 fef6 	bl	8002f0c <HAL_GPIO_Init>

	/*Configure GPIO pins : RASPBERRY_USART3_TX_Pin RASPBERRY_USART3_RX_Pin */
	GPIO_InitStruct.Pin = RASPBERRY_USART3_TX_Pin|RASPBERRY_USART3_RX_Pin;
 8002120:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002124:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002126:	2302      	movs	r3, #2
 8002128:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212e:	2303      	movs	r3, #3
 8002130:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002132:	2307      	movs	r3, #7
 8002134:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002136:	f107 0314 	add.w	r3, r7, #20
 800213a:	4619      	mov	r1, r3
 800213c:	4805      	ldr	r0, [pc, #20]	@ (8002154 <MX_GPIO_Init+0xfc>)
 800213e:	f000 fee5 	bl	8002f0c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002142:	bf00      	nop
 8002144:	3728      	adds	r7, #40	@ 0x28
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40023800 	.word	0x40023800
 8002150:	40020000 	.word	0x40020000
 8002154:	40020800 	.word	0x40020800

08002158 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800215c:	b672      	cpsid	i
}
 800215e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002160:	bf00      	nop
 8002162:	e7fd      	b.n	8002160 <Error_Handler+0x8>

08002164 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	607b      	str	r3, [r7, #4]
 800216e:	4b10      	ldr	r3, [pc, #64]	@ (80021b0 <HAL_MspInit+0x4c>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002172:	4a0f      	ldr	r2, [pc, #60]	@ (80021b0 <HAL_MspInit+0x4c>)
 8002174:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002178:	6453      	str	r3, [r2, #68]	@ 0x44
 800217a:	4b0d      	ldr	r3, [pc, #52]	@ (80021b0 <HAL_MspInit+0x4c>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002182:	607b      	str	r3, [r7, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	603b      	str	r3, [r7, #0]
 800218a:	4b09      	ldr	r3, [pc, #36]	@ (80021b0 <HAL_MspInit+0x4c>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218e:	4a08      	ldr	r2, [pc, #32]	@ (80021b0 <HAL_MspInit+0x4c>)
 8002190:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002194:	6413      	str	r3, [r2, #64]	@ 0x40
 8002196:	4b06      	ldr	r3, [pc, #24]	@ (80021b0 <HAL_MspInit+0x4c>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800219e:	603b      	str	r3, [r7, #0]
 80021a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80021a2:	2007      	movs	r0, #7
 80021a4:	f000 fdde 	bl	8002d64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021a8:	bf00      	nop
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40023800 	.word	0x40023800

080021b4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08a      	sub	sp, #40	@ 0x28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a19      	ldr	r2, [pc, #100]	@ (8002238 <HAL_CAN_MspInit+0x84>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d12c      	bne.n	8002230 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	4b18      	ldr	r3, [pc, #96]	@ (800223c <HAL_CAN_MspInit+0x88>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021de:	4a17      	ldr	r2, [pc, #92]	@ (800223c <HAL_CAN_MspInit+0x88>)
 80021e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80021e6:	4b15      	ldr	r3, [pc, #84]	@ (800223c <HAL_CAN_MspInit+0x88>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	4b11      	ldr	r3, [pc, #68]	@ (800223c <HAL_CAN_MspInit+0x88>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fa:	4a10      	ldr	r2, [pc, #64]	@ (800223c <HAL_CAN_MspInit+0x88>)
 80021fc:	f043 0302 	orr.w	r3, r3, #2
 8002200:	6313      	str	r3, [r2, #48]	@ 0x30
 8002202:	4b0e      	ldr	r3, [pc, #56]	@ (800223c <HAL_CAN_MspInit+0x88>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800220e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002214:	2302      	movs	r3, #2
 8002216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221c:	2303      	movs	r3, #3
 800221e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002220:	2309      	movs	r3, #9
 8002222:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002224:	f107 0314 	add.w	r3, r7, #20
 8002228:	4619      	mov	r1, r3
 800222a:	4805      	ldr	r0, [pc, #20]	@ (8002240 <HAL_CAN_MspInit+0x8c>)
 800222c:	f000 fe6e 	bl	8002f0c <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8002230:	bf00      	nop
 8002232:	3728      	adds	r7, #40	@ 0x28
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40006400 	.word	0x40006400
 800223c:	40023800 	.word	0x40023800
 8002240:	40020400 	.word	0x40020400

08002244 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08a      	sub	sp, #40	@ 0x28
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a19      	ldr	r2, [pc, #100]	@ (80022c8 <HAL_I2C_MspInit+0x84>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d12b      	bne.n	80022be <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	4b18      	ldr	r3, [pc, #96]	@ (80022cc <HAL_I2C_MspInit+0x88>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	4a17      	ldr	r2, [pc, #92]	@ (80022cc <HAL_I2C_MspInit+0x88>)
 8002270:	f043 0302 	orr.w	r3, r3, #2
 8002274:	6313      	str	r3, [r2, #48]	@ 0x30
 8002276:	4b15      	ldr	r3, [pc, #84]	@ (80022cc <HAL_I2C_MspInit+0x88>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	613b      	str	r3, [r7, #16]
 8002280:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002282:	23c0      	movs	r3, #192	@ 0xc0
 8002284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002286:	2312      	movs	r3, #18
 8002288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	2300      	movs	r3, #0
 800228c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800228e:	2303      	movs	r3, #3
 8002290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002292:	2304      	movs	r3, #4
 8002294:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002296:	f107 0314 	add.w	r3, r7, #20
 800229a:	4619      	mov	r1, r3
 800229c:	480c      	ldr	r0, [pc, #48]	@ (80022d0 <HAL_I2C_MspInit+0x8c>)
 800229e:	f000 fe35 	bl	8002f0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	4b09      	ldr	r3, [pc, #36]	@ (80022cc <HAL_I2C_MspInit+0x88>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	4a08      	ldr	r2, [pc, #32]	@ (80022cc <HAL_I2C_MspInit+0x88>)
 80022ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80022b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022b2:	4b06      	ldr	r3, [pc, #24]	@ (80022cc <HAL_I2C_MspInit+0x88>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80022be:	bf00      	nop
 80022c0:	3728      	adds	r7, #40	@ 0x28
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40005400 	.word	0x40005400
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40020400 	.word	0x40020400

080022d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08c      	sub	sp, #48	@ 0x30
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022dc:	f107 031c 	add.w	r3, r7, #28
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	60da      	str	r2, [r3, #12]
 80022ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a36      	ldr	r2, [pc, #216]	@ (80023cc <HAL_UART_MspInit+0xf8>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d135      	bne.n	8002362 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	61bb      	str	r3, [r7, #24]
 80022fa:	4b35      	ldr	r3, [pc, #212]	@ (80023d0 <HAL_UART_MspInit+0xfc>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fe:	4a34      	ldr	r2, [pc, #208]	@ (80023d0 <HAL_UART_MspInit+0xfc>)
 8002300:	f043 0310 	orr.w	r3, r3, #16
 8002304:	6453      	str	r3, [r2, #68]	@ 0x44
 8002306:	4b32      	ldr	r3, [pc, #200]	@ (80023d0 <HAL_UART_MspInit+0xfc>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230a:	f003 0310 	and.w	r3, r3, #16
 800230e:	61bb      	str	r3, [r7, #24]
 8002310:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]
 8002316:	4b2e      	ldr	r3, [pc, #184]	@ (80023d0 <HAL_UART_MspInit+0xfc>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231a:	4a2d      	ldr	r2, [pc, #180]	@ (80023d0 <HAL_UART_MspInit+0xfc>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	6313      	str	r3, [r2, #48]	@ 0x30
 8002322:	4b2b      	ldr	r3, [pc, #172]	@ (80023d0 <HAL_UART_MspInit+0xfc>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RASPBERRY_USART1_TX_Pin|RASPBERRY_USART1_RX_Pin;
 800232e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002334:	2302      	movs	r3, #2
 8002336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	2300      	movs	r3, #0
 800233a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800233c:	2303      	movs	r3, #3
 800233e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002340:	2307      	movs	r3, #7
 8002342:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002344:	f107 031c 	add.w	r3, r7, #28
 8002348:	4619      	mov	r1, r3
 800234a:	4822      	ldr	r0, [pc, #136]	@ (80023d4 <HAL_UART_MspInit+0x100>)
 800234c:	f000 fdde 	bl	8002f0c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002350:	2200      	movs	r2, #0
 8002352:	2100      	movs	r1, #0
 8002354:	2025      	movs	r0, #37	@ 0x25
 8002356:	f000 fd10 	bl	8002d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800235a:	2025      	movs	r0, #37	@ 0x25
 800235c:	f000 fd29 	bl	8002db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002360:	e030      	b.n	80023c4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a1c      	ldr	r2, [pc, #112]	@ (80023d8 <HAL_UART_MspInit+0x104>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d12b      	bne.n	80023c4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800236c:	2300      	movs	r3, #0
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	4b17      	ldr	r3, [pc, #92]	@ (80023d0 <HAL_UART_MspInit+0xfc>)
 8002372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002374:	4a16      	ldr	r2, [pc, #88]	@ (80023d0 <HAL_UART_MspInit+0xfc>)
 8002376:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800237a:	6413      	str	r3, [r2, #64]	@ 0x40
 800237c:	4b14      	ldr	r3, [pc, #80]	@ (80023d0 <HAL_UART_MspInit+0xfc>)
 800237e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002388:	2300      	movs	r3, #0
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	4b10      	ldr	r3, [pc, #64]	@ (80023d0 <HAL_UART_MspInit+0xfc>)
 800238e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002390:	4a0f      	ldr	r2, [pc, #60]	@ (80023d0 <HAL_UART_MspInit+0xfc>)
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	6313      	str	r3, [r2, #48]	@ 0x30
 8002398:	4b0d      	ldr	r3, [pc, #52]	@ (80023d0 <HAL_UART_MspInit+0xfc>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = nucleo_USART2_TX_Pin|nucleo_USART2_RX_Pin;
 80023a4:	230c      	movs	r3, #12
 80023a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a8:	2302      	movs	r3, #2
 80023aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b0:	2303      	movs	r3, #3
 80023b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023b4:	2307      	movs	r3, #7
 80023b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b8:	f107 031c 	add.w	r3, r7, #28
 80023bc:	4619      	mov	r1, r3
 80023be:	4805      	ldr	r0, [pc, #20]	@ (80023d4 <HAL_UART_MspInit+0x100>)
 80023c0:	f000 fda4 	bl	8002f0c <HAL_GPIO_Init>
}
 80023c4:	bf00      	nop
 80023c6:	3730      	adds	r7, #48	@ 0x30
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40011000 	.word	0x40011000
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40020000 	.word	0x40020000
 80023d8:	40004400 	.word	0x40004400

080023dc <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  //HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);//transmission à la nucleo
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF); //transmission à la pi zero
 80023e4:	1d39      	adds	r1, r7, #4
 80023e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023ea:	2201      	movs	r2, #1
 80023ec:	4803      	ldr	r0, [pc, #12]	@ (80023fc <__io_putchar+0x20>)
 80023ee:	f002 fd6d 	bl	8004ecc <HAL_UART_Transmit>
  return ch;
 80023f2:	687b      	ldr	r3, [r7, #4]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	200002c8 	.word	0x200002c8

08002400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002404:	bf00      	nop
 8002406:	e7fd      	b.n	8002404 <NMI_Handler+0x4>

08002408 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800240c:	bf00      	nop
 800240e:	e7fd      	b.n	800240c <HardFault_Handler+0x4>

08002410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002414:	bf00      	nop
 8002416:	e7fd      	b.n	8002414 <MemManage_Handler+0x4>

08002418 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800241c:	bf00      	nop
 800241e:	e7fd      	b.n	800241c <BusFault_Handler+0x4>

08002420 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002424:	bf00      	nop
 8002426:	e7fd      	b.n	8002424 <UsageFault_Handler+0x4>

08002428 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002436:	b480      	push	{r7}
 8002438:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002456:	f000 f961 	bl	800271c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
	...

08002460 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002464:	4802      	ldr	r0, [pc, #8]	@ (8002470 <USART1_IRQHandler+0x10>)
 8002466:	f002 fde1 	bl	800502c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	200002c8 	.word	0x200002c8

08002474 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return 1;
 8002478:	2301      	movs	r3, #1
}
 800247a:	4618      	mov	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <_kill>:

int _kill(int pid, int sig)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800248e:	f004 fe1d 	bl	80070cc <__errno>
 8002492:	4603      	mov	r3, r0
 8002494:	2216      	movs	r2, #22
 8002496:	601a      	str	r2, [r3, #0]
  return -1;
 8002498:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <_exit>:

void _exit (int status)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff ffe7 	bl	8002484 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024b6:	bf00      	nop
 80024b8:	e7fd      	b.n	80024b6 <_exit+0x12>

080024ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b086      	sub	sp, #24
 80024be:	af00      	add	r7, sp, #0
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	e00a      	b.n	80024e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024cc:	f3af 8000 	nop.w
 80024d0:	4601      	mov	r1, r0
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	1c5a      	adds	r2, r3, #1
 80024d6:	60ba      	str	r2, [r7, #8]
 80024d8:	b2ca      	uxtb	r2, r1
 80024da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	3301      	adds	r3, #1
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	dbf0      	blt.n	80024cc <_read+0x12>
  }

  return len;
 80024ea:	687b      	ldr	r3, [r7, #4]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	e009      	b.n	800251a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	60ba      	str	r2, [r7, #8]
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff ff64 	bl	80023dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	3301      	adds	r3, #1
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	429a      	cmp	r2, r3
 8002520:	dbf1      	blt.n	8002506 <_write+0x12>
  }
  return len;
 8002522:	687b      	ldr	r3, [r7, #4]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <_close>:

int _close(int file)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002534:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002538:	4618      	mov	r0, r3
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002554:	605a      	str	r2, [r3, #4]
  return 0;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <_isatty>:

int _isatty(int file)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800256c:	2301      	movs	r3, #1
}
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800257a:	b480      	push	{r7}
 800257c:	b085      	sub	sp, #20
 800257e:	af00      	add	r7, sp, #0
 8002580:	60f8      	str	r0, [r7, #12]
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800259c:	4a14      	ldr	r2, [pc, #80]	@ (80025f0 <_sbrk+0x5c>)
 800259e:	4b15      	ldr	r3, [pc, #84]	@ (80025f4 <_sbrk+0x60>)
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025a8:	4b13      	ldr	r3, [pc, #76]	@ (80025f8 <_sbrk+0x64>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d102      	bne.n	80025b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025b0:	4b11      	ldr	r3, [pc, #68]	@ (80025f8 <_sbrk+0x64>)
 80025b2:	4a12      	ldr	r2, [pc, #72]	@ (80025fc <_sbrk+0x68>)
 80025b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025b6:	4b10      	ldr	r3, [pc, #64]	@ (80025f8 <_sbrk+0x64>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d207      	bcs.n	80025d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025c4:	f004 fd82 	bl	80070cc <__errno>
 80025c8:	4603      	mov	r3, r0
 80025ca:	220c      	movs	r2, #12
 80025cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80025d2:	e009      	b.n	80025e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025d4:	4b08      	ldr	r3, [pc, #32]	@ (80025f8 <_sbrk+0x64>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025da:	4b07      	ldr	r3, [pc, #28]	@ (80025f8 <_sbrk+0x64>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	4a05      	ldr	r2, [pc, #20]	@ (80025f8 <_sbrk+0x64>)
 80025e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025e6:	68fb      	ldr	r3, [r7, #12]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	20020000 	.word	0x20020000
 80025f4:	00000400 	.word	0x00000400
 80025f8:	20000358 	.word	0x20000358
 80025fc:	200004b0 	.word	0x200004b0

08002600 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002604:	4b06      	ldr	r3, [pc, #24]	@ (8002620 <SystemInit+0x20>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800260a:	4a05      	ldr	r2, [pc, #20]	@ (8002620 <SystemInit+0x20>)
 800260c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002610:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002614:	bf00      	nop
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002624:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800265c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002628:	f7ff ffea 	bl	8002600 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800262c:	480c      	ldr	r0, [pc, #48]	@ (8002660 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800262e:	490d      	ldr	r1, [pc, #52]	@ (8002664 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002630:	4a0d      	ldr	r2, [pc, #52]	@ (8002668 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002634:	e002      	b.n	800263c <LoopCopyDataInit>

08002636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800263a:	3304      	adds	r3, #4

0800263c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800263c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800263e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002640:	d3f9      	bcc.n	8002636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002642:	4a0a      	ldr	r2, [pc, #40]	@ (800266c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002644:	4c0a      	ldr	r4, [pc, #40]	@ (8002670 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002648:	e001      	b.n	800264e <LoopFillZerobss>

0800264a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800264a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800264c:	3204      	adds	r2, #4

0800264e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800264e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002650:	d3fb      	bcc.n	800264a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002652:	f004 fd41 	bl	80070d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002656:	f7ff fbb1 	bl	8001dbc <main>
  bx  lr    
 800265a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800265c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002664:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002668:	0800ace0 	.word	0x0800ace0
  ldr r2, =_sbss
 800266c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002670:	200004ac 	.word	0x200004ac

08002674 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002674:	e7fe      	b.n	8002674 <ADC_IRQHandler>
	...

08002678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800267c:	4b0e      	ldr	r3, [pc, #56]	@ (80026b8 <HAL_Init+0x40>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a0d      	ldr	r2, [pc, #52]	@ (80026b8 <HAL_Init+0x40>)
 8002682:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002686:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002688:	4b0b      	ldr	r3, [pc, #44]	@ (80026b8 <HAL_Init+0x40>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a0a      	ldr	r2, [pc, #40]	@ (80026b8 <HAL_Init+0x40>)
 800268e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002692:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002694:	4b08      	ldr	r3, [pc, #32]	@ (80026b8 <HAL_Init+0x40>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a07      	ldr	r2, [pc, #28]	@ (80026b8 <HAL_Init+0x40>)
 800269a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800269e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026a0:	2003      	movs	r0, #3
 80026a2:	f000 fb5f 	bl	8002d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026a6:	2000      	movs	r0, #0
 80026a8:	f000 f808 	bl	80026bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026ac:	f7ff fd5a 	bl	8002164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40023c00 	.word	0x40023c00

080026bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026c4:	4b12      	ldr	r3, [pc, #72]	@ (8002710 <HAL_InitTick+0x54>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4b12      	ldr	r3, [pc, #72]	@ (8002714 <HAL_InitTick+0x58>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	4619      	mov	r1, r3
 80026ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 fb77 	bl	8002dce <HAL_SYSTICK_Config>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e00e      	b.n	8002708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b0f      	cmp	r3, #15
 80026ee:	d80a      	bhi.n	8002706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026f0:	2200      	movs	r2, #0
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80026f8:	f000 fb3f 	bl	8002d7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026fc:	4a06      	ldr	r2, [pc, #24]	@ (8002718 <HAL_InitTick+0x5c>)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
 8002704:	e000      	b.n	8002708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
}
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20000004 	.word	0x20000004
 8002714:	2000000c 	.word	0x2000000c
 8002718:	20000008 	.word	0x20000008

0800271c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002720:	4b06      	ldr	r3, [pc, #24]	@ (800273c <HAL_IncTick+0x20>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	461a      	mov	r2, r3
 8002726:	4b06      	ldr	r3, [pc, #24]	@ (8002740 <HAL_IncTick+0x24>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4413      	add	r3, r2
 800272c:	4a04      	ldr	r2, [pc, #16]	@ (8002740 <HAL_IncTick+0x24>)
 800272e:	6013      	str	r3, [r2, #0]
}
 8002730:	bf00      	nop
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	2000000c 	.word	0x2000000c
 8002740:	2000035c 	.word	0x2000035c

08002744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return uwTick;
 8002748:	4b03      	ldr	r3, [pc, #12]	@ (8002758 <HAL_GetTick+0x14>)
 800274a:	681b      	ldr	r3, [r3, #0]
}
 800274c:	4618      	mov	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	2000035c 	.word	0x2000035c

0800275c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002764:	f7ff ffee 	bl	8002744 <HAL_GetTick>
 8002768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002774:	d005      	beq.n	8002782 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002776:	4b0a      	ldr	r3, [pc, #40]	@ (80027a0 <HAL_Delay+0x44>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4413      	add	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002782:	bf00      	nop
 8002784:	f7ff ffde 	bl	8002744 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	429a      	cmp	r2, r3
 8002792:	d8f7      	bhi.n	8002784 <HAL_Delay+0x28>
  {
  }
}
 8002794:	bf00      	nop
 8002796:	bf00      	nop
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	2000000c 	.word	0x2000000c

080027a4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e0ed      	b.n	8002992 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d102      	bne.n	80027c8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7ff fcf6 	bl	80021b4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f042 0201 	orr.w	r2, r2, #1
 80027d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027d8:	f7ff ffb4 	bl	8002744 <HAL_GetTick>
 80027dc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80027de:	e012      	b.n	8002806 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027e0:	f7ff ffb0 	bl	8002744 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b0a      	cmp	r3, #10
 80027ec:	d90b      	bls.n	8002806 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2205      	movs	r2, #5
 80027fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e0c5      	b.n	8002992 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0e5      	beq.n	80027e0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0202 	bic.w	r2, r2, #2
 8002822:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002824:	f7ff ff8e 	bl	8002744 <HAL_GetTick>
 8002828:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800282a:	e012      	b.n	8002852 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800282c:	f7ff ff8a 	bl	8002744 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b0a      	cmp	r3, #10
 8002838:	d90b      	bls.n	8002852 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2205      	movs	r2, #5
 800284a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e09f      	b.n	8002992 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1e5      	bne.n	800282c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	7e1b      	ldrb	r3, [r3, #24]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d108      	bne.n	800287a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	e007      	b.n	800288a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002888:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	7e5b      	ldrb	r3, [r3, #25]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d108      	bne.n	80028a4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	e007      	b.n	80028b4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	7e9b      	ldrb	r3, [r3, #26]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d108      	bne.n	80028ce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0220 	orr.w	r2, r2, #32
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	e007      	b.n	80028de <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0220 	bic.w	r2, r2, #32
 80028dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	7edb      	ldrb	r3, [r3, #27]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d108      	bne.n	80028f8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0210 	bic.w	r2, r2, #16
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	e007      	b.n	8002908 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0210 	orr.w	r2, r2, #16
 8002906:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	7f1b      	ldrb	r3, [r3, #28]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d108      	bne.n	8002922 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 0208 	orr.w	r2, r2, #8
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	e007      	b.n	8002932 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0208 	bic.w	r2, r2, #8
 8002930:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	7f5b      	ldrb	r3, [r3, #29]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d108      	bne.n	800294c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f042 0204 	orr.w	r2, r2, #4
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	e007      	b.n	800295c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0204 	bic.w	r2, r2, #4
 800295a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	431a      	orrs	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	ea42 0103 	orr.w	r1, r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	1e5a      	subs	r2, r3, #1
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b084      	sub	sp, #16
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d12e      	bne.n	8002a0c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2202      	movs	r2, #2
 80029b2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0201 	bic.w	r2, r2, #1
 80029c4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80029c6:	f7ff febd 	bl	8002744 <HAL_GetTick>
 80029ca:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80029cc:	e012      	b.n	80029f4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029ce:	f7ff feb9 	bl	8002744 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b0a      	cmp	r3, #10
 80029da:	d90b      	bls.n	80029f4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2205      	movs	r2, #5
 80029ec:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e012      	b.n	8002a1a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1e5      	bne.n	80029ce <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	e006      	b.n	8002a1a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a10:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
  }
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b089      	sub	sp, #36	@ 0x24
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	60f8      	str	r0, [r7, #12]
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
 8002a2e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a36:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a40:	7ffb      	ldrb	r3, [r7, #31]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d003      	beq.n	8002a4e <HAL_CAN_AddTxMessage+0x2c>
 8002a46:	7ffb      	ldrb	r3, [r7, #31]
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	f040 80ad 	bne.w	8002ba8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10a      	bne.n	8002a6e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d105      	bne.n	8002a6e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 8095 	beq.w	8002b98 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	0e1b      	lsrs	r3, r3, #24
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002a78:	2201      	movs	r2, #1
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	409a      	lsls	r2, r3
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10d      	bne.n	8002aa6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a94:	68f9      	ldr	r1, [r7, #12]
 8002a96:	6809      	ldr	r1, [r1, #0]
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	3318      	adds	r3, #24
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	440b      	add	r3, r1
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	e00f      	b.n	8002ac6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ab0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ab6:	68f9      	ldr	r1, [r7, #12]
 8002ab8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002aba:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	3318      	adds	r3, #24
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	440b      	add	r3, r1
 8002ac4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6819      	ldr	r1, [r3, #0]
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	691a      	ldr	r2, [r3, #16]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	3318      	adds	r3, #24
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	440b      	add	r3, r1
 8002ad6:	3304      	adds	r3, #4
 8002ad8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	7d1b      	ldrb	r3, [r3, #20]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d111      	bne.n	8002b06 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	3318      	adds	r3, #24
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	4413      	add	r3, r2
 8002aee:	3304      	adds	r3, #4
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	6811      	ldr	r1, [r2, #0]
 8002af6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	3318      	adds	r3, #24
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	440b      	add	r3, r1
 8002b02:	3304      	adds	r3, #4
 8002b04:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3307      	adds	r3, #7
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	061a      	lsls	r2, r3, #24
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3306      	adds	r3, #6
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	041b      	lsls	r3, r3, #16
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3305      	adds	r3, #5
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	021b      	lsls	r3, r3, #8
 8002b20:	4313      	orrs	r3, r2
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	3204      	adds	r2, #4
 8002b26:	7812      	ldrb	r2, [r2, #0]
 8002b28:	4610      	mov	r0, r2
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	6811      	ldr	r1, [r2, #0]
 8002b2e:	ea43 0200 	orr.w	r2, r3, r0
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	011b      	lsls	r3, r3, #4
 8002b36:	440b      	add	r3, r1
 8002b38:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002b3c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	3303      	adds	r3, #3
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	061a      	lsls	r2, r3, #24
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3302      	adds	r3, #2
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	041b      	lsls	r3, r3, #16
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3301      	adds	r3, #1
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	021b      	lsls	r3, r3, #8
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	7812      	ldrb	r2, [r2, #0]
 8002b5e:	4610      	mov	r0, r2
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	6811      	ldr	r1, [r2, #0]
 8002b64:	ea43 0200 	orr.w	r2, r3, r0
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	440b      	add	r3, r1
 8002b6e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002b72:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	3318      	adds	r3, #24
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	4413      	add	r3, r2
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	6811      	ldr	r1, [r2, #0]
 8002b86:	f043 0201 	orr.w	r2, r3, #1
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	3318      	adds	r3, #24
 8002b8e:	011b      	lsls	r3, r3, #4
 8002b90:	440b      	add	r3, r1
 8002b92:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002b94:	2300      	movs	r3, #0
 8002b96:	e00e      	b.n	8002bb6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e006      	b.n	8002bb6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bac:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
  }
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3724      	adds	r7, #36	@ 0x24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
	...

08002bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002c08 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002be0:	4013      	ands	r3, r2
 8002be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bf6:	4a04      	ldr	r2, [pc, #16]	@ (8002c08 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	60d3      	str	r3, [r2, #12]
}
 8002bfc:	bf00      	nop
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	e000ed00 	.word	0xe000ed00

08002c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c10:	4b04      	ldr	r3, [pc, #16]	@ (8002c24 <__NVIC_GetPriorityGrouping+0x18>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	0a1b      	lsrs	r3, r3, #8
 8002c16:	f003 0307 	and.w	r3, r3, #7
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	e000ed00 	.word	0xe000ed00

08002c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	db0b      	blt.n	8002c52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	f003 021f 	and.w	r2, r3, #31
 8002c40:	4907      	ldr	r1, [pc, #28]	@ (8002c60 <__NVIC_EnableIRQ+0x38>)
 8002c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	2001      	movs	r0, #1
 8002c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	e000e100 	.word	0xe000e100

08002c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	6039      	str	r1, [r7, #0]
 8002c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	db0a      	blt.n	8002c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	490c      	ldr	r1, [pc, #48]	@ (8002cb0 <__NVIC_SetPriority+0x4c>)
 8002c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c82:	0112      	lsls	r2, r2, #4
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	440b      	add	r3, r1
 8002c88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c8c:	e00a      	b.n	8002ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	4908      	ldr	r1, [pc, #32]	@ (8002cb4 <__NVIC_SetPriority+0x50>)
 8002c94:	79fb      	ldrb	r3, [r7, #7]
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	3b04      	subs	r3, #4
 8002c9c:	0112      	lsls	r2, r2, #4
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	761a      	strb	r2, [r3, #24]
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	e000e100 	.word	0xe000e100
 8002cb4:	e000ed00 	.word	0xe000ed00

08002cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b089      	sub	sp, #36	@ 0x24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f1c3 0307 	rsb	r3, r3, #7
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	bf28      	it	cs
 8002cd6:	2304      	movcs	r3, #4
 8002cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	3304      	adds	r3, #4
 8002cde:	2b06      	cmp	r3, #6
 8002ce0:	d902      	bls.n	8002ce8 <NVIC_EncodePriority+0x30>
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	3b03      	subs	r3, #3
 8002ce6:	e000      	b.n	8002cea <NVIC_EncodePriority+0x32>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	43da      	mvns	r2, r3
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	401a      	ands	r2, r3
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d00:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0a:	43d9      	mvns	r1, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d10:	4313      	orrs	r3, r2
         );
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3724      	adds	r7, #36	@ 0x24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
	...

08002d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d30:	d301      	bcc.n	8002d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d32:	2301      	movs	r3, #1
 8002d34:	e00f      	b.n	8002d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d36:	4a0a      	ldr	r2, [pc, #40]	@ (8002d60 <SysTick_Config+0x40>)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d3e:	210f      	movs	r1, #15
 8002d40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d44:	f7ff ff8e 	bl	8002c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d48:	4b05      	ldr	r3, [pc, #20]	@ (8002d60 <SysTick_Config+0x40>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d4e:	4b04      	ldr	r3, [pc, #16]	@ (8002d60 <SysTick_Config+0x40>)
 8002d50:	2207      	movs	r2, #7
 8002d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	e000e010 	.word	0xe000e010

08002d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff ff29 	bl	8002bc4 <__NVIC_SetPriorityGrouping>
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b086      	sub	sp, #24
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	4603      	mov	r3, r0
 8002d82:	60b9      	str	r1, [r7, #8]
 8002d84:	607a      	str	r2, [r7, #4]
 8002d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d8c:	f7ff ff3e 	bl	8002c0c <__NVIC_GetPriorityGrouping>
 8002d90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	68b9      	ldr	r1, [r7, #8]
 8002d96:	6978      	ldr	r0, [r7, #20]
 8002d98:	f7ff ff8e 	bl	8002cb8 <NVIC_EncodePriority>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002da2:	4611      	mov	r1, r2
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff ff5d 	bl	8002c64 <__NVIC_SetPriority>
}
 8002daa:	bf00      	nop
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	4603      	mov	r3, r0
 8002dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff ff31 	bl	8002c28 <__NVIC_EnableIRQ>
}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7ff ffa2 	bl	8002d20 <SysTick_Config>
 8002ddc:	4603      	mov	r3, r0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b084      	sub	sp, #16
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002df4:	f7ff fca6 	bl	8002744 <HAL_GetTick>
 8002df8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d008      	beq.n	8002e18 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2280      	movs	r2, #128	@ 0x80
 8002e0a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e052      	b.n	8002ebe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0216 	bic.w	r2, r2, #22
 8002e26:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e36:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d103      	bne.n	8002e48 <HAL_DMA_Abort+0x62>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d007      	beq.n	8002e58 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0208 	bic.w	r2, r2, #8
 8002e56:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0201 	bic.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e68:	e013      	b.n	8002e92 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e6a:	f7ff fc6b 	bl	8002744 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b05      	cmp	r3, #5
 8002e76:	d90c      	bls.n	8002e92 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2203      	movs	r2, #3
 8002e82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e015      	b.n	8002ebe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1e4      	bne.n	8002e6a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea4:	223f      	movs	r2, #63	@ 0x3f
 8002ea6:	409a      	lsls	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d004      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2280      	movs	r2, #128	@ 0x80
 8002ede:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e00c      	b.n	8002efe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2205      	movs	r2, #5
 8002ee8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0201 	bic.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
	...

08002f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b089      	sub	sp, #36	@ 0x24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f22:	2300      	movs	r3, #0
 8002f24:	61fb      	str	r3, [r7, #28]
 8002f26:	e165      	b.n	80031f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f28:	2201      	movs	r2, #1
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	f040 8154 	bne.w	80031ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d005      	beq.n	8002f5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d130      	bne.n	8002fc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	2203      	movs	r2, #3
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4013      	ands	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f94:	2201      	movs	r2, #1
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	091b      	lsrs	r3, r3, #4
 8002faa:	f003 0201 	and.w	r2, r3, #1
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f003 0303 	and.w	r3, r3, #3
 8002fc8:	2b03      	cmp	r3, #3
 8002fca:	d017      	beq.n	8002ffc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	2203      	movs	r2, #3
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f003 0303 	and.w	r3, r3, #3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d123      	bne.n	8003050 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	08da      	lsrs	r2, r3, #3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3208      	adds	r2, #8
 8003010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003014:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	220f      	movs	r2, #15
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	43db      	mvns	r3, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4013      	ands	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	691a      	ldr	r2, [r3, #16]
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4313      	orrs	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	08da      	lsrs	r2, r3, #3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3208      	adds	r2, #8
 800304a:	69b9      	ldr	r1, [r7, #24]
 800304c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	2203      	movs	r2, #3
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	43db      	mvns	r3, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4013      	ands	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 0203 	and.w	r2, r3, #3
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4313      	orrs	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 80ae 	beq.w	80031ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	4b5d      	ldr	r3, [pc, #372]	@ (800320c <HAL_GPIO_Init+0x300>)
 8003098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800309a:	4a5c      	ldr	r2, [pc, #368]	@ (800320c <HAL_GPIO_Init+0x300>)
 800309c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80030a2:	4b5a      	ldr	r3, [pc, #360]	@ (800320c <HAL_GPIO_Init+0x300>)
 80030a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030ae:	4a58      	ldr	r2, [pc, #352]	@ (8003210 <HAL_GPIO_Init+0x304>)
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	089b      	lsrs	r3, r3, #2
 80030b4:	3302      	adds	r3, #2
 80030b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	220f      	movs	r2, #15
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	43db      	mvns	r3, r3
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	4013      	ands	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a4f      	ldr	r2, [pc, #316]	@ (8003214 <HAL_GPIO_Init+0x308>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d025      	beq.n	8003126 <HAL_GPIO_Init+0x21a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a4e      	ldr	r2, [pc, #312]	@ (8003218 <HAL_GPIO_Init+0x30c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d01f      	beq.n	8003122 <HAL_GPIO_Init+0x216>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a4d      	ldr	r2, [pc, #308]	@ (800321c <HAL_GPIO_Init+0x310>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d019      	beq.n	800311e <HAL_GPIO_Init+0x212>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a4c      	ldr	r2, [pc, #304]	@ (8003220 <HAL_GPIO_Init+0x314>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d013      	beq.n	800311a <HAL_GPIO_Init+0x20e>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a4b      	ldr	r2, [pc, #300]	@ (8003224 <HAL_GPIO_Init+0x318>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d00d      	beq.n	8003116 <HAL_GPIO_Init+0x20a>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a4a      	ldr	r2, [pc, #296]	@ (8003228 <HAL_GPIO_Init+0x31c>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d007      	beq.n	8003112 <HAL_GPIO_Init+0x206>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a49      	ldr	r2, [pc, #292]	@ (800322c <HAL_GPIO_Init+0x320>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d101      	bne.n	800310e <HAL_GPIO_Init+0x202>
 800310a:	2306      	movs	r3, #6
 800310c:	e00c      	b.n	8003128 <HAL_GPIO_Init+0x21c>
 800310e:	2307      	movs	r3, #7
 8003110:	e00a      	b.n	8003128 <HAL_GPIO_Init+0x21c>
 8003112:	2305      	movs	r3, #5
 8003114:	e008      	b.n	8003128 <HAL_GPIO_Init+0x21c>
 8003116:	2304      	movs	r3, #4
 8003118:	e006      	b.n	8003128 <HAL_GPIO_Init+0x21c>
 800311a:	2303      	movs	r3, #3
 800311c:	e004      	b.n	8003128 <HAL_GPIO_Init+0x21c>
 800311e:	2302      	movs	r3, #2
 8003120:	e002      	b.n	8003128 <HAL_GPIO_Init+0x21c>
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <HAL_GPIO_Init+0x21c>
 8003126:	2300      	movs	r3, #0
 8003128:	69fa      	ldr	r2, [r7, #28]
 800312a:	f002 0203 	and.w	r2, r2, #3
 800312e:	0092      	lsls	r2, r2, #2
 8003130:	4093      	lsls	r3, r2
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	4313      	orrs	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003138:	4935      	ldr	r1, [pc, #212]	@ (8003210 <HAL_GPIO_Init+0x304>)
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	089b      	lsrs	r3, r3, #2
 800313e:	3302      	adds	r3, #2
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003146:	4b3a      	ldr	r3, [pc, #232]	@ (8003230 <HAL_GPIO_Init+0x324>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	43db      	mvns	r3, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4013      	ands	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	4313      	orrs	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800316a:	4a31      	ldr	r2, [pc, #196]	@ (8003230 <HAL_GPIO_Init+0x324>)
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003170:	4b2f      	ldr	r3, [pc, #188]	@ (8003230 <HAL_GPIO_Init+0x324>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	43db      	mvns	r3, r3
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	4013      	ands	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d003      	beq.n	8003194 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	4313      	orrs	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003194:	4a26      	ldr	r2, [pc, #152]	@ (8003230 <HAL_GPIO_Init+0x324>)
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800319a:	4b25      	ldr	r3, [pc, #148]	@ (8003230 <HAL_GPIO_Init+0x324>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	43db      	mvns	r3, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4013      	ands	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031be:	4a1c      	ldr	r2, [pc, #112]	@ (8003230 <HAL_GPIO_Init+0x324>)
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003230 <HAL_GPIO_Init+0x324>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	43db      	mvns	r3, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4013      	ands	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031e8:	4a11      	ldr	r2, [pc, #68]	@ (8003230 <HAL_GPIO_Init+0x324>)
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	3301      	adds	r3, #1
 80031f2:	61fb      	str	r3, [r7, #28]
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	2b0f      	cmp	r3, #15
 80031f8:	f67f ae96 	bls.w	8002f28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031fc:	bf00      	nop
 80031fe:	bf00      	nop
 8003200:	3724      	adds	r7, #36	@ 0x24
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	40023800 	.word	0x40023800
 8003210:	40013800 	.word	0x40013800
 8003214:	40020000 	.word	0x40020000
 8003218:	40020400 	.word	0x40020400
 800321c:	40020800 	.word	0x40020800
 8003220:	40020c00 	.word	0x40020c00
 8003224:	40021000 	.word	0x40021000
 8003228:	40021400 	.word	0x40021400
 800322c:	40021800 	.word	0x40021800
 8003230:	40013c00 	.word	0x40013c00

08003234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	460b      	mov	r3, r1
 800323e:	807b      	strh	r3, [r7, #2]
 8003240:	4613      	mov	r3, r2
 8003242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003244:	787b      	ldrb	r3, [r7, #1]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800324a:	887a      	ldrh	r2, [r7, #2]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003250:	e003      	b.n	800325a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003252:	887b      	ldrh	r3, [r7, #2]
 8003254:	041a      	lsls	r2, r3, #16
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	619a      	str	r2, [r3, #24]
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
	...

08003268 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e12b      	b.n	80034d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d106      	bne.n	8003294 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7fe ffd8 	bl	8002244 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2224      	movs	r2, #36	@ 0x24
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0201 	bic.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032cc:	f001 f8b8 	bl	8004440 <HAL_RCC_GetPCLK1Freq>
 80032d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	4a81      	ldr	r2, [pc, #516]	@ (80034dc <HAL_I2C_Init+0x274>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d807      	bhi.n	80032ec <HAL_I2C_Init+0x84>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4a80      	ldr	r2, [pc, #512]	@ (80034e0 <HAL_I2C_Init+0x278>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	bf94      	ite	ls
 80032e4:	2301      	movls	r3, #1
 80032e6:	2300      	movhi	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	e006      	b.n	80032fa <HAL_I2C_Init+0x92>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4a7d      	ldr	r2, [pc, #500]	@ (80034e4 <HAL_I2C_Init+0x27c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	bf94      	ite	ls
 80032f4:	2301      	movls	r3, #1
 80032f6:	2300      	movhi	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e0e7      	b.n	80034d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4a78      	ldr	r2, [pc, #480]	@ (80034e8 <HAL_I2C_Init+0x280>)
 8003306:	fba2 2303 	umull	r2, r3, r2, r3
 800330a:	0c9b      	lsrs	r3, r3, #18
 800330c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68ba      	ldr	r2, [r7, #8]
 800331e:	430a      	orrs	r2, r1
 8003320:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	4a6a      	ldr	r2, [pc, #424]	@ (80034dc <HAL_I2C_Init+0x274>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d802      	bhi.n	800333c <HAL_I2C_Init+0xd4>
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	3301      	adds	r3, #1
 800333a:	e009      	b.n	8003350 <HAL_I2C_Init+0xe8>
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003342:	fb02 f303 	mul.w	r3, r2, r3
 8003346:	4a69      	ldr	r2, [pc, #420]	@ (80034ec <HAL_I2C_Init+0x284>)
 8003348:	fba2 2303 	umull	r2, r3, r2, r3
 800334c:	099b      	lsrs	r3, r3, #6
 800334e:	3301      	adds	r3, #1
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6812      	ldr	r2, [r2, #0]
 8003354:	430b      	orrs	r3, r1
 8003356:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003362:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	495c      	ldr	r1, [pc, #368]	@ (80034dc <HAL_I2C_Init+0x274>)
 800336c:	428b      	cmp	r3, r1
 800336e:	d819      	bhi.n	80033a4 <HAL_I2C_Init+0x13c>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	1e59      	subs	r1, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	fbb1 f3f3 	udiv	r3, r1, r3
 800337e:	1c59      	adds	r1, r3, #1
 8003380:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003384:	400b      	ands	r3, r1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <HAL_I2C_Init+0x138>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	1e59      	subs	r1, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	fbb1 f3f3 	udiv	r3, r1, r3
 8003398:	3301      	adds	r3, #1
 800339a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800339e:	e051      	b.n	8003444 <HAL_I2C_Init+0x1dc>
 80033a0:	2304      	movs	r3, #4
 80033a2:	e04f      	b.n	8003444 <HAL_I2C_Init+0x1dc>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d111      	bne.n	80033d0 <HAL_I2C_Init+0x168>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	1e58      	subs	r0, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6859      	ldr	r1, [r3, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	440b      	add	r3, r1
 80033ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80033be:	3301      	adds	r3, #1
 80033c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	bf0c      	ite	eq
 80033c8:	2301      	moveq	r3, #1
 80033ca:	2300      	movne	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	e012      	b.n	80033f6 <HAL_I2C_Init+0x18e>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	1e58      	subs	r0, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6859      	ldr	r1, [r3, #4]
 80033d8:	460b      	mov	r3, r1
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	0099      	lsls	r1, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033e6:	3301      	adds	r3, #1
 80033e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	bf0c      	ite	eq
 80033f0:	2301      	moveq	r3, #1
 80033f2:	2300      	movne	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_I2C_Init+0x196>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e022      	b.n	8003444 <HAL_I2C_Init+0x1dc>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10e      	bne.n	8003424 <HAL_I2C_Init+0x1bc>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	1e58      	subs	r0, r3, #1
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6859      	ldr	r1, [r3, #4]
 800340e:	460b      	mov	r3, r1
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	440b      	add	r3, r1
 8003414:	fbb0 f3f3 	udiv	r3, r0, r3
 8003418:	3301      	adds	r3, #1
 800341a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800341e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003422:	e00f      	b.n	8003444 <HAL_I2C_Init+0x1dc>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	1e58      	subs	r0, r3, #1
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6859      	ldr	r1, [r3, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	0099      	lsls	r1, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	fbb0 f3f3 	udiv	r3, r0, r3
 800343a:	3301      	adds	r3, #1
 800343c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003440:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	6809      	ldr	r1, [r1, #0]
 8003448:	4313      	orrs	r3, r2
 800344a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69da      	ldr	r2, [r3, #28]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003472:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6911      	ldr	r1, [r2, #16]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	68d2      	ldr	r2, [r2, #12]
 800347e:	4311      	orrs	r1, r2
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6812      	ldr	r2, [r2, #0]
 8003484:	430b      	orrs	r3, r1
 8003486:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	695a      	ldr	r2, [r3, #20]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0201 	orr.w	r2, r2, #1
 80034b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2220      	movs	r2, #32
 80034be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	000186a0 	.word	0x000186a0
 80034e0:	001e847f 	.word	0x001e847f
 80034e4:	003d08ff 	.word	0x003d08ff
 80034e8:	431bde83 	.word	0x431bde83
 80034ec:	10624dd3 	.word	0x10624dd3

080034f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b088      	sub	sp, #32
 80034f4:	af02      	add	r7, sp, #8
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	607a      	str	r2, [r7, #4]
 80034fa:	461a      	mov	r2, r3
 80034fc:	460b      	mov	r3, r1
 80034fe:	817b      	strh	r3, [r7, #10]
 8003500:	4613      	mov	r3, r2
 8003502:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003504:	f7ff f91e 	bl	8002744 <HAL_GetTick>
 8003508:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b20      	cmp	r3, #32
 8003514:	f040 80e0 	bne.w	80036d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	2319      	movs	r3, #25
 800351e:	2201      	movs	r2, #1
 8003520:	4970      	ldr	r1, [pc, #448]	@ (80036e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 fc64 	bl	8003df0 <I2C_WaitOnFlagUntilTimeout>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800352e:	2302      	movs	r3, #2
 8003530:	e0d3      	b.n	80036da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003538:	2b01      	cmp	r3, #1
 800353a:	d101      	bne.n	8003540 <HAL_I2C_Master_Transmit+0x50>
 800353c:	2302      	movs	r3, #2
 800353e:	e0cc      	b.n	80036da <HAL_I2C_Master_Transmit+0x1ea>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b01      	cmp	r3, #1
 8003554:	d007      	beq.n	8003566 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f042 0201 	orr.w	r2, r2, #1
 8003564:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003574:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2221      	movs	r2, #33	@ 0x21
 800357a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2210      	movs	r2, #16
 8003582:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	893a      	ldrh	r2, [r7, #8]
 8003596:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	4a50      	ldr	r2, [pc, #320]	@ (80036e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80035a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035a8:	8979      	ldrh	r1, [r7, #10]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	6a3a      	ldr	r2, [r7, #32]
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 face 	bl	8003b50 <I2C_MasterRequestWrite>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e08d      	b.n	80036da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035be:	2300      	movs	r3, #0
 80035c0:	613b      	str	r3, [r7, #16]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	613b      	str	r3, [r7, #16]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	613b      	str	r3, [r7, #16]
 80035d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80035d4:	e066      	b.n	80036a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	6a39      	ldr	r1, [r7, #32]
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 fd22 	bl	8004024 <I2C_WaitOnTXEFlagUntilTimeout>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00d      	beq.n	8003602 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	d107      	bne.n	80035fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e06b      	b.n	80036da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003606:	781a      	ldrb	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361c:	b29b      	uxth	r3, r3
 800361e:	3b01      	subs	r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800362a:	3b01      	subs	r3, #1
 800362c:	b29a      	uxth	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b04      	cmp	r3, #4
 800363e:	d11b      	bne.n	8003678 <HAL_I2C_Master_Transmit+0x188>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003644:	2b00      	cmp	r3, #0
 8003646:	d017      	beq.n	8003678 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364c:	781a      	ldrb	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003658:	1c5a      	adds	r2, r3, #1
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003662:	b29b      	uxth	r3, r3
 8003664:	3b01      	subs	r3, #1
 8003666:	b29a      	uxth	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003670:	3b01      	subs	r3, #1
 8003672:	b29a      	uxth	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	6a39      	ldr	r1, [r7, #32]
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 fd19 	bl	80040b4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00d      	beq.n	80036a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368c:	2b04      	cmp	r3, #4
 800368e:	d107      	bne.n	80036a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800369e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e01a      	b.n	80036da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d194      	bne.n	80035d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2220      	movs	r2, #32
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80036d4:	2300      	movs	r3, #0
 80036d6:	e000      	b.n	80036da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80036d8:	2302      	movs	r3, #2
  }
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3718      	adds	r7, #24
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	00100002 	.word	0x00100002
 80036e8:	ffff0000 	.word	0xffff0000

080036ec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b08c      	sub	sp, #48	@ 0x30
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	607a      	str	r2, [r7, #4]
 80036f6:	461a      	mov	r2, r3
 80036f8:	460b      	mov	r3, r1
 80036fa:	817b      	strh	r3, [r7, #10]
 80036fc:	4613      	mov	r3, r2
 80036fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003700:	f7ff f820 	bl	8002744 <HAL_GetTick>
 8003704:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b20      	cmp	r3, #32
 8003710:	f040 8217 	bne.w	8003b42 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	2319      	movs	r3, #25
 800371a:	2201      	movs	r2, #1
 800371c:	497c      	ldr	r1, [pc, #496]	@ (8003910 <HAL_I2C_Master_Receive+0x224>)
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 fb66 	bl	8003df0 <I2C_WaitOnFlagUntilTimeout>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800372a:	2302      	movs	r3, #2
 800372c:	e20a      	b.n	8003b44 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003734:	2b01      	cmp	r3, #1
 8003736:	d101      	bne.n	800373c <HAL_I2C_Master_Receive+0x50>
 8003738:	2302      	movs	r3, #2
 800373a:	e203      	b.n	8003b44 <HAL_I2C_Master_Receive+0x458>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b01      	cmp	r3, #1
 8003750:	d007      	beq.n	8003762 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f042 0201 	orr.w	r2, r2, #1
 8003760:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003770:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2222      	movs	r2, #34	@ 0x22
 8003776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2210      	movs	r2, #16
 800377e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	893a      	ldrh	r2, [r7, #8]
 8003792:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	4a5c      	ldr	r2, [pc, #368]	@ (8003914 <HAL_I2C_Master_Receive+0x228>)
 80037a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80037a4:	8979      	ldrh	r1, [r7, #10]
 80037a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 fa52 	bl	8003c54 <I2C_MasterRequestRead>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e1c4      	b.n	8003b44 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d113      	bne.n	80037ea <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037c2:	2300      	movs	r3, #0
 80037c4:	623b      	str	r3, [r7, #32]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	623b      	str	r3, [r7, #32]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	623b      	str	r3, [r7, #32]
 80037d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	e198      	b.n	8003b1c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d11b      	bne.n	800382a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003800:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003802:	2300      	movs	r3, #0
 8003804:	61fb      	str	r3, [r7, #28]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	61fb      	str	r3, [r7, #28]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	61fb      	str	r3, [r7, #28]
 8003816:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	e178      	b.n	8003b1c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800382e:	2b02      	cmp	r3, #2
 8003830:	d11b      	bne.n	800386a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003840:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003850:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003852:	2300      	movs	r3, #0
 8003854:	61bb      	str	r3, [r7, #24]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	61bb      	str	r3, [r7, #24]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	61bb      	str	r3, [r7, #24]
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	e158      	b.n	8003b1c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003878:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800387a:	2300      	movs	r3, #0
 800387c:	617b      	str	r3, [r7, #20]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	617b      	str	r3, [r7, #20]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	617b      	str	r3, [r7, #20]
 800388e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003890:	e144      	b.n	8003b1c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003896:	2b03      	cmp	r3, #3
 8003898:	f200 80f1 	bhi.w	8003a7e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d123      	bne.n	80038ec <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 fc4b 	bl	8004144 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e145      	b.n	8003b44 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691a      	ldr	r2, [r3, #16]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ca:	1c5a      	adds	r2, r3, #1
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80038ea:	e117      	b.n	8003b1c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d14e      	bne.n	8003992 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038fa:	2200      	movs	r2, #0
 80038fc:	4906      	ldr	r1, [pc, #24]	@ (8003918 <HAL_I2C_Master_Receive+0x22c>)
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 fa76 	bl	8003df0 <I2C_WaitOnFlagUntilTimeout>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d008      	beq.n	800391c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e11a      	b.n	8003b44 <HAL_I2C_Master_Receive+0x458>
 800390e:	bf00      	nop
 8003910:	00100002 	.word	0x00100002
 8003914:	ffff0000 	.word	0xffff0000
 8003918:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800392a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691a      	ldr	r2, [r3, #16]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003936:	b2d2      	uxtb	r2, r2
 8003938:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003948:	3b01      	subs	r3, #1
 800394a:	b29a      	uxth	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003954:	b29b      	uxth	r3, r3
 8003956:	3b01      	subs	r3, #1
 8003958:	b29a      	uxth	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	691a      	ldr	r2, [r3, #16]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003968:	b2d2      	uxtb	r2, r2
 800396a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003970:	1c5a      	adds	r2, r3, #1
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800397a:	3b01      	subs	r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003986:	b29b      	uxth	r3, r3
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003990:	e0c4      	b.n	8003b1c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003998:	2200      	movs	r2, #0
 800399a:	496c      	ldr	r1, [pc, #432]	@ (8003b4c <HAL_I2C_Master_Receive+0x460>)
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 fa27 	bl	8003df0 <I2C_WaitOnFlagUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e0cb      	b.n	8003b44 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	691a      	ldr	r2, [r3, #16]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	3b01      	subs	r3, #1
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f4:	2200      	movs	r2, #0
 80039f6:	4955      	ldr	r1, [pc, #340]	@ (8003b4c <HAL_I2C_Master_Receive+0x460>)
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 f9f9 	bl	8003df0 <I2C_WaitOnFlagUntilTimeout>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e09d      	b.n	8003b44 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	691a      	ldr	r2, [r3, #16]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2a:	1c5a      	adds	r2, r3, #1
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	3b01      	subs	r3, #1
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	691a      	ldr	r2, [r3, #16]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5c:	1c5a      	adds	r2, r3, #1
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a7c:	e04e      	b.n	8003b1c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a80:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 fb5e 	bl	8004144 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e058      	b.n	8003b44 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	691a      	ldr	r2, [r3, #16]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa4:	1c5a      	adds	r2, r3, #1
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d124      	bne.n	8003b1c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	d107      	bne.n	8003aea <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ae8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af4:	b2d2      	uxtb	r2, r2
 8003af6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b06:	3b01      	subs	r3, #1
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f47f aeb6 	bne.w	8003892 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	e000      	b.n	8003b44 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003b42:	2302      	movs	r3, #2
  }
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3728      	adds	r7, #40	@ 0x28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	00010004 	.word	0x00010004

08003b50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b088      	sub	sp, #32
 8003b54:	af02      	add	r7, sp, #8
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	607a      	str	r2, [r7, #4]
 8003b5a:	603b      	str	r3, [r7, #0]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d006      	beq.n	8003b7a <I2C_MasterRequestWrite+0x2a>
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d003      	beq.n	8003b7a <I2C_MasterRequestWrite+0x2a>
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b78:	d108      	bne.n	8003b8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	e00b      	b.n	8003ba4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b90:	2b12      	cmp	r3, #18
 8003b92:	d107      	bne.n	8003ba4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ba2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 f91d 	bl	8003df0 <I2C_WaitOnFlagUntilTimeout>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00d      	beq.n	8003bd8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bca:	d103      	bne.n	8003bd4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bd2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e035      	b.n	8003c44 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003be0:	d108      	bne.n	8003bf4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003be2:	897b      	ldrh	r3, [r7, #10]
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	461a      	mov	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003bf0:	611a      	str	r2, [r3, #16]
 8003bf2:	e01b      	b.n	8003c2c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003bf4:	897b      	ldrh	r3, [r7, #10]
 8003bf6:	11db      	asrs	r3, r3, #7
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	f003 0306 	and.w	r3, r3, #6
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	f063 030f 	orn	r3, r3, #15
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	490e      	ldr	r1, [pc, #56]	@ (8003c4c <I2C_MasterRequestWrite+0xfc>)
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 f966 	bl	8003ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e010      	b.n	8003c44 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c22:	897b      	ldrh	r3, [r7, #10]
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	4907      	ldr	r1, [pc, #28]	@ (8003c50 <I2C_MasterRequestWrite+0x100>)
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f000 f956 	bl	8003ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e000      	b.n	8003c44 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3718      	adds	r7, #24
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	00010008 	.word	0x00010008
 8003c50:	00010002 	.word	0x00010002

08003c54 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b088      	sub	sp, #32
 8003c58:	af02      	add	r7, sp, #8
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	607a      	str	r2, [r7, #4]
 8003c5e:	603b      	str	r3, [r7, #0]
 8003c60:	460b      	mov	r3, r1
 8003c62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c68:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c78:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d006      	beq.n	8003c8e <I2C_MasterRequestRead+0x3a>
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d003      	beq.n	8003c8e <I2C_MasterRequestRead+0x3a>
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c8c:	d108      	bne.n	8003ca0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	e00b      	b.n	8003cb8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca4:	2b11      	cmp	r3, #17
 8003ca6:	d107      	bne.n	8003cb8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cb6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 f893 	bl	8003df0 <I2C_WaitOnFlagUntilTimeout>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00d      	beq.n	8003cec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cde:	d103      	bne.n	8003ce8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ce6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e079      	b.n	8003de0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cf4:	d108      	bne.n	8003d08 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003cf6:	897b      	ldrh	r3, [r7, #10]
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	f043 0301 	orr.w	r3, r3, #1
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	611a      	str	r2, [r3, #16]
 8003d06:	e05f      	b.n	8003dc8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d08:	897b      	ldrh	r3, [r7, #10]
 8003d0a:	11db      	asrs	r3, r3, #7
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	f003 0306 	and.w	r3, r3, #6
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	f063 030f 	orn	r3, r3, #15
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	4930      	ldr	r1, [pc, #192]	@ (8003de8 <I2C_MasterRequestRead+0x194>)
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f000 f8dc 	bl	8003ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e054      	b.n	8003de0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d36:	897b      	ldrh	r3, [r7, #10]
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	4929      	ldr	r1, [pc, #164]	@ (8003dec <I2C_MasterRequestRead+0x198>)
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 f8cc 	bl	8003ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e044      	b.n	8003de0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d56:	2300      	movs	r3, #0
 8003d58:	613b      	str	r3, [r7, #16]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	613b      	str	r3, [r7, #16]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	613b      	str	r3, [r7, #16]
 8003d6a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d7a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 f831 	bl	8003df0 <I2C_WaitOnFlagUntilTimeout>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00d      	beq.n	8003db0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003da2:	d103      	bne.n	8003dac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003daa:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e017      	b.n	8003de0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003db0:	897b      	ldrh	r3, [r7, #10]
 8003db2:	11db      	asrs	r3, r3, #7
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	f003 0306 	and.w	r3, r3, #6
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	f063 030e 	orn	r3, r3, #14
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	4907      	ldr	r1, [pc, #28]	@ (8003dec <I2C_MasterRequestRead+0x198>)
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 f888 	bl	8003ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e000      	b.n	8003de0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	00010008 	.word	0x00010008
 8003dec:	00010002 	.word	0x00010002

08003df0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	603b      	str	r3, [r7, #0]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e00:	e048      	b.n	8003e94 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e08:	d044      	beq.n	8003e94 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e0a:	f7fe fc9b 	bl	8002744 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d302      	bcc.n	8003e20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d139      	bne.n	8003e94 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	0c1b      	lsrs	r3, r3, #16
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d10d      	bne.n	8003e46 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	43da      	mvns	r2, r3
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	4013      	ands	r3, r2
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	bf0c      	ite	eq
 8003e3c:	2301      	moveq	r3, #1
 8003e3e:	2300      	movne	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	461a      	mov	r2, r3
 8003e44:	e00c      	b.n	8003e60 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	43da      	mvns	r2, r3
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	4013      	ands	r3, r2
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	bf0c      	ite	eq
 8003e58:	2301      	moveq	r3, #1
 8003e5a:	2300      	movne	r3, #0
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	461a      	mov	r2, r3
 8003e60:	79fb      	ldrb	r3, [r7, #7]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d116      	bne.n	8003e94 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e80:	f043 0220 	orr.w	r2, r3, #32
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e023      	b.n	8003edc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	0c1b      	lsrs	r3, r3, #16
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d10d      	bne.n	8003eba <I2C_WaitOnFlagUntilTimeout+0xca>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	43da      	mvns	r2, r3
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	bf0c      	ite	eq
 8003eb0:	2301      	moveq	r3, #1
 8003eb2:	2300      	movne	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	e00c      	b.n	8003ed4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	43da      	mvns	r2, r3
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	bf0c      	ite	eq
 8003ecc:	2301      	moveq	r3, #1
 8003ece:	2300      	movne	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	79fb      	ldrb	r3, [r7, #7]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d093      	beq.n	8003e02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ef2:	e071      	b.n	8003fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003efe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f02:	d123      	bne.n	8003f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f12:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2220      	movs	r2, #32
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f38:	f043 0204 	orr.w	r2, r3, #4
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e067      	b.n	800401c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f52:	d041      	beq.n	8003fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f54:	f7fe fbf6 	bl	8002744 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d302      	bcc.n	8003f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d136      	bne.n	8003fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	0c1b      	lsrs	r3, r3, #16
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d10c      	bne.n	8003f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	43da      	mvns	r2, r3
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	bf14      	ite	ne
 8003f86:	2301      	movne	r3, #1
 8003f88:	2300      	moveq	r3, #0
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	e00b      	b.n	8003fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	43da      	mvns	r2, r3
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	bf14      	ite	ne
 8003fa0:	2301      	movne	r3, #1
 8003fa2:	2300      	moveq	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d016      	beq.n	8003fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc4:	f043 0220 	orr.w	r2, r3, #32
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e021      	b.n	800401c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	0c1b      	lsrs	r3, r3, #16
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d10c      	bne.n	8003ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	43da      	mvns	r2, r3
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	4013      	ands	r3, r2
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	bf14      	ite	ne
 8003ff4:	2301      	movne	r3, #1
 8003ff6:	2300      	moveq	r3, #0
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	e00b      	b.n	8004014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	43da      	mvns	r2, r3
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	4013      	ands	r3, r2
 8004008:	b29b      	uxth	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	bf14      	ite	ne
 800400e:	2301      	movne	r3, #1
 8004010:	2300      	moveq	r3, #0
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	f47f af6d 	bne.w	8003ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004030:	e034      	b.n	800409c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 f8e3 	bl	80041fe <I2C_IsAcknowledgeFailed>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e034      	b.n	80040ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004048:	d028      	beq.n	800409c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800404a:	f7fe fb7b 	bl	8002744 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	429a      	cmp	r2, r3
 8004058:	d302      	bcc.n	8004060 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d11d      	bne.n	800409c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800406a:	2b80      	cmp	r3, #128	@ 0x80
 800406c:	d016      	beq.n	800409c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004088:	f043 0220 	orr.w	r2, r3, #32
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e007      	b.n	80040ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040a6:	2b80      	cmp	r3, #128	@ 0x80
 80040a8:	d1c3      	bne.n	8004032 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040c0:	e034      	b.n	800412c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 f89b 	bl	80041fe <I2C_IsAcknowledgeFailed>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e034      	b.n	800413c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040d8:	d028      	beq.n	800412c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040da:	f7fe fb33 	bl	8002744 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d302      	bcc.n	80040f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d11d      	bne.n	800412c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	f003 0304 	and.w	r3, r3, #4
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d016      	beq.n	800412c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2220      	movs	r2, #32
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004118:	f043 0220 	orr.w	r2, r3, #32
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e007      	b.n	800413c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	f003 0304 	and.w	r3, r3, #4
 8004136:	2b04      	cmp	r3, #4
 8004138:	d1c3      	bne.n	80040c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004150:	e049      	b.n	80041e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	f003 0310 	and.w	r3, r3, #16
 800415c:	2b10      	cmp	r3, #16
 800415e:	d119      	bne.n	8004194 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f06f 0210 	mvn.w	r2, #16
 8004168:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e030      	b.n	80041f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004194:	f7fe fad6 	bl	8002744 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d302      	bcc.n	80041aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d11d      	bne.n	80041e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b4:	2b40      	cmp	r3, #64	@ 0x40
 80041b6:	d016      	beq.n	80041e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2220      	movs	r2, #32
 80041c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d2:	f043 0220 	orr.w	r2, r3, #32
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e007      	b.n	80041f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041f0:	2b40      	cmp	r3, #64	@ 0x40
 80041f2:	d1ae      	bne.n	8004152 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004210:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004214:	d11b      	bne.n	800424e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800421e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2220      	movs	r2, #32
 800422a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423a:	f043 0204 	orr.w	r2, r3, #4
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e000      	b.n	8004250 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e0cc      	b.n	800440a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004270:	4b68      	ldr	r3, [pc, #416]	@ (8004414 <HAL_RCC_ClockConfig+0x1b8>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 030f 	and.w	r3, r3, #15
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	429a      	cmp	r2, r3
 800427c:	d90c      	bls.n	8004298 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800427e:	4b65      	ldr	r3, [pc, #404]	@ (8004414 <HAL_RCC_ClockConfig+0x1b8>)
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	b2d2      	uxtb	r2, r2
 8004284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004286:	4b63      	ldr	r3, [pc, #396]	@ (8004414 <HAL_RCC_ClockConfig+0x1b8>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 030f 	and.w	r3, r3, #15
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	429a      	cmp	r2, r3
 8004292:	d001      	beq.n	8004298 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e0b8      	b.n	800440a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d020      	beq.n	80042e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d005      	beq.n	80042bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042b0:	4b59      	ldr	r3, [pc, #356]	@ (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	4a58      	ldr	r2, [pc, #352]	@ (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80042b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80042ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0308 	and.w	r3, r3, #8
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d005      	beq.n	80042d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042c8:	4b53      	ldr	r3, [pc, #332]	@ (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	4a52      	ldr	r2, [pc, #328]	@ (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80042ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80042d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042d4:	4b50      	ldr	r3, [pc, #320]	@ (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	494d      	ldr	r1, [pc, #308]	@ (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d044      	beq.n	800437c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d107      	bne.n	800430a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042fa:	4b47      	ldr	r3, [pc, #284]	@ (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d119      	bne.n	800433a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e07f      	b.n	800440a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2b02      	cmp	r3, #2
 8004310:	d003      	beq.n	800431a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004316:	2b03      	cmp	r3, #3
 8004318:	d107      	bne.n	800432a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800431a:	4b3f      	ldr	r3, [pc, #252]	@ (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d109      	bne.n	800433a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e06f      	b.n	800440a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800432a:	4b3b      	ldr	r3, [pc, #236]	@ (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e067      	b.n	800440a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800433a:	4b37      	ldr	r3, [pc, #220]	@ (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f023 0203 	bic.w	r2, r3, #3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	4934      	ldr	r1, [pc, #208]	@ (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 8004348:	4313      	orrs	r3, r2
 800434a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800434c:	f7fe f9fa 	bl	8002744 <HAL_GetTick>
 8004350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004352:	e00a      	b.n	800436a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004354:	f7fe f9f6 	bl	8002744 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004362:	4293      	cmp	r3, r2
 8004364:	d901      	bls.n	800436a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e04f      	b.n	800440a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800436a:	4b2b      	ldr	r3, [pc, #172]	@ (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 020c 	and.w	r2, r3, #12
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	429a      	cmp	r2, r3
 800437a:	d1eb      	bne.n	8004354 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800437c:	4b25      	ldr	r3, [pc, #148]	@ (8004414 <HAL_RCC_ClockConfig+0x1b8>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 030f 	and.w	r3, r3, #15
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	429a      	cmp	r2, r3
 8004388:	d20c      	bcs.n	80043a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800438a:	4b22      	ldr	r3, [pc, #136]	@ (8004414 <HAL_RCC_ClockConfig+0x1b8>)
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	b2d2      	uxtb	r2, r2
 8004390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004392:	4b20      	ldr	r3, [pc, #128]	@ (8004414 <HAL_RCC_ClockConfig+0x1b8>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 030f 	and.w	r3, r3, #15
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	429a      	cmp	r2, r3
 800439e:	d001      	beq.n	80043a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e032      	b.n	800440a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d008      	beq.n	80043c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043b0:	4b19      	ldr	r3, [pc, #100]	@ (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	4916      	ldr	r1, [pc, #88]	@ (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d009      	beq.n	80043e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043ce:	4b12      	ldr	r3, [pc, #72]	@ (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	490e      	ldr	r1, [pc, #56]	@ (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043e2:	f000 f855 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 80043e6:	4602      	mov	r2, r0
 80043e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	091b      	lsrs	r3, r3, #4
 80043ee:	f003 030f 	and.w	r3, r3, #15
 80043f2:	490a      	ldr	r1, [pc, #40]	@ (800441c <HAL_RCC_ClockConfig+0x1c0>)
 80043f4:	5ccb      	ldrb	r3, [r1, r3]
 80043f6:	fa22 f303 	lsr.w	r3, r2, r3
 80043fa:	4a09      	ldr	r2, [pc, #36]	@ (8004420 <HAL_RCC_ClockConfig+0x1c4>)
 80043fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80043fe:	4b09      	ldr	r3, [pc, #36]	@ (8004424 <HAL_RCC_ClockConfig+0x1c8>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4618      	mov	r0, r3
 8004404:	f7fe f95a 	bl	80026bc <HAL_InitTick>

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	40023c00 	.word	0x40023c00
 8004418:	40023800 	.word	0x40023800
 800441c:	0800a88c 	.word	0x0800a88c
 8004420:	20000004 	.word	0x20000004
 8004424:	20000008 	.word	0x20000008

08004428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800442c:	4b03      	ldr	r3, [pc, #12]	@ (800443c <HAL_RCC_GetHCLKFreq+0x14>)
 800442e:	681b      	ldr	r3, [r3, #0]
}
 8004430:	4618      	mov	r0, r3
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	20000004 	.word	0x20000004

08004440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004444:	f7ff fff0 	bl	8004428 <HAL_RCC_GetHCLKFreq>
 8004448:	4602      	mov	r2, r0
 800444a:	4b05      	ldr	r3, [pc, #20]	@ (8004460 <HAL_RCC_GetPCLK1Freq+0x20>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	0a9b      	lsrs	r3, r3, #10
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	4903      	ldr	r1, [pc, #12]	@ (8004464 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004456:	5ccb      	ldrb	r3, [r1, r3]
 8004458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800445c:	4618      	mov	r0, r3
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40023800 	.word	0x40023800
 8004464:	0800a89c 	.word	0x0800a89c

08004468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800446c:	f7ff ffdc 	bl	8004428 <HAL_RCC_GetHCLKFreq>
 8004470:	4602      	mov	r2, r0
 8004472:	4b05      	ldr	r3, [pc, #20]	@ (8004488 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	0b5b      	lsrs	r3, r3, #13
 8004478:	f003 0307 	and.w	r3, r3, #7
 800447c:	4903      	ldr	r1, [pc, #12]	@ (800448c <HAL_RCC_GetPCLK2Freq+0x24>)
 800447e:	5ccb      	ldrb	r3, [r1, r3]
 8004480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004484:	4618      	mov	r0, r3
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40023800 	.word	0x40023800
 800448c:	0800a89c 	.word	0x0800a89c

08004490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004494:	b0ae      	sub	sp, #184	@ 0xb8
 8004496:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004498:	2300      	movs	r3, #0
 800449a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044b6:	4bcb      	ldr	r3, [pc, #812]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0x354>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 030c 	and.w	r3, r3, #12
 80044be:	2b0c      	cmp	r3, #12
 80044c0:	f200 8206 	bhi.w	80048d0 <HAL_RCC_GetSysClockFreq+0x440>
 80044c4:	a201      	add	r2, pc, #4	@ (adr r2, 80044cc <HAL_RCC_GetSysClockFreq+0x3c>)
 80044c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ca:	bf00      	nop
 80044cc:	08004501 	.word	0x08004501
 80044d0:	080048d1 	.word	0x080048d1
 80044d4:	080048d1 	.word	0x080048d1
 80044d8:	080048d1 	.word	0x080048d1
 80044dc:	08004509 	.word	0x08004509
 80044e0:	080048d1 	.word	0x080048d1
 80044e4:	080048d1 	.word	0x080048d1
 80044e8:	080048d1 	.word	0x080048d1
 80044ec:	08004511 	.word	0x08004511
 80044f0:	080048d1 	.word	0x080048d1
 80044f4:	080048d1 	.word	0x080048d1
 80044f8:	080048d1 	.word	0x080048d1
 80044fc:	08004701 	.word	0x08004701
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004500:	4bb9      	ldr	r3, [pc, #740]	@ (80047e8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004502:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004506:	e1e7      	b.n	80048d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004508:	4bb8      	ldr	r3, [pc, #736]	@ (80047ec <HAL_RCC_GetSysClockFreq+0x35c>)
 800450a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800450e:	e1e3      	b.n	80048d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004510:	4bb4      	ldr	r3, [pc, #720]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004518:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800451c:	4bb1      	ldr	r3, [pc, #708]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d071      	beq.n	800460c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004528:	4bae      	ldr	r3, [pc, #696]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	099b      	lsrs	r3, r3, #6
 800452e:	2200      	movs	r2, #0
 8004530:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004534:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004538:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800453c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004540:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004544:	2300      	movs	r3, #0
 8004546:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800454a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800454e:	4622      	mov	r2, r4
 8004550:	462b      	mov	r3, r5
 8004552:	f04f 0000 	mov.w	r0, #0
 8004556:	f04f 0100 	mov.w	r1, #0
 800455a:	0159      	lsls	r1, r3, #5
 800455c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004560:	0150      	lsls	r0, r2, #5
 8004562:	4602      	mov	r2, r0
 8004564:	460b      	mov	r3, r1
 8004566:	4621      	mov	r1, r4
 8004568:	1a51      	subs	r1, r2, r1
 800456a:	6439      	str	r1, [r7, #64]	@ 0x40
 800456c:	4629      	mov	r1, r5
 800456e:	eb63 0301 	sbc.w	r3, r3, r1
 8004572:	647b      	str	r3, [r7, #68]	@ 0x44
 8004574:	f04f 0200 	mov.w	r2, #0
 8004578:	f04f 0300 	mov.w	r3, #0
 800457c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004580:	4649      	mov	r1, r9
 8004582:	018b      	lsls	r3, r1, #6
 8004584:	4641      	mov	r1, r8
 8004586:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800458a:	4641      	mov	r1, r8
 800458c:	018a      	lsls	r2, r1, #6
 800458e:	4641      	mov	r1, r8
 8004590:	1a51      	subs	r1, r2, r1
 8004592:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004594:	4649      	mov	r1, r9
 8004596:	eb63 0301 	sbc.w	r3, r3, r1
 800459a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800459c:	f04f 0200 	mov.w	r2, #0
 80045a0:	f04f 0300 	mov.w	r3, #0
 80045a4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80045a8:	4649      	mov	r1, r9
 80045aa:	00cb      	lsls	r3, r1, #3
 80045ac:	4641      	mov	r1, r8
 80045ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045b2:	4641      	mov	r1, r8
 80045b4:	00ca      	lsls	r2, r1, #3
 80045b6:	4610      	mov	r0, r2
 80045b8:	4619      	mov	r1, r3
 80045ba:	4603      	mov	r3, r0
 80045bc:	4622      	mov	r2, r4
 80045be:	189b      	adds	r3, r3, r2
 80045c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80045c2:	462b      	mov	r3, r5
 80045c4:	460a      	mov	r2, r1
 80045c6:	eb42 0303 	adc.w	r3, r2, r3
 80045ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	f04f 0300 	mov.w	r3, #0
 80045d4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80045d8:	4629      	mov	r1, r5
 80045da:	024b      	lsls	r3, r1, #9
 80045dc:	4621      	mov	r1, r4
 80045de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045e2:	4621      	mov	r1, r4
 80045e4:	024a      	lsls	r2, r1, #9
 80045e6:	4610      	mov	r0, r2
 80045e8:	4619      	mov	r1, r3
 80045ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80045ee:	2200      	movs	r2, #0
 80045f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80045f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80045f8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80045fc:	f7fc fbc4 	bl	8000d88 <__aeabi_uldivmod>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	4613      	mov	r3, r2
 8004606:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800460a:	e067      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800460c:	4b75      	ldr	r3, [pc, #468]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	099b      	lsrs	r3, r3, #6
 8004612:	2200      	movs	r2, #0
 8004614:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004618:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800461c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004624:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004626:	2300      	movs	r3, #0
 8004628:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800462a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800462e:	4622      	mov	r2, r4
 8004630:	462b      	mov	r3, r5
 8004632:	f04f 0000 	mov.w	r0, #0
 8004636:	f04f 0100 	mov.w	r1, #0
 800463a:	0159      	lsls	r1, r3, #5
 800463c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004640:	0150      	lsls	r0, r2, #5
 8004642:	4602      	mov	r2, r0
 8004644:	460b      	mov	r3, r1
 8004646:	4621      	mov	r1, r4
 8004648:	1a51      	subs	r1, r2, r1
 800464a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800464c:	4629      	mov	r1, r5
 800464e:	eb63 0301 	sbc.w	r3, r3, r1
 8004652:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004654:	f04f 0200 	mov.w	r2, #0
 8004658:	f04f 0300 	mov.w	r3, #0
 800465c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004660:	4649      	mov	r1, r9
 8004662:	018b      	lsls	r3, r1, #6
 8004664:	4641      	mov	r1, r8
 8004666:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800466a:	4641      	mov	r1, r8
 800466c:	018a      	lsls	r2, r1, #6
 800466e:	4641      	mov	r1, r8
 8004670:	ebb2 0a01 	subs.w	sl, r2, r1
 8004674:	4649      	mov	r1, r9
 8004676:	eb63 0b01 	sbc.w	fp, r3, r1
 800467a:	f04f 0200 	mov.w	r2, #0
 800467e:	f04f 0300 	mov.w	r3, #0
 8004682:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004686:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800468a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800468e:	4692      	mov	sl, r2
 8004690:	469b      	mov	fp, r3
 8004692:	4623      	mov	r3, r4
 8004694:	eb1a 0303 	adds.w	r3, sl, r3
 8004698:	623b      	str	r3, [r7, #32]
 800469a:	462b      	mov	r3, r5
 800469c:	eb4b 0303 	adc.w	r3, fp, r3
 80046a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80046a2:	f04f 0200 	mov.w	r2, #0
 80046a6:	f04f 0300 	mov.w	r3, #0
 80046aa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80046ae:	4629      	mov	r1, r5
 80046b0:	028b      	lsls	r3, r1, #10
 80046b2:	4621      	mov	r1, r4
 80046b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046b8:	4621      	mov	r1, r4
 80046ba:	028a      	lsls	r2, r1, #10
 80046bc:	4610      	mov	r0, r2
 80046be:	4619      	mov	r1, r3
 80046c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80046c4:	2200      	movs	r2, #0
 80046c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80046c8:	677a      	str	r2, [r7, #116]	@ 0x74
 80046ca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80046ce:	f7fc fb5b 	bl	8000d88 <__aeabi_uldivmod>
 80046d2:	4602      	mov	r2, r0
 80046d4:	460b      	mov	r3, r1
 80046d6:	4613      	mov	r3, r2
 80046d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80046dc:	4b41      	ldr	r3, [pc, #260]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0x354>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	0c1b      	lsrs	r3, r3, #16
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	3301      	adds	r3, #1
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80046ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80046f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80046f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80046fe:	e0eb      	b.n	80048d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004700:	4b38      	ldr	r3, [pc, #224]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004708:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800470c:	4b35      	ldr	r3, [pc, #212]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d06b      	beq.n	80047f0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004718:	4b32      	ldr	r3, [pc, #200]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	099b      	lsrs	r3, r3, #6
 800471e:	2200      	movs	r2, #0
 8004720:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004722:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004724:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800472a:	663b      	str	r3, [r7, #96]	@ 0x60
 800472c:	2300      	movs	r3, #0
 800472e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004730:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004734:	4622      	mov	r2, r4
 8004736:	462b      	mov	r3, r5
 8004738:	f04f 0000 	mov.w	r0, #0
 800473c:	f04f 0100 	mov.w	r1, #0
 8004740:	0159      	lsls	r1, r3, #5
 8004742:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004746:	0150      	lsls	r0, r2, #5
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	4621      	mov	r1, r4
 800474e:	1a51      	subs	r1, r2, r1
 8004750:	61b9      	str	r1, [r7, #24]
 8004752:	4629      	mov	r1, r5
 8004754:	eb63 0301 	sbc.w	r3, r3, r1
 8004758:	61fb      	str	r3, [r7, #28]
 800475a:	f04f 0200 	mov.w	r2, #0
 800475e:	f04f 0300 	mov.w	r3, #0
 8004762:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004766:	4659      	mov	r1, fp
 8004768:	018b      	lsls	r3, r1, #6
 800476a:	4651      	mov	r1, sl
 800476c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004770:	4651      	mov	r1, sl
 8004772:	018a      	lsls	r2, r1, #6
 8004774:	4651      	mov	r1, sl
 8004776:	ebb2 0801 	subs.w	r8, r2, r1
 800477a:	4659      	mov	r1, fp
 800477c:	eb63 0901 	sbc.w	r9, r3, r1
 8004780:	f04f 0200 	mov.w	r2, #0
 8004784:	f04f 0300 	mov.w	r3, #0
 8004788:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800478c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004790:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004794:	4690      	mov	r8, r2
 8004796:	4699      	mov	r9, r3
 8004798:	4623      	mov	r3, r4
 800479a:	eb18 0303 	adds.w	r3, r8, r3
 800479e:	613b      	str	r3, [r7, #16]
 80047a0:	462b      	mov	r3, r5
 80047a2:	eb49 0303 	adc.w	r3, r9, r3
 80047a6:	617b      	str	r3, [r7, #20]
 80047a8:	f04f 0200 	mov.w	r2, #0
 80047ac:	f04f 0300 	mov.w	r3, #0
 80047b0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80047b4:	4629      	mov	r1, r5
 80047b6:	024b      	lsls	r3, r1, #9
 80047b8:	4621      	mov	r1, r4
 80047ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047be:	4621      	mov	r1, r4
 80047c0:	024a      	lsls	r2, r1, #9
 80047c2:	4610      	mov	r0, r2
 80047c4:	4619      	mov	r1, r3
 80047c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80047ca:	2200      	movs	r2, #0
 80047cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047ce:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80047d0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80047d4:	f7fc fad8 	bl	8000d88 <__aeabi_uldivmod>
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	4613      	mov	r3, r2
 80047de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047e2:	e065      	b.n	80048b0 <HAL_RCC_GetSysClockFreq+0x420>
 80047e4:	40023800 	.word	0x40023800
 80047e8:	00f42400 	.word	0x00f42400
 80047ec:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047f0:	4b3d      	ldr	r3, [pc, #244]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	099b      	lsrs	r3, r3, #6
 80047f6:	2200      	movs	r2, #0
 80047f8:	4618      	mov	r0, r3
 80047fa:	4611      	mov	r1, r2
 80047fc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004800:	653b      	str	r3, [r7, #80]	@ 0x50
 8004802:	2300      	movs	r3, #0
 8004804:	657b      	str	r3, [r7, #84]	@ 0x54
 8004806:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800480a:	4642      	mov	r2, r8
 800480c:	464b      	mov	r3, r9
 800480e:	f04f 0000 	mov.w	r0, #0
 8004812:	f04f 0100 	mov.w	r1, #0
 8004816:	0159      	lsls	r1, r3, #5
 8004818:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800481c:	0150      	lsls	r0, r2, #5
 800481e:	4602      	mov	r2, r0
 8004820:	460b      	mov	r3, r1
 8004822:	4641      	mov	r1, r8
 8004824:	1a51      	subs	r1, r2, r1
 8004826:	60b9      	str	r1, [r7, #8]
 8004828:	4649      	mov	r1, r9
 800482a:	eb63 0301 	sbc.w	r3, r3, r1
 800482e:	60fb      	str	r3, [r7, #12]
 8004830:	f04f 0200 	mov.w	r2, #0
 8004834:	f04f 0300 	mov.w	r3, #0
 8004838:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800483c:	4659      	mov	r1, fp
 800483e:	018b      	lsls	r3, r1, #6
 8004840:	4651      	mov	r1, sl
 8004842:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004846:	4651      	mov	r1, sl
 8004848:	018a      	lsls	r2, r1, #6
 800484a:	4651      	mov	r1, sl
 800484c:	1a54      	subs	r4, r2, r1
 800484e:	4659      	mov	r1, fp
 8004850:	eb63 0501 	sbc.w	r5, r3, r1
 8004854:	f04f 0200 	mov.w	r2, #0
 8004858:	f04f 0300 	mov.w	r3, #0
 800485c:	00eb      	lsls	r3, r5, #3
 800485e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004862:	00e2      	lsls	r2, r4, #3
 8004864:	4614      	mov	r4, r2
 8004866:	461d      	mov	r5, r3
 8004868:	4643      	mov	r3, r8
 800486a:	18e3      	adds	r3, r4, r3
 800486c:	603b      	str	r3, [r7, #0]
 800486e:	464b      	mov	r3, r9
 8004870:	eb45 0303 	adc.w	r3, r5, r3
 8004874:	607b      	str	r3, [r7, #4]
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	f04f 0300 	mov.w	r3, #0
 800487e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004882:	4629      	mov	r1, r5
 8004884:	028b      	lsls	r3, r1, #10
 8004886:	4621      	mov	r1, r4
 8004888:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800488c:	4621      	mov	r1, r4
 800488e:	028a      	lsls	r2, r1, #10
 8004890:	4610      	mov	r0, r2
 8004892:	4619      	mov	r1, r3
 8004894:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004898:	2200      	movs	r2, #0
 800489a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800489c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800489e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80048a2:	f7fc fa71 	bl	8000d88 <__aeabi_uldivmod>
 80048a6:	4602      	mov	r2, r0
 80048a8:	460b      	mov	r3, r1
 80048aa:	4613      	mov	r3, r2
 80048ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80048b0:	4b0d      	ldr	r3, [pc, #52]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	0f1b      	lsrs	r3, r3, #28
 80048b6:	f003 0307 	and.w	r3, r3, #7
 80048ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80048be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80048c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80048c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80048ce:	e003      	b.n	80048d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048d0:	4b06      	ldr	r3, [pc, #24]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x45c>)
 80048d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80048d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	37b8      	adds	r7, #184	@ 0xb8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048e6:	bf00      	nop
 80048e8:	40023800 	.word	0x40023800
 80048ec:	00f42400 	.word	0x00f42400

080048f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e28d      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 8083 	beq.w	8004a16 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004910:	4b94      	ldr	r3, [pc, #592]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f003 030c 	and.w	r3, r3, #12
 8004918:	2b04      	cmp	r3, #4
 800491a:	d019      	beq.n	8004950 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800491c:	4b91      	ldr	r3, [pc, #580]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f003 030c 	and.w	r3, r3, #12
        || \
 8004924:	2b08      	cmp	r3, #8
 8004926:	d106      	bne.n	8004936 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004928:	4b8e      	ldr	r3, [pc, #568]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004930:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004934:	d00c      	beq.n	8004950 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004936:	4b8b      	ldr	r3, [pc, #556]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800493e:	2b0c      	cmp	r3, #12
 8004940:	d112      	bne.n	8004968 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004942:	4b88      	ldr	r3, [pc, #544]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800494a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800494e:	d10b      	bne.n	8004968 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004950:	4b84      	ldr	r3, [pc, #528]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d05b      	beq.n	8004a14 <HAL_RCC_OscConfig+0x124>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d157      	bne.n	8004a14 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e25a      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004970:	d106      	bne.n	8004980 <HAL_RCC_OscConfig+0x90>
 8004972:	4b7c      	ldr	r3, [pc, #496]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a7b      	ldr	r2, [pc, #492]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	e01d      	b.n	80049bc <HAL_RCC_OscConfig+0xcc>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004988:	d10c      	bne.n	80049a4 <HAL_RCC_OscConfig+0xb4>
 800498a:	4b76      	ldr	r3, [pc, #472]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a75      	ldr	r2, [pc, #468]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004990:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	4b73      	ldr	r3, [pc, #460]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a72      	ldr	r2, [pc, #456]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 800499c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	e00b      	b.n	80049bc <HAL_RCC_OscConfig+0xcc>
 80049a4:	4b6f      	ldr	r3, [pc, #444]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a6e      	ldr	r2, [pc, #440]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 80049aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049ae:	6013      	str	r3, [r2, #0]
 80049b0:	4b6c      	ldr	r3, [pc, #432]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a6b      	ldr	r2, [pc, #428]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 80049b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d013      	beq.n	80049ec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c4:	f7fd febe 	bl	8002744 <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049cc:	f7fd feba 	bl	8002744 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b64      	cmp	r3, #100	@ 0x64
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e21f      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049de:	4b61      	ldr	r3, [pc, #388]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0f0      	beq.n	80049cc <HAL_RCC_OscConfig+0xdc>
 80049ea:	e014      	b.n	8004a16 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ec:	f7fd feaa 	bl	8002744 <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049f4:	f7fd fea6 	bl	8002744 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b64      	cmp	r3, #100	@ 0x64
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e20b      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a06:	4b57      	ldr	r3, [pc, #348]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1f0      	bne.n	80049f4 <HAL_RCC_OscConfig+0x104>
 8004a12:	e000      	b.n	8004a16 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d06f      	beq.n	8004b02 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004a22:	4b50      	ldr	r3, [pc, #320]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 030c 	and.w	r3, r3, #12
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d017      	beq.n	8004a5e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004a2e:	4b4d      	ldr	r3, [pc, #308]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 030c 	and.w	r3, r3, #12
        || \
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d105      	bne.n	8004a46 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004a3a:	4b4a      	ldr	r3, [pc, #296]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00b      	beq.n	8004a5e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a46:	4b47      	ldr	r3, [pc, #284]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004a4e:	2b0c      	cmp	r3, #12
 8004a50:	d11c      	bne.n	8004a8c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a52:	4b44      	ldr	r3, [pc, #272]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d116      	bne.n	8004a8c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a5e:	4b41      	ldr	r3, [pc, #260]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d005      	beq.n	8004a76 <HAL_RCC_OscConfig+0x186>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d001      	beq.n	8004a76 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e1d3      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a76:	4b3b      	ldr	r3, [pc, #236]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	4937      	ldr	r1, [pc, #220]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a8a:	e03a      	b.n	8004b02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d020      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a94:	4b34      	ldr	r3, [pc, #208]	@ (8004b68 <HAL_RCC_OscConfig+0x278>)
 8004a96:	2201      	movs	r2, #1
 8004a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9a:	f7fd fe53 	bl	8002744 <HAL_GetTick>
 8004a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aa2:	f7fd fe4f 	bl	8002744 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e1b4      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0f0      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac0:	4b28      	ldr	r3, [pc, #160]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	00db      	lsls	r3, r3, #3
 8004ace:	4925      	ldr	r1, [pc, #148]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	600b      	str	r3, [r1, #0]
 8004ad4:	e015      	b.n	8004b02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ad6:	4b24      	ldr	r3, [pc, #144]	@ (8004b68 <HAL_RCC_OscConfig+0x278>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004adc:	f7fd fe32 	bl	8002744 <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ae4:	f7fd fe2e 	bl	8002744 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e193      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004af6:	4b1b      	ldr	r3, [pc, #108]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1f0      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0308 	and.w	r3, r3, #8
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d036      	beq.n	8004b7c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d016      	beq.n	8004b44 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b16:	4b15      	ldr	r3, [pc, #84]	@ (8004b6c <HAL_RCC_OscConfig+0x27c>)
 8004b18:	2201      	movs	r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1c:	f7fd fe12 	bl	8002744 <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b24:	f7fd fe0e 	bl	8002744 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e173      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b36:	4b0b      	ldr	r3, [pc, #44]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004b38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d0f0      	beq.n	8004b24 <HAL_RCC_OscConfig+0x234>
 8004b42:	e01b      	b.n	8004b7c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b44:	4b09      	ldr	r3, [pc, #36]	@ (8004b6c <HAL_RCC_OscConfig+0x27c>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b4a:	f7fd fdfb 	bl	8002744 <HAL_GetTick>
 8004b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b50:	e00e      	b.n	8004b70 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b52:	f7fd fdf7 	bl	8002744 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d907      	bls.n	8004b70 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e15c      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
 8004b64:	40023800 	.word	0x40023800
 8004b68:	42470000 	.word	0x42470000
 8004b6c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b70:	4b8a      	ldr	r3, [pc, #552]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004b72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1ea      	bne.n	8004b52 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f000 8097 	beq.w	8004cb8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b8e:	4b83      	ldr	r3, [pc, #524]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10f      	bne.n	8004bba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60bb      	str	r3, [r7, #8]
 8004b9e:	4b7f      	ldr	r3, [pc, #508]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba2:	4a7e      	ldr	r2, [pc, #504]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004ba4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ba8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004baa:	4b7c      	ldr	r3, [pc, #496]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bb2:	60bb      	str	r3, [r7, #8]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bba:	4b79      	ldr	r3, [pc, #484]	@ (8004da0 <HAL_RCC_OscConfig+0x4b0>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d118      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bc6:	4b76      	ldr	r3, [pc, #472]	@ (8004da0 <HAL_RCC_OscConfig+0x4b0>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a75      	ldr	r2, [pc, #468]	@ (8004da0 <HAL_RCC_OscConfig+0x4b0>)
 8004bcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bd2:	f7fd fdb7 	bl	8002744 <HAL_GetTick>
 8004bd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd8:	e008      	b.n	8004bec <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bda:	f7fd fdb3 	bl	8002744 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d901      	bls.n	8004bec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e118      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bec:	4b6c      	ldr	r3, [pc, #432]	@ (8004da0 <HAL_RCC_OscConfig+0x4b0>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d0f0      	beq.n	8004bda <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d106      	bne.n	8004c0e <HAL_RCC_OscConfig+0x31e>
 8004c00:	4b66      	ldr	r3, [pc, #408]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c04:	4a65      	ldr	r2, [pc, #404]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c06:	f043 0301 	orr.w	r3, r3, #1
 8004c0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c0c:	e01c      	b.n	8004c48 <HAL_RCC_OscConfig+0x358>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	2b05      	cmp	r3, #5
 8004c14:	d10c      	bne.n	8004c30 <HAL_RCC_OscConfig+0x340>
 8004c16:	4b61      	ldr	r3, [pc, #388]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c1a:	4a60      	ldr	r2, [pc, #384]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c1c:	f043 0304 	orr.w	r3, r3, #4
 8004c20:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c22:	4b5e      	ldr	r3, [pc, #376]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c26:	4a5d      	ldr	r2, [pc, #372]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c28:	f043 0301 	orr.w	r3, r3, #1
 8004c2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c2e:	e00b      	b.n	8004c48 <HAL_RCC_OscConfig+0x358>
 8004c30:	4b5a      	ldr	r3, [pc, #360]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c34:	4a59      	ldr	r2, [pc, #356]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c36:	f023 0301 	bic.w	r3, r3, #1
 8004c3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c3c:	4b57      	ldr	r3, [pc, #348]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c40:	4a56      	ldr	r2, [pc, #344]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c42:	f023 0304 	bic.w	r3, r3, #4
 8004c46:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d015      	beq.n	8004c7c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c50:	f7fd fd78 	bl	8002744 <HAL_GetTick>
 8004c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c56:	e00a      	b.n	8004c6e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c58:	f7fd fd74 	bl	8002744 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e0d7      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c6e:	4b4b      	ldr	r3, [pc, #300]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d0ee      	beq.n	8004c58 <HAL_RCC_OscConfig+0x368>
 8004c7a:	e014      	b.n	8004ca6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c7c:	f7fd fd62 	bl	8002744 <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c82:	e00a      	b.n	8004c9a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c84:	f7fd fd5e 	bl	8002744 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e0c1      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c9a:	4b40      	ldr	r3, [pc, #256]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1ee      	bne.n	8004c84 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ca6:	7dfb      	ldrb	r3, [r7, #23]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d105      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cac:	4b3b      	ldr	r3, [pc, #236]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb0:	4a3a      	ldr	r2, [pc, #232]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004cb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cb6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 80ad 	beq.w	8004e1c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cc2:	4b36      	ldr	r3, [pc, #216]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 030c 	and.w	r3, r3, #12
 8004cca:	2b08      	cmp	r3, #8
 8004ccc:	d060      	beq.n	8004d90 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d145      	bne.n	8004d62 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cd6:	4b33      	ldr	r3, [pc, #204]	@ (8004da4 <HAL_RCC_OscConfig+0x4b4>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cdc:	f7fd fd32 	bl	8002744 <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ce4:	f7fd fd2e 	bl	8002744 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e093      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf6:	4b29      	ldr	r3, [pc, #164]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1f0      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	69da      	ldr	r2, [r3, #28]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d10:	019b      	lsls	r3, r3, #6
 8004d12:	431a      	orrs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d18:	085b      	lsrs	r3, r3, #1
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	041b      	lsls	r3, r3, #16
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d24:	061b      	lsls	r3, r3, #24
 8004d26:	431a      	orrs	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2c:	071b      	lsls	r3, r3, #28
 8004d2e:	491b      	ldr	r1, [pc, #108]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d34:	4b1b      	ldr	r3, [pc, #108]	@ (8004da4 <HAL_RCC_OscConfig+0x4b4>)
 8004d36:	2201      	movs	r2, #1
 8004d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3a:	f7fd fd03 	bl	8002744 <HAL_GetTick>
 8004d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d40:	e008      	b.n	8004d54 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d42:	f7fd fcff 	bl	8002744 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e064      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d54:	4b11      	ldr	r3, [pc, #68]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0f0      	beq.n	8004d42 <HAL_RCC_OscConfig+0x452>
 8004d60:	e05c      	b.n	8004e1c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d62:	4b10      	ldr	r3, [pc, #64]	@ (8004da4 <HAL_RCC_OscConfig+0x4b4>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d68:	f7fd fcec 	bl	8002744 <HAL_GetTick>
 8004d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d70:	f7fd fce8 	bl	8002744 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e04d      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d82:	4b06      	ldr	r3, [pc, #24]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1f0      	bne.n	8004d70 <HAL_RCC_OscConfig+0x480>
 8004d8e:	e045      	b.n	8004e1c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d107      	bne.n	8004da8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e040      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
 8004d9c:	40023800 	.word	0x40023800
 8004da0:	40007000 	.word	0x40007000
 8004da4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004da8:	4b1f      	ldr	r3, [pc, #124]	@ (8004e28 <HAL_RCC_OscConfig+0x538>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d030      	beq.n	8004e18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d129      	bne.n	8004e18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d122      	bne.n	8004e18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004dd8:	4013      	ands	r3, r2
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004dde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d119      	bne.n	8004e18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dee:	085b      	lsrs	r3, r3, #1
 8004df0:	3b01      	subs	r3, #1
 8004df2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d10f      	bne.n	8004e18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d107      	bne.n	8004e18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e12:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d001      	beq.n	8004e1c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e000      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3718      	adds	r7, #24
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	40023800 	.word	0x40023800

08004e2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e042      	b.n	8004ec4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d106      	bne.n	8004e58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7fd fa3e 	bl	80022d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2224      	movs	r2, #36	@ 0x24
 8004e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 fdbd 	bl	80059f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	691a      	ldr	r2, [r3, #16]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	695a      	ldr	r2, [r3, #20]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68da      	ldr	r2, [r3, #12]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ea4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3708      	adds	r7, #8
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b08a      	sub	sp, #40	@ 0x28
 8004ed0:	af02      	add	r7, sp, #8
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	603b      	str	r3, [r7, #0]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b20      	cmp	r3, #32
 8004eea:	d175      	bne.n	8004fd8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <HAL_UART_Transmit+0x2c>
 8004ef2:	88fb      	ldrh	r3, [r7, #6]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e06e      	b.n	8004fda <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2221      	movs	r2, #33	@ 0x21
 8004f06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f0a:	f7fd fc1b 	bl	8002744 <HAL_GetTick>
 8004f0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	88fa      	ldrh	r2, [r7, #6]
 8004f14:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	88fa      	ldrh	r2, [r7, #6]
 8004f1a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f24:	d108      	bne.n	8004f38 <HAL_UART_Transmit+0x6c>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d104      	bne.n	8004f38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	61bb      	str	r3, [r7, #24]
 8004f36:	e003      	b.n	8004f40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f40:	e02e      	b.n	8004fa0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	2180      	movs	r1, #128	@ 0x80
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 fb1f 	bl	8005590 <UART_WaitOnFlagUntilTimeout>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d005      	beq.n	8004f64 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e03a      	b.n	8004fda <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10b      	bne.n	8004f82 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	3302      	adds	r3, #2
 8004f7e:	61bb      	str	r3, [r7, #24]
 8004f80:	e007      	b.n	8004f92 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	781a      	ldrb	r2, [r3, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1cb      	bne.n	8004f42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	2140      	movs	r1, #64	@ 0x40
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 faeb 	bl	8005590 <UART_WaitOnFlagUntilTimeout>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d005      	beq.n	8004fcc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e006      	b.n	8004fda <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	e000      	b.n	8004fda <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004fd8:	2302      	movs	r3, #2
  }
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3720      	adds	r7, #32
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b084      	sub	sp, #16
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	60f8      	str	r0, [r7, #12]
 8004fea:	60b9      	str	r1, [r7, #8]
 8004fec:	4613      	mov	r3, r2
 8004fee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b20      	cmp	r3, #32
 8004ffa:	d112      	bne.n	8005022 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d002      	beq.n	8005008 <HAL_UART_Receive_IT+0x26>
 8005002:	88fb      	ldrh	r3, [r7, #6]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e00b      	b.n	8005024 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005012:	88fb      	ldrh	r3, [r7, #6]
 8005014:	461a      	mov	r2, r3
 8005016:	68b9      	ldr	r1, [r7, #8]
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f000 fb12 	bl	8005642 <UART_Start_Receive_IT>
 800501e:	4603      	mov	r3, r0
 8005020:	e000      	b.n	8005024 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005022:	2302      	movs	r3, #2
  }
}
 8005024:	4618      	mov	r0, r3
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b0ba      	sub	sp, #232	@ 0xe8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005052:	2300      	movs	r3, #0
 8005054:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005058:	2300      	movs	r3, #0
 800505a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800505e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800506a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10f      	bne.n	8005092 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005076:	f003 0320 	and.w	r3, r3, #32
 800507a:	2b00      	cmp	r3, #0
 800507c:	d009      	beq.n	8005092 <HAL_UART_IRQHandler+0x66>
 800507e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005082:	f003 0320 	and.w	r3, r3, #32
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 fbf2 	bl	8005874 <UART_Receive_IT>
      return;
 8005090:	e25b      	b.n	800554a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005092:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 80de 	beq.w	8005258 <HAL_UART_IRQHandler+0x22c>
 800509c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d106      	bne.n	80050b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050ac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 80d1 	beq.w	8005258 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80050b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00b      	beq.n	80050da <HAL_UART_IRQHandler+0xae>
 80050c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d005      	beq.n	80050da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d2:	f043 0201 	orr.w	r2, r3, #1
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050de:	f003 0304 	and.w	r3, r3, #4
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00b      	beq.n	80050fe <HAL_UART_IRQHandler+0xd2>
 80050e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d005      	beq.n	80050fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050f6:	f043 0202 	orr.w	r2, r3, #2
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00b      	beq.n	8005122 <HAL_UART_IRQHandler+0xf6>
 800510a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d005      	beq.n	8005122 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800511a:	f043 0204 	orr.w	r2, r3, #4
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005126:	f003 0308 	and.w	r3, r3, #8
 800512a:	2b00      	cmp	r3, #0
 800512c:	d011      	beq.n	8005152 <HAL_UART_IRQHandler+0x126>
 800512e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005132:	f003 0320 	and.w	r3, r3, #32
 8005136:	2b00      	cmp	r3, #0
 8005138:	d105      	bne.n	8005146 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800513a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	d005      	beq.n	8005152 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800514a:	f043 0208 	orr.w	r2, r3, #8
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005156:	2b00      	cmp	r3, #0
 8005158:	f000 81f2 	beq.w	8005540 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800515c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005160:	f003 0320 	and.w	r3, r3, #32
 8005164:	2b00      	cmp	r3, #0
 8005166:	d008      	beq.n	800517a <HAL_UART_IRQHandler+0x14e>
 8005168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800516c:	f003 0320 	and.w	r3, r3, #32
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 fb7d 	bl	8005874 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005184:	2b40      	cmp	r3, #64	@ 0x40
 8005186:	bf0c      	ite	eq
 8005188:	2301      	moveq	r3, #1
 800518a:	2300      	movne	r3, #0
 800518c:	b2db      	uxtb	r3, r3
 800518e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005196:	f003 0308 	and.w	r3, r3, #8
 800519a:	2b00      	cmp	r3, #0
 800519c:	d103      	bne.n	80051a6 <HAL_UART_IRQHandler+0x17a>
 800519e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d04f      	beq.n	8005246 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 fa85 	bl	80056b6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051b6:	2b40      	cmp	r3, #64	@ 0x40
 80051b8:	d141      	bne.n	800523e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	3314      	adds	r3, #20
 80051c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80051c8:	e853 3f00 	ldrex	r3, [r3]
 80051cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80051d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80051d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	3314      	adds	r3, #20
 80051e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80051e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80051ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80051f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80051f6:	e841 2300 	strex	r3, r2, [r1]
 80051fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80051fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1d9      	bne.n	80051ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800520a:	2b00      	cmp	r3, #0
 800520c:	d013      	beq.n	8005236 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005212:	4a7e      	ldr	r2, [pc, #504]	@ (800540c <HAL_UART_IRQHandler+0x3e0>)
 8005214:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800521a:	4618      	mov	r0, r3
 800521c:	f7fd fe53 	bl	8002ec6 <HAL_DMA_Abort_IT>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d016      	beq.n	8005254 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800522a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005230:	4610      	mov	r0, r2
 8005232:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005234:	e00e      	b.n	8005254 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f994 	bl	8005564 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800523c:	e00a      	b.n	8005254 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f990 	bl	8005564 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005244:	e006      	b.n	8005254 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f98c 	bl	8005564 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005252:	e175      	b.n	8005540 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005254:	bf00      	nop
    return;
 8005256:	e173      	b.n	8005540 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800525c:	2b01      	cmp	r3, #1
 800525e:	f040 814f 	bne.w	8005500 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005266:	f003 0310 	and.w	r3, r3, #16
 800526a:	2b00      	cmp	r3, #0
 800526c:	f000 8148 	beq.w	8005500 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005274:	f003 0310 	and.w	r3, r3, #16
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 8141 	beq.w	8005500 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800527e:	2300      	movs	r3, #0
 8005280:	60bb      	str	r3, [r7, #8]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	60bb      	str	r3, [r7, #8]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	60bb      	str	r3, [r7, #8]
 8005292:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800529e:	2b40      	cmp	r3, #64	@ 0x40
 80052a0:	f040 80b6 	bne.w	8005410 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80052b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 8145 	beq.w	8005544 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80052be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80052c2:	429a      	cmp	r2, r3
 80052c4:	f080 813e 	bcs.w	8005544 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80052ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052da:	f000 8088 	beq.w	80053ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	330c      	adds	r3, #12
 80052e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80052ec:	e853 3f00 	ldrex	r3, [r3]
 80052f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80052f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80052f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	330c      	adds	r3, #12
 8005306:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800530a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800530e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005312:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005316:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800531a:	e841 2300 	strex	r3, r2, [r1]
 800531e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005322:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1d9      	bne.n	80052de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3314      	adds	r3, #20
 8005330:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005332:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005334:	e853 3f00 	ldrex	r3, [r3]
 8005338:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800533a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800533c:	f023 0301 	bic.w	r3, r3, #1
 8005340:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	3314      	adds	r3, #20
 800534a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800534e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005352:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005354:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005356:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800535a:	e841 2300 	strex	r3, r2, [r1]
 800535e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005360:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1e1      	bne.n	800532a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	3314      	adds	r3, #20
 800536c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005370:	e853 3f00 	ldrex	r3, [r3]
 8005374:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005376:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005378:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800537c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	3314      	adds	r3, #20
 8005386:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800538a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800538c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005390:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005392:	e841 2300 	strex	r3, r2, [r1]
 8005396:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005398:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1e3      	bne.n	8005366 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2220      	movs	r2, #32
 80053a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	330c      	adds	r3, #12
 80053b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053b6:	e853 3f00 	ldrex	r3, [r3]
 80053ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80053bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053be:	f023 0310 	bic.w	r3, r3, #16
 80053c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	330c      	adds	r3, #12
 80053cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80053d0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80053d2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80053d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80053d8:	e841 2300 	strex	r3, r2, [r1]
 80053dc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80053de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1e3      	bne.n	80053ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7fd fcfc 	bl	8002de6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2202      	movs	r2, #2
 80053f2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	b29b      	uxth	r3, r3
 8005402:	4619      	mov	r1, r3
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 f8b7 	bl	8005578 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800540a:	e09b      	b.n	8005544 <HAL_UART_IRQHandler+0x518>
 800540c:	0800577d 	.word	0x0800577d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005418:	b29b      	uxth	r3, r3
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005424:	b29b      	uxth	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	f000 808e 	beq.w	8005548 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800542c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005430:	2b00      	cmp	r3, #0
 8005432:	f000 8089 	beq.w	8005548 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	330c      	adds	r3, #12
 800543c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005440:	e853 3f00 	ldrex	r3, [r3]
 8005444:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005448:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800544c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	330c      	adds	r3, #12
 8005456:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800545a:	647a      	str	r2, [r7, #68]	@ 0x44
 800545c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005460:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005462:	e841 2300 	strex	r3, r2, [r1]
 8005466:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1e3      	bne.n	8005436 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	3314      	adds	r3, #20
 8005474:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005478:	e853 3f00 	ldrex	r3, [r3]
 800547c:	623b      	str	r3, [r7, #32]
   return(result);
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	f023 0301 	bic.w	r3, r3, #1
 8005484:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	3314      	adds	r3, #20
 800548e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005492:	633a      	str	r2, [r7, #48]	@ 0x30
 8005494:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005496:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005498:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800549a:	e841 2300 	strex	r3, r2, [r1]
 800549e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1e3      	bne.n	800546e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2220      	movs	r2, #32
 80054aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	330c      	adds	r3, #12
 80054ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	e853 3f00 	ldrex	r3, [r3]
 80054c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f023 0310 	bic.w	r3, r3, #16
 80054ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	330c      	adds	r3, #12
 80054d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80054d8:	61fa      	str	r2, [r7, #28]
 80054da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054dc:	69b9      	ldr	r1, [r7, #24]
 80054de:	69fa      	ldr	r2, [r7, #28]
 80054e0:	e841 2300 	strex	r3, r2, [r1]
 80054e4:	617b      	str	r3, [r7, #20]
   return(result);
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1e3      	bne.n	80054b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80054f6:	4619      	mov	r1, r3
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f83d 	bl	8005578 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054fe:	e023      	b.n	8005548 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005508:	2b00      	cmp	r3, #0
 800550a:	d009      	beq.n	8005520 <HAL_UART_IRQHandler+0x4f4>
 800550c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005514:	2b00      	cmp	r3, #0
 8005516:	d003      	beq.n	8005520 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 f943 	bl	80057a4 <UART_Transmit_IT>
    return;
 800551e:	e014      	b.n	800554a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00e      	beq.n	800554a <HAL_UART_IRQHandler+0x51e>
 800552c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005534:	2b00      	cmp	r3, #0
 8005536:	d008      	beq.n	800554a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f983 	bl	8005844 <UART_EndTransmit_IT>
    return;
 800553e:	e004      	b.n	800554a <HAL_UART_IRQHandler+0x51e>
    return;
 8005540:	bf00      	nop
 8005542:	e002      	b.n	800554a <HAL_UART_IRQHandler+0x51e>
      return;
 8005544:	bf00      	nop
 8005546:	e000      	b.n	800554a <HAL_UART_IRQHandler+0x51e>
      return;
 8005548:	bf00      	nop
  }
}
 800554a:	37e8      	adds	r7, #232	@ 0xe8
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	460b      	mov	r3, r1
 8005582:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	603b      	str	r3, [r7, #0]
 800559c:	4613      	mov	r3, r2
 800559e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055a0:	e03b      	b.n	800561a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055a2:	6a3b      	ldr	r3, [r7, #32]
 80055a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055a8:	d037      	beq.n	800561a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055aa:	f7fd f8cb 	bl	8002744 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	6a3a      	ldr	r2, [r7, #32]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d302      	bcc.n	80055c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80055ba:	6a3b      	ldr	r3, [r7, #32]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e03a      	b.n	800563a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f003 0304 	and.w	r3, r3, #4
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d023      	beq.n	800561a <UART_WaitOnFlagUntilTimeout+0x8a>
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	2b80      	cmp	r3, #128	@ 0x80
 80055d6:	d020      	beq.n	800561a <UART_WaitOnFlagUntilTimeout+0x8a>
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2b40      	cmp	r3, #64	@ 0x40
 80055dc:	d01d      	beq.n	800561a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0308 	and.w	r3, r3, #8
 80055e8:	2b08      	cmp	r3, #8
 80055ea:	d116      	bne.n	800561a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80055ec:	2300      	movs	r3, #0
 80055ee:	617b      	str	r3, [r7, #20]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	617b      	str	r3, [r7, #20]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	617b      	str	r3, [r7, #20]
 8005600:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 f857 	bl	80056b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2208      	movs	r2, #8
 800560c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e00f      	b.n	800563a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	4013      	ands	r3, r2
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	429a      	cmp	r2, r3
 8005628:	bf0c      	ite	eq
 800562a:	2301      	moveq	r3, #1
 800562c:	2300      	movne	r3, #0
 800562e:	b2db      	uxtb	r3, r3
 8005630:	461a      	mov	r2, r3
 8005632:	79fb      	ldrb	r3, [r7, #7]
 8005634:	429a      	cmp	r2, r3
 8005636:	d0b4      	beq.n	80055a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3718      	adds	r7, #24
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005642:	b480      	push	{r7}
 8005644:	b085      	sub	sp, #20
 8005646:	af00      	add	r7, sp, #0
 8005648:	60f8      	str	r0, [r7, #12]
 800564a:	60b9      	str	r1, [r7, #8]
 800564c:	4613      	mov	r3, r2
 800564e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	88fa      	ldrh	r2, [r7, #6]
 800565a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	88fa      	ldrh	r2, [r7, #6]
 8005660:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2222      	movs	r2, #34	@ 0x22
 800566c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d007      	beq.n	8005688 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68da      	ldr	r2, [r3, #12]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005686:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	695a      	ldr	r2, [r3, #20]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0201 	orr.w	r2, r2, #1
 8005696:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0220 	orr.w	r2, r2, #32
 80056a6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b095      	sub	sp, #84	@ 0x54
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	330c      	adds	r3, #12
 80056c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056c8:	e853 3f00 	ldrex	r3, [r3]
 80056cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	330c      	adds	r3, #12
 80056dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80056de:	643a      	str	r2, [r7, #64]	@ 0x40
 80056e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056e6:	e841 2300 	strex	r3, r2, [r1]
 80056ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1e5      	bne.n	80056be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	3314      	adds	r3, #20
 80056f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	e853 3f00 	ldrex	r3, [r3]
 8005700:	61fb      	str	r3, [r7, #28]
   return(result);
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	f023 0301 	bic.w	r3, r3, #1
 8005708:	64bb      	str	r3, [r7, #72]	@ 0x48
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	3314      	adds	r3, #20
 8005710:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005712:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005714:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005716:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005718:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800571a:	e841 2300 	strex	r3, r2, [r1]
 800571e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1e5      	bne.n	80056f2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800572a:	2b01      	cmp	r3, #1
 800572c:	d119      	bne.n	8005762 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	330c      	adds	r3, #12
 8005734:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	e853 3f00 	ldrex	r3, [r3]
 800573c:	60bb      	str	r3, [r7, #8]
   return(result);
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	f023 0310 	bic.w	r3, r3, #16
 8005744:	647b      	str	r3, [r7, #68]	@ 0x44
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	330c      	adds	r3, #12
 800574c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800574e:	61ba      	str	r2, [r7, #24]
 8005750:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005752:	6979      	ldr	r1, [r7, #20]
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	e841 2300 	strex	r3, r2, [r1]
 800575a:	613b      	str	r3, [r7, #16]
   return(result);
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1e5      	bne.n	800572e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2220      	movs	r2, #32
 8005766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005770:	bf00      	nop
 8005772:	3754      	adds	r7, #84	@ 0x54
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005788:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f7ff fee4 	bl	8005564 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800579c:	bf00      	nop
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b21      	cmp	r3, #33	@ 0x21
 80057b6:	d13e      	bne.n	8005836 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057c0:	d114      	bne.n	80057ec <UART_Transmit_IT+0x48>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d110      	bne.n	80057ec <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	881b      	ldrh	r3, [r3, #0]
 80057d4:	461a      	mov	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057de:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	1c9a      	adds	r2, r3, #2
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	621a      	str	r2, [r3, #32]
 80057ea:	e008      	b.n	80057fe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	1c59      	adds	r1, r3, #1
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	6211      	str	r1, [r2, #32]
 80057f6:	781a      	ldrb	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005802:	b29b      	uxth	r3, r3
 8005804:	3b01      	subs	r3, #1
 8005806:	b29b      	uxth	r3, r3
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	4619      	mov	r1, r3
 800580c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10f      	bne.n	8005832 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68da      	ldr	r2, [r3, #12]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005820:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68da      	ldr	r2, [r3, #12]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005830:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005832:	2300      	movs	r3, #0
 8005834:	e000      	b.n	8005838 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005836:	2302      	movs	r3, #2
  }
}
 8005838:	4618      	mov	r0, r3
 800583a:	3714      	adds	r7, #20
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68da      	ldr	r2, [r3, #12]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800585a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2220      	movs	r2, #32
 8005860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f7ff fe73 	bl	8005550 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3708      	adds	r7, #8
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b08c      	sub	sp, #48	@ 0x30
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b22      	cmp	r3, #34	@ 0x22
 8005886:	f040 80ae 	bne.w	80059e6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005892:	d117      	bne.n	80058c4 <UART_Receive_IT+0x50>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d113      	bne.n	80058c4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800589c:	2300      	movs	r3, #0
 800589e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058bc:	1c9a      	adds	r2, r3, #2
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80058c2:	e026      	b.n	8005912 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80058ca:	2300      	movs	r3, #0
 80058cc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058d6:	d007      	beq.n	80058e8 <UART_Receive_IT+0x74>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10a      	bne.n	80058f6 <UART_Receive_IT+0x82>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d106      	bne.n	80058f6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	b2da      	uxtb	r2, r3
 80058f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058f2:	701a      	strb	r2, [r3, #0]
 80058f4:	e008      	b.n	8005908 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005902:	b2da      	uxtb	r2, r3
 8005904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005906:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005916:	b29b      	uxth	r3, r3
 8005918:	3b01      	subs	r3, #1
 800591a:	b29b      	uxth	r3, r3
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	4619      	mov	r1, r3
 8005920:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005922:	2b00      	cmp	r3, #0
 8005924:	d15d      	bne.n	80059e2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68da      	ldr	r2, [r3, #12]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 0220 	bic.w	r2, r2, #32
 8005934:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68da      	ldr	r2, [r3, #12]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005944:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	695a      	ldr	r2, [r3, #20]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f022 0201 	bic.w	r2, r2, #1
 8005954:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2220      	movs	r2, #32
 800595a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005968:	2b01      	cmp	r3, #1
 800596a:	d135      	bne.n	80059d8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	330c      	adds	r3, #12
 8005978:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	e853 3f00 	ldrex	r3, [r3]
 8005980:	613b      	str	r3, [r7, #16]
   return(result);
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	f023 0310 	bic.w	r3, r3, #16
 8005988:	627b      	str	r3, [r7, #36]	@ 0x24
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	330c      	adds	r3, #12
 8005990:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005992:	623a      	str	r2, [r7, #32]
 8005994:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005996:	69f9      	ldr	r1, [r7, #28]
 8005998:	6a3a      	ldr	r2, [r7, #32]
 800599a:	e841 2300 	strex	r3, r2, [r1]
 800599e:	61bb      	str	r3, [r7, #24]
   return(result);
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1e5      	bne.n	8005972 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0310 	and.w	r3, r3, #16
 80059b0:	2b10      	cmp	r3, #16
 80059b2:	d10a      	bne.n	80059ca <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059b4:	2300      	movs	r3, #0
 80059b6:	60fb      	str	r3, [r7, #12]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	60fb      	str	r3, [r7, #12]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059ce:	4619      	mov	r1, r3
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f7ff fdd1 	bl	8005578 <HAL_UARTEx_RxEventCallback>
 80059d6:	e002      	b.n	80059de <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f7fc f9db 	bl	8001d94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80059de:	2300      	movs	r3, #0
 80059e0:	e002      	b.n	80059e8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80059e2:	2300      	movs	r3, #0
 80059e4:	e000      	b.n	80059e8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80059e6:	2302      	movs	r3, #2
  }
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3730      	adds	r7, #48	@ 0x30
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059f4:	b0c0      	sub	sp, #256	@ 0x100
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a0c:	68d9      	ldr	r1, [r3, #12]
 8005a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	ea40 0301 	orr.w	r3, r0, r1
 8005a18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a1e:	689a      	ldr	r2, [r3, #8]
 8005a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	431a      	orrs	r2, r3
 8005a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a34:	69db      	ldr	r3, [r3, #28]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005a48:	f021 010c 	bic.w	r1, r1, #12
 8005a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005a56:	430b      	orrs	r3, r1
 8005a58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a6a:	6999      	ldr	r1, [r3, #24]
 8005a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	ea40 0301 	orr.w	r3, r0, r1
 8005a76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	4b8f      	ldr	r3, [pc, #572]	@ (8005cbc <UART_SetConfig+0x2cc>)
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d005      	beq.n	8005a90 <UART_SetConfig+0xa0>
 8005a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	4b8d      	ldr	r3, [pc, #564]	@ (8005cc0 <UART_SetConfig+0x2d0>)
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d104      	bne.n	8005a9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a90:	f7fe fcea 	bl	8004468 <HAL_RCC_GetPCLK2Freq>
 8005a94:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005a98:	e003      	b.n	8005aa2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a9a:	f7fe fcd1 	bl	8004440 <HAL_RCC_GetPCLK1Freq>
 8005a9e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa6:	69db      	ldr	r3, [r3, #28]
 8005aa8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005aac:	f040 810c 	bne.w	8005cc8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ab0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005aba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005abe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005ac2:	4622      	mov	r2, r4
 8005ac4:	462b      	mov	r3, r5
 8005ac6:	1891      	adds	r1, r2, r2
 8005ac8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005aca:	415b      	adcs	r3, r3
 8005acc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ace:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005ad2:	4621      	mov	r1, r4
 8005ad4:	eb12 0801 	adds.w	r8, r2, r1
 8005ad8:	4629      	mov	r1, r5
 8005ada:	eb43 0901 	adc.w	r9, r3, r1
 8005ade:	f04f 0200 	mov.w	r2, #0
 8005ae2:	f04f 0300 	mov.w	r3, #0
 8005ae6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005aea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005aee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005af2:	4690      	mov	r8, r2
 8005af4:	4699      	mov	r9, r3
 8005af6:	4623      	mov	r3, r4
 8005af8:	eb18 0303 	adds.w	r3, r8, r3
 8005afc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005b00:	462b      	mov	r3, r5
 8005b02:	eb49 0303 	adc.w	r3, r9, r3
 8005b06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b16:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005b1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b1e:	460b      	mov	r3, r1
 8005b20:	18db      	adds	r3, r3, r3
 8005b22:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b24:	4613      	mov	r3, r2
 8005b26:	eb42 0303 	adc.w	r3, r2, r3
 8005b2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005b30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005b34:	f7fb f928 	bl	8000d88 <__aeabi_uldivmod>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	4b61      	ldr	r3, [pc, #388]	@ (8005cc4 <UART_SetConfig+0x2d4>)
 8005b3e:	fba3 2302 	umull	r2, r3, r3, r2
 8005b42:	095b      	lsrs	r3, r3, #5
 8005b44:	011c      	lsls	r4, r3, #4
 8005b46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b50:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005b54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005b58:	4642      	mov	r2, r8
 8005b5a:	464b      	mov	r3, r9
 8005b5c:	1891      	adds	r1, r2, r2
 8005b5e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005b60:	415b      	adcs	r3, r3
 8005b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005b68:	4641      	mov	r1, r8
 8005b6a:	eb12 0a01 	adds.w	sl, r2, r1
 8005b6e:	4649      	mov	r1, r9
 8005b70:	eb43 0b01 	adc.w	fp, r3, r1
 8005b74:	f04f 0200 	mov.w	r2, #0
 8005b78:	f04f 0300 	mov.w	r3, #0
 8005b7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b88:	4692      	mov	sl, r2
 8005b8a:	469b      	mov	fp, r3
 8005b8c:	4643      	mov	r3, r8
 8005b8e:	eb1a 0303 	adds.w	r3, sl, r3
 8005b92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b96:	464b      	mov	r3, r9
 8005b98:	eb4b 0303 	adc.w	r3, fp, r3
 8005b9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005bac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005bb0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	18db      	adds	r3, r3, r3
 8005bb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bba:	4613      	mov	r3, r2
 8005bbc:	eb42 0303 	adc.w	r3, r2, r3
 8005bc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005bc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005bca:	f7fb f8dd 	bl	8000d88 <__aeabi_uldivmod>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4611      	mov	r1, r2
 8005bd4:	4b3b      	ldr	r3, [pc, #236]	@ (8005cc4 <UART_SetConfig+0x2d4>)
 8005bd6:	fba3 2301 	umull	r2, r3, r3, r1
 8005bda:	095b      	lsrs	r3, r3, #5
 8005bdc:	2264      	movs	r2, #100	@ 0x64
 8005bde:	fb02 f303 	mul.w	r3, r2, r3
 8005be2:	1acb      	subs	r3, r1, r3
 8005be4:	00db      	lsls	r3, r3, #3
 8005be6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005bea:	4b36      	ldr	r3, [pc, #216]	@ (8005cc4 <UART_SetConfig+0x2d4>)
 8005bec:	fba3 2302 	umull	r2, r3, r3, r2
 8005bf0:	095b      	lsrs	r3, r3, #5
 8005bf2:	005b      	lsls	r3, r3, #1
 8005bf4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005bf8:	441c      	add	r4, r3
 8005bfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c04:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005c08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005c0c:	4642      	mov	r2, r8
 8005c0e:	464b      	mov	r3, r9
 8005c10:	1891      	adds	r1, r2, r2
 8005c12:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005c14:	415b      	adcs	r3, r3
 8005c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005c1c:	4641      	mov	r1, r8
 8005c1e:	1851      	adds	r1, r2, r1
 8005c20:	6339      	str	r1, [r7, #48]	@ 0x30
 8005c22:	4649      	mov	r1, r9
 8005c24:	414b      	adcs	r3, r1
 8005c26:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c28:	f04f 0200 	mov.w	r2, #0
 8005c2c:	f04f 0300 	mov.w	r3, #0
 8005c30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005c34:	4659      	mov	r1, fp
 8005c36:	00cb      	lsls	r3, r1, #3
 8005c38:	4651      	mov	r1, sl
 8005c3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c3e:	4651      	mov	r1, sl
 8005c40:	00ca      	lsls	r2, r1, #3
 8005c42:	4610      	mov	r0, r2
 8005c44:	4619      	mov	r1, r3
 8005c46:	4603      	mov	r3, r0
 8005c48:	4642      	mov	r2, r8
 8005c4a:	189b      	adds	r3, r3, r2
 8005c4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c50:	464b      	mov	r3, r9
 8005c52:	460a      	mov	r2, r1
 8005c54:	eb42 0303 	adc.w	r3, r2, r3
 8005c58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c68:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005c6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c70:	460b      	mov	r3, r1
 8005c72:	18db      	adds	r3, r3, r3
 8005c74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c76:	4613      	mov	r3, r2
 8005c78:	eb42 0303 	adc.w	r3, r2, r3
 8005c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005c86:	f7fb f87f 	bl	8000d88 <__aeabi_uldivmod>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005cc4 <UART_SetConfig+0x2d4>)
 8005c90:	fba3 1302 	umull	r1, r3, r3, r2
 8005c94:	095b      	lsrs	r3, r3, #5
 8005c96:	2164      	movs	r1, #100	@ 0x64
 8005c98:	fb01 f303 	mul.w	r3, r1, r3
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	00db      	lsls	r3, r3, #3
 8005ca0:	3332      	adds	r3, #50	@ 0x32
 8005ca2:	4a08      	ldr	r2, [pc, #32]	@ (8005cc4 <UART_SetConfig+0x2d4>)
 8005ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca8:	095b      	lsrs	r3, r3, #5
 8005caa:	f003 0207 	and.w	r2, r3, #7
 8005cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4422      	add	r2, r4
 8005cb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005cb8:	e106      	b.n	8005ec8 <UART_SetConfig+0x4d8>
 8005cba:	bf00      	nop
 8005cbc:	40011000 	.word	0x40011000
 8005cc0:	40011400 	.word	0x40011400
 8005cc4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005cd2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005cd6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005cda:	4642      	mov	r2, r8
 8005cdc:	464b      	mov	r3, r9
 8005cde:	1891      	adds	r1, r2, r2
 8005ce0:	6239      	str	r1, [r7, #32]
 8005ce2:	415b      	adcs	r3, r3
 8005ce4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ce6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cea:	4641      	mov	r1, r8
 8005cec:	1854      	adds	r4, r2, r1
 8005cee:	4649      	mov	r1, r9
 8005cf0:	eb43 0501 	adc.w	r5, r3, r1
 8005cf4:	f04f 0200 	mov.w	r2, #0
 8005cf8:	f04f 0300 	mov.w	r3, #0
 8005cfc:	00eb      	lsls	r3, r5, #3
 8005cfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d02:	00e2      	lsls	r2, r4, #3
 8005d04:	4614      	mov	r4, r2
 8005d06:	461d      	mov	r5, r3
 8005d08:	4643      	mov	r3, r8
 8005d0a:	18e3      	adds	r3, r4, r3
 8005d0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d10:	464b      	mov	r3, r9
 8005d12:	eb45 0303 	adc.w	r3, r5, r3
 8005d16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d2a:	f04f 0200 	mov.w	r2, #0
 8005d2e:	f04f 0300 	mov.w	r3, #0
 8005d32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005d36:	4629      	mov	r1, r5
 8005d38:	008b      	lsls	r3, r1, #2
 8005d3a:	4621      	mov	r1, r4
 8005d3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d40:	4621      	mov	r1, r4
 8005d42:	008a      	lsls	r2, r1, #2
 8005d44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005d48:	f7fb f81e 	bl	8000d88 <__aeabi_uldivmod>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	460b      	mov	r3, r1
 8005d50:	4b60      	ldr	r3, [pc, #384]	@ (8005ed4 <UART_SetConfig+0x4e4>)
 8005d52:	fba3 2302 	umull	r2, r3, r3, r2
 8005d56:	095b      	lsrs	r3, r3, #5
 8005d58:	011c      	lsls	r4, r3, #4
 8005d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005d68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005d6c:	4642      	mov	r2, r8
 8005d6e:	464b      	mov	r3, r9
 8005d70:	1891      	adds	r1, r2, r2
 8005d72:	61b9      	str	r1, [r7, #24]
 8005d74:	415b      	adcs	r3, r3
 8005d76:	61fb      	str	r3, [r7, #28]
 8005d78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d7c:	4641      	mov	r1, r8
 8005d7e:	1851      	adds	r1, r2, r1
 8005d80:	6139      	str	r1, [r7, #16]
 8005d82:	4649      	mov	r1, r9
 8005d84:	414b      	adcs	r3, r1
 8005d86:	617b      	str	r3, [r7, #20]
 8005d88:	f04f 0200 	mov.w	r2, #0
 8005d8c:	f04f 0300 	mov.w	r3, #0
 8005d90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d94:	4659      	mov	r1, fp
 8005d96:	00cb      	lsls	r3, r1, #3
 8005d98:	4651      	mov	r1, sl
 8005d9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d9e:	4651      	mov	r1, sl
 8005da0:	00ca      	lsls	r2, r1, #3
 8005da2:	4610      	mov	r0, r2
 8005da4:	4619      	mov	r1, r3
 8005da6:	4603      	mov	r3, r0
 8005da8:	4642      	mov	r2, r8
 8005daa:	189b      	adds	r3, r3, r2
 8005dac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005db0:	464b      	mov	r3, r9
 8005db2:	460a      	mov	r2, r1
 8005db4:	eb42 0303 	adc.w	r3, r2, r3
 8005db8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005dc6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005dc8:	f04f 0200 	mov.w	r2, #0
 8005dcc:	f04f 0300 	mov.w	r3, #0
 8005dd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005dd4:	4649      	mov	r1, r9
 8005dd6:	008b      	lsls	r3, r1, #2
 8005dd8:	4641      	mov	r1, r8
 8005dda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dde:	4641      	mov	r1, r8
 8005de0:	008a      	lsls	r2, r1, #2
 8005de2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005de6:	f7fa ffcf 	bl	8000d88 <__aeabi_uldivmod>
 8005dea:	4602      	mov	r2, r0
 8005dec:	460b      	mov	r3, r1
 8005dee:	4611      	mov	r1, r2
 8005df0:	4b38      	ldr	r3, [pc, #224]	@ (8005ed4 <UART_SetConfig+0x4e4>)
 8005df2:	fba3 2301 	umull	r2, r3, r3, r1
 8005df6:	095b      	lsrs	r3, r3, #5
 8005df8:	2264      	movs	r2, #100	@ 0x64
 8005dfa:	fb02 f303 	mul.w	r3, r2, r3
 8005dfe:	1acb      	subs	r3, r1, r3
 8005e00:	011b      	lsls	r3, r3, #4
 8005e02:	3332      	adds	r3, #50	@ 0x32
 8005e04:	4a33      	ldr	r2, [pc, #204]	@ (8005ed4 <UART_SetConfig+0x4e4>)
 8005e06:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0a:	095b      	lsrs	r3, r3, #5
 8005e0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e10:	441c      	add	r4, r3
 8005e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e16:	2200      	movs	r2, #0
 8005e18:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e1a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005e1c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005e20:	4642      	mov	r2, r8
 8005e22:	464b      	mov	r3, r9
 8005e24:	1891      	adds	r1, r2, r2
 8005e26:	60b9      	str	r1, [r7, #8]
 8005e28:	415b      	adcs	r3, r3
 8005e2a:	60fb      	str	r3, [r7, #12]
 8005e2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e30:	4641      	mov	r1, r8
 8005e32:	1851      	adds	r1, r2, r1
 8005e34:	6039      	str	r1, [r7, #0]
 8005e36:	4649      	mov	r1, r9
 8005e38:	414b      	adcs	r3, r1
 8005e3a:	607b      	str	r3, [r7, #4]
 8005e3c:	f04f 0200 	mov.w	r2, #0
 8005e40:	f04f 0300 	mov.w	r3, #0
 8005e44:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e48:	4659      	mov	r1, fp
 8005e4a:	00cb      	lsls	r3, r1, #3
 8005e4c:	4651      	mov	r1, sl
 8005e4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e52:	4651      	mov	r1, sl
 8005e54:	00ca      	lsls	r2, r1, #3
 8005e56:	4610      	mov	r0, r2
 8005e58:	4619      	mov	r1, r3
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	4642      	mov	r2, r8
 8005e5e:	189b      	adds	r3, r3, r2
 8005e60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e62:	464b      	mov	r3, r9
 8005e64:	460a      	mov	r2, r1
 8005e66:	eb42 0303 	adc.w	r3, r2, r3
 8005e6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e76:	667a      	str	r2, [r7, #100]	@ 0x64
 8005e78:	f04f 0200 	mov.w	r2, #0
 8005e7c:	f04f 0300 	mov.w	r3, #0
 8005e80:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005e84:	4649      	mov	r1, r9
 8005e86:	008b      	lsls	r3, r1, #2
 8005e88:	4641      	mov	r1, r8
 8005e8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e8e:	4641      	mov	r1, r8
 8005e90:	008a      	lsls	r2, r1, #2
 8005e92:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005e96:	f7fa ff77 	bl	8000d88 <__aeabi_uldivmod>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ed4 <UART_SetConfig+0x4e4>)
 8005ea0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ea4:	095b      	lsrs	r3, r3, #5
 8005ea6:	2164      	movs	r1, #100	@ 0x64
 8005ea8:	fb01 f303 	mul.w	r3, r1, r3
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	011b      	lsls	r3, r3, #4
 8005eb0:	3332      	adds	r3, #50	@ 0x32
 8005eb2:	4a08      	ldr	r2, [pc, #32]	@ (8005ed4 <UART_SetConfig+0x4e4>)
 8005eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb8:	095b      	lsrs	r3, r3, #5
 8005eba:	f003 020f 	and.w	r2, r3, #15
 8005ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4422      	add	r2, r4
 8005ec6:	609a      	str	r2, [r3, #8]
}
 8005ec8:	bf00      	nop
 8005eca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ed4:	51eb851f 	.word	0x51eb851f

08005ed8 <__cvt>:
 8005ed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005edc:	ec57 6b10 	vmov	r6, r7, d0
 8005ee0:	2f00      	cmp	r7, #0
 8005ee2:	460c      	mov	r4, r1
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	463b      	mov	r3, r7
 8005ee8:	bfbb      	ittet	lt
 8005eea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005eee:	461f      	movlt	r7, r3
 8005ef0:	2300      	movge	r3, #0
 8005ef2:	232d      	movlt	r3, #45	@ 0x2d
 8005ef4:	700b      	strb	r3, [r1, #0]
 8005ef6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ef8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005efc:	4691      	mov	r9, r2
 8005efe:	f023 0820 	bic.w	r8, r3, #32
 8005f02:	bfbc      	itt	lt
 8005f04:	4632      	movlt	r2, r6
 8005f06:	4616      	movlt	r6, r2
 8005f08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005f0c:	d005      	beq.n	8005f1a <__cvt+0x42>
 8005f0e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005f12:	d100      	bne.n	8005f16 <__cvt+0x3e>
 8005f14:	3401      	adds	r4, #1
 8005f16:	2102      	movs	r1, #2
 8005f18:	e000      	b.n	8005f1c <__cvt+0x44>
 8005f1a:	2103      	movs	r1, #3
 8005f1c:	ab03      	add	r3, sp, #12
 8005f1e:	9301      	str	r3, [sp, #4]
 8005f20:	ab02      	add	r3, sp, #8
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	ec47 6b10 	vmov	d0, r6, r7
 8005f28:	4653      	mov	r3, sl
 8005f2a:	4622      	mov	r2, r4
 8005f2c:	f001 f98c 	bl	8007248 <_dtoa_r>
 8005f30:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005f34:	4605      	mov	r5, r0
 8005f36:	d119      	bne.n	8005f6c <__cvt+0x94>
 8005f38:	f019 0f01 	tst.w	r9, #1
 8005f3c:	d00e      	beq.n	8005f5c <__cvt+0x84>
 8005f3e:	eb00 0904 	add.w	r9, r0, r4
 8005f42:	2200      	movs	r2, #0
 8005f44:	2300      	movs	r3, #0
 8005f46:	4630      	mov	r0, r6
 8005f48:	4639      	mov	r1, r7
 8005f4a:	f7fa fded 	bl	8000b28 <__aeabi_dcmpeq>
 8005f4e:	b108      	cbz	r0, 8005f54 <__cvt+0x7c>
 8005f50:	f8cd 900c 	str.w	r9, [sp, #12]
 8005f54:	2230      	movs	r2, #48	@ 0x30
 8005f56:	9b03      	ldr	r3, [sp, #12]
 8005f58:	454b      	cmp	r3, r9
 8005f5a:	d31e      	bcc.n	8005f9a <__cvt+0xc2>
 8005f5c:	9b03      	ldr	r3, [sp, #12]
 8005f5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005f60:	1b5b      	subs	r3, r3, r5
 8005f62:	4628      	mov	r0, r5
 8005f64:	6013      	str	r3, [r2, #0]
 8005f66:	b004      	add	sp, #16
 8005f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005f70:	eb00 0904 	add.w	r9, r0, r4
 8005f74:	d1e5      	bne.n	8005f42 <__cvt+0x6a>
 8005f76:	7803      	ldrb	r3, [r0, #0]
 8005f78:	2b30      	cmp	r3, #48	@ 0x30
 8005f7a:	d10a      	bne.n	8005f92 <__cvt+0xba>
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	2300      	movs	r3, #0
 8005f80:	4630      	mov	r0, r6
 8005f82:	4639      	mov	r1, r7
 8005f84:	f7fa fdd0 	bl	8000b28 <__aeabi_dcmpeq>
 8005f88:	b918      	cbnz	r0, 8005f92 <__cvt+0xba>
 8005f8a:	f1c4 0401 	rsb	r4, r4, #1
 8005f8e:	f8ca 4000 	str.w	r4, [sl]
 8005f92:	f8da 3000 	ldr.w	r3, [sl]
 8005f96:	4499      	add	r9, r3
 8005f98:	e7d3      	b.n	8005f42 <__cvt+0x6a>
 8005f9a:	1c59      	adds	r1, r3, #1
 8005f9c:	9103      	str	r1, [sp, #12]
 8005f9e:	701a      	strb	r2, [r3, #0]
 8005fa0:	e7d9      	b.n	8005f56 <__cvt+0x7e>

08005fa2 <__exponent>:
 8005fa2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fa4:	2900      	cmp	r1, #0
 8005fa6:	bfba      	itte	lt
 8005fa8:	4249      	neglt	r1, r1
 8005faa:	232d      	movlt	r3, #45	@ 0x2d
 8005fac:	232b      	movge	r3, #43	@ 0x2b
 8005fae:	2909      	cmp	r1, #9
 8005fb0:	7002      	strb	r2, [r0, #0]
 8005fb2:	7043      	strb	r3, [r0, #1]
 8005fb4:	dd29      	ble.n	800600a <__exponent+0x68>
 8005fb6:	f10d 0307 	add.w	r3, sp, #7
 8005fba:	461d      	mov	r5, r3
 8005fbc:	270a      	movs	r7, #10
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	fbb1 f6f7 	udiv	r6, r1, r7
 8005fc4:	fb07 1416 	mls	r4, r7, r6, r1
 8005fc8:	3430      	adds	r4, #48	@ 0x30
 8005fca:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005fce:	460c      	mov	r4, r1
 8005fd0:	2c63      	cmp	r4, #99	@ 0x63
 8005fd2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005fd6:	4631      	mov	r1, r6
 8005fd8:	dcf1      	bgt.n	8005fbe <__exponent+0x1c>
 8005fda:	3130      	adds	r1, #48	@ 0x30
 8005fdc:	1e94      	subs	r4, r2, #2
 8005fde:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005fe2:	1c41      	adds	r1, r0, #1
 8005fe4:	4623      	mov	r3, r4
 8005fe6:	42ab      	cmp	r3, r5
 8005fe8:	d30a      	bcc.n	8006000 <__exponent+0x5e>
 8005fea:	f10d 0309 	add.w	r3, sp, #9
 8005fee:	1a9b      	subs	r3, r3, r2
 8005ff0:	42ac      	cmp	r4, r5
 8005ff2:	bf88      	it	hi
 8005ff4:	2300      	movhi	r3, #0
 8005ff6:	3302      	adds	r3, #2
 8005ff8:	4403      	add	r3, r0
 8005ffa:	1a18      	subs	r0, r3, r0
 8005ffc:	b003      	add	sp, #12
 8005ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006000:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006004:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006008:	e7ed      	b.n	8005fe6 <__exponent+0x44>
 800600a:	2330      	movs	r3, #48	@ 0x30
 800600c:	3130      	adds	r1, #48	@ 0x30
 800600e:	7083      	strb	r3, [r0, #2]
 8006010:	70c1      	strb	r1, [r0, #3]
 8006012:	1d03      	adds	r3, r0, #4
 8006014:	e7f1      	b.n	8005ffa <__exponent+0x58>
	...

08006018 <_printf_float>:
 8006018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800601c:	b08d      	sub	sp, #52	@ 0x34
 800601e:	460c      	mov	r4, r1
 8006020:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006024:	4616      	mov	r6, r2
 8006026:	461f      	mov	r7, r3
 8006028:	4605      	mov	r5, r0
 800602a:	f001 f805 	bl	8007038 <_localeconv_r>
 800602e:	6803      	ldr	r3, [r0, #0]
 8006030:	9304      	str	r3, [sp, #16]
 8006032:	4618      	mov	r0, r3
 8006034:	f7fa f94c 	bl	80002d0 <strlen>
 8006038:	2300      	movs	r3, #0
 800603a:	930a      	str	r3, [sp, #40]	@ 0x28
 800603c:	f8d8 3000 	ldr.w	r3, [r8]
 8006040:	9005      	str	r0, [sp, #20]
 8006042:	3307      	adds	r3, #7
 8006044:	f023 0307 	bic.w	r3, r3, #7
 8006048:	f103 0208 	add.w	r2, r3, #8
 800604c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006050:	f8d4 b000 	ldr.w	fp, [r4]
 8006054:	f8c8 2000 	str.w	r2, [r8]
 8006058:	e9d3 8900 	ldrd	r8, r9, [r3]
 800605c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006060:	9307      	str	r3, [sp, #28]
 8006062:	f8cd 8018 	str.w	r8, [sp, #24]
 8006066:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800606a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800606e:	4b9c      	ldr	r3, [pc, #624]	@ (80062e0 <_printf_float+0x2c8>)
 8006070:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006074:	f7fa fd8a 	bl	8000b8c <__aeabi_dcmpun>
 8006078:	bb70      	cbnz	r0, 80060d8 <_printf_float+0xc0>
 800607a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800607e:	4b98      	ldr	r3, [pc, #608]	@ (80062e0 <_printf_float+0x2c8>)
 8006080:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006084:	f7fa fd64 	bl	8000b50 <__aeabi_dcmple>
 8006088:	bb30      	cbnz	r0, 80060d8 <_printf_float+0xc0>
 800608a:	2200      	movs	r2, #0
 800608c:	2300      	movs	r3, #0
 800608e:	4640      	mov	r0, r8
 8006090:	4649      	mov	r1, r9
 8006092:	f7fa fd53 	bl	8000b3c <__aeabi_dcmplt>
 8006096:	b110      	cbz	r0, 800609e <_printf_float+0x86>
 8006098:	232d      	movs	r3, #45	@ 0x2d
 800609a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800609e:	4a91      	ldr	r2, [pc, #580]	@ (80062e4 <_printf_float+0x2cc>)
 80060a0:	4b91      	ldr	r3, [pc, #580]	@ (80062e8 <_printf_float+0x2d0>)
 80060a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80060a6:	bf94      	ite	ls
 80060a8:	4690      	movls	r8, r2
 80060aa:	4698      	movhi	r8, r3
 80060ac:	2303      	movs	r3, #3
 80060ae:	6123      	str	r3, [r4, #16]
 80060b0:	f02b 0304 	bic.w	r3, fp, #4
 80060b4:	6023      	str	r3, [r4, #0]
 80060b6:	f04f 0900 	mov.w	r9, #0
 80060ba:	9700      	str	r7, [sp, #0]
 80060bc:	4633      	mov	r3, r6
 80060be:	aa0b      	add	r2, sp, #44	@ 0x2c
 80060c0:	4621      	mov	r1, r4
 80060c2:	4628      	mov	r0, r5
 80060c4:	f000 f9d2 	bl	800646c <_printf_common>
 80060c8:	3001      	adds	r0, #1
 80060ca:	f040 808d 	bne.w	80061e8 <_printf_float+0x1d0>
 80060ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80060d2:	b00d      	add	sp, #52	@ 0x34
 80060d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d8:	4642      	mov	r2, r8
 80060da:	464b      	mov	r3, r9
 80060dc:	4640      	mov	r0, r8
 80060de:	4649      	mov	r1, r9
 80060e0:	f7fa fd54 	bl	8000b8c <__aeabi_dcmpun>
 80060e4:	b140      	cbz	r0, 80060f8 <_printf_float+0xe0>
 80060e6:	464b      	mov	r3, r9
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	bfbc      	itt	lt
 80060ec:	232d      	movlt	r3, #45	@ 0x2d
 80060ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80060f2:	4a7e      	ldr	r2, [pc, #504]	@ (80062ec <_printf_float+0x2d4>)
 80060f4:	4b7e      	ldr	r3, [pc, #504]	@ (80062f0 <_printf_float+0x2d8>)
 80060f6:	e7d4      	b.n	80060a2 <_printf_float+0x8a>
 80060f8:	6863      	ldr	r3, [r4, #4]
 80060fa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80060fe:	9206      	str	r2, [sp, #24]
 8006100:	1c5a      	adds	r2, r3, #1
 8006102:	d13b      	bne.n	800617c <_printf_float+0x164>
 8006104:	2306      	movs	r3, #6
 8006106:	6063      	str	r3, [r4, #4]
 8006108:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800610c:	2300      	movs	r3, #0
 800610e:	6022      	str	r2, [r4, #0]
 8006110:	9303      	str	r3, [sp, #12]
 8006112:	ab0a      	add	r3, sp, #40	@ 0x28
 8006114:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006118:	ab09      	add	r3, sp, #36	@ 0x24
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	6861      	ldr	r1, [r4, #4]
 800611e:	ec49 8b10 	vmov	d0, r8, r9
 8006122:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006126:	4628      	mov	r0, r5
 8006128:	f7ff fed6 	bl	8005ed8 <__cvt>
 800612c:	9b06      	ldr	r3, [sp, #24]
 800612e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006130:	2b47      	cmp	r3, #71	@ 0x47
 8006132:	4680      	mov	r8, r0
 8006134:	d129      	bne.n	800618a <_printf_float+0x172>
 8006136:	1cc8      	adds	r0, r1, #3
 8006138:	db02      	blt.n	8006140 <_printf_float+0x128>
 800613a:	6863      	ldr	r3, [r4, #4]
 800613c:	4299      	cmp	r1, r3
 800613e:	dd41      	ble.n	80061c4 <_printf_float+0x1ac>
 8006140:	f1aa 0a02 	sub.w	sl, sl, #2
 8006144:	fa5f fa8a 	uxtb.w	sl, sl
 8006148:	3901      	subs	r1, #1
 800614a:	4652      	mov	r2, sl
 800614c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006150:	9109      	str	r1, [sp, #36]	@ 0x24
 8006152:	f7ff ff26 	bl	8005fa2 <__exponent>
 8006156:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006158:	1813      	adds	r3, r2, r0
 800615a:	2a01      	cmp	r2, #1
 800615c:	4681      	mov	r9, r0
 800615e:	6123      	str	r3, [r4, #16]
 8006160:	dc02      	bgt.n	8006168 <_printf_float+0x150>
 8006162:	6822      	ldr	r2, [r4, #0]
 8006164:	07d2      	lsls	r2, r2, #31
 8006166:	d501      	bpl.n	800616c <_printf_float+0x154>
 8006168:	3301      	adds	r3, #1
 800616a:	6123      	str	r3, [r4, #16]
 800616c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006170:	2b00      	cmp	r3, #0
 8006172:	d0a2      	beq.n	80060ba <_printf_float+0xa2>
 8006174:	232d      	movs	r3, #45	@ 0x2d
 8006176:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800617a:	e79e      	b.n	80060ba <_printf_float+0xa2>
 800617c:	9a06      	ldr	r2, [sp, #24]
 800617e:	2a47      	cmp	r2, #71	@ 0x47
 8006180:	d1c2      	bne.n	8006108 <_printf_float+0xf0>
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1c0      	bne.n	8006108 <_printf_float+0xf0>
 8006186:	2301      	movs	r3, #1
 8006188:	e7bd      	b.n	8006106 <_printf_float+0xee>
 800618a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800618e:	d9db      	bls.n	8006148 <_printf_float+0x130>
 8006190:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006194:	d118      	bne.n	80061c8 <_printf_float+0x1b0>
 8006196:	2900      	cmp	r1, #0
 8006198:	6863      	ldr	r3, [r4, #4]
 800619a:	dd0b      	ble.n	80061b4 <_printf_float+0x19c>
 800619c:	6121      	str	r1, [r4, #16]
 800619e:	b913      	cbnz	r3, 80061a6 <_printf_float+0x18e>
 80061a0:	6822      	ldr	r2, [r4, #0]
 80061a2:	07d0      	lsls	r0, r2, #31
 80061a4:	d502      	bpl.n	80061ac <_printf_float+0x194>
 80061a6:	3301      	adds	r3, #1
 80061a8:	440b      	add	r3, r1
 80061aa:	6123      	str	r3, [r4, #16]
 80061ac:	65a1      	str	r1, [r4, #88]	@ 0x58
 80061ae:	f04f 0900 	mov.w	r9, #0
 80061b2:	e7db      	b.n	800616c <_printf_float+0x154>
 80061b4:	b913      	cbnz	r3, 80061bc <_printf_float+0x1a4>
 80061b6:	6822      	ldr	r2, [r4, #0]
 80061b8:	07d2      	lsls	r2, r2, #31
 80061ba:	d501      	bpl.n	80061c0 <_printf_float+0x1a8>
 80061bc:	3302      	adds	r3, #2
 80061be:	e7f4      	b.n	80061aa <_printf_float+0x192>
 80061c0:	2301      	movs	r3, #1
 80061c2:	e7f2      	b.n	80061aa <_printf_float+0x192>
 80061c4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80061c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061ca:	4299      	cmp	r1, r3
 80061cc:	db05      	blt.n	80061da <_printf_float+0x1c2>
 80061ce:	6823      	ldr	r3, [r4, #0]
 80061d0:	6121      	str	r1, [r4, #16]
 80061d2:	07d8      	lsls	r0, r3, #31
 80061d4:	d5ea      	bpl.n	80061ac <_printf_float+0x194>
 80061d6:	1c4b      	adds	r3, r1, #1
 80061d8:	e7e7      	b.n	80061aa <_printf_float+0x192>
 80061da:	2900      	cmp	r1, #0
 80061dc:	bfd4      	ite	le
 80061de:	f1c1 0202 	rsble	r2, r1, #2
 80061e2:	2201      	movgt	r2, #1
 80061e4:	4413      	add	r3, r2
 80061e6:	e7e0      	b.n	80061aa <_printf_float+0x192>
 80061e8:	6823      	ldr	r3, [r4, #0]
 80061ea:	055a      	lsls	r2, r3, #21
 80061ec:	d407      	bmi.n	80061fe <_printf_float+0x1e6>
 80061ee:	6923      	ldr	r3, [r4, #16]
 80061f0:	4642      	mov	r2, r8
 80061f2:	4631      	mov	r1, r6
 80061f4:	4628      	mov	r0, r5
 80061f6:	47b8      	blx	r7
 80061f8:	3001      	adds	r0, #1
 80061fa:	d12b      	bne.n	8006254 <_printf_float+0x23c>
 80061fc:	e767      	b.n	80060ce <_printf_float+0xb6>
 80061fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006202:	f240 80dd 	bls.w	80063c0 <_printf_float+0x3a8>
 8006206:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800620a:	2200      	movs	r2, #0
 800620c:	2300      	movs	r3, #0
 800620e:	f7fa fc8b 	bl	8000b28 <__aeabi_dcmpeq>
 8006212:	2800      	cmp	r0, #0
 8006214:	d033      	beq.n	800627e <_printf_float+0x266>
 8006216:	4a37      	ldr	r2, [pc, #220]	@ (80062f4 <_printf_float+0x2dc>)
 8006218:	2301      	movs	r3, #1
 800621a:	4631      	mov	r1, r6
 800621c:	4628      	mov	r0, r5
 800621e:	47b8      	blx	r7
 8006220:	3001      	adds	r0, #1
 8006222:	f43f af54 	beq.w	80060ce <_printf_float+0xb6>
 8006226:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800622a:	4543      	cmp	r3, r8
 800622c:	db02      	blt.n	8006234 <_printf_float+0x21c>
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	07d8      	lsls	r0, r3, #31
 8006232:	d50f      	bpl.n	8006254 <_printf_float+0x23c>
 8006234:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006238:	4631      	mov	r1, r6
 800623a:	4628      	mov	r0, r5
 800623c:	47b8      	blx	r7
 800623e:	3001      	adds	r0, #1
 8006240:	f43f af45 	beq.w	80060ce <_printf_float+0xb6>
 8006244:	f04f 0900 	mov.w	r9, #0
 8006248:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800624c:	f104 0a1a 	add.w	sl, r4, #26
 8006250:	45c8      	cmp	r8, r9
 8006252:	dc09      	bgt.n	8006268 <_printf_float+0x250>
 8006254:	6823      	ldr	r3, [r4, #0]
 8006256:	079b      	lsls	r3, r3, #30
 8006258:	f100 8103 	bmi.w	8006462 <_printf_float+0x44a>
 800625c:	68e0      	ldr	r0, [r4, #12]
 800625e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006260:	4298      	cmp	r0, r3
 8006262:	bfb8      	it	lt
 8006264:	4618      	movlt	r0, r3
 8006266:	e734      	b.n	80060d2 <_printf_float+0xba>
 8006268:	2301      	movs	r3, #1
 800626a:	4652      	mov	r2, sl
 800626c:	4631      	mov	r1, r6
 800626e:	4628      	mov	r0, r5
 8006270:	47b8      	blx	r7
 8006272:	3001      	adds	r0, #1
 8006274:	f43f af2b 	beq.w	80060ce <_printf_float+0xb6>
 8006278:	f109 0901 	add.w	r9, r9, #1
 800627c:	e7e8      	b.n	8006250 <_printf_float+0x238>
 800627e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006280:	2b00      	cmp	r3, #0
 8006282:	dc39      	bgt.n	80062f8 <_printf_float+0x2e0>
 8006284:	4a1b      	ldr	r2, [pc, #108]	@ (80062f4 <_printf_float+0x2dc>)
 8006286:	2301      	movs	r3, #1
 8006288:	4631      	mov	r1, r6
 800628a:	4628      	mov	r0, r5
 800628c:	47b8      	blx	r7
 800628e:	3001      	adds	r0, #1
 8006290:	f43f af1d 	beq.w	80060ce <_printf_float+0xb6>
 8006294:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006298:	ea59 0303 	orrs.w	r3, r9, r3
 800629c:	d102      	bne.n	80062a4 <_printf_float+0x28c>
 800629e:	6823      	ldr	r3, [r4, #0]
 80062a0:	07d9      	lsls	r1, r3, #31
 80062a2:	d5d7      	bpl.n	8006254 <_printf_float+0x23c>
 80062a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062a8:	4631      	mov	r1, r6
 80062aa:	4628      	mov	r0, r5
 80062ac:	47b8      	blx	r7
 80062ae:	3001      	adds	r0, #1
 80062b0:	f43f af0d 	beq.w	80060ce <_printf_float+0xb6>
 80062b4:	f04f 0a00 	mov.w	sl, #0
 80062b8:	f104 0b1a 	add.w	fp, r4, #26
 80062bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062be:	425b      	negs	r3, r3
 80062c0:	4553      	cmp	r3, sl
 80062c2:	dc01      	bgt.n	80062c8 <_printf_float+0x2b0>
 80062c4:	464b      	mov	r3, r9
 80062c6:	e793      	b.n	80061f0 <_printf_float+0x1d8>
 80062c8:	2301      	movs	r3, #1
 80062ca:	465a      	mov	r2, fp
 80062cc:	4631      	mov	r1, r6
 80062ce:	4628      	mov	r0, r5
 80062d0:	47b8      	blx	r7
 80062d2:	3001      	adds	r0, #1
 80062d4:	f43f aefb 	beq.w	80060ce <_printf_float+0xb6>
 80062d8:	f10a 0a01 	add.w	sl, sl, #1
 80062dc:	e7ee      	b.n	80062bc <_printf_float+0x2a4>
 80062de:	bf00      	nop
 80062e0:	7fefffff 	.word	0x7fefffff
 80062e4:	0800a8a4 	.word	0x0800a8a4
 80062e8:	0800a8a8 	.word	0x0800a8a8
 80062ec:	0800a8ac 	.word	0x0800a8ac
 80062f0:	0800a8b0 	.word	0x0800a8b0
 80062f4:	0800a8b4 	.word	0x0800a8b4
 80062f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80062fa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80062fe:	4553      	cmp	r3, sl
 8006300:	bfa8      	it	ge
 8006302:	4653      	movge	r3, sl
 8006304:	2b00      	cmp	r3, #0
 8006306:	4699      	mov	r9, r3
 8006308:	dc36      	bgt.n	8006378 <_printf_float+0x360>
 800630a:	f04f 0b00 	mov.w	fp, #0
 800630e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006312:	f104 021a 	add.w	r2, r4, #26
 8006316:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006318:	9306      	str	r3, [sp, #24]
 800631a:	eba3 0309 	sub.w	r3, r3, r9
 800631e:	455b      	cmp	r3, fp
 8006320:	dc31      	bgt.n	8006386 <_printf_float+0x36e>
 8006322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006324:	459a      	cmp	sl, r3
 8006326:	dc3a      	bgt.n	800639e <_printf_float+0x386>
 8006328:	6823      	ldr	r3, [r4, #0]
 800632a:	07da      	lsls	r2, r3, #31
 800632c:	d437      	bmi.n	800639e <_printf_float+0x386>
 800632e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006330:	ebaa 0903 	sub.w	r9, sl, r3
 8006334:	9b06      	ldr	r3, [sp, #24]
 8006336:	ebaa 0303 	sub.w	r3, sl, r3
 800633a:	4599      	cmp	r9, r3
 800633c:	bfa8      	it	ge
 800633e:	4699      	movge	r9, r3
 8006340:	f1b9 0f00 	cmp.w	r9, #0
 8006344:	dc33      	bgt.n	80063ae <_printf_float+0x396>
 8006346:	f04f 0800 	mov.w	r8, #0
 800634a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800634e:	f104 0b1a 	add.w	fp, r4, #26
 8006352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006354:	ebaa 0303 	sub.w	r3, sl, r3
 8006358:	eba3 0309 	sub.w	r3, r3, r9
 800635c:	4543      	cmp	r3, r8
 800635e:	f77f af79 	ble.w	8006254 <_printf_float+0x23c>
 8006362:	2301      	movs	r3, #1
 8006364:	465a      	mov	r2, fp
 8006366:	4631      	mov	r1, r6
 8006368:	4628      	mov	r0, r5
 800636a:	47b8      	blx	r7
 800636c:	3001      	adds	r0, #1
 800636e:	f43f aeae 	beq.w	80060ce <_printf_float+0xb6>
 8006372:	f108 0801 	add.w	r8, r8, #1
 8006376:	e7ec      	b.n	8006352 <_printf_float+0x33a>
 8006378:	4642      	mov	r2, r8
 800637a:	4631      	mov	r1, r6
 800637c:	4628      	mov	r0, r5
 800637e:	47b8      	blx	r7
 8006380:	3001      	adds	r0, #1
 8006382:	d1c2      	bne.n	800630a <_printf_float+0x2f2>
 8006384:	e6a3      	b.n	80060ce <_printf_float+0xb6>
 8006386:	2301      	movs	r3, #1
 8006388:	4631      	mov	r1, r6
 800638a:	4628      	mov	r0, r5
 800638c:	9206      	str	r2, [sp, #24]
 800638e:	47b8      	blx	r7
 8006390:	3001      	adds	r0, #1
 8006392:	f43f ae9c 	beq.w	80060ce <_printf_float+0xb6>
 8006396:	9a06      	ldr	r2, [sp, #24]
 8006398:	f10b 0b01 	add.w	fp, fp, #1
 800639c:	e7bb      	b.n	8006316 <_printf_float+0x2fe>
 800639e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063a2:	4631      	mov	r1, r6
 80063a4:	4628      	mov	r0, r5
 80063a6:	47b8      	blx	r7
 80063a8:	3001      	adds	r0, #1
 80063aa:	d1c0      	bne.n	800632e <_printf_float+0x316>
 80063ac:	e68f      	b.n	80060ce <_printf_float+0xb6>
 80063ae:	9a06      	ldr	r2, [sp, #24]
 80063b0:	464b      	mov	r3, r9
 80063b2:	4442      	add	r2, r8
 80063b4:	4631      	mov	r1, r6
 80063b6:	4628      	mov	r0, r5
 80063b8:	47b8      	blx	r7
 80063ba:	3001      	adds	r0, #1
 80063bc:	d1c3      	bne.n	8006346 <_printf_float+0x32e>
 80063be:	e686      	b.n	80060ce <_printf_float+0xb6>
 80063c0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80063c4:	f1ba 0f01 	cmp.w	sl, #1
 80063c8:	dc01      	bgt.n	80063ce <_printf_float+0x3b6>
 80063ca:	07db      	lsls	r3, r3, #31
 80063cc:	d536      	bpl.n	800643c <_printf_float+0x424>
 80063ce:	2301      	movs	r3, #1
 80063d0:	4642      	mov	r2, r8
 80063d2:	4631      	mov	r1, r6
 80063d4:	4628      	mov	r0, r5
 80063d6:	47b8      	blx	r7
 80063d8:	3001      	adds	r0, #1
 80063da:	f43f ae78 	beq.w	80060ce <_printf_float+0xb6>
 80063de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063e2:	4631      	mov	r1, r6
 80063e4:	4628      	mov	r0, r5
 80063e6:	47b8      	blx	r7
 80063e8:	3001      	adds	r0, #1
 80063ea:	f43f ae70 	beq.w	80060ce <_printf_float+0xb6>
 80063ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80063f2:	2200      	movs	r2, #0
 80063f4:	2300      	movs	r3, #0
 80063f6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80063fa:	f7fa fb95 	bl	8000b28 <__aeabi_dcmpeq>
 80063fe:	b9c0      	cbnz	r0, 8006432 <_printf_float+0x41a>
 8006400:	4653      	mov	r3, sl
 8006402:	f108 0201 	add.w	r2, r8, #1
 8006406:	4631      	mov	r1, r6
 8006408:	4628      	mov	r0, r5
 800640a:	47b8      	blx	r7
 800640c:	3001      	adds	r0, #1
 800640e:	d10c      	bne.n	800642a <_printf_float+0x412>
 8006410:	e65d      	b.n	80060ce <_printf_float+0xb6>
 8006412:	2301      	movs	r3, #1
 8006414:	465a      	mov	r2, fp
 8006416:	4631      	mov	r1, r6
 8006418:	4628      	mov	r0, r5
 800641a:	47b8      	blx	r7
 800641c:	3001      	adds	r0, #1
 800641e:	f43f ae56 	beq.w	80060ce <_printf_float+0xb6>
 8006422:	f108 0801 	add.w	r8, r8, #1
 8006426:	45d0      	cmp	r8, sl
 8006428:	dbf3      	blt.n	8006412 <_printf_float+0x3fa>
 800642a:	464b      	mov	r3, r9
 800642c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006430:	e6df      	b.n	80061f2 <_printf_float+0x1da>
 8006432:	f04f 0800 	mov.w	r8, #0
 8006436:	f104 0b1a 	add.w	fp, r4, #26
 800643a:	e7f4      	b.n	8006426 <_printf_float+0x40e>
 800643c:	2301      	movs	r3, #1
 800643e:	4642      	mov	r2, r8
 8006440:	e7e1      	b.n	8006406 <_printf_float+0x3ee>
 8006442:	2301      	movs	r3, #1
 8006444:	464a      	mov	r2, r9
 8006446:	4631      	mov	r1, r6
 8006448:	4628      	mov	r0, r5
 800644a:	47b8      	blx	r7
 800644c:	3001      	adds	r0, #1
 800644e:	f43f ae3e 	beq.w	80060ce <_printf_float+0xb6>
 8006452:	f108 0801 	add.w	r8, r8, #1
 8006456:	68e3      	ldr	r3, [r4, #12]
 8006458:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800645a:	1a5b      	subs	r3, r3, r1
 800645c:	4543      	cmp	r3, r8
 800645e:	dcf0      	bgt.n	8006442 <_printf_float+0x42a>
 8006460:	e6fc      	b.n	800625c <_printf_float+0x244>
 8006462:	f04f 0800 	mov.w	r8, #0
 8006466:	f104 0919 	add.w	r9, r4, #25
 800646a:	e7f4      	b.n	8006456 <_printf_float+0x43e>

0800646c <_printf_common>:
 800646c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006470:	4616      	mov	r6, r2
 8006472:	4698      	mov	r8, r3
 8006474:	688a      	ldr	r2, [r1, #8]
 8006476:	690b      	ldr	r3, [r1, #16]
 8006478:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800647c:	4293      	cmp	r3, r2
 800647e:	bfb8      	it	lt
 8006480:	4613      	movlt	r3, r2
 8006482:	6033      	str	r3, [r6, #0]
 8006484:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006488:	4607      	mov	r7, r0
 800648a:	460c      	mov	r4, r1
 800648c:	b10a      	cbz	r2, 8006492 <_printf_common+0x26>
 800648e:	3301      	adds	r3, #1
 8006490:	6033      	str	r3, [r6, #0]
 8006492:	6823      	ldr	r3, [r4, #0]
 8006494:	0699      	lsls	r1, r3, #26
 8006496:	bf42      	ittt	mi
 8006498:	6833      	ldrmi	r3, [r6, #0]
 800649a:	3302      	addmi	r3, #2
 800649c:	6033      	strmi	r3, [r6, #0]
 800649e:	6825      	ldr	r5, [r4, #0]
 80064a0:	f015 0506 	ands.w	r5, r5, #6
 80064a4:	d106      	bne.n	80064b4 <_printf_common+0x48>
 80064a6:	f104 0a19 	add.w	sl, r4, #25
 80064aa:	68e3      	ldr	r3, [r4, #12]
 80064ac:	6832      	ldr	r2, [r6, #0]
 80064ae:	1a9b      	subs	r3, r3, r2
 80064b0:	42ab      	cmp	r3, r5
 80064b2:	dc26      	bgt.n	8006502 <_printf_common+0x96>
 80064b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80064b8:	6822      	ldr	r2, [r4, #0]
 80064ba:	3b00      	subs	r3, #0
 80064bc:	bf18      	it	ne
 80064be:	2301      	movne	r3, #1
 80064c0:	0692      	lsls	r2, r2, #26
 80064c2:	d42b      	bmi.n	800651c <_printf_common+0xb0>
 80064c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80064c8:	4641      	mov	r1, r8
 80064ca:	4638      	mov	r0, r7
 80064cc:	47c8      	blx	r9
 80064ce:	3001      	adds	r0, #1
 80064d0:	d01e      	beq.n	8006510 <_printf_common+0xa4>
 80064d2:	6823      	ldr	r3, [r4, #0]
 80064d4:	6922      	ldr	r2, [r4, #16]
 80064d6:	f003 0306 	and.w	r3, r3, #6
 80064da:	2b04      	cmp	r3, #4
 80064dc:	bf02      	ittt	eq
 80064de:	68e5      	ldreq	r5, [r4, #12]
 80064e0:	6833      	ldreq	r3, [r6, #0]
 80064e2:	1aed      	subeq	r5, r5, r3
 80064e4:	68a3      	ldr	r3, [r4, #8]
 80064e6:	bf0c      	ite	eq
 80064e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064ec:	2500      	movne	r5, #0
 80064ee:	4293      	cmp	r3, r2
 80064f0:	bfc4      	itt	gt
 80064f2:	1a9b      	subgt	r3, r3, r2
 80064f4:	18ed      	addgt	r5, r5, r3
 80064f6:	2600      	movs	r6, #0
 80064f8:	341a      	adds	r4, #26
 80064fa:	42b5      	cmp	r5, r6
 80064fc:	d11a      	bne.n	8006534 <_printf_common+0xc8>
 80064fe:	2000      	movs	r0, #0
 8006500:	e008      	b.n	8006514 <_printf_common+0xa8>
 8006502:	2301      	movs	r3, #1
 8006504:	4652      	mov	r2, sl
 8006506:	4641      	mov	r1, r8
 8006508:	4638      	mov	r0, r7
 800650a:	47c8      	blx	r9
 800650c:	3001      	adds	r0, #1
 800650e:	d103      	bne.n	8006518 <_printf_common+0xac>
 8006510:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006518:	3501      	adds	r5, #1
 800651a:	e7c6      	b.n	80064aa <_printf_common+0x3e>
 800651c:	18e1      	adds	r1, r4, r3
 800651e:	1c5a      	adds	r2, r3, #1
 8006520:	2030      	movs	r0, #48	@ 0x30
 8006522:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006526:	4422      	add	r2, r4
 8006528:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800652c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006530:	3302      	adds	r3, #2
 8006532:	e7c7      	b.n	80064c4 <_printf_common+0x58>
 8006534:	2301      	movs	r3, #1
 8006536:	4622      	mov	r2, r4
 8006538:	4641      	mov	r1, r8
 800653a:	4638      	mov	r0, r7
 800653c:	47c8      	blx	r9
 800653e:	3001      	adds	r0, #1
 8006540:	d0e6      	beq.n	8006510 <_printf_common+0xa4>
 8006542:	3601      	adds	r6, #1
 8006544:	e7d9      	b.n	80064fa <_printf_common+0x8e>
	...

08006548 <_printf_i>:
 8006548:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800654c:	7e0f      	ldrb	r7, [r1, #24]
 800654e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006550:	2f78      	cmp	r7, #120	@ 0x78
 8006552:	4691      	mov	r9, r2
 8006554:	4680      	mov	r8, r0
 8006556:	460c      	mov	r4, r1
 8006558:	469a      	mov	sl, r3
 800655a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800655e:	d807      	bhi.n	8006570 <_printf_i+0x28>
 8006560:	2f62      	cmp	r7, #98	@ 0x62
 8006562:	d80a      	bhi.n	800657a <_printf_i+0x32>
 8006564:	2f00      	cmp	r7, #0
 8006566:	f000 80d2 	beq.w	800670e <_printf_i+0x1c6>
 800656a:	2f58      	cmp	r7, #88	@ 0x58
 800656c:	f000 80b9 	beq.w	80066e2 <_printf_i+0x19a>
 8006570:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006574:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006578:	e03a      	b.n	80065f0 <_printf_i+0xa8>
 800657a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800657e:	2b15      	cmp	r3, #21
 8006580:	d8f6      	bhi.n	8006570 <_printf_i+0x28>
 8006582:	a101      	add	r1, pc, #4	@ (adr r1, 8006588 <_printf_i+0x40>)
 8006584:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006588:	080065e1 	.word	0x080065e1
 800658c:	080065f5 	.word	0x080065f5
 8006590:	08006571 	.word	0x08006571
 8006594:	08006571 	.word	0x08006571
 8006598:	08006571 	.word	0x08006571
 800659c:	08006571 	.word	0x08006571
 80065a0:	080065f5 	.word	0x080065f5
 80065a4:	08006571 	.word	0x08006571
 80065a8:	08006571 	.word	0x08006571
 80065ac:	08006571 	.word	0x08006571
 80065b0:	08006571 	.word	0x08006571
 80065b4:	080066f5 	.word	0x080066f5
 80065b8:	0800661f 	.word	0x0800661f
 80065bc:	080066af 	.word	0x080066af
 80065c0:	08006571 	.word	0x08006571
 80065c4:	08006571 	.word	0x08006571
 80065c8:	08006717 	.word	0x08006717
 80065cc:	08006571 	.word	0x08006571
 80065d0:	0800661f 	.word	0x0800661f
 80065d4:	08006571 	.word	0x08006571
 80065d8:	08006571 	.word	0x08006571
 80065dc:	080066b7 	.word	0x080066b7
 80065e0:	6833      	ldr	r3, [r6, #0]
 80065e2:	1d1a      	adds	r2, r3, #4
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	6032      	str	r2, [r6, #0]
 80065e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80065f0:	2301      	movs	r3, #1
 80065f2:	e09d      	b.n	8006730 <_printf_i+0x1e8>
 80065f4:	6833      	ldr	r3, [r6, #0]
 80065f6:	6820      	ldr	r0, [r4, #0]
 80065f8:	1d19      	adds	r1, r3, #4
 80065fa:	6031      	str	r1, [r6, #0]
 80065fc:	0606      	lsls	r6, r0, #24
 80065fe:	d501      	bpl.n	8006604 <_printf_i+0xbc>
 8006600:	681d      	ldr	r5, [r3, #0]
 8006602:	e003      	b.n	800660c <_printf_i+0xc4>
 8006604:	0645      	lsls	r5, r0, #25
 8006606:	d5fb      	bpl.n	8006600 <_printf_i+0xb8>
 8006608:	f9b3 5000 	ldrsh.w	r5, [r3]
 800660c:	2d00      	cmp	r5, #0
 800660e:	da03      	bge.n	8006618 <_printf_i+0xd0>
 8006610:	232d      	movs	r3, #45	@ 0x2d
 8006612:	426d      	negs	r5, r5
 8006614:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006618:	4859      	ldr	r0, [pc, #356]	@ (8006780 <_printf_i+0x238>)
 800661a:	230a      	movs	r3, #10
 800661c:	e011      	b.n	8006642 <_printf_i+0xfa>
 800661e:	6821      	ldr	r1, [r4, #0]
 8006620:	6833      	ldr	r3, [r6, #0]
 8006622:	0608      	lsls	r0, r1, #24
 8006624:	f853 5b04 	ldr.w	r5, [r3], #4
 8006628:	d402      	bmi.n	8006630 <_printf_i+0xe8>
 800662a:	0649      	lsls	r1, r1, #25
 800662c:	bf48      	it	mi
 800662e:	b2ad      	uxthmi	r5, r5
 8006630:	2f6f      	cmp	r7, #111	@ 0x6f
 8006632:	4853      	ldr	r0, [pc, #332]	@ (8006780 <_printf_i+0x238>)
 8006634:	6033      	str	r3, [r6, #0]
 8006636:	bf14      	ite	ne
 8006638:	230a      	movne	r3, #10
 800663a:	2308      	moveq	r3, #8
 800663c:	2100      	movs	r1, #0
 800663e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006642:	6866      	ldr	r6, [r4, #4]
 8006644:	60a6      	str	r6, [r4, #8]
 8006646:	2e00      	cmp	r6, #0
 8006648:	bfa2      	ittt	ge
 800664a:	6821      	ldrge	r1, [r4, #0]
 800664c:	f021 0104 	bicge.w	r1, r1, #4
 8006650:	6021      	strge	r1, [r4, #0]
 8006652:	b90d      	cbnz	r5, 8006658 <_printf_i+0x110>
 8006654:	2e00      	cmp	r6, #0
 8006656:	d04b      	beq.n	80066f0 <_printf_i+0x1a8>
 8006658:	4616      	mov	r6, r2
 800665a:	fbb5 f1f3 	udiv	r1, r5, r3
 800665e:	fb03 5711 	mls	r7, r3, r1, r5
 8006662:	5dc7      	ldrb	r7, [r0, r7]
 8006664:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006668:	462f      	mov	r7, r5
 800666a:	42bb      	cmp	r3, r7
 800666c:	460d      	mov	r5, r1
 800666e:	d9f4      	bls.n	800665a <_printf_i+0x112>
 8006670:	2b08      	cmp	r3, #8
 8006672:	d10b      	bne.n	800668c <_printf_i+0x144>
 8006674:	6823      	ldr	r3, [r4, #0]
 8006676:	07df      	lsls	r7, r3, #31
 8006678:	d508      	bpl.n	800668c <_printf_i+0x144>
 800667a:	6923      	ldr	r3, [r4, #16]
 800667c:	6861      	ldr	r1, [r4, #4]
 800667e:	4299      	cmp	r1, r3
 8006680:	bfde      	ittt	le
 8006682:	2330      	movle	r3, #48	@ 0x30
 8006684:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006688:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800668c:	1b92      	subs	r2, r2, r6
 800668e:	6122      	str	r2, [r4, #16]
 8006690:	f8cd a000 	str.w	sl, [sp]
 8006694:	464b      	mov	r3, r9
 8006696:	aa03      	add	r2, sp, #12
 8006698:	4621      	mov	r1, r4
 800669a:	4640      	mov	r0, r8
 800669c:	f7ff fee6 	bl	800646c <_printf_common>
 80066a0:	3001      	adds	r0, #1
 80066a2:	d14a      	bne.n	800673a <_printf_i+0x1f2>
 80066a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80066a8:	b004      	add	sp, #16
 80066aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ae:	6823      	ldr	r3, [r4, #0]
 80066b0:	f043 0320 	orr.w	r3, r3, #32
 80066b4:	6023      	str	r3, [r4, #0]
 80066b6:	4833      	ldr	r0, [pc, #204]	@ (8006784 <_printf_i+0x23c>)
 80066b8:	2778      	movs	r7, #120	@ 0x78
 80066ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80066be:	6823      	ldr	r3, [r4, #0]
 80066c0:	6831      	ldr	r1, [r6, #0]
 80066c2:	061f      	lsls	r7, r3, #24
 80066c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80066c8:	d402      	bmi.n	80066d0 <_printf_i+0x188>
 80066ca:	065f      	lsls	r7, r3, #25
 80066cc:	bf48      	it	mi
 80066ce:	b2ad      	uxthmi	r5, r5
 80066d0:	6031      	str	r1, [r6, #0]
 80066d2:	07d9      	lsls	r1, r3, #31
 80066d4:	bf44      	itt	mi
 80066d6:	f043 0320 	orrmi.w	r3, r3, #32
 80066da:	6023      	strmi	r3, [r4, #0]
 80066dc:	b11d      	cbz	r5, 80066e6 <_printf_i+0x19e>
 80066de:	2310      	movs	r3, #16
 80066e0:	e7ac      	b.n	800663c <_printf_i+0xf4>
 80066e2:	4827      	ldr	r0, [pc, #156]	@ (8006780 <_printf_i+0x238>)
 80066e4:	e7e9      	b.n	80066ba <_printf_i+0x172>
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	f023 0320 	bic.w	r3, r3, #32
 80066ec:	6023      	str	r3, [r4, #0]
 80066ee:	e7f6      	b.n	80066de <_printf_i+0x196>
 80066f0:	4616      	mov	r6, r2
 80066f2:	e7bd      	b.n	8006670 <_printf_i+0x128>
 80066f4:	6833      	ldr	r3, [r6, #0]
 80066f6:	6825      	ldr	r5, [r4, #0]
 80066f8:	6961      	ldr	r1, [r4, #20]
 80066fa:	1d18      	adds	r0, r3, #4
 80066fc:	6030      	str	r0, [r6, #0]
 80066fe:	062e      	lsls	r6, r5, #24
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	d501      	bpl.n	8006708 <_printf_i+0x1c0>
 8006704:	6019      	str	r1, [r3, #0]
 8006706:	e002      	b.n	800670e <_printf_i+0x1c6>
 8006708:	0668      	lsls	r0, r5, #25
 800670a:	d5fb      	bpl.n	8006704 <_printf_i+0x1bc>
 800670c:	8019      	strh	r1, [r3, #0]
 800670e:	2300      	movs	r3, #0
 8006710:	6123      	str	r3, [r4, #16]
 8006712:	4616      	mov	r6, r2
 8006714:	e7bc      	b.n	8006690 <_printf_i+0x148>
 8006716:	6833      	ldr	r3, [r6, #0]
 8006718:	1d1a      	adds	r2, r3, #4
 800671a:	6032      	str	r2, [r6, #0]
 800671c:	681e      	ldr	r6, [r3, #0]
 800671e:	6862      	ldr	r2, [r4, #4]
 8006720:	2100      	movs	r1, #0
 8006722:	4630      	mov	r0, r6
 8006724:	f7f9 fd84 	bl	8000230 <memchr>
 8006728:	b108      	cbz	r0, 800672e <_printf_i+0x1e6>
 800672a:	1b80      	subs	r0, r0, r6
 800672c:	6060      	str	r0, [r4, #4]
 800672e:	6863      	ldr	r3, [r4, #4]
 8006730:	6123      	str	r3, [r4, #16]
 8006732:	2300      	movs	r3, #0
 8006734:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006738:	e7aa      	b.n	8006690 <_printf_i+0x148>
 800673a:	6923      	ldr	r3, [r4, #16]
 800673c:	4632      	mov	r2, r6
 800673e:	4649      	mov	r1, r9
 8006740:	4640      	mov	r0, r8
 8006742:	47d0      	blx	sl
 8006744:	3001      	adds	r0, #1
 8006746:	d0ad      	beq.n	80066a4 <_printf_i+0x15c>
 8006748:	6823      	ldr	r3, [r4, #0]
 800674a:	079b      	lsls	r3, r3, #30
 800674c:	d413      	bmi.n	8006776 <_printf_i+0x22e>
 800674e:	68e0      	ldr	r0, [r4, #12]
 8006750:	9b03      	ldr	r3, [sp, #12]
 8006752:	4298      	cmp	r0, r3
 8006754:	bfb8      	it	lt
 8006756:	4618      	movlt	r0, r3
 8006758:	e7a6      	b.n	80066a8 <_printf_i+0x160>
 800675a:	2301      	movs	r3, #1
 800675c:	4632      	mov	r2, r6
 800675e:	4649      	mov	r1, r9
 8006760:	4640      	mov	r0, r8
 8006762:	47d0      	blx	sl
 8006764:	3001      	adds	r0, #1
 8006766:	d09d      	beq.n	80066a4 <_printf_i+0x15c>
 8006768:	3501      	adds	r5, #1
 800676a:	68e3      	ldr	r3, [r4, #12]
 800676c:	9903      	ldr	r1, [sp, #12]
 800676e:	1a5b      	subs	r3, r3, r1
 8006770:	42ab      	cmp	r3, r5
 8006772:	dcf2      	bgt.n	800675a <_printf_i+0x212>
 8006774:	e7eb      	b.n	800674e <_printf_i+0x206>
 8006776:	2500      	movs	r5, #0
 8006778:	f104 0619 	add.w	r6, r4, #25
 800677c:	e7f5      	b.n	800676a <_printf_i+0x222>
 800677e:	bf00      	nop
 8006780:	0800a8b6 	.word	0x0800a8b6
 8006784:	0800a8c7 	.word	0x0800a8c7

08006788 <_scanf_float>:
 8006788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800678c:	b087      	sub	sp, #28
 800678e:	4617      	mov	r7, r2
 8006790:	9303      	str	r3, [sp, #12]
 8006792:	688b      	ldr	r3, [r1, #8]
 8006794:	1e5a      	subs	r2, r3, #1
 8006796:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800679a:	bf81      	itttt	hi
 800679c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80067a0:	eb03 0b05 	addhi.w	fp, r3, r5
 80067a4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80067a8:	608b      	strhi	r3, [r1, #8]
 80067aa:	680b      	ldr	r3, [r1, #0]
 80067ac:	460a      	mov	r2, r1
 80067ae:	f04f 0500 	mov.w	r5, #0
 80067b2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80067b6:	f842 3b1c 	str.w	r3, [r2], #28
 80067ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80067be:	4680      	mov	r8, r0
 80067c0:	460c      	mov	r4, r1
 80067c2:	bf98      	it	ls
 80067c4:	f04f 0b00 	movls.w	fp, #0
 80067c8:	9201      	str	r2, [sp, #4]
 80067ca:	4616      	mov	r6, r2
 80067cc:	46aa      	mov	sl, r5
 80067ce:	46a9      	mov	r9, r5
 80067d0:	9502      	str	r5, [sp, #8]
 80067d2:	68a2      	ldr	r2, [r4, #8]
 80067d4:	b152      	cbz	r2, 80067ec <_scanf_float+0x64>
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	2b4e      	cmp	r3, #78	@ 0x4e
 80067dc:	d864      	bhi.n	80068a8 <_scanf_float+0x120>
 80067de:	2b40      	cmp	r3, #64	@ 0x40
 80067e0:	d83c      	bhi.n	800685c <_scanf_float+0xd4>
 80067e2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80067e6:	b2c8      	uxtb	r0, r1
 80067e8:	280e      	cmp	r0, #14
 80067ea:	d93a      	bls.n	8006862 <_scanf_float+0xda>
 80067ec:	f1b9 0f00 	cmp.w	r9, #0
 80067f0:	d003      	beq.n	80067fa <_scanf_float+0x72>
 80067f2:	6823      	ldr	r3, [r4, #0]
 80067f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067f8:	6023      	str	r3, [r4, #0]
 80067fa:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80067fe:	f1ba 0f01 	cmp.w	sl, #1
 8006802:	f200 8117 	bhi.w	8006a34 <_scanf_float+0x2ac>
 8006806:	9b01      	ldr	r3, [sp, #4]
 8006808:	429e      	cmp	r6, r3
 800680a:	f200 8108 	bhi.w	8006a1e <_scanf_float+0x296>
 800680e:	2001      	movs	r0, #1
 8006810:	b007      	add	sp, #28
 8006812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006816:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800681a:	2a0d      	cmp	r2, #13
 800681c:	d8e6      	bhi.n	80067ec <_scanf_float+0x64>
 800681e:	a101      	add	r1, pc, #4	@ (adr r1, 8006824 <_scanf_float+0x9c>)
 8006820:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006824:	0800696b 	.word	0x0800696b
 8006828:	080067ed 	.word	0x080067ed
 800682c:	080067ed 	.word	0x080067ed
 8006830:	080067ed 	.word	0x080067ed
 8006834:	080069cb 	.word	0x080069cb
 8006838:	080069a3 	.word	0x080069a3
 800683c:	080067ed 	.word	0x080067ed
 8006840:	080067ed 	.word	0x080067ed
 8006844:	08006979 	.word	0x08006979
 8006848:	080067ed 	.word	0x080067ed
 800684c:	080067ed 	.word	0x080067ed
 8006850:	080067ed 	.word	0x080067ed
 8006854:	080067ed 	.word	0x080067ed
 8006858:	08006931 	.word	0x08006931
 800685c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006860:	e7db      	b.n	800681a <_scanf_float+0x92>
 8006862:	290e      	cmp	r1, #14
 8006864:	d8c2      	bhi.n	80067ec <_scanf_float+0x64>
 8006866:	a001      	add	r0, pc, #4	@ (adr r0, 800686c <_scanf_float+0xe4>)
 8006868:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800686c:	08006921 	.word	0x08006921
 8006870:	080067ed 	.word	0x080067ed
 8006874:	08006921 	.word	0x08006921
 8006878:	080069b7 	.word	0x080069b7
 800687c:	080067ed 	.word	0x080067ed
 8006880:	080068c9 	.word	0x080068c9
 8006884:	08006907 	.word	0x08006907
 8006888:	08006907 	.word	0x08006907
 800688c:	08006907 	.word	0x08006907
 8006890:	08006907 	.word	0x08006907
 8006894:	08006907 	.word	0x08006907
 8006898:	08006907 	.word	0x08006907
 800689c:	08006907 	.word	0x08006907
 80068a0:	08006907 	.word	0x08006907
 80068a4:	08006907 	.word	0x08006907
 80068a8:	2b6e      	cmp	r3, #110	@ 0x6e
 80068aa:	d809      	bhi.n	80068c0 <_scanf_float+0x138>
 80068ac:	2b60      	cmp	r3, #96	@ 0x60
 80068ae:	d8b2      	bhi.n	8006816 <_scanf_float+0x8e>
 80068b0:	2b54      	cmp	r3, #84	@ 0x54
 80068b2:	d07b      	beq.n	80069ac <_scanf_float+0x224>
 80068b4:	2b59      	cmp	r3, #89	@ 0x59
 80068b6:	d199      	bne.n	80067ec <_scanf_float+0x64>
 80068b8:	2d07      	cmp	r5, #7
 80068ba:	d197      	bne.n	80067ec <_scanf_float+0x64>
 80068bc:	2508      	movs	r5, #8
 80068be:	e02c      	b.n	800691a <_scanf_float+0x192>
 80068c0:	2b74      	cmp	r3, #116	@ 0x74
 80068c2:	d073      	beq.n	80069ac <_scanf_float+0x224>
 80068c4:	2b79      	cmp	r3, #121	@ 0x79
 80068c6:	e7f6      	b.n	80068b6 <_scanf_float+0x12e>
 80068c8:	6821      	ldr	r1, [r4, #0]
 80068ca:	05c8      	lsls	r0, r1, #23
 80068cc:	d51b      	bpl.n	8006906 <_scanf_float+0x17e>
 80068ce:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80068d2:	6021      	str	r1, [r4, #0]
 80068d4:	f109 0901 	add.w	r9, r9, #1
 80068d8:	f1bb 0f00 	cmp.w	fp, #0
 80068dc:	d003      	beq.n	80068e6 <_scanf_float+0x15e>
 80068de:	3201      	adds	r2, #1
 80068e0:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80068e4:	60a2      	str	r2, [r4, #8]
 80068e6:	68a3      	ldr	r3, [r4, #8]
 80068e8:	3b01      	subs	r3, #1
 80068ea:	60a3      	str	r3, [r4, #8]
 80068ec:	6923      	ldr	r3, [r4, #16]
 80068ee:	3301      	adds	r3, #1
 80068f0:	6123      	str	r3, [r4, #16]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	3b01      	subs	r3, #1
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	607b      	str	r3, [r7, #4]
 80068fa:	f340 8087 	ble.w	8006a0c <_scanf_float+0x284>
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	3301      	adds	r3, #1
 8006902:	603b      	str	r3, [r7, #0]
 8006904:	e765      	b.n	80067d2 <_scanf_float+0x4a>
 8006906:	eb1a 0105 	adds.w	r1, sl, r5
 800690a:	f47f af6f 	bne.w	80067ec <_scanf_float+0x64>
 800690e:	6822      	ldr	r2, [r4, #0]
 8006910:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006914:	6022      	str	r2, [r4, #0]
 8006916:	460d      	mov	r5, r1
 8006918:	468a      	mov	sl, r1
 800691a:	f806 3b01 	strb.w	r3, [r6], #1
 800691e:	e7e2      	b.n	80068e6 <_scanf_float+0x15e>
 8006920:	6822      	ldr	r2, [r4, #0]
 8006922:	0610      	lsls	r0, r2, #24
 8006924:	f57f af62 	bpl.w	80067ec <_scanf_float+0x64>
 8006928:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800692c:	6022      	str	r2, [r4, #0]
 800692e:	e7f4      	b.n	800691a <_scanf_float+0x192>
 8006930:	f1ba 0f00 	cmp.w	sl, #0
 8006934:	d10e      	bne.n	8006954 <_scanf_float+0x1cc>
 8006936:	f1b9 0f00 	cmp.w	r9, #0
 800693a:	d10e      	bne.n	800695a <_scanf_float+0x1d2>
 800693c:	6822      	ldr	r2, [r4, #0]
 800693e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006942:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006946:	d108      	bne.n	800695a <_scanf_float+0x1d2>
 8006948:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800694c:	6022      	str	r2, [r4, #0]
 800694e:	f04f 0a01 	mov.w	sl, #1
 8006952:	e7e2      	b.n	800691a <_scanf_float+0x192>
 8006954:	f1ba 0f02 	cmp.w	sl, #2
 8006958:	d055      	beq.n	8006a06 <_scanf_float+0x27e>
 800695a:	2d01      	cmp	r5, #1
 800695c:	d002      	beq.n	8006964 <_scanf_float+0x1dc>
 800695e:	2d04      	cmp	r5, #4
 8006960:	f47f af44 	bne.w	80067ec <_scanf_float+0x64>
 8006964:	3501      	adds	r5, #1
 8006966:	b2ed      	uxtb	r5, r5
 8006968:	e7d7      	b.n	800691a <_scanf_float+0x192>
 800696a:	f1ba 0f01 	cmp.w	sl, #1
 800696e:	f47f af3d 	bne.w	80067ec <_scanf_float+0x64>
 8006972:	f04f 0a02 	mov.w	sl, #2
 8006976:	e7d0      	b.n	800691a <_scanf_float+0x192>
 8006978:	b97d      	cbnz	r5, 800699a <_scanf_float+0x212>
 800697a:	f1b9 0f00 	cmp.w	r9, #0
 800697e:	f47f af38 	bne.w	80067f2 <_scanf_float+0x6a>
 8006982:	6822      	ldr	r2, [r4, #0]
 8006984:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006988:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800698c:	f040 8108 	bne.w	8006ba0 <_scanf_float+0x418>
 8006990:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006994:	6022      	str	r2, [r4, #0]
 8006996:	2501      	movs	r5, #1
 8006998:	e7bf      	b.n	800691a <_scanf_float+0x192>
 800699a:	2d03      	cmp	r5, #3
 800699c:	d0e2      	beq.n	8006964 <_scanf_float+0x1dc>
 800699e:	2d05      	cmp	r5, #5
 80069a0:	e7de      	b.n	8006960 <_scanf_float+0x1d8>
 80069a2:	2d02      	cmp	r5, #2
 80069a4:	f47f af22 	bne.w	80067ec <_scanf_float+0x64>
 80069a8:	2503      	movs	r5, #3
 80069aa:	e7b6      	b.n	800691a <_scanf_float+0x192>
 80069ac:	2d06      	cmp	r5, #6
 80069ae:	f47f af1d 	bne.w	80067ec <_scanf_float+0x64>
 80069b2:	2507      	movs	r5, #7
 80069b4:	e7b1      	b.n	800691a <_scanf_float+0x192>
 80069b6:	6822      	ldr	r2, [r4, #0]
 80069b8:	0591      	lsls	r1, r2, #22
 80069ba:	f57f af17 	bpl.w	80067ec <_scanf_float+0x64>
 80069be:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80069c2:	6022      	str	r2, [r4, #0]
 80069c4:	f8cd 9008 	str.w	r9, [sp, #8]
 80069c8:	e7a7      	b.n	800691a <_scanf_float+0x192>
 80069ca:	6822      	ldr	r2, [r4, #0]
 80069cc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80069d0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80069d4:	d006      	beq.n	80069e4 <_scanf_float+0x25c>
 80069d6:	0550      	lsls	r0, r2, #21
 80069d8:	f57f af08 	bpl.w	80067ec <_scanf_float+0x64>
 80069dc:	f1b9 0f00 	cmp.w	r9, #0
 80069e0:	f000 80de 	beq.w	8006ba0 <_scanf_float+0x418>
 80069e4:	0591      	lsls	r1, r2, #22
 80069e6:	bf58      	it	pl
 80069e8:	9902      	ldrpl	r1, [sp, #8]
 80069ea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80069ee:	bf58      	it	pl
 80069f0:	eba9 0101 	subpl.w	r1, r9, r1
 80069f4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80069f8:	bf58      	it	pl
 80069fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80069fe:	6022      	str	r2, [r4, #0]
 8006a00:	f04f 0900 	mov.w	r9, #0
 8006a04:	e789      	b.n	800691a <_scanf_float+0x192>
 8006a06:	f04f 0a03 	mov.w	sl, #3
 8006a0a:	e786      	b.n	800691a <_scanf_float+0x192>
 8006a0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006a10:	4639      	mov	r1, r7
 8006a12:	4640      	mov	r0, r8
 8006a14:	4798      	blx	r3
 8006a16:	2800      	cmp	r0, #0
 8006a18:	f43f aedb 	beq.w	80067d2 <_scanf_float+0x4a>
 8006a1c:	e6e6      	b.n	80067ec <_scanf_float+0x64>
 8006a1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a26:	463a      	mov	r2, r7
 8006a28:	4640      	mov	r0, r8
 8006a2a:	4798      	blx	r3
 8006a2c:	6923      	ldr	r3, [r4, #16]
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	6123      	str	r3, [r4, #16]
 8006a32:	e6e8      	b.n	8006806 <_scanf_float+0x7e>
 8006a34:	1e6b      	subs	r3, r5, #1
 8006a36:	2b06      	cmp	r3, #6
 8006a38:	d824      	bhi.n	8006a84 <_scanf_float+0x2fc>
 8006a3a:	2d02      	cmp	r5, #2
 8006a3c:	d836      	bhi.n	8006aac <_scanf_float+0x324>
 8006a3e:	9b01      	ldr	r3, [sp, #4]
 8006a40:	429e      	cmp	r6, r3
 8006a42:	f67f aee4 	bls.w	800680e <_scanf_float+0x86>
 8006a46:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a4e:	463a      	mov	r2, r7
 8006a50:	4640      	mov	r0, r8
 8006a52:	4798      	blx	r3
 8006a54:	6923      	ldr	r3, [r4, #16]
 8006a56:	3b01      	subs	r3, #1
 8006a58:	6123      	str	r3, [r4, #16]
 8006a5a:	e7f0      	b.n	8006a3e <_scanf_float+0x2b6>
 8006a5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a60:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006a64:	463a      	mov	r2, r7
 8006a66:	4640      	mov	r0, r8
 8006a68:	4798      	blx	r3
 8006a6a:	6923      	ldr	r3, [r4, #16]
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	6123      	str	r3, [r4, #16]
 8006a70:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006a74:	fa5f fa8a 	uxtb.w	sl, sl
 8006a78:	f1ba 0f02 	cmp.w	sl, #2
 8006a7c:	d1ee      	bne.n	8006a5c <_scanf_float+0x2d4>
 8006a7e:	3d03      	subs	r5, #3
 8006a80:	b2ed      	uxtb	r5, r5
 8006a82:	1b76      	subs	r6, r6, r5
 8006a84:	6823      	ldr	r3, [r4, #0]
 8006a86:	05da      	lsls	r2, r3, #23
 8006a88:	d530      	bpl.n	8006aec <_scanf_float+0x364>
 8006a8a:	055b      	lsls	r3, r3, #21
 8006a8c:	d511      	bpl.n	8006ab2 <_scanf_float+0x32a>
 8006a8e:	9b01      	ldr	r3, [sp, #4]
 8006a90:	429e      	cmp	r6, r3
 8006a92:	f67f aebc 	bls.w	800680e <_scanf_float+0x86>
 8006a96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a9e:	463a      	mov	r2, r7
 8006aa0:	4640      	mov	r0, r8
 8006aa2:	4798      	blx	r3
 8006aa4:	6923      	ldr	r3, [r4, #16]
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	6123      	str	r3, [r4, #16]
 8006aaa:	e7f0      	b.n	8006a8e <_scanf_float+0x306>
 8006aac:	46aa      	mov	sl, r5
 8006aae:	46b3      	mov	fp, r6
 8006ab0:	e7de      	b.n	8006a70 <_scanf_float+0x2e8>
 8006ab2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006ab6:	6923      	ldr	r3, [r4, #16]
 8006ab8:	2965      	cmp	r1, #101	@ 0x65
 8006aba:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006abe:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8006ac2:	6123      	str	r3, [r4, #16]
 8006ac4:	d00c      	beq.n	8006ae0 <_scanf_float+0x358>
 8006ac6:	2945      	cmp	r1, #69	@ 0x45
 8006ac8:	d00a      	beq.n	8006ae0 <_scanf_float+0x358>
 8006aca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ace:	463a      	mov	r2, r7
 8006ad0:	4640      	mov	r0, r8
 8006ad2:	4798      	blx	r3
 8006ad4:	6923      	ldr	r3, [r4, #16]
 8006ad6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006ada:	3b01      	subs	r3, #1
 8006adc:	1eb5      	subs	r5, r6, #2
 8006ade:	6123      	str	r3, [r4, #16]
 8006ae0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ae4:	463a      	mov	r2, r7
 8006ae6:	4640      	mov	r0, r8
 8006ae8:	4798      	blx	r3
 8006aea:	462e      	mov	r6, r5
 8006aec:	6822      	ldr	r2, [r4, #0]
 8006aee:	f012 0210 	ands.w	r2, r2, #16
 8006af2:	d001      	beq.n	8006af8 <_scanf_float+0x370>
 8006af4:	2000      	movs	r0, #0
 8006af6:	e68b      	b.n	8006810 <_scanf_float+0x88>
 8006af8:	7032      	strb	r2, [r6, #0]
 8006afa:	6823      	ldr	r3, [r4, #0]
 8006afc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006b00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b04:	d11c      	bne.n	8006b40 <_scanf_float+0x3b8>
 8006b06:	9b02      	ldr	r3, [sp, #8]
 8006b08:	454b      	cmp	r3, r9
 8006b0a:	eba3 0209 	sub.w	r2, r3, r9
 8006b0e:	d123      	bne.n	8006b58 <_scanf_float+0x3d0>
 8006b10:	9901      	ldr	r1, [sp, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	4640      	mov	r0, r8
 8006b16:	f002 fd0f 	bl	8009538 <_strtod_r>
 8006b1a:	9b03      	ldr	r3, [sp, #12]
 8006b1c:	6821      	ldr	r1, [r4, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f011 0f02 	tst.w	r1, #2
 8006b24:	ec57 6b10 	vmov	r6, r7, d0
 8006b28:	f103 0204 	add.w	r2, r3, #4
 8006b2c:	d01f      	beq.n	8006b6e <_scanf_float+0x3e6>
 8006b2e:	9903      	ldr	r1, [sp, #12]
 8006b30:	600a      	str	r2, [r1, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	e9c3 6700 	strd	r6, r7, [r3]
 8006b38:	68e3      	ldr	r3, [r4, #12]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	60e3      	str	r3, [r4, #12]
 8006b3e:	e7d9      	b.n	8006af4 <_scanf_float+0x36c>
 8006b40:	9b04      	ldr	r3, [sp, #16]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d0e4      	beq.n	8006b10 <_scanf_float+0x388>
 8006b46:	9905      	ldr	r1, [sp, #20]
 8006b48:	230a      	movs	r3, #10
 8006b4a:	3101      	adds	r1, #1
 8006b4c:	4640      	mov	r0, r8
 8006b4e:	f002 fd73 	bl	8009638 <_strtol_r>
 8006b52:	9b04      	ldr	r3, [sp, #16]
 8006b54:	9e05      	ldr	r6, [sp, #20]
 8006b56:	1ac2      	subs	r2, r0, r3
 8006b58:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006b5c:	429e      	cmp	r6, r3
 8006b5e:	bf28      	it	cs
 8006b60:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006b64:	4910      	ldr	r1, [pc, #64]	@ (8006ba8 <_scanf_float+0x420>)
 8006b66:	4630      	mov	r0, r6
 8006b68:	f000 f954 	bl	8006e14 <siprintf>
 8006b6c:	e7d0      	b.n	8006b10 <_scanf_float+0x388>
 8006b6e:	f011 0f04 	tst.w	r1, #4
 8006b72:	9903      	ldr	r1, [sp, #12]
 8006b74:	600a      	str	r2, [r1, #0]
 8006b76:	d1dc      	bne.n	8006b32 <_scanf_float+0x3aa>
 8006b78:	681d      	ldr	r5, [r3, #0]
 8006b7a:	4632      	mov	r2, r6
 8006b7c:	463b      	mov	r3, r7
 8006b7e:	4630      	mov	r0, r6
 8006b80:	4639      	mov	r1, r7
 8006b82:	f7fa f803 	bl	8000b8c <__aeabi_dcmpun>
 8006b86:	b128      	cbz	r0, 8006b94 <_scanf_float+0x40c>
 8006b88:	4808      	ldr	r0, [pc, #32]	@ (8006bac <_scanf_float+0x424>)
 8006b8a:	f000 facd 	bl	8007128 <nanf>
 8006b8e:	ed85 0a00 	vstr	s0, [r5]
 8006b92:	e7d1      	b.n	8006b38 <_scanf_float+0x3b0>
 8006b94:	4630      	mov	r0, r6
 8006b96:	4639      	mov	r1, r7
 8006b98:	f7fa f856 	bl	8000c48 <__aeabi_d2f>
 8006b9c:	6028      	str	r0, [r5, #0]
 8006b9e:	e7cb      	b.n	8006b38 <_scanf_float+0x3b0>
 8006ba0:	f04f 0900 	mov.w	r9, #0
 8006ba4:	e629      	b.n	80067fa <_scanf_float+0x72>
 8006ba6:	bf00      	nop
 8006ba8:	0800a8d8 	.word	0x0800a8d8
 8006bac:	0800ac6d 	.word	0x0800ac6d

08006bb0 <std>:
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	b510      	push	{r4, lr}
 8006bb4:	4604      	mov	r4, r0
 8006bb6:	e9c0 3300 	strd	r3, r3, [r0]
 8006bba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bbe:	6083      	str	r3, [r0, #8]
 8006bc0:	8181      	strh	r1, [r0, #12]
 8006bc2:	6643      	str	r3, [r0, #100]	@ 0x64
 8006bc4:	81c2      	strh	r2, [r0, #14]
 8006bc6:	6183      	str	r3, [r0, #24]
 8006bc8:	4619      	mov	r1, r3
 8006bca:	2208      	movs	r2, #8
 8006bcc:	305c      	adds	r0, #92	@ 0x5c
 8006bce:	f000 fa19 	bl	8007004 <memset>
 8006bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006c08 <std+0x58>)
 8006bd4:	6263      	str	r3, [r4, #36]	@ 0x24
 8006bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8006c0c <std+0x5c>)
 8006bd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006bda:	4b0d      	ldr	r3, [pc, #52]	@ (8006c10 <std+0x60>)
 8006bdc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006bde:	4b0d      	ldr	r3, [pc, #52]	@ (8006c14 <std+0x64>)
 8006be0:	6323      	str	r3, [r4, #48]	@ 0x30
 8006be2:	4b0d      	ldr	r3, [pc, #52]	@ (8006c18 <std+0x68>)
 8006be4:	6224      	str	r4, [r4, #32]
 8006be6:	429c      	cmp	r4, r3
 8006be8:	d006      	beq.n	8006bf8 <std+0x48>
 8006bea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006bee:	4294      	cmp	r4, r2
 8006bf0:	d002      	beq.n	8006bf8 <std+0x48>
 8006bf2:	33d0      	adds	r3, #208	@ 0xd0
 8006bf4:	429c      	cmp	r4, r3
 8006bf6:	d105      	bne.n	8006c04 <std+0x54>
 8006bf8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c00:	f000 ba8e 	b.w	8007120 <__retarget_lock_init_recursive>
 8006c04:	bd10      	pop	{r4, pc}
 8006c06:	bf00      	nop
 8006c08:	08006e55 	.word	0x08006e55
 8006c0c:	08006e77 	.word	0x08006e77
 8006c10:	08006eaf 	.word	0x08006eaf
 8006c14:	08006ed3 	.word	0x08006ed3
 8006c18:	20000360 	.word	0x20000360

08006c1c <stdio_exit_handler>:
 8006c1c:	4a02      	ldr	r2, [pc, #8]	@ (8006c28 <stdio_exit_handler+0xc>)
 8006c1e:	4903      	ldr	r1, [pc, #12]	@ (8006c2c <stdio_exit_handler+0x10>)
 8006c20:	4803      	ldr	r0, [pc, #12]	@ (8006c30 <stdio_exit_handler+0x14>)
 8006c22:	f000 b869 	b.w	8006cf8 <_fwalk_sglue>
 8006c26:	bf00      	nop
 8006c28:	20000010 	.word	0x20000010
 8006c2c:	08009c79 	.word	0x08009c79
 8006c30:	20000020 	.word	0x20000020

08006c34 <cleanup_stdio>:
 8006c34:	6841      	ldr	r1, [r0, #4]
 8006c36:	4b0c      	ldr	r3, [pc, #48]	@ (8006c68 <cleanup_stdio+0x34>)
 8006c38:	4299      	cmp	r1, r3
 8006c3a:	b510      	push	{r4, lr}
 8006c3c:	4604      	mov	r4, r0
 8006c3e:	d001      	beq.n	8006c44 <cleanup_stdio+0x10>
 8006c40:	f003 f81a 	bl	8009c78 <_fflush_r>
 8006c44:	68a1      	ldr	r1, [r4, #8]
 8006c46:	4b09      	ldr	r3, [pc, #36]	@ (8006c6c <cleanup_stdio+0x38>)
 8006c48:	4299      	cmp	r1, r3
 8006c4a:	d002      	beq.n	8006c52 <cleanup_stdio+0x1e>
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	f003 f813 	bl	8009c78 <_fflush_r>
 8006c52:	68e1      	ldr	r1, [r4, #12]
 8006c54:	4b06      	ldr	r3, [pc, #24]	@ (8006c70 <cleanup_stdio+0x3c>)
 8006c56:	4299      	cmp	r1, r3
 8006c58:	d004      	beq.n	8006c64 <cleanup_stdio+0x30>
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c60:	f003 b80a 	b.w	8009c78 <_fflush_r>
 8006c64:	bd10      	pop	{r4, pc}
 8006c66:	bf00      	nop
 8006c68:	20000360 	.word	0x20000360
 8006c6c:	200003c8 	.word	0x200003c8
 8006c70:	20000430 	.word	0x20000430

08006c74 <global_stdio_init.part.0>:
 8006c74:	b510      	push	{r4, lr}
 8006c76:	4b0b      	ldr	r3, [pc, #44]	@ (8006ca4 <global_stdio_init.part.0+0x30>)
 8006c78:	4c0b      	ldr	r4, [pc, #44]	@ (8006ca8 <global_stdio_init.part.0+0x34>)
 8006c7a:	4a0c      	ldr	r2, [pc, #48]	@ (8006cac <global_stdio_init.part.0+0x38>)
 8006c7c:	601a      	str	r2, [r3, #0]
 8006c7e:	4620      	mov	r0, r4
 8006c80:	2200      	movs	r2, #0
 8006c82:	2104      	movs	r1, #4
 8006c84:	f7ff ff94 	bl	8006bb0 <std>
 8006c88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	2109      	movs	r1, #9
 8006c90:	f7ff ff8e 	bl	8006bb0 <std>
 8006c94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006c98:	2202      	movs	r2, #2
 8006c9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c9e:	2112      	movs	r1, #18
 8006ca0:	f7ff bf86 	b.w	8006bb0 <std>
 8006ca4:	20000498 	.word	0x20000498
 8006ca8:	20000360 	.word	0x20000360
 8006cac:	08006c1d 	.word	0x08006c1d

08006cb0 <__sfp_lock_acquire>:
 8006cb0:	4801      	ldr	r0, [pc, #4]	@ (8006cb8 <__sfp_lock_acquire+0x8>)
 8006cb2:	f000 ba36 	b.w	8007122 <__retarget_lock_acquire_recursive>
 8006cb6:	bf00      	nop
 8006cb8:	200004a1 	.word	0x200004a1

08006cbc <__sfp_lock_release>:
 8006cbc:	4801      	ldr	r0, [pc, #4]	@ (8006cc4 <__sfp_lock_release+0x8>)
 8006cbe:	f000 ba31 	b.w	8007124 <__retarget_lock_release_recursive>
 8006cc2:	bf00      	nop
 8006cc4:	200004a1 	.word	0x200004a1

08006cc8 <__sinit>:
 8006cc8:	b510      	push	{r4, lr}
 8006cca:	4604      	mov	r4, r0
 8006ccc:	f7ff fff0 	bl	8006cb0 <__sfp_lock_acquire>
 8006cd0:	6a23      	ldr	r3, [r4, #32]
 8006cd2:	b11b      	cbz	r3, 8006cdc <__sinit+0x14>
 8006cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cd8:	f7ff bff0 	b.w	8006cbc <__sfp_lock_release>
 8006cdc:	4b04      	ldr	r3, [pc, #16]	@ (8006cf0 <__sinit+0x28>)
 8006cde:	6223      	str	r3, [r4, #32]
 8006ce0:	4b04      	ldr	r3, [pc, #16]	@ (8006cf4 <__sinit+0x2c>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1f5      	bne.n	8006cd4 <__sinit+0xc>
 8006ce8:	f7ff ffc4 	bl	8006c74 <global_stdio_init.part.0>
 8006cec:	e7f2      	b.n	8006cd4 <__sinit+0xc>
 8006cee:	bf00      	nop
 8006cf0:	08006c35 	.word	0x08006c35
 8006cf4:	20000498 	.word	0x20000498

08006cf8 <_fwalk_sglue>:
 8006cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cfc:	4607      	mov	r7, r0
 8006cfe:	4688      	mov	r8, r1
 8006d00:	4614      	mov	r4, r2
 8006d02:	2600      	movs	r6, #0
 8006d04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d08:	f1b9 0901 	subs.w	r9, r9, #1
 8006d0c:	d505      	bpl.n	8006d1a <_fwalk_sglue+0x22>
 8006d0e:	6824      	ldr	r4, [r4, #0]
 8006d10:	2c00      	cmp	r4, #0
 8006d12:	d1f7      	bne.n	8006d04 <_fwalk_sglue+0xc>
 8006d14:	4630      	mov	r0, r6
 8006d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d1a:	89ab      	ldrh	r3, [r5, #12]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d907      	bls.n	8006d30 <_fwalk_sglue+0x38>
 8006d20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d24:	3301      	adds	r3, #1
 8006d26:	d003      	beq.n	8006d30 <_fwalk_sglue+0x38>
 8006d28:	4629      	mov	r1, r5
 8006d2a:	4638      	mov	r0, r7
 8006d2c:	47c0      	blx	r8
 8006d2e:	4306      	orrs	r6, r0
 8006d30:	3568      	adds	r5, #104	@ 0x68
 8006d32:	e7e9      	b.n	8006d08 <_fwalk_sglue+0x10>

08006d34 <iprintf>:
 8006d34:	b40f      	push	{r0, r1, r2, r3}
 8006d36:	b507      	push	{r0, r1, r2, lr}
 8006d38:	4906      	ldr	r1, [pc, #24]	@ (8006d54 <iprintf+0x20>)
 8006d3a:	ab04      	add	r3, sp, #16
 8006d3c:	6808      	ldr	r0, [r1, #0]
 8006d3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d42:	6881      	ldr	r1, [r0, #8]
 8006d44:	9301      	str	r3, [sp, #4]
 8006d46:	f002 fdfb 	bl	8009940 <_vfiprintf_r>
 8006d4a:	b003      	add	sp, #12
 8006d4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d50:	b004      	add	sp, #16
 8006d52:	4770      	bx	lr
 8006d54:	2000001c 	.word	0x2000001c

08006d58 <_puts_r>:
 8006d58:	6a03      	ldr	r3, [r0, #32]
 8006d5a:	b570      	push	{r4, r5, r6, lr}
 8006d5c:	6884      	ldr	r4, [r0, #8]
 8006d5e:	4605      	mov	r5, r0
 8006d60:	460e      	mov	r6, r1
 8006d62:	b90b      	cbnz	r3, 8006d68 <_puts_r+0x10>
 8006d64:	f7ff ffb0 	bl	8006cc8 <__sinit>
 8006d68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d6a:	07db      	lsls	r3, r3, #31
 8006d6c:	d405      	bmi.n	8006d7a <_puts_r+0x22>
 8006d6e:	89a3      	ldrh	r3, [r4, #12]
 8006d70:	0598      	lsls	r0, r3, #22
 8006d72:	d402      	bmi.n	8006d7a <_puts_r+0x22>
 8006d74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d76:	f000 f9d4 	bl	8007122 <__retarget_lock_acquire_recursive>
 8006d7a:	89a3      	ldrh	r3, [r4, #12]
 8006d7c:	0719      	lsls	r1, r3, #28
 8006d7e:	d502      	bpl.n	8006d86 <_puts_r+0x2e>
 8006d80:	6923      	ldr	r3, [r4, #16]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d135      	bne.n	8006df2 <_puts_r+0x9a>
 8006d86:	4621      	mov	r1, r4
 8006d88:	4628      	mov	r0, r5
 8006d8a:	f000 f8e5 	bl	8006f58 <__swsetup_r>
 8006d8e:	b380      	cbz	r0, 8006df2 <_puts_r+0x9a>
 8006d90:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006d94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d96:	07da      	lsls	r2, r3, #31
 8006d98:	d405      	bmi.n	8006da6 <_puts_r+0x4e>
 8006d9a:	89a3      	ldrh	r3, [r4, #12]
 8006d9c:	059b      	lsls	r3, r3, #22
 8006d9e:	d402      	bmi.n	8006da6 <_puts_r+0x4e>
 8006da0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006da2:	f000 f9bf 	bl	8007124 <__retarget_lock_release_recursive>
 8006da6:	4628      	mov	r0, r5
 8006da8:	bd70      	pop	{r4, r5, r6, pc}
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	da04      	bge.n	8006db8 <_puts_r+0x60>
 8006dae:	69a2      	ldr	r2, [r4, #24]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	dc17      	bgt.n	8006de4 <_puts_r+0x8c>
 8006db4:	290a      	cmp	r1, #10
 8006db6:	d015      	beq.n	8006de4 <_puts_r+0x8c>
 8006db8:	6823      	ldr	r3, [r4, #0]
 8006dba:	1c5a      	adds	r2, r3, #1
 8006dbc:	6022      	str	r2, [r4, #0]
 8006dbe:	7019      	strb	r1, [r3, #0]
 8006dc0:	68a3      	ldr	r3, [r4, #8]
 8006dc2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	60a3      	str	r3, [r4, #8]
 8006dca:	2900      	cmp	r1, #0
 8006dcc:	d1ed      	bne.n	8006daa <_puts_r+0x52>
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	da11      	bge.n	8006df6 <_puts_r+0x9e>
 8006dd2:	4622      	mov	r2, r4
 8006dd4:	210a      	movs	r1, #10
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	f000 f87f 	bl	8006eda <__swbuf_r>
 8006ddc:	3001      	adds	r0, #1
 8006dde:	d0d7      	beq.n	8006d90 <_puts_r+0x38>
 8006de0:	250a      	movs	r5, #10
 8006de2:	e7d7      	b.n	8006d94 <_puts_r+0x3c>
 8006de4:	4622      	mov	r2, r4
 8006de6:	4628      	mov	r0, r5
 8006de8:	f000 f877 	bl	8006eda <__swbuf_r>
 8006dec:	3001      	adds	r0, #1
 8006dee:	d1e7      	bne.n	8006dc0 <_puts_r+0x68>
 8006df0:	e7ce      	b.n	8006d90 <_puts_r+0x38>
 8006df2:	3e01      	subs	r6, #1
 8006df4:	e7e4      	b.n	8006dc0 <_puts_r+0x68>
 8006df6:	6823      	ldr	r3, [r4, #0]
 8006df8:	1c5a      	adds	r2, r3, #1
 8006dfa:	6022      	str	r2, [r4, #0]
 8006dfc:	220a      	movs	r2, #10
 8006dfe:	701a      	strb	r2, [r3, #0]
 8006e00:	e7ee      	b.n	8006de0 <_puts_r+0x88>
	...

08006e04 <puts>:
 8006e04:	4b02      	ldr	r3, [pc, #8]	@ (8006e10 <puts+0xc>)
 8006e06:	4601      	mov	r1, r0
 8006e08:	6818      	ldr	r0, [r3, #0]
 8006e0a:	f7ff bfa5 	b.w	8006d58 <_puts_r>
 8006e0e:	bf00      	nop
 8006e10:	2000001c 	.word	0x2000001c

08006e14 <siprintf>:
 8006e14:	b40e      	push	{r1, r2, r3}
 8006e16:	b500      	push	{lr}
 8006e18:	b09c      	sub	sp, #112	@ 0x70
 8006e1a:	ab1d      	add	r3, sp, #116	@ 0x74
 8006e1c:	9002      	str	r0, [sp, #8]
 8006e1e:	9006      	str	r0, [sp, #24]
 8006e20:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006e24:	4809      	ldr	r0, [pc, #36]	@ (8006e4c <siprintf+0x38>)
 8006e26:	9107      	str	r1, [sp, #28]
 8006e28:	9104      	str	r1, [sp, #16]
 8006e2a:	4909      	ldr	r1, [pc, #36]	@ (8006e50 <siprintf+0x3c>)
 8006e2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e30:	9105      	str	r1, [sp, #20]
 8006e32:	6800      	ldr	r0, [r0, #0]
 8006e34:	9301      	str	r3, [sp, #4]
 8006e36:	a902      	add	r1, sp, #8
 8006e38:	f002 fc5c 	bl	80096f4 <_svfiprintf_r>
 8006e3c:	9b02      	ldr	r3, [sp, #8]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	701a      	strb	r2, [r3, #0]
 8006e42:	b01c      	add	sp, #112	@ 0x70
 8006e44:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e48:	b003      	add	sp, #12
 8006e4a:	4770      	bx	lr
 8006e4c:	2000001c 	.word	0x2000001c
 8006e50:	ffff0208 	.word	0xffff0208

08006e54 <__sread>:
 8006e54:	b510      	push	{r4, lr}
 8006e56:	460c      	mov	r4, r1
 8006e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e5c:	f000 f912 	bl	8007084 <_read_r>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	bfab      	itete	ge
 8006e64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006e66:	89a3      	ldrhlt	r3, [r4, #12]
 8006e68:	181b      	addge	r3, r3, r0
 8006e6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006e6e:	bfac      	ite	ge
 8006e70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006e72:	81a3      	strhlt	r3, [r4, #12]
 8006e74:	bd10      	pop	{r4, pc}

08006e76 <__swrite>:
 8006e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e7a:	461f      	mov	r7, r3
 8006e7c:	898b      	ldrh	r3, [r1, #12]
 8006e7e:	05db      	lsls	r3, r3, #23
 8006e80:	4605      	mov	r5, r0
 8006e82:	460c      	mov	r4, r1
 8006e84:	4616      	mov	r6, r2
 8006e86:	d505      	bpl.n	8006e94 <__swrite+0x1e>
 8006e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f000 f8e6 	bl	8007060 <_lseek_r>
 8006e94:	89a3      	ldrh	r3, [r4, #12]
 8006e96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e9e:	81a3      	strh	r3, [r4, #12]
 8006ea0:	4632      	mov	r2, r6
 8006ea2:	463b      	mov	r3, r7
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006eaa:	f000 b8fd 	b.w	80070a8 <_write_r>

08006eae <__sseek>:
 8006eae:	b510      	push	{r4, lr}
 8006eb0:	460c      	mov	r4, r1
 8006eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eb6:	f000 f8d3 	bl	8007060 <_lseek_r>
 8006eba:	1c43      	adds	r3, r0, #1
 8006ebc:	89a3      	ldrh	r3, [r4, #12]
 8006ebe:	bf15      	itete	ne
 8006ec0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006ec2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006ec6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006eca:	81a3      	strheq	r3, [r4, #12]
 8006ecc:	bf18      	it	ne
 8006ece:	81a3      	strhne	r3, [r4, #12]
 8006ed0:	bd10      	pop	{r4, pc}

08006ed2 <__sclose>:
 8006ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ed6:	f000 b8b3 	b.w	8007040 <_close_r>

08006eda <__swbuf_r>:
 8006eda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006edc:	460e      	mov	r6, r1
 8006ede:	4614      	mov	r4, r2
 8006ee0:	4605      	mov	r5, r0
 8006ee2:	b118      	cbz	r0, 8006eec <__swbuf_r+0x12>
 8006ee4:	6a03      	ldr	r3, [r0, #32]
 8006ee6:	b90b      	cbnz	r3, 8006eec <__swbuf_r+0x12>
 8006ee8:	f7ff feee 	bl	8006cc8 <__sinit>
 8006eec:	69a3      	ldr	r3, [r4, #24]
 8006eee:	60a3      	str	r3, [r4, #8]
 8006ef0:	89a3      	ldrh	r3, [r4, #12]
 8006ef2:	071a      	lsls	r2, r3, #28
 8006ef4:	d501      	bpl.n	8006efa <__swbuf_r+0x20>
 8006ef6:	6923      	ldr	r3, [r4, #16]
 8006ef8:	b943      	cbnz	r3, 8006f0c <__swbuf_r+0x32>
 8006efa:	4621      	mov	r1, r4
 8006efc:	4628      	mov	r0, r5
 8006efe:	f000 f82b 	bl	8006f58 <__swsetup_r>
 8006f02:	b118      	cbz	r0, 8006f0c <__swbuf_r+0x32>
 8006f04:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006f08:	4638      	mov	r0, r7
 8006f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f0c:	6823      	ldr	r3, [r4, #0]
 8006f0e:	6922      	ldr	r2, [r4, #16]
 8006f10:	1a98      	subs	r0, r3, r2
 8006f12:	6963      	ldr	r3, [r4, #20]
 8006f14:	b2f6      	uxtb	r6, r6
 8006f16:	4283      	cmp	r3, r0
 8006f18:	4637      	mov	r7, r6
 8006f1a:	dc05      	bgt.n	8006f28 <__swbuf_r+0x4e>
 8006f1c:	4621      	mov	r1, r4
 8006f1e:	4628      	mov	r0, r5
 8006f20:	f002 feaa 	bl	8009c78 <_fflush_r>
 8006f24:	2800      	cmp	r0, #0
 8006f26:	d1ed      	bne.n	8006f04 <__swbuf_r+0x2a>
 8006f28:	68a3      	ldr	r3, [r4, #8]
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	60a3      	str	r3, [r4, #8]
 8006f2e:	6823      	ldr	r3, [r4, #0]
 8006f30:	1c5a      	adds	r2, r3, #1
 8006f32:	6022      	str	r2, [r4, #0]
 8006f34:	701e      	strb	r6, [r3, #0]
 8006f36:	6962      	ldr	r2, [r4, #20]
 8006f38:	1c43      	adds	r3, r0, #1
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d004      	beq.n	8006f48 <__swbuf_r+0x6e>
 8006f3e:	89a3      	ldrh	r3, [r4, #12]
 8006f40:	07db      	lsls	r3, r3, #31
 8006f42:	d5e1      	bpl.n	8006f08 <__swbuf_r+0x2e>
 8006f44:	2e0a      	cmp	r6, #10
 8006f46:	d1df      	bne.n	8006f08 <__swbuf_r+0x2e>
 8006f48:	4621      	mov	r1, r4
 8006f4a:	4628      	mov	r0, r5
 8006f4c:	f002 fe94 	bl	8009c78 <_fflush_r>
 8006f50:	2800      	cmp	r0, #0
 8006f52:	d0d9      	beq.n	8006f08 <__swbuf_r+0x2e>
 8006f54:	e7d6      	b.n	8006f04 <__swbuf_r+0x2a>
	...

08006f58 <__swsetup_r>:
 8006f58:	b538      	push	{r3, r4, r5, lr}
 8006f5a:	4b29      	ldr	r3, [pc, #164]	@ (8007000 <__swsetup_r+0xa8>)
 8006f5c:	4605      	mov	r5, r0
 8006f5e:	6818      	ldr	r0, [r3, #0]
 8006f60:	460c      	mov	r4, r1
 8006f62:	b118      	cbz	r0, 8006f6c <__swsetup_r+0x14>
 8006f64:	6a03      	ldr	r3, [r0, #32]
 8006f66:	b90b      	cbnz	r3, 8006f6c <__swsetup_r+0x14>
 8006f68:	f7ff feae 	bl	8006cc8 <__sinit>
 8006f6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f70:	0719      	lsls	r1, r3, #28
 8006f72:	d422      	bmi.n	8006fba <__swsetup_r+0x62>
 8006f74:	06da      	lsls	r2, r3, #27
 8006f76:	d407      	bmi.n	8006f88 <__swsetup_r+0x30>
 8006f78:	2209      	movs	r2, #9
 8006f7a:	602a      	str	r2, [r5, #0]
 8006f7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f80:	81a3      	strh	r3, [r4, #12]
 8006f82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f86:	e033      	b.n	8006ff0 <__swsetup_r+0x98>
 8006f88:	0758      	lsls	r0, r3, #29
 8006f8a:	d512      	bpl.n	8006fb2 <__swsetup_r+0x5a>
 8006f8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f8e:	b141      	cbz	r1, 8006fa2 <__swsetup_r+0x4a>
 8006f90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f94:	4299      	cmp	r1, r3
 8006f96:	d002      	beq.n	8006f9e <__swsetup_r+0x46>
 8006f98:	4628      	mov	r0, r5
 8006f9a:	f000 ff19 	bl	8007dd0 <_free_r>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	6363      	str	r3, [r4, #52]	@ 0x34
 8006fa2:	89a3      	ldrh	r3, [r4, #12]
 8006fa4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006fa8:	81a3      	strh	r3, [r4, #12]
 8006faa:	2300      	movs	r3, #0
 8006fac:	6063      	str	r3, [r4, #4]
 8006fae:	6923      	ldr	r3, [r4, #16]
 8006fb0:	6023      	str	r3, [r4, #0]
 8006fb2:	89a3      	ldrh	r3, [r4, #12]
 8006fb4:	f043 0308 	orr.w	r3, r3, #8
 8006fb8:	81a3      	strh	r3, [r4, #12]
 8006fba:	6923      	ldr	r3, [r4, #16]
 8006fbc:	b94b      	cbnz	r3, 8006fd2 <__swsetup_r+0x7a>
 8006fbe:	89a3      	ldrh	r3, [r4, #12]
 8006fc0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006fc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fc8:	d003      	beq.n	8006fd2 <__swsetup_r+0x7a>
 8006fca:	4621      	mov	r1, r4
 8006fcc:	4628      	mov	r0, r5
 8006fce:	f002 fea1 	bl	8009d14 <__smakebuf_r>
 8006fd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fd6:	f013 0201 	ands.w	r2, r3, #1
 8006fda:	d00a      	beq.n	8006ff2 <__swsetup_r+0x9a>
 8006fdc:	2200      	movs	r2, #0
 8006fde:	60a2      	str	r2, [r4, #8]
 8006fe0:	6962      	ldr	r2, [r4, #20]
 8006fe2:	4252      	negs	r2, r2
 8006fe4:	61a2      	str	r2, [r4, #24]
 8006fe6:	6922      	ldr	r2, [r4, #16]
 8006fe8:	b942      	cbnz	r2, 8006ffc <__swsetup_r+0xa4>
 8006fea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006fee:	d1c5      	bne.n	8006f7c <__swsetup_r+0x24>
 8006ff0:	bd38      	pop	{r3, r4, r5, pc}
 8006ff2:	0799      	lsls	r1, r3, #30
 8006ff4:	bf58      	it	pl
 8006ff6:	6962      	ldrpl	r2, [r4, #20]
 8006ff8:	60a2      	str	r2, [r4, #8]
 8006ffa:	e7f4      	b.n	8006fe6 <__swsetup_r+0x8e>
 8006ffc:	2000      	movs	r0, #0
 8006ffe:	e7f7      	b.n	8006ff0 <__swsetup_r+0x98>
 8007000:	2000001c 	.word	0x2000001c

08007004 <memset>:
 8007004:	4402      	add	r2, r0
 8007006:	4603      	mov	r3, r0
 8007008:	4293      	cmp	r3, r2
 800700a:	d100      	bne.n	800700e <memset+0xa>
 800700c:	4770      	bx	lr
 800700e:	f803 1b01 	strb.w	r1, [r3], #1
 8007012:	e7f9      	b.n	8007008 <memset+0x4>

08007014 <strncmp>:
 8007014:	b510      	push	{r4, lr}
 8007016:	b16a      	cbz	r2, 8007034 <strncmp+0x20>
 8007018:	3901      	subs	r1, #1
 800701a:	1884      	adds	r4, r0, r2
 800701c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007020:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007024:	429a      	cmp	r2, r3
 8007026:	d103      	bne.n	8007030 <strncmp+0x1c>
 8007028:	42a0      	cmp	r0, r4
 800702a:	d001      	beq.n	8007030 <strncmp+0x1c>
 800702c:	2a00      	cmp	r2, #0
 800702e:	d1f5      	bne.n	800701c <strncmp+0x8>
 8007030:	1ad0      	subs	r0, r2, r3
 8007032:	bd10      	pop	{r4, pc}
 8007034:	4610      	mov	r0, r2
 8007036:	e7fc      	b.n	8007032 <strncmp+0x1e>

08007038 <_localeconv_r>:
 8007038:	4800      	ldr	r0, [pc, #0]	@ (800703c <_localeconv_r+0x4>)
 800703a:	4770      	bx	lr
 800703c:	2000015c 	.word	0x2000015c

08007040 <_close_r>:
 8007040:	b538      	push	{r3, r4, r5, lr}
 8007042:	4d06      	ldr	r5, [pc, #24]	@ (800705c <_close_r+0x1c>)
 8007044:	2300      	movs	r3, #0
 8007046:	4604      	mov	r4, r0
 8007048:	4608      	mov	r0, r1
 800704a:	602b      	str	r3, [r5, #0]
 800704c:	f7fb fa6e 	bl	800252c <_close>
 8007050:	1c43      	adds	r3, r0, #1
 8007052:	d102      	bne.n	800705a <_close_r+0x1a>
 8007054:	682b      	ldr	r3, [r5, #0]
 8007056:	b103      	cbz	r3, 800705a <_close_r+0x1a>
 8007058:	6023      	str	r3, [r4, #0]
 800705a:	bd38      	pop	{r3, r4, r5, pc}
 800705c:	2000049c 	.word	0x2000049c

08007060 <_lseek_r>:
 8007060:	b538      	push	{r3, r4, r5, lr}
 8007062:	4d07      	ldr	r5, [pc, #28]	@ (8007080 <_lseek_r+0x20>)
 8007064:	4604      	mov	r4, r0
 8007066:	4608      	mov	r0, r1
 8007068:	4611      	mov	r1, r2
 800706a:	2200      	movs	r2, #0
 800706c:	602a      	str	r2, [r5, #0]
 800706e:	461a      	mov	r2, r3
 8007070:	f7fb fa83 	bl	800257a <_lseek>
 8007074:	1c43      	adds	r3, r0, #1
 8007076:	d102      	bne.n	800707e <_lseek_r+0x1e>
 8007078:	682b      	ldr	r3, [r5, #0]
 800707a:	b103      	cbz	r3, 800707e <_lseek_r+0x1e>
 800707c:	6023      	str	r3, [r4, #0]
 800707e:	bd38      	pop	{r3, r4, r5, pc}
 8007080:	2000049c 	.word	0x2000049c

08007084 <_read_r>:
 8007084:	b538      	push	{r3, r4, r5, lr}
 8007086:	4d07      	ldr	r5, [pc, #28]	@ (80070a4 <_read_r+0x20>)
 8007088:	4604      	mov	r4, r0
 800708a:	4608      	mov	r0, r1
 800708c:	4611      	mov	r1, r2
 800708e:	2200      	movs	r2, #0
 8007090:	602a      	str	r2, [r5, #0]
 8007092:	461a      	mov	r2, r3
 8007094:	f7fb fa11 	bl	80024ba <_read>
 8007098:	1c43      	adds	r3, r0, #1
 800709a:	d102      	bne.n	80070a2 <_read_r+0x1e>
 800709c:	682b      	ldr	r3, [r5, #0]
 800709e:	b103      	cbz	r3, 80070a2 <_read_r+0x1e>
 80070a0:	6023      	str	r3, [r4, #0]
 80070a2:	bd38      	pop	{r3, r4, r5, pc}
 80070a4:	2000049c 	.word	0x2000049c

080070a8 <_write_r>:
 80070a8:	b538      	push	{r3, r4, r5, lr}
 80070aa:	4d07      	ldr	r5, [pc, #28]	@ (80070c8 <_write_r+0x20>)
 80070ac:	4604      	mov	r4, r0
 80070ae:	4608      	mov	r0, r1
 80070b0:	4611      	mov	r1, r2
 80070b2:	2200      	movs	r2, #0
 80070b4:	602a      	str	r2, [r5, #0]
 80070b6:	461a      	mov	r2, r3
 80070b8:	f7fb fa1c 	bl	80024f4 <_write>
 80070bc:	1c43      	adds	r3, r0, #1
 80070be:	d102      	bne.n	80070c6 <_write_r+0x1e>
 80070c0:	682b      	ldr	r3, [r5, #0]
 80070c2:	b103      	cbz	r3, 80070c6 <_write_r+0x1e>
 80070c4:	6023      	str	r3, [r4, #0]
 80070c6:	bd38      	pop	{r3, r4, r5, pc}
 80070c8:	2000049c 	.word	0x2000049c

080070cc <__errno>:
 80070cc:	4b01      	ldr	r3, [pc, #4]	@ (80070d4 <__errno+0x8>)
 80070ce:	6818      	ldr	r0, [r3, #0]
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	2000001c 	.word	0x2000001c

080070d8 <__libc_init_array>:
 80070d8:	b570      	push	{r4, r5, r6, lr}
 80070da:	4d0d      	ldr	r5, [pc, #52]	@ (8007110 <__libc_init_array+0x38>)
 80070dc:	4c0d      	ldr	r4, [pc, #52]	@ (8007114 <__libc_init_array+0x3c>)
 80070de:	1b64      	subs	r4, r4, r5
 80070e0:	10a4      	asrs	r4, r4, #2
 80070e2:	2600      	movs	r6, #0
 80070e4:	42a6      	cmp	r6, r4
 80070e6:	d109      	bne.n	80070fc <__libc_init_array+0x24>
 80070e8:	4d0b      	ldr	r5, [pc, #44]	@ (8007118 <__libc_init_array+0x40>)
 80070ea:	4c0c      	ldr	r4, [pc, #48]	@ (800711c <__libc_init_array+0x44>)
 80070ec:	f003 face 	bl	800a68c <_init>
 80070f0:	1b64      	subs	r4, r4, r5
 80070f2:	10a4      	asrs	r4, r4, #2
 80070f4:	2600      	movs	r6, #0
 80070f6:	42a6      	cmp	r6, r4
 80070f8:	d105      	bne.n	8007106 <__libc_init_array+0x2e>
 80070fa:	bd70      	pop	{r4, r5, r6, pc}
 80070fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007100:	4798      	blx	r3
 8007102:	3601      	adds	r6, #1
 8007104:	e7ee      	b.n	80070e4 <__libc_init_array+0xc>
 8007106:	f855 3b04 	ldr.w	r3, [r5], #4
 800710a:	4798      	blx	r3
 800710c:	3601      	adds	r6, #1
 800710e:	e7f2      	b.n	80070f6 <__libc_init_array+0x1e>
 8007110:	0800acd8 	.word	0x0800acd8
 8007114:	0800acd8 	.word	0x0800acd8
 8007118:	0800acd8 	.word	0x0800acd8
 800711c:	0800acdc 	.word	0x0800acdc

08007120 <__retarget_lock_init_recursive>:
 8007120:	4770      	bx	lr

08007122 <__retarget_lock_acquire_recursive>:
 8007122:	4770      	bx	lr

08007124 <__retarget_lock_release_recursive>:
 8007124:	4770      	bx	lr
	...

08007128 <nanf>:
 8007128:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007130 <nanf+0x8>
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	7fc00000 	.word	0x7fc00000

08007134 <quorem>:
 8007134:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007138:	6903      	ldr	r3, [r0, #16]
 800713a:	690c      	ldr	r4, [r1, #16]
 800713c:	42a3      	cmp	r3, r4
 800713e:	4607      	mov	r7, r0
 8007140:	db7e      	blt.n	8007240 <quorem+0x10c>
 8007142:	3c01      	subs	r4, #1
 8007144:	f101 0814 	add.w	r8, r1, #20
 8007148:	00a3      	lsls	r3, r4, #2
 800714a:	f100 0514 	add.w	r5, r0, #20
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007154:	9301      	str	r3, [sp, #4]
 8007156:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800715a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800715e:	3301      	adds	r3, #1
 8007160:	429a      	cmp	r2, r3
 8007162:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007166:	fbb2 f6f3 	udiv	r6, r2, r3
 800716a:	d32e      	bcc.n	80071ca <quorem+0x96>
 800716c:	f04f 0a00 	mov.w	sl, #0
 8007170:	46c4      	mov	ip, r8
 8007172:	46ae      	mov	lr, r5
 8007174:	46d3      	mov	fp, sl
 8007176:	f85c 3b04 	ldr.w	r3, [ip], #4
 800717a:	b298      	uxth	r0, r3
 800717c:	fb06 a000 	mla	r0, r6, r0, sl
 8007180:	0c02      	lsrs	r2, r0, #16
 8007182:	0c1b      	lsrs	r3, r3, #16
 8007184:	fb06 2303 	mla	r3, r6, r3, r2
 8007188:	f8de 2000 	ldr.w	r2, [lr]
 800718c:	b280      	uxth	r0, r0
 800718e:	b292      	uxth	r2, r2
 8007190:	1a12      	subs	r2, r2, r0
 8007192:	445a      	add	r2, fp
 8007194:	f8de 0000 	ldr.w	r0, [lr]
 8007198:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800719c:	b29b      	uxth	r3, r3
 800719e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80071a2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80071a6:	b292      	uxth	r2, r2
 80071a8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80071ac:	45e1      	cmp	r9, ip
 80071ae:	f84e 2b04 	str.w	r2, [lr], #4
 80071b2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80071b6:	d2de      	bcs.n	8007176 <quorem+0x42>
 80071b8:	9b00      	ldr	r3, [sp, #0]
 80071ba:	58eb      	ldr	r3, [r5, r3]
 80071bc:	b92b      	cbnz	r3, 80071ca <quorem+0x96>
 80071be:	9b01      	ldr	r3, [sp, #4]
 80071c0:	3b04      	subs	r3, #4
 80071c2:	429d      	cmp	r5, r3
 80071c4:	461a      	mov	r2, r3
 80071c6:	d32f      	bcc.n	8007228 <quorem+0xf4>
 80071c8:	613c      	str	r4, [r7, #16]
 80071ca:	4638      	mov	r0, r7
 80071cc:	f001 f9c4 	bl	8008558 <__mcmp>
 80071d0:	2800      	cmp	r0, #0
 80071d2:	db25      	blt.n	8007220 <quorem+0xec>
 80071d4:	4629      	mov	r1, r5
 80071d6:	2000      	movs	r0, #0
 80071d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80071dc:	f8d1 c000 	ldr.w	ip, [r1]
 80071e0:	fa1f fe82 	uxth.w	lr, r2
 80071e4:	fa1f f38c 	uxth.w	r3, ip
 80071e8:	eba3 030e 	sub.w	r3, r3, lr
 80071ec:	4403      	add	r3, r0
 80071ee:	0c12      	lsrs	r2, r2, #16
 80071f0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80071f4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071fe:	45c1      	cmp	r9, r8
 8007200:	f841 3b04 	str.w	r3, [r1], #4
 8007204:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007208:	d2e6      	bcs.n	80071d8 <quorem+0xa4>
 800720a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800720e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007212:	b922      	cbnz	r2, 800721e <quorem+0xea>
 8007214:	3b04      	subs	r3, #4
 8007216:	429d      	cmp	r5, r3
 8007218:	461a      	mov	r2, r3
 800721a:	d30b      	bcc.n	8007234 <quorem+0x100>
 800721c:	613c      	str	r4, [r7, #16]
 800721e:	3601      	adds	r6, #1
 8007220:	4630      	mov	r0, r6
 8007222:	b003      	add	sp, #12
 8007224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007228:	6812      	ldr	r2, [r2, #0]
 800722a:	3b04      	subs	r3, #4
 800722c:	2a00      	cmp	r2, #0
 800722e:	d1cb      	bne.n	80071c8 <quorem+0x94>
 8007230:	3c01      	subs	r4, #1
 8007232:	e7c6      	b.n	80071c2 <quorem+0x8e>
 8007234:	6812      	ldr	r2, [r2, #0]
 8007236:	3b04      	subs	r3, #4
 8007238:	2a00      	cmp	r2, #0
 800723a:	d1ef      	bne.n	800721c <quorem+0xe8>
 800723c:	3c01      	subs	r4, #1
 800723e:	e7ea      	b.n	8007216 <quorem+0xe2>
 8007240:	2000      	movs	r0, #0
 8007242:	e7ee      	b.n	8007222 <quorem+0xee>
 8007244:	0000      	movs	r0, r0
	...

08007248 <_dtoa_r>:
 8007248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800724c:	69c7      	ldr	r7, [r0, #28]
 800724e:	b099      	sub	sp, #100	@ 0x64
 8007250:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007254:	ec55 4b10 	vmov	r4, r5, d0
 8007258:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800725a:	9109      	str	r1, [sp, #36]	@ 0x24
 800725c:	4683      	mov	fp, r0
 800725e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007260:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007262:	b97f      	cbnz	r7, 8007284 <_dtoa_r+0x3c>
 8007264:	2010      	movs	r0, #16
 8007266:	f000 fdfd 	bl	8007e64 <malloc>
 800726a:	4602      	mov	r2, r0
 800726c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007270:	b920      	cbnz	r0, 800727c <_dtoa_r+0x34>
 8007272:	4ba7      	ldr	r3, [pc, #668]	@ (8007510 <_dtoa_r+0x2c8>)
 8007274:	21ef      	movs	r1, #239	@ 0xef
 8007276:	48a7      	ldr	r0, [pc, #668]	@ (8007514 <_dtoa_r+0x2cc>)
 8007278:	f002 fdea 	bl	8009e50 <__assert_func>
 800727c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007280:	6007      	str	r7, [r0, #0]
 8007282:	60c7      	str	r7, [r0, #12]
 8007284:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007288:	6819      	ldr	r1, [r3, #0]
 800728a:	b159      	cbz	r1, 80072a4 <_dtoa_r+0x5c>
 800728c:	685a      	ldr	r2, [r3, #4]
 800728e:	604a      	str	r2, [r1, #4]
 8007290:	2301      	movs	r3, #1
 8007292:	4093      	lsls	r3, r2
 8007294:	608b      	str	r3, [r1, #8]
 8007296:	4658      	mov	r0, fp
 8007298:	f000 feda 	bl	8008050 <_Bfree>
 800729c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80072a0:	2200      	movs	r2, #0
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	1e2b      	subs	r3, r5, #0
 80072a6:	bfb9      	ittee	lt
 80072a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80072ac:	9303      	strlt	r3, [sp, #12]
 80072ae:	2300      	movge	r3, #0
 80072b0:	6033      	strge	r3, [r6, #0]
 80072b2:	9f03      	ldr	r7, [sp, #12]
 80072b4:	4b98      	ldr	r3, [pc, #608]	@ (8007518 <_dtoa_r+0x2d0>)
 80072b6:	bfbc      	itt	lt
 80072b8:	2201      	movlt	r2, #1
 80072ba:	6032      	strlt	r2, [r6, #0]
 80072bc:	43bb      	bics	r3, r7
 80072be:	d112      	bne.n	80072e6 <_dtoa_r+0x9e>
 80072c0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80072c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80072c6:	6013      	str	r3, [r2, #0]
 80072c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80072cc:	4323      	orrs	r3, r4
 80072ce:	f000 854d 	beq.w	8007d6c <_dtoa_r+0xb24>
 80072d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80072d4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800752c <_dtoa_r+0x2e4>
 80072d8:	2b00      	cmp	r3, #0
 80072da:	f000 854f 	beq.w	8007d7c <_dtoa_r+0xb34>
 80072de:	f10a 0303 	add.w	r3, sl, #3
 80072e2:	f000 bd49 	b.w	8007d78 <_dtoa_r+0xb30>
 80072e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80072ea:	2200      	movs	r2, #0
 80072ec:	ec51 0b17 	vmov	r0, r1, d7
 80072f0:	2300      	movs	r3, #0
 80072f2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80072f6:	f7f9 fc17 	bl	8000b28 <__aeabi_dcmpeq>
 80072fa:	4680      	mov	r8, r0
 80072fc:	b158      	cbz	r0, 8007316 <_dtoa_r+0xce>
 80072fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007300:	2301      	movs	r3, #1
 8007302:	6013      	str	r3, [r2, #0]
 8007304:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007306:	b113      	cbz	r3, 800730e <_dtoa_r+0xc6>
 8007308:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800730a:	4b84      	ldr	r3, [pc, #528]	@ (800751c <_dtoa_r+0x2d4>)
 800730c:	6013      	str	r3, [r2, #0]
 800730e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007530 <_dtoa_r+0x2e8>
 8007312:	f000 bd33 	b.w	8007d7c <_dtoa_r+0xb34>
 8007316:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800731a:	aa16      	add	r2, sp, #88	@ 0x58
 800731c:	a917      	add	r1, sp, #92	@ 0x5c
 800731e:	4658      	mov	r0, fp
 8007320:	f001 fa3a 	bl	8008798 <__d2b>
 8007324:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007328:	4681      	mov	r9, r0
 800732a:	2e00      	cmp	r6, #0
 800732c:	d077      	beq.n	800741e <_dtoa_r+0x1d6>
 800732e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007330:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007338:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800733c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007340:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007344:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007348:	4619      	mov	r1, r3
 800734a:	2200      	movs	r2, #0
 800734c:	4b74      	ldr	r3, [pc, #464]	@ (8007520 <_dtoa_r+0x2d8>)
 800734e:	f7f8 ffcb 	bl	80002e8 <__aeabi_dsub>
 8007352:	a369      	add	r3, pc, #420	@ (adr r3, 80074f8 <_dtoa_r+0x2b0>)
 8007354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007358:	f7f9 f97e 	bl	8000658 <__aeabi_dmul>
 800735c:	a368      	add	r3, pc, #416	@ (adr r3, 8007500 <_dtoa_r+0x2b8>)
 800735e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007362:	f7f8 ffc3 	bl	80002ec <__adddf3>
 8007366:	4604      	mov	r4, r0
 8007368:	4630      	mov	r0, r6
 800736a:	460d      	mov	r5, r1
 800736c:	f7f9 f90a 	bl	8000584 <__aeabi_i2d>
 8007370:	a365      	add	r3, pc, #404	@ (adr r3, 8007508 <_dtoa_r+0x2c0>)
 8007372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007376:	f7f9 f96f 	bl	8000658 <__aeabi_dmul>
 800737a:	4602      	mov	r2, r0
 800737c:	460b      	mov	r3, r1
 800737e:	4620      	mov	r0, r4
 8007380:	4629      	mov	r1, r5
 8007382:	f7f8 ffb3 	bl	80002ec <__adddf3>
 8007386:	4604      	mov	r4, r0
 8007388:	460d      	mov	r5, r1
 800738a:	f7f9 fc15 	bl	8000bb8 <__aeabi_d2iz>
 800738e:	2200      	movs	r2, #0
 8007390:	4607      	mov	r7, r0
 8007392:	2300      	movs	r3, #0
 8007394:	4620      	mov	r0, r4
 8007396:	4629      	mov	r1, r5
 8007398:	f7f9 fbd0 	bl	8000b3c <__aeabi_dcmplt>
 800739c:	b140      	cbz	r0, 80073b0 <_dtoa_r+0x168>
 800739e:	4638      	mov	r0, r7
 80073a0:	f7f9 f8f0 	bl	8000584 <__aeabi_i2d>
 80073a4:	4622      	mov	r2, r4
 80073a6:	462b      	mov	r3, r5
 80073a8:	f7f9 fbbe 	bl	8000b28 <__aeabi_dcmpeq>
 80073ac:	b900      	cbnz	r0, 80073b0 <_dtoa_r+0x168>
 80073ae:	3f01      	subs	r7, #1
 80073b0:	2f16      	cmp	r7, #22
 80073b2:	d851      	bhi.n	8007458 <_dtoa_r+0x210>
 80073b4:	4b5b      	ldr	r3, [pc, #364]	@ (8007524 <_dtoa_r+0x2dc>)
 80073b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80073ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073c2:	f7f9 fbbb 	bl	8000b3c <__aeabi_dcmplt>
 80073c6:	2800      	cmp	r0, #0
 80073c8:	d048      	beq.n	800745c <_dtoa_r+0x214>
 80073ca:	3f01      	subs	r7, #1
 80073cc:	2300      	movs	r3, #0
 80073ce:	9312      	str	r3, [sp, #72]	@ 0x48
 80073d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80073d2:	1b9b      	subs	r3, r3, r6
 80073d4:	1e5a      	subs	r2, r3, #1
 80073d6:	bf44      	itt	mi
 80073d8:	f1c3 0801 	rsbmi	r8, r3, #1
 80073dc:	2300      	movmi	r3, #0
 80073de:	9208      	str	r2, [sp, #32]
 80073e0:	bf54      	ite	pl
 80073e2:	f04f 0800 	movpl.w	r8, #0
 80073e6:	9308      	strmi	r3, [sp, #32]
 80073e8:	2f00      	cmp	r7, #0
 80073ea:	db39      	blt.n	8007460 <_dtoa_r+0x218>
 80073ec:	9b08      	ldr	r3, [sp, #32]
 80073ee:	970f      	str	r7, [sp, #60]	@ 0x3c
 80073f0:	443b      	add	r3, r7
 80073f2:	9308      	str	r3, [sp, #32]
 80073f4:	2300      	movs	r3, #0
 80073f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80073f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073fa:	2b09      	cmp	r3, #9
 80073fc:	d864      	bhi.n	80074c8 <_dtoa_r+0x280>
 80073fe:	2b05      	cmp	r3, #5
 8007400:	bfc4      	itt	gt
 8007402:	3b04      	subgt	r3, #4
 8007404:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007408:	f1a3 0302 	sub.w	r3, r3, #2
 800740c:	bfcc      	ite	gt
 800740e:	2400      	movgt	r4, #0
 8007410:	2401      	movle	r4, #1
 8007412:	2b03      	cmp	r3, #3
 8007414:	d863      	bhi.n	80074de <_dtoa_r+0x296>
 8007416:	e8df f003 	tbb	[pc, r3]
 800741a:	372a      	.short	0x372a
 800741c:	5535      	.short	0x5535
 800741e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007422:	441e      	add	r6, r3
 8007424:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007428:	2b20      	cmp	r3, #32
 800742a:	bfc1      	itttt	gt
 800742c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007430:	409f      	lslgt	r7, r3
 8007432:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007436:	fa24 f303 	lsrgt.w	r3, r4, r3
 800743a:	bfd6      	itet	le
 800743c:	f1c3 0320 	rsble	r3, r3, #32
 8007440:	ea47 0003 	orrgt.w	r0, r7, r3
 8007444:	fa04 f003 	lslle.w	r0, r4, r3
 8007448:	f7f9 f88c 	bl	8000564 <__aeabi_ui2d>
 800744c:	2201      	movs	r2, #1
 800744e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007452:	3e01      	subs	r6, #1
 8007454:	9214      	str	r2, [sp, #80]	@ 0x50
 8007456:	e777      	b.n	8007348 <_dtoa_r+0x100>
 8007458:	2301      	movs	r3, #1
 800745a:	e7b8      	b.n	80073ce <_dtoa_r+0x186>
 800745c:	9012      	str	r0, [sp, #72]	@ 0x48
 800745e:	e7b7      	b.n	80073d0 <_dtoa_r+0x188>
 8007460:	427b      	negs	r3, r7
 8007462:	930a      	str	r3, [sp, #40]	@ 0x28
 8007464:	2300      	movs	r3, #0
 8007466:	eba8 0807 	sub.w	r8, r8, r7
 800746a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800746c:	e7c4      	b.n	80073f8 <_dtoa_r+0x1b0>
 800746e:	2300      	movs	r3, #0
 8007470:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007472:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007474:	2b00      	cmp	r3, #0
 8007476:	dc35      	bgt.n	80074e4 <_dtoa_r+0x29c>
 8007478:	2301      	movs	r3, #1
 800747a:	9300      	str	r3, [sp, #0]
 800747c:	9307      	str	r3, [sp, #28]
 800747e:	461a      	mov	r2, r3
 8007480:	920e      	str	r2, [sp, #56]	@ 0x38
 8007482:	e00b      	b.n	800749c <_dtoa_r+0x254>
 8007484:	2301      	movs	r3, #1
 8007486:	e7f3      	b.n	8007470 <_dtoa_r+0x228>
 8007488:	2300      	movs	r3, #0
 800748a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800748c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800748e:	18fb      	adds	r3, r7, r3
 8007490:	9300      	str	r3, [sp, #0]
 8007492:	3301      	adds	r3, #1
 8007494:	2b01      	cmp	r3, #1
 8007496:	9307      	str	r3, [sp, #28]
 8007498:	bfb8      	it	lt
 800749a:	2301      	movlt	r3, #1
 800749c:	f8db 001c 	ldr.w	r0, [fp, #28]
 80074a0:	2100      	movs	r1, #0
 80074a2:	2204      	movs	r2, #4
 80074a4:	f102 0514 	add.w	r5, r2, #20
 80074a8:	429d      	cmp	r5, r3
 80074aa:	d91f      	bls.n	80074ec <_dtoa_r+0x2a4>
 80074ac:	6041      	str	r1, [r0, #4]
 80074ae:	4658      	mov	r0, fp
 80074b0:	f000 fd8e 	bl	8007fd0 <_Balloc>
 80074b4:	4682      	mov	sl, r0
 80074b6:	2800      	cmp	r0, #0
 80074b8:	d13c      	bne.n	8007534 <_dtoa_r+0x2ec>
 80074ba:	4b1b      	ldr	r3, [pc, #108]	@ (8007528 <_dtoa_r+0x2e0>)
 80074bc:	4602      	mov	r2, r0
 80074be:	f240 11af 	movw	r1, #431	@ 0x1af
 80074c2:	e6d8      	b.n	8007276 <_dtoa_r+0x2e>
 80074c4:	2301      	movs	r3, #1
 80074c6:	e7e0      	b.n	800748a <_dtoa_r+0x242>
 80074c8:	2401      	movs	r4, #1
 80074ca:	2300      	movs	r3, #0
 80074cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80074ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 80074d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	9307      	str	r3, [sp, #28]
 80074d8:	2200      	movs	r2, #0
 80074da:	2312      	movs	r3, #18
 80074dc:	e7d0      	b.n	8007480 <_dtoa_r+0x238>
 80074de:	2301      	movs	r3, #1
 80074e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074e2:	e7f5      	b.n	80074d0 <_dtoa_r+0x288>
 80074e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074e6:	9300      	str	r3, [sp, #0]
 80074e8:	9307      	str	r3, [sp, #28]
 80074ea:	e7d7      	b.n	800749c <_dtoa_r+0x254>
 80074ec:	3101      	adds	r1, #1
 80074ee:	0052      	lsls	r2, r2, #1
 80074f0:	e7d8      	b.n	80074a4 <_dtoa_r+0x25c>
 80074f2:	bf00      	nop
 80074f4:	f3af 8000 	nop.w
 80074f8:	636f4361 	.word	0x636f4361
 80074fc:	3fd287a7 	.word	0x3fd287a7
 8007500:	8b60c8b3 	.word	0x8b60c8b3
 8007504:	3fc68a28 	.word	0x3fc68a28
 8007508:	509f79fb 	.word	0x509f79fb
 800750c:	3fd34413 	.word	0x3fd34413
 8007510:	0800a8ea 	.word	0x0800a8ea
 8007514:	0800a901 	.word	0x0800a901
 8007518:	7ff00000 	.word	0x7ff00000
 800751c:	0800a8b5 	.word	0x0800a8b5
 8007520:	3ff80000 	.word	0x3ff80000
 8007524:	0800a9f8 	.word	0x0800a9f8
 8007528:	0800a959 	.word	0x0800a959
 800752c:	0800a8e6 	.word	0x0800a8e6
 8007530:	0800a8b4 	.word	0x0800a8b4
 8007534:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007538:	6018      	str	r0, [r3, #0]
 800753a:	9b07      	ldr	r3, [sp, #28]
 800753c:	2b0e      	cmp	r3, #14
 800753e:	f200 80a4 	bhi.w	800768a <_dtoa_r+0x442>
 8007542:	2c00      	cmp	r4, #0
 8007544:	f000 80a1 	beq.w	800768a <_dtoa_r+0x442>
 8007548:	2f00      	cmp	r7, #0
 800754a:	dd33      	ble.n	80075b4 <_dtoa_r+0x36c>
 800754c:	4bad      	ldr	r3, [pc, #692]	@ (8007804 <_dtoa_r+0x5bc>)
 800754e:	f007 020f 	and.w	r2, r7, #15
 8007552:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007556:	ed93 7b00 	vldr	d7, [r3]
 800755a:	05f8      	lsls	r0, r7, #23
 800755c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007560:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007564:	d516      	bpl.n	8007594 <_dtoa_r+0x34c>
 8007566:	4ba8      	ldr	r3, [pc, #672]	@ (8007808 <_dtoa_r+0x5c0>)
 8007568:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800756c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007570:	f7f9 f99c 	bl	80008ac <__aeabi_ddiv>
 8007574:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007578:	f004 040f 	and.w	r4, r4, #15
 800757c:	2603      	movs	r6, #3
 800757e:	4da2      	ldr	r5, [pc, #648]	@ (8007808 <_dtoa_r+0x5c0>)
 8007580:	b954      	cbnz	r4, 8007598 <_dtoa_r+0x350>
 8007582:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007586:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800758a:	f7f9 f98f 	bl	80008ac <__aeabi_ddiv>
 800758e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007592:	e028      	b.n	80075e6 <_dtoa_r+0x39e>
 8007594:	2602      	movs	r6, #2
 8007596:	e7f2      	b.n	800757e <_dtoa_r+0x336>
 8007598:	07e1      	lsls	r1, r4, #31
 800759a:	d508      	bpl.n	80075ae <_dtoa_r+0x366>
 800759c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075a4:	f7f9 f858 	bl	8000658 <__aeabi_dmul>
 80075a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075ac:	3601      	adds	r6, #1
 80075ae:	1064      	asrs	r4, r4, #1
 80075b0:	3508      	adds	r5, #8
 80075b2:	e7e5      	b.n	8007580 <_dtoa_r+0x338>
 80075b4:	f000 80d2 	beq.w	800775c <_dtoa_r+0x514>
 80075b8:	427c      	negs	r4, r7
 80075ba:	4b92      	ldr	r3, [pc, #584]	@ (8007804 <_dtoa_r+0x5bc>)
 80075bc:	4d92      	ldr	r5, [pc, #584]	@ (8007808 <_dtoa_r+0x5c0>)
 80075be:	f004 020f 	and.w	r2, r4, #15
 80075c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075ce:	f7f9 f843 	bl	8000658 <__aeabi_dmul>
 80075d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075d6:	1124      	asrs	r4, r4, #4
 80075d8:	2300      	movs	r3, #0
 80075da:	2602      	movs	r6, #2
 80075dc:	2c00      	cmp	r4, #0
 80075de:	f040 80b2 	bne.w	8007746 <_dtoa_r+0x4fe>
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1d3      	bne.n	800758e <_dtoa_r+0x346>
 80075e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80075e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f000 80b7 	beq.w	8007760 <_dtoa_r+0x518>
 80075f2:	4b86      	ldr	r3, [pc, #536]	@ (800780c <_dtoa_r+0x5c4>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	4620      	mov	r0, r4
 80075f8:	4629      	mov	r1, r5
 80075fa:	f7f9 fa9f 	bl	8000b3c <__aeabi_dcmplt>
 80075fe:	2800      	cmp	r0, #0
 8007600:	f000 80ae 	beq.w	8007760 <_dtoa_r+0x518>
 8007604:	9b07      	ldr	r3, [sp, #28]
 8007606:	2b00      	cmp	r3, #0
 8007608:	f000 80aa 	beq.w	8007760 <_dtoa_r+0x518>
 800760c:	9b00      	ldr	r3, [sp, #0]
 800760e:	2b00      	cmp	r3, #0
 8007610:	dd37      	ble.n	8007682 <_dtoa_r+0x43a>
 8007612:	1e7b      	subs	r3, r7, #1
 8007614:	9304      	str	r3, [sp, #16]
 8007616:	4620      	mov	r0, r4
 8007618:	4b7d      	ldr	r3, [pc, #500]	@ (8007810 <_dtoa_r+0x5c8>)
 800761a:	2200      	movs	r2, #0
 800761c:	4629      	mov	r1, r5
 800761e:	f7f9 f81b 	bl	8000658 <__aeabi_dmul>
 8007622:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007626:	9c00      	ldr	r4, [sp, #0]
 8007628:	3601      	adds	r6, #1
 800762a:	4630      	mov	r0, r6
 800762c:	f7f8 ffaa 	bl	8000584 <__aeabi_i2d>
 8007630:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007634:	f7f9 f810 	bl	8000658 <__aeabi_dmul>
 8007638:	4b76      	ldr	r3, [pc, #472]	@ (8007814 <_dtoa_r+0x5cc>)
 800763a:	2200      	movs	r2, #0
 800763c:	f7f8 fe56 	bl	80002ec <__adddf3>
 8007640:	4605      	mov	r5, r0
 8007642:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007646:	2c00      	cmp	r4, #0
 8007648:	f040 808d 	bne.w	8007766 <_dtoa_r+0x51e>
 800764c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007650:	4b71      	ldr	r3, [pc, #452]	@ (8007818 <_dtoa_r+0x5d0>)
 8007652:	2200      	movs	r2, #0
 8007654:	f7f8 fe48 	bl	80002e8 <__aeabi_dsub>
 8007658:	4602      	mov	r2, r0
 800765a:	460b      	mov	r3, r1
 800765c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007660:	462a      	mov	r2, r5
 8007662:	4633      	mov	r3, r6
 8007664:	f7f9 fa88 	bl	8000b78 <__aeabi_dcmpgt>
 8007668:	2800      	cmp	r0, #0
 800766a:	f040 828b 	bne.w	8007b84 <_dtoa_r+0x93c>
 800766e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007672:	462a      	mov	r2, r5
 8007674:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007678:	f7f9 fa60 	bl	8000b3c <__aeabi_dcmplt>
 800767c:	2800      	cmp	r0, #0
 800767e:	f040 8128 	bne.w	80078d2 <_dtoa_r+0x68a>
 8007682:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007686:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800768a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800768c:	2b00      	cmp	r3, #0
 800768e:	f2c0 815a 	blt.w	8007946 <_dtoa_r+0x6fe>
 8007692:	2f0e      	cmp	r7, #14
 8007694:	f300 8157 	bgt.w	8007946 <_dtoa_r+0x6fe>
 8007698:	4b5a      	ldr	r3, [pc, #360]	@ (8007804 <_dtoa_r+0x5bc>)
 800769a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800769e:	ed93 7b00 	vldr	d7, [r3]
 80076a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	ed8d 7b00 	vstr	d7, [sp]
 80076aa:	da03      	bge.n	80076b4 <_dtoa_r+0x46c>
 80076ac:	9b07      	ldr	r3, [sp, #28]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f340 8101 	ble.w	80078b6 <_dtoa_r+0x66e>
 80076b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80076b8:	4656      	mov	r6, sl
 80076ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076be:	4620      	mov	r0, r4
 80076c0:	4629      	mov	r1, r5
 80076c2:	f7f9 f8f3 	bl	80008ac <__aeabi_ddiv>
 80076c6:	f7f9 fa77 	bl	8000bb8 <__aeabi_d2iz>
 80076ca:	4680      	mov	r8, r0
 80076cc:	f7f8 ff5a 	bl	8000584 <__aeabi_i2d>
 80076d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076d4:	f7f8 ffc0 	bl	8000658 <__aeabi_dmul>
 80076d8:	4602      	mov	r2, r0
 80076da:	460b      	mov	r3, r1
 80076dc:	4620      	mov	r0, r4
 80076de:	4629      	mov	r1, r5
 80076e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80076e4:	f7f8 fe00 	bl	80002e8 <__aeabi_dsub>
 80076e8:	f806 4b01 	strb.w	r4, [r6], #1
 80076ec:	9d07      	ldr	r5, [sp, #28]
 80076ee:	eba6 040a 	sub.w	r4, r6, sl
 80076f2:	42a5      	cmp	r5, r4
 80076f4:	4602      	mov	r2, r0
 80076f6:	460b      	mov	r3, r1
 80076f8:	f040 8117 	bne.w	800792a <_dtoa_r+0x6e2>
 80076fc:	f7f8 fdf6 	bl	80002ec <__adddf3>
 8007700:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007704:	4604      	mov	r4, r0
 8007706:	460d      	mov	r5, r1
 8007708:	f7f9 fa36 	bl	8000b78 <__aeabi_dcmpgt>
 800770c:	2800      	cmp	r0, #0
 800770e:	f040 80f9 	bne.w	8007904 <_dtoa_r+0x6bc>
 8007712:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007716:	4620      	mov	r0, r4
 8007718:	4629      	mov	r1, r5
 800771a:	f7f9 fa05 	bl	8000b28 <__aeabi_dcmpeq>
 800771e:	b118      	cbz	r0, 8007728 <_dtoa_r+0x4e0>
 8007720:	f018 0f01 	tst.w	r8, #1
 8007724:	f040 80ee 	bne.w	8007904 <_dtoa_r+0x6bc>
 8007728:	4649      	mov	r1, r9
 800772a:	4658      	mov	r0, fp
 800772c:	f000 fc90 	bl	8008050 <_Bfree>
 8007730:	2300      	movs	r3, #0
 8007732:	7033      	strb	r3, [r6, #0]
 8007734:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007736:	3701      	adds	r7, #1
 8007738:	601f      	str	r7, [r3, #0]
 800773a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800773c:	2b00      	cmp	r3, #0
 800773e:	f000 831d 	beq.w	8007d7c <_dtoa_r+0xb34>
 8007742:	601e      	str	r6, [r3, #0]
 8007744:	e31a      	b.n	8007d7c <_dtoa_r+0xb34>
 8007746:	07e2      	lsls	r2, r4, #31
 8007748:	d505      	bpl.n	8007756 <_dtoa_r+0x50e>
 800774a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800774e:	f7f8 ff83 	bl	8000658 <__aeabi_dmul>
 8007752:	3601      	adds	r6, #1
 8007754:	2301      	movs	r3, #1
 8007756:	1064      	asrs	r4, r4, #1
 8007758:	3508      	adds	r5, #8
 800775a:	e73f      	b.n	80075dc <_dtoa_r+0x394>
 800775c:	2602      	movs	r6, #2
 800775e:	e742      	b.n	80075e6 <_dtoa_r+0x39e>
 8007760:	9c07      	ldr	r4, [sp, #28]
 8007762:	9704      	str	r7, [sp, #16]
 8007764:	e761      	b.n	800762a <_dtoa_r+0x3e2>
 8007766:	4b27      	ldr	r3, [pc, #156]	@ (8007804 <_dtoa_r+0x5bc>)
 8007768:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800776a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800776e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007772:	4454      	add	r4, sl
 8007774:	2900      	cmp	r1, #0
 8007776:	d053      	beq.n	8007820 <_dtoa_r+0x5d8>
 8007778:	4928      	ldr	r1, [pc, #160]	@ (800781c <_dtoa_r+0x5d4>)
 800777a:	2000      	movs	r0, #0
 800777c:	f7f9 f896 	bl	80008ac <__aeabi_ddiv>
 8007780:	4633      	mov	r3, r6
 8007782:	462a      	mov	r2, r5
 8007784:	f7f8 fdb0 	bl	80002e8 <__aeabi_dsub>
 8007788:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800778c:	4656      	mov	r6, sl
 800778e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007792:	f7f9 fa11 	bl	8000bb8 <__aeabi_d2iz>
 8007796:	4605      	mov	r5, r0
 8007798:	f7f8 fef4 	bl	8000584 <__aeabi_i2d>
 800779c:	4602      	mov	r2, r0
 800779e:	460b      	mov	r3, r1
 80077a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077a4:	f7f8 fda0 	bl	80002e8 <__aeabi_dsub>
 80077a8:	3530      	adds	r5, #48	@ 0x30
 80077aa:	4602      	mov	r2, r0
 80077ac:	460b      	mov	r3, r1
 80077ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80077b2:	f806 5b01 	strb.w	r5, [r6], #1
 80077b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80077ba:	f7f9 f9bf 	bl	8000b3c <__aeabi_dcmplt>
 80077be:	2800      	cmp	r0, #0
 80077c0:	d171      	bne.n	80078a6 <_dtoa_r+0x65e>
 80077c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077c6:	4911      	ldr	r1, [pc, #68]	@ (800780c <_dtoa_r+0x5c4>)
 80077c8:	2000      	movs	r0, #0
 80077ca:	f7f8 fd8d 	bl	80002e8 <__aeabi_dsub>
 80077ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80077d2:	f7f9 f9b3 	bl	8000b3c <__aeabi_dcmplt>
 80077d6:	2800      	cmp	r0, #0
 80077d8:	f040 8095 	bne.w	8007906 <_dtoa_r+0x6be>
 80077dc:	42a6      	cmp	r6, r4
 80077de:	f43f af50 	beq.w	8007682 <_dtoa_r+0x43a>
 80077e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80077e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007810 <_dtoa_r+0x5c8>)
 80077e8:	2200      	movs	r2, #0
 80077ea:	f7f8 ff35 	bl	8000658 <__aeabi_dmul>
 80077ee:	4b08      	ldr	r3, [pc, #32]	@ (8007810 <_dtoa_r+0x5c8>)
 80077f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077f4:	2200      	movs	r2, #0
 80077f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077fa:	f7f8 ff2d 	bl	8000658 <__aeabi_dmul>
 80077fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007802:	e7c4      	b.n	800778e <_dtoa_r+0x546>
 8007804:	0800a9f8 	.word	0x0800a9f8
 8007808:	0800a9d0 	.word	0x0800a9d0
 800780c:	3ff00000 	.word	0x3ff00000
 8007810:	40240000 	.word	0x40240000
 8007814:	401c0000 	.word	0x401c0000
 8007818:	40140000 	.word	0x40140000
 800781c:	3fe00000 	.word	0x3fe00000
 8007820:	4631      	mov	r1, r6
 8007822:	4628      	mov	r0, r5
 8007824:	f7f8 ff18 	bl	8000658 <__aeabi_dmul>
 8007828:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800782c:	9415      	str	r4, [sp, #84]	@ 0x54
 800782e:	4656      	mov	r6, sl
 8007830:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007834:	f7f9 f9c0 	bl	8000bb8 <__aeabi_d2iz>
 8007838:	4605      	mov	r5, r0
 800783a:	f7f8 fea3 	bl	8000584 <__aeabi_i2d>
 800783e:	4602      	mov	r2, r0
 8007840:	460b      	mov	r3, r1
 8007842:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007846:	f7f8 fd4f 	bl	80002e8 <__aeabi_dsub>
 800784a:	3530      	adds	r5, #48	@ 0x30
 800784c:	f806 5b01 	strb.w	r5, [r6], #1
 8007850:	4602      	mov	r2, r0
 8007852:	460b      	mov	r3, r1
 8007854:	42a6      	cmp	r6, r4
 8007856:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800785a:	f04f 0200 	mov.w	r2, #0
 800785e:	d124      	bne.n	80078aa <_dtoa_r+0x662>
 8007860:	4bac      	ldr	r3, [pc, #688]	@ (8007b14 <_dtoa_r+0x8cc>)
 8007862:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007866:	f7f8 fd41 	bl	80002ec <__adddf3>
 800786a:	4602      	mov	r2, r0
 800786c:	460b      	mov	r3, r1
 800786e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007872:	f7f9 f981 	bl	8000b78 <__aeabi_dcmpgt>
 8007876:	2800      	cmp	r0, #0
 8007878:	d145      	bne.n	8007906 <_dtoa_r+0x6be>
 800787a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800787e:	49a5      	ldr	r1, [pc, #660]	@ (8007b14 <_dtoa_r+0x8cc>)
 8007880:	2000      	movs	r0, #0
 8007882:	f7f8 fd31 	bl	80002e8 <__aeabi_dsub>
 8007886:	4602      	mov	r2, r0
 8007888:	460b      	mov	r3, r1
 800788a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800788e:	f7f9 f955 	bl	8000b3c <__aeabi_dcmplt>
 8007892:	2800      	cmp	r0, #0
 8007894:	f43f aef5 	beq.w	8007682 <_dtoa_r+0x43a>
 8007898:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800789a:	1e73      	subs	r3, r6, #1
 800789c:	9315      	str	r3, [sp, #84]	@ 0x54
 800789e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80078a2:	2b30      	cmp	r3, #48	@ 0x30
 80078a4:	d0f8      	beq.n	8007898 <_dtoa_r+0x650>
 80078a6:	9f04      	ldr	r7, [sp, #16]
 80078a8:	e73e      	b.n	8007728 <_dtoa_r+0x4e0>
 80078aa:	4b9b      	ldr	r3, [pc, #620]	@ (8007b18 <_dtoa_r+0x8d0>)
 80078ac:	f7f8 fed4 	bl	8000658 <__aeabi_dmul>
 80078b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078b4:	e7bc      	b.n	8007830 <_dtoa_r+0x5e8>
 80078b6:	d10c      	bne.n	80078d2 <_dtoa_r+0x68a>
 80078b8:	4b98      	ldr	r3, [pc, #608]	@ (8007b1c <_dtoa_r+0x8d4>)
 80078ba:	2200      	movs	r2, #0
 80078bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078c0:	f7f8 feca 	bl	8000658 <__aeabi_dmul>
 80078c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078c8:	f7f9 f94c 	bl	8000b64 <__aeabi_dcmpge>
 80078cc:	2800      	cmp	r0, #0
 80078ce:	f000 8157 	beq.w	8007b80 <_dtoa_r+0x938>
 80078d2:	2400      	movs	r4, #0
 80078d4:	4625      	mov	r5, r4
 80078d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078d8:	43db      	mvns	r3, r3
 80078da:	9304      	str	r3, [sp, #16]
 80078dc:	4656      	mov	r6, sl
 80078de:	2700      	movs	r7, #0
 80078e0:	4621      	mov	r1, r4
 80078e2:	4658      	mov	r0, fp
 80078e4:	f000 fbb4 	bl	8008050 <_Bfree>
 80078e8:	2d00      	cmp	r5, #0
 80078ea:	d0dc      	beq.n	80078a6 <_dtoa_r+0x65e>
 80078ec:	b12f      	cbz	r7, 80078fa <_dtoa_r+0x6b2>
 80078ee:	42af      	cmp	r7, r5
 80078f0:	d003      	beq.n	80078fa <_dtoa_r+0x6b2>
 80078f2:	4639      	mov	r1, r7
 80078f4:	4658      	mov	r0, fp
 80078f6:	f000 fbab 	bl	8008050 <_Bfree>
 80078fa:	4629      	mov	r1, r5
 80078fc:	4658      	mov	r0, fp
 80078fe:	f000 fba7 	bl	8008050 <_Bfree>
 8007902:	e7d0      	b.n	80078a6 <_dtoa_r+0x65e>
 8007904:	9704      	str	r7, [sp, #16]
 8007906:	4633      	mov	r3, r6
 8007908:	461e      	mov	r6, r3
 800790a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800790e:	2a39      	cmp	r2, #57	@ 0x39
 8007910:	d107      	bne.n	8007922 <_dtoa_r+0x6da>
 8007912:	459a      	cmp	sl, r3
 8007914:	d1f8      	bne.n	8007908 <_dtoa_r+0x6c0>
 8007916:	9a04      	ldr	r2, [sp, #16]
 8007918:	3201      	adds	r2, #1
 800791a:	9204      	str	r2, [sp, #16]
 800791c:	2230      	movs	r2, #48	@ 0x30
 800791e:	f88a 2000 	strb.w	r2, [sl]
 8007922:	781a      	ldrb	r2, [r3, #0]
 8007924:	3201      	adds	r2, #1
 8007926:	701a      	strb	r2, [r3, #0]
 8007928:	e7bd      	b.n	80078a6 <_dtoa_r+0x65e>
 800792a:	4b7b      	ldr	r3, [pc, #492]	@ (8007b18 <_dtoa_r+0x8d0>)
 800792c:	2200      	movs	r2, #0
 800792e:	f7f8 fe93 	bl	8000658 <__aeabi_dmul>
 8007932:	2200      	movs	r2, #0
 8007934:	2300      	movs	r3, #0
 8007936:	4604      	mov	r4, r0
 8007938:	460d      	mov	r5, r1
 800793a:	f7f9 f8f5 	bl	8000b28 <__aeabi_dcmpeq>
 800793e:	2800      	cmp	r0, #0
 8007940:	f43f aebb 	beq.w	80076ba <_dtoa_r+0x472>
 8007944:	e6f0      	b.n	8007728 <_dtoa_r+0x4e0>
 8007946:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007948:	2a00      	cmp	r2, #0
 800794a:	f000 80db 	beq.w	8007b04 <_dtoa_r+0x8bc>
 800794e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007950:	2a01      	cmp	r2, #1
 8007952:	f300 80bf 	bgt.w	8007ad4 <_dtoa_r+0x88c>
 8007956:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007958:	2a00      	cmp	r2, #0
 800795a:	f000 80b7 	beq.w	8007acc <_dtoa_r+0x884>
 800795e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007962:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007964:	4646      	mov	r6, r8
 8007966:	9a08      	ldr	r2, [sp, #32]
 8007968:	2101      	movs	r1, #1
 800796a:	441a      	add	r2, r3
 800796c:	4658      	mov	r0, fp
 800796e:	4498      	add	r8, r3
 8007970:	9208      	str	r2, [sp, #32]
 8007972:	f000 fc6b 	bl	800824c <__i2b>
 8007976:	4605      	mov	r5, r0
 8007978:	b15e      	cbz	r6, 8007992 <_dtoa_r+0x74a>
 800797a:	9b08      	ldr	r3, [sp, #32]
 800797c:	2b00      	cmp	r3, #0
 800797e:	dd08      	ble.n	8007992 <_dtoa_r+0x74a>
 8007980:	42b3      	cmp	r3, r6
 8007982:	9a08      	ldr	r2, [sp, #32]
 8007984:	bfa8      	it	ge
 8007986:	4633      	movge	r3, r6
 8007988:	eba8 0803 	sub.w	r8, r8, r3
 800798c:	1af6      	subs	r6, r6, r3
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	9308      	str	r3, [sp, #32]
 8007992:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007994:	b1f3      	cbz	r3, 80079d4 <_dtoa_r+0x78c>
 8007996:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007998:	2b00      	cmp	r3, #0
 800799a:	f000 80b7 	beq.w	8007b0c <_dtoa_r+0x8c4>
 800799e:	b18c      	cbz	r4, 80079c4 <_dtoa_r+0x77c>
 80079a0:	4629      	mov	r1, r5
 80079a2:	4622      	mov	r2, r4
 80079a4:	4658      	mov	r0, fp
 80079a6:	f000 fd11 	bl	80083cc <__pow5mult>
 80079aa:	464a      	mov	r2, r9
 80079ac:	4601      	mov	r1, r0
 80079ae:	4605      	mov	r5, r0
 80079b0:	4658      	mov	r0, fp
 80079b2:	f000 fc61 	bl	8008278 <__multiply>
 80079b6:	4649      	mov	r1, r9
 80079b8:	9004      	str	r0, [sp, #16]
 80079ba:	4658      	mov	r0, fp
 80079bc:	f000 fb48 	bl	8008050 <_Bfree>
 80079c0:	9b04      	ldr	r3, [sp, #16]
 80079c2:	4699      	mov	r9, r3
 80079c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079c6:	1b1a      	subs	r2, r3, r4
 80079c8:	d004      	beq.n	80079d4 <_dtoa_r+0x78c>
 80079ca:	4649      	mov	r1, r9
 80079cc:	4658      	mov	r0, fp
 80079ce:	f000 fcfd 	bl	80083cc <__pow5mult>
 80079d2:	4681      	mov	r9, r0
 80079d4:	2101      	movs	r1, #1
 80079d6:	4658      	mov	r0, fp
 80079d8:	f000 fc38 	bl	800824c <__i2b>
 80079dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079de:	4604      	mov	r4, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f000 81cf 	beq.w	8007d84 <_dtoa_r+0xb3c>
 80079e6:	461a      	mov	r2, r3
 80079e8:	4601      	mov	r1, r0
 80079ea:	4658      	mov	r0, fp
 80079ec:	f000 fcee 	bl	80083cc <__pow5mult>
 80079f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	4604      	mov	r4, r0
 80079f6:	f300 8095 	bgt.w	8007b24 <_dtoa_r+0x8dc>
 80079fa:	9b02      	ldr	r3, [sp, #8]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f040 8087 	bne.w	8007b10 <_dtoa_r+0x8c8>
 8007a02:	9b03      	ldr	r3, [sp, #12]
 8007a04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f040 8089 	bne.w	8007b20 <_dtoa_r+0x8d8>
 8007a0e:	9b03      	ldr	r3, [sp, #12]
 8007a10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a14:	0d1b      	lsrs	r3, r3, #20
 8007a16:	051b      	lsls	r3, r3, #20
 8007a18:	b12b      	cbz	r3, 8007a26 <_dtoa_r+0x7de>
 8007a1a:	9b08      	ldr	r3, [sp, #32]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	9308      	str	r3, [sp, #32]
 8007a20:	f108 0801 	add.w	r8, r8, #1
 8007a24:	2301      	movs	r3, #1
 8007a26:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f000 81b0 	beq.w	8007d90 <_dtoa_r+0xb48>
 8007a30:	6923      	ldr	r3, [r4, #16]
 8007a32:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a36:	6918      	ldr	r0, [r3, #16]
 8007a38:	f000 fbbc 	bl	80081b4 <__hi0bits>
 8007a3c:	f1c0 0020 	rsb	r0, r0, #32
 8007a40:	9b08      	ldr	r3, [sp, #32]
 8007a42:	4418      	add	r0, r3
 8007a44:	f010 001f 	ands.w	r0, r0, #31
 8007a48:	d077      	beq.n	8007b3a <_dtoa_r+0x8f2>
 8007a4a:	f1c0 0320 	rsb	r3, r0, #32
 8007a4e:	2b04      	cmp	r3, #4
 8007a50:	dd6b      	ble.n	8007b2a <_dtoa_r+0x8e2>
 8007a52:	9b08      	ldr	r3, [sp, #32]
 8007a54:	f1c0 001c 	rsb	r0, r0, #28
 8007a58:	4403      	add	r3, r0
 8007a5a:	4480      	add	r8, r0
 8007a5c:	4406      	add	r6, r0
 8007a5e:	9308      	str	r3, [sp, #32]
 8007a60:	f1b8 0f00 	cmp.w	r8, #0
 8007a64:	dd05      	ble.n	8007a72 <_dtoa_r+0x82a>
 8007a66:	4649      	mov	r1, r9
 8007a68:	4642      	mov	r2, r8
 8007a6a:	4658      	mov	r0, fp
 8007a6c:	f000 fd08 	bl	8008480 <__lshift>
 8007a70:	4681      	mov	r9, r0
 8007a72:	9b08      	ldr	r3, [sp, #32]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	dd05      	ble.n	8007a84 <_dtoa_r+0x83c>
 8007a78:	4621      	mov	r1, r4
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	4658      	mov	r0, fp
 8007a7e:	f000 fcff 	bl	8008480 <__lshift>
 8007a82:	4604      	mov	r4, r0
 8007a84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d059      	beq.n	8007b3e <_dtoa_r+0x8f6>
 8007a8a:	4621      	mov	r1, r4
 8007a8c:	4648      	mov	r0, r9
 8007a8e:	f000 fd63 	bl	8008558 <__mcmp>
 8007a92:	2800      	cmp	r0, #0
 8007a94:	da53      	bge.n	8007b3e <_dtoa_r+0x8f6>
 8007a96:	1e7b      	subs	r3, r7, #1
 8007a98:	9304      	str	r3, [sp, #16]
 8007a9a:	4649      	mov	r1, r9
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	220a      	movs	r2, #10
 8007aa0:	4658      	mov	r0, fp
 8007aa2:	f000 faf7 	bl	8008094 <__multadd>
 8007aa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007aa8:	4681      	mov	r9, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f000 8172 	beq.w	8007d94 <_dtoa_r+0xb4c>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	4629      	mov	r1, r5
 8007ab4:	220a      	movs	r2, #10
 8007ab6:	4658      	mov	r0, fp
 8007ab8:	f000 faec 	bl	8008094 <__multadd>
 8007abc:	9b00      	ldr	r3, [sp, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	4605      	mov	r5, r0
 8007ac2:	dc67      	bgt.n	8007b94 <_dtoa_r+0x94c>
 8007ac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	dc41      	bgt.n	8007b4e <_dtoa_r+0x906>
 8007aca:	e063      	b.n	8007b94 <_dtoa_r+0x94c>
 8007acc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007ace:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007ad2:	e746      	b.n	8007962 <_dtoa_r+0x71a>
 8007ad4:	9b07      	ldr	r3, [sp, #28]
 8007ad6:	1e5c      	subs	r4, r3, #1
 8007ad8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ada:	42a3      	cmp	r3, r4
 8007adc:	bfbf      	itttt	lt
 8007ade:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007ae0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007ae2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007ae4:	1ae3      	sublt	r3, r4, r3
 8007ae6:	bfb4      	ite	lt
 8007ae8:	18d2      	addlt	r2, r2, r3
 8007aea:	1b1c      	subge	r4, r3, r4
 8007aec:	9b07      	ldr	r3, [sp, #28]
 8007aee:	bfbc      	itt	lt
 8007af0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007af2:	2400      	movlt	r4, #0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	bfb5      	itete	lt
 8007af8:	eba8 0603 	sublt.w	r6, r8, r3
 8007afc:	9b07      	ldrge	r3, [sp, #28]
 8007afe:	2300      	movlt	r3, #0
 8007b00:	4646      	movge	r6, r8
 8007b02:	e730      	b.n	8007966 <_dtoa_r+0x71e>
 8007b04:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007b06:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007b08:	4646      	mov	r6, r8
 8007b0a:	e735      	b.n	8007978 <_dtoa_r+0x730>
 8007b0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b0e:	e75c      	b.n	80079ca <_dtoa_r+0x782>
 8007b10:	2300      	movs	r3, #0
 8007b12:	e788      	b.n	8007a26 <_dtoa_r+0x7de>
 8007b14:	3fe00000 	.word	0x3fe00000
 8007b18:	40240000 	.word	0x40240000
 8007b1c:	40140000 	.word	0x40140000
 8007b20:	9b02      	ldr	r3, [sp, #8]
 8007b22:	e780      	b.n	8007a26 <_dtoa_r+0x7de>
 8007b24:	2300      	movs	r3, #0
 8007b26:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b28:	e782      	b.n	8007a30 <_dtoa_r+0x7e8>
 8007b2a:	d099      	beq.n	8007a60 <_dtoa_r+0x818>
 8007b2c:	9a08      	ldr	r2, [sp, #32]
 8007b2e:	331c      	adds	r3, #28
 8007b30:	441a      	add	r2, r3
 8007b32:	4498      	add	r8, r3
 8007b34:	441e      	add	r6, r3
 8007b36:	9208      	str	r2, [sp, #32]
 8007b38:	e792      	b.n	8007a60 <_dtoa_r+0x818>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	e7f6      	b.n	8007b2c <_dtoa_r+0x8e4>
 8007b3e:	9b07      	ldr	r3, [sp, #28]
 8007b40:	9704      	str	r7, [sp, #16]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	dc20      	bgt.n	8007b88 <_dtoa_r+0x940>
 8007b46:	9300      	str	r3, [sp, #0]
 8007b48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	dd1e      	ble.n	8007b8c <_dtoa_r+0x944>
 8007b4e:	9b00      	ldr	r3, [sp, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f47f aec0 	bne.w	80078d6 <_dtoa_r+0x68e>
 8007b56:	4621      	mov	r1, r4
 8007b58:	2205      	movs	r2, #5
 8007b5a:	4658      	mov	r0, fp
 8007b5c:	f000 fa9a 	bl	8008094 <__multadd>
 8007b60:	4601      	mov	r1, r0
 8007b62:	4604      	mov	r4, r0
 8007b64:	4648      	mov	r0, r9
 8007b66:	f000 fcf7 	bl	8008558 <__mcmp>
 8007b6a:	2800      	cmp	r0, #0
 8007b6c:	f77f aeb3 	ble.w	80078d6 <_dtoa_r+0x68e>
 8007b70:	4656      	mov	r6, sl
 8007b72:	2331      	movs	r3, #49	@ 0x31
 8007b74:	f806 3b01 	strb.w	r3, [r6], #1
 8007b78:	9b04      	ldr	r3, [sp, #16]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	9304      	str	r3, [sp, #16]
 8007b7e:	e6ae      	b.n	80078de <_dtoa_r+0x696>
 8007b80:	9c07      	ldr	r4, [sp, #28]
 8007b82:	9704      	str	r7, [sp, #16]
 8007b84:	4625      	mov	r5, r4
 8007b86:	e7f3      	b.n	8007b70 <_dtoa_r+0x928>
 8007b88:	9b07      	ldr	r3, [sp, #28]
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f000 8104 	beq.w	8007d9c <_dtoa_r+0xb54>
 8007b94:	2e00      	cmp	r6, #0
 8007b96:	dd05      	ble.n	8007ba4 <_dtoa_r+0x95c>
 8007b98:	4629      	mov	r1, r5
 8007b9a:	4632      	mov	r2, r6
 8007b9c:	4658      	mov	r0, fp
 8007b9e:	f000 fc6f 	bl	8008480 <__lshift>
 8007ba2:	4605      	mov	r5, r0
 8007ba4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d05a      	beq.n	8007c60 <_dtoa_r+0xa18>
 8007baa:	6869      	ldr	r1, [r5, #4]
 8007bac:	4658      	mov	r0, fp
 8007bae:	f000 fa0f 	bl	8007fd0 <_Balloc>
 8007bb2:	4606      	mov	r6, r0
 8007bb4:	b928      	cbnz	r0, 8007bc2 <_dtoa_r+0x97a>
 8007bb6:	4b84      	ldr	r3, [pc, #528]	@ (8007dc8 <_dtoa_r+0xb80>)
 8007bb8:	4602      	mov	r2, r0
 8007bba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007bbe:	f7ff bb5a 	b.w	8007276 <_dtoa_r+0x2e>
 8007bc2:	692a      	ldr	r2, [r5, #16]
 8007bc4:	3202      	adds	r2, #2
 8007bc6:	0092      	lsls	r2, r2, #2
 8007bc8:	f105 010c 	add.w	r1, r5, #12
 8007bcc:	300c      	adds	r0, #12
 8007bce:	f002 f929 	bl	8009e24 <memcpy>
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	4631      	mov	r1, r6
 8007bd6:	4658      	mov	r0, fp
 8007bd8:	f000 fc52 	bl	8008480 <__lshift>
 8007bdc:	f10a 0301 	add.w	r3, sl, #1
 8007be0:	9307      	str	r3, [sp, #28]
 8007be2:	9b00      	ldr	r3, [sp, #0]
 8007be4:	4453      	add	r3, sl
 8007be6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007be8:	9b02      	ldr	r3, [sp, #8]
 8007bea:	f003 0301 	and.w	r3, r3, #1
 8007bee:	462f      	mov	r7, r5
 8007bf0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bf2:	4605      	mov	r5, r0
 8007bf4:	9b07      	ldr	r3, [sp, #28]
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	4648      	mov	r0, r9
 8007bfc:	9300      	str	r3, [sp, #0]
 8007bfe:	f7ff fa99 	bl	8007134 <quorem>
 8007c02:	4639      	mov	r1, r7
 8007c04:	9002      	str	r0, [sp, #8]
 8007c06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007c0a:	4648      	mov	r0, r9
 8007c0c:	f000 fca4 	bl	8008558 <__mcmp>
 8007c10:	462a      	mov	r2, r5
 8007c12:	9008      	str	r0, [sp, #32]
 8007c14:	4621      	mov	r1, r4
 8007c16:	4658      	mov	r0, fp
 8007c18:	f000 fcba 	bl	8008590 <__mdiff>
 8007c1c:	68c2      	ldr	r2, [r0, #12]
 8007c1e:	4606      	mov	r6, r0
 8007c20:	bb02      	cbnz	r2, 8007c64 <_dtoa_r+0xa1c>
 8007c22:	4601      	mov	r1, r0
 8007c24:	4648      	mov	r0, r9
 8007c26:	f000 fc97 	bl	8008558 <__mcmp>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	4631      	mov	r1, r6
 8007c2e:	4658      	mov	r0, fp
 8007c30:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c32:	f000 fa0d 	bl	8008050 <_Bfree>
 8007c36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c3a:	9e07      	ldr	r6, [sp, #28]
 8007c3c:	ea43 0102 	orr.w	r1, r3, r2
 8007c40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c42:	4319      	orrs	r1, r3
 8007c44:	d110      	bne.n	8007c68 <_dtoa_r+0xa20>
 8007c46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c4a:	d029      	beq.n	8007ca0 <_dtoa_r+0xa58>
 8007c4c:	9b08      	ldr	r3, [sp, #32]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	dd02      	ble.n	8007c58 <_dtoa_r+0xa10>
 8007c52:	9b02      	ldr	r3, [sp, #8]
 8007c54:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007c58:	9b00      	ldr	r3, [sp, #0]
 8007c5a:	f883 8000 	strb.w	r8, [r3]
 8007c5e:	e63f      	b.n	80078e0 <_dtoa_r+0x698>
 8007c60:	4628      	mov	r0, r5
 8007c62:	e7bb      	b.n	8007bdc <_dtoa_r+0x994>
 8007c64:	2201      	movs	r2, #1
 8007c66:	e7e1      	b.n	8007c2c <_dtoa_r+0x9e4>
 8007c68:	9b08      	ldr	r3, [sp, #32]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	db04      	blt.n	8007c78 <_dtoa_r+0xa30>
 8007c6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c70:	430b      	orrs	r3, r1
 8007c72:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c74:	430b      	orrs	r3, r1
 8007c76:	d120      	bne.n	8007cba <_dtoa_r+0xa72>
 8007c78:	2a00      	cmp	r2, #0
 8007c7a:	dded      	ble.n	8007c58 <_dtoa_r+0xa10>
 8007c7c:	4649      	mov	r1, r9
 8007c7e:	2201      	movs	r2, #1
 8007c80:	4658      	mov	r0, fp
 8007c82:	f000 fbfd 	bl	8008480 <__lshift>
 8007c86:	4621      	mov	r1, r4
 8007c88:	4681      	mov	r9, r0
 8007c8a:	f000 fc65 	bl	8008558 <__mcmp>
 8007c8e:	2800      	cmp	r0, #0
 8007c90:	dc03      	bgt.n	8007c9a <_dtoa_r+0xa52>
 8007c92:	d1e1      	bne.n	8007c58 <_dtoa_r+0xa10>
 8007c94:	f018 0f01 	tst.w	r8, #1
 8007c98:	d0de      	beq.n	8007c58 <_dtoa_r+0xa10>
 8007c9a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c9e:	d1d8      	bne.n	8007c52 <_dtoa_r+0xa0a>
 8007ca0:	9a00      	ldr	r2, [sp, #0]
 8007ca2:	2339      	movs	r3, #57	@ 0x39
 8007ca4:	7013      	strb	r3, [r2, #0]
 8007ca6:	4633      	mov	r3, r6
 8007ca8:	461e      	mov	r6, r3
 8007caa:	3b01      	subs	r3, #1
 8007cac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007cb0:	2a39      	cmp	r2, #57	@ 0x39
 8007cb2:	d052      	beq.n	8007d5a <_dtoa_r+0xb12>
 8007cb4:	3201      	adds	r2, #1
 8007cb6:	701a      	strb	r2, [r3, #0]
 8007cb8:	e612      	b.n	80078e0 <_dtoa_r+0x698>
 8007cba:	2a00      	cmp	r2, #0
 8007cbc:	dd07      	ble.n	8007cce <_dtoa_r+0xa86>
 8007cbe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007cc2:	d0ed      	beq.n	8007ca0 <_dtoa_r+0xa58>
 8007cc4:	9a00      	ldr	r2, [sp, #0]
 8007cc6:	f108 0301 	add.w	r3, r8, #1
 8007cca:	7013      	strb	r3, [r2, #0]
 8007ccc:	e608      	b.n	80078e0 <_dtoa_r+0x698>
 8007cce:	9b07      	ldr	r3, [sp, #28]
 8007cd0:	9a07      	ldr	r2, [sp, #28]
 8007cd2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007cd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d028      	beq.n	8007d2e <_dtoa_r+0xae6>
 8007cdc:	4649      	mov	r1, r9
 8007cde:	2300      	movs	r3, #0
 8007ce0:	220a      	movs	r2, #10
 8007ce2:	4658      	mov	r0, fp
 8007ce4:	f000 f9d6 	bl	8008094 <__multadd>
 8007ce8:	42af      	cmp	r7, r5
 8007cea:	4681      	mov	r9, r0
 8007cec:	f04f 0300 	mov.w	r3, #0
 8007cf0:	f04f 020a 	mov.w	r2, #10
 8007cf4:	4639      	mov	r1, r7
 8007cf6:	4658      	mov	r0, fp
 8007cf8:	d107      	bne.n	8007d0a <_dtoa_r+0xac2>
 8007cfa:	f000 f9cb 	bl	8008094 <__multadd>
 8007cfe:	4607      	mov	r7, r0
 8007d00:	4605      	mov	r5, r0
 8007d02:	9b07      	ldr	r3, [sp, #28]
 8007d04:	3301      	adds	r3, #1
 8007d06:	9307      	str	r3, [sp, #28]
 8007d08:	e774      	b.n	8007bf4 <_dtoa_r+0x9ac>
 8007d0a:	f000 f9c3 	bl	8008094 <__multadd>
 8007d0e:	4629      	mov	r1, r5
 8007d10:	4607      	mov	r7, r0
 8007d12:	2300      	movs	r3, #0
 8007d14:	220a      	movs	r2, #10
 8007d16:	4658      	mov	r0, fp
 8007d18:	f000 f9bc 	bl	8008094 <__multadd>
 8007d1c:	4605      	mov	r5, r0
 8007d1e:	e7f0      	b.n	8007d02 <_dtoa_r+0xaba>
 8007d20:	9b00      	ldr	r3, [sp, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	bfcc      	ite	gt
 8007d26:	461e      	movgt	r6, r3
 8007d28:	2601      	movle	r6, #1
 8007d2a:	4456      	add	r6, sl
 8007d2c:	2700      	movs	r7, #0
 8007d2e:	4649      	mov	r1, r9
 8007d30:	2201      	movs	r2, #1
 8007d32:	4658      	mov	r0, fp
 8007d34:	f000 fba4 	bl	8008480 <__lshift>
 8007d38:	4621      	mov	r1, r4
 8007d3a:	4681      	mov	r9, r0
 8007d3c:	f000 fc0c 	bl	8008558 <__mcmp>
 8007d40:	2800      	cmp	r0, #0
 8007d42:	dcb0      	bgt.n	8007ca6 <_dtoa_r+0xa5e>
 8007d44:	d102      	bne.n	8007d4c <_dtoa_r+0xb04>
 8007d46:	f018 0f01 	tst.w	r8, #1
 8007d4a:	d1ac      	bne.n	8007ca6 <_dtoa_r+0xa5e>
 8007d4c:	4633      	mov	r3, r6
 8007d4e:	461e      	mov	r6, r3
 8007d50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d54:	2a30      	cmp	r2, #48	@ 0x30
 8007d56:	d0fa      	beq.n	8007d4e <_dtoa_r+0xb06>
 8007d58:	e5c2      	b.n	80078e0 <_dtoa_r+0x698>
 8007d5a:	459a      	cmp	sl, r3
 8007d5c:	d1a4      	bne.n	8007ca8 <_dtoa_r+0xa60>
 8007d5e:	9b04      	ldr	r3, [sp, #16]
 8007d60:	3301      	adds	r3, #1
 8007d62:	9304      	str	r3, [sp, #16]
 8007d64:	2331      	movs	r3, #49	@ 0x31
 8007d66:	f88a 3000 	strb.w	r3, [sl]
 8007d6a:	e5b9      	b.n	80078e0 <_dtoa_r+0x698>
 8007d6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d6e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007dcc <_dtoa_r+0xb84>
 8007d72:	b11b      	cbz	r3, 8007d7c <_dtoa_r+0xb34>
 8007d74:	f10a 0308 	add.w	r3, sl, #8
 8007d78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007d7a:	6013      	str	r3, [r2, #0]
 8007d7c:	4650      	mov	r0, sl
 8007d7e:	b019      	add	sp, #100	@ 0x64
 8007d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	f77f ae37 	ble.w	80079fa <_dtoa_r+0x7b2>
 8007d8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d90:	2001      	movs	r0, #1
 8007d92:	e655      	b.n	8007a40 <_dtoa_r+0x7f8>
 8007d94:	9b00      	ldr	r3, [sp, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f77f aed6 	ble.w	8007b48 <_dtoa_r+0x900>
 8007d9c:	4656      	mov	r6, sl
 8007d9e:	4621      	mov	r1, r4
 8007da0:	4648      	mov	r0, r9
 8007da2:	f7ff f9c7 	bl	8007134 <quorem>
 8007da6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007daa:	f806 8b01 	strb.w	r8, [r6], #1
 8007dae:	9b00      	ldr	r3, [sp, #0]
 8007db0:	eba6 020a 	sub.w	r2, r6, sl
 8007db4:	4293      	cmp	r3, r2
 8007db6:	ddb3      	ble.n	8007d20 <_dtoa_r+0xad8>
 8007db8:	4649      	mov	r1, r9
 8007dba:	2300      	movs	r3, #0
 8007dbc:	220a      	movs	r2, #10
 8007dbe:	4658      	mov	r0, fp
 8007dc0:	f000 f968 	bl	8008094 <__multadd>
 8007dc4:	4681      	mov	r9, r0
 8007dc6:	e7ea      	b.n	8007d9e <_dtoa_r+0xb56>
 8007dc8:	0800a959 	.word	0x0800a959
 8007dcc:	0800a8dd 	.word	0x0800a8dd

08007dd0 <_free_r>:
 8007dd0:	b538      	push	{r3, r4, r5, lr}
 8007dd2:	4605      	mov	r5, r0
 8007dd4:	2900      	cmp	r1, #0
 8007dd6:	d041      	beq.n	8007e5c <_free_r+0x8c>
 8007dd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ddc:	1f0c      	subs	r4, r1, #4
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	bfb8      	it	lt
 8007de2:	18e4      	addlt	r4, r4, r3
 8007de4:	f000 f8e8 	bl	8007fb8 <__malloc_lock>
 8007de8:	4a1d      	ldr	r2, [pc, #116]	@ (8007e60 <_free_r+0x90>)
 8007dea:	6813      	ldr	r3, [r2, #0]
 8007dec:	b933      	cbnz	r3, 8007dfc <_free_r+0x2c>
 8007dee:	6063      	str	r3, [r4, #4]
 8007df0:	6014      	str	r4, [r2, #0]
 8007df2:	4628      	mov	r0, r5
 8007df4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007df8:	f000 b8e4 	b.w	8007fc4 <__malloc_unlock>
 8007dfc:	42a3      	cmp	r3, r4
 8007dfe:	d908      	bls.n	8007e12 <_free_r+0x42>
 8007e00:	6820      	ldr	r0, [r4, #0]
 8007e02:	1821      	adds	r1, r4, r0
 8007e04:	428b      	cmp	r3, r1
 8007e06:	bf01      	itttt	eq
 8007e08:	6819      	ldreq	r1, [r3, #0]
 8007e0a:	685b      	ldreq	r3, [r3, #4]
 8007e0c:	1809      	addeq	r1, r1, r0
 8007e0e:	6021      	streq	r1, [r4, #0]
 8007e10:	e7ed      	b.n	8007dee <_free_r+0x1e>
 8007e12:	461a      	mov	r2, r3
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	b10b      	cbz	r3, 8007e1c <_free_r+0x4c>
 8007e18:	42a3      	cmp	r3, r4
 8007e1a:	d9fa      	bls.n	8007e12 <_free_r+0x42>
 8007e1c:	6811      	ldr	r1, [r2, #0]
 8007e1e:	1850      	adds	r0, r2, r1
 8007e20:	42a0      	cmp	r0, r4
 8007e22:	d10b      	bne.n	8007e3c <_free_r+0x6c>
 8007e24:	6820      	ldr	r0, [r4, #0]
 8007e26:	4401      	add	r1, r0
 8007e28:	1850      	adds	r0, r2, r1
 8007e2a:	4283      	cmp	r3, r0
 8007e2c:	6011      	str	r1, [r2, #0]
 8007e2e:	d1e0      	bne.n	8007df2 <_free_r+0x22>
 8007e30:	6818      	ldr	r0, [r3, #0]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	6053      	str	r3, [r2, #4]
 8007e36:	4408      	add	r0, r1
 8007e38:	6010      	str	r0, [r2, #0]
 8007e3a:	e7da      	b.n	8007df2 <_free_r+0x22>
 8007e3c:	d902      	bls.n	8007e44 <_free_r+0x74>
 8007e3e:	230c      	movs	r3, #12
 8007e40:	602b      	str	r3, [r5, #0]
 8007e42:	e7d6      	b.n	8007df2 <_free_r+0x22>
 8007e44:	6820      	ldr	r0, [r4, #0]
 8007e46:	1821      	adds	r1, r4, r0
 8007e48:	428b      	cmp	r3, r1
 8007e4a:	bf04      	itt	eq
 8007e4c:	6819      	ldreq	r1, [r3, #0]
 8007e4e:	685b      	ldreq	r3, [r3, #4]
 8007e50:	6063      	str	r3, [r4, #4]
 8007e52:	bf04      	itt	eq
 8007e54:	1809      	addeq	r1, r1, r0
 8007e56:	6021      	streq	r1, [r4, #0]
 8007e58:	6054      	str	r4, [r2, #4]
 8007e5a:	e7ca      	b.n	8007df2 <_free_r+0x22>
 8007e5c:	bd38      	pop	{r3, r4, r5, pc}
 8007e5e:	bf00      	nop
 8007e60:	200004a8 	.word	0x200004a8

08007e64 <malloc>:
 8007e64:	4b02      	ldr	r3, [pc, #8]	@ (8007e70 <malloc+0xc>)
 8007e66:	4601      	mov	r1, r0
 8007e68:	6818      	ldr	r0, [r3, #0]
 8007e6a:	f000 b825 	b.w	8007eb8 <_malloc_r>
 8007e6e:	bf00      	nop
 8007e70:	2000001c 	.word	0x2000001c

08007e74 <sbrk_aligned>:
 8007e74:	b570      	push	{r4, r5, r6, lr}
 8007e76:	4e0f      	ldr	r6, [pc, #60]	@ (8007eb4 <sbrk_aligned+0x40>)
 8007e78:	460c      	mov	r4, r1
 8007e7a:	6831      	ldr	r1, [r6, #0]
 8007e7c:	4605      	mov	r5, r0
 8007e7e:	b911      	cbnz	r1, 8007e86 <sbrk_aligned+0x12>
 8007e80:	f001 ffc0 	bl	8009e04 <_sbrk_r>
 8007e84:	6030      	str	r0, [r6, #0]
 8007e86:	4621      	mov	r1, r4
 8007e88:	4628      	mov	r0, r5
 8007e8a:	f001 ffbb 	bl	8009e04 <_sbrk_r>
 8007e8e:	1c43      	adds	r3, r0, #1
 8007e90:	d103      	bne.n	8007e9a <sbrk_aligned+0x26>
 8007e92:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007e96:	4620      	mov	r0, r4
 8007e98:	bd70      	pop	{r4, r5, r6, pc}
 8007e9a:	1cc4      	adds	r4, r0, #3
 8007e9c:	f024 0403 	bic.w	r4, r4, #3
 8007ea0:	42a0      	cmp	r0, r4
 8007ea2:	d0f8      	beq.n	8007e96 <sbrk_aligned+0x22>
 8007ea4:	1a21      	subs	r1, r4, r0
 8007ea6:	4628      	mov	r0, r5
 8007ea8:	f001 ffac 	bl	8009e04 <_sbrk_r>
 8007eac:	3001      	adds	r0, #1
 8007eae:	d1f2      	bne.n	8007e96 <sbrk_aligned+0x22>
 8007eb0:	e7ef      	b.n	8007e92 <sbrk_aligned+0x1e>
 8007eb2:	bf00      	nop
 8007eb4:	200004a4 	.word	0x200004a4

08007eb8 <_malloc_r>:
 8007eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ebc:	1ccd      	adds	r5, r1, #3
 8007ebe:	f025 0503 	bic.w	r5, r5, #3
 8007ec2:	3508      	adds	r5, #8
 8007ec4:	2d0c      	cmp	r5, #12
 8007ec6:	bf38      	it	cc
 8007ec8:	250c      	movcc	r5, #12
 8007eca:	2d00      	cmp	r5, #0
 8007ecc:	4606      	mov	r6, r0
 8007ece:	db01      	blt.n	8007ed4 <_malloc_r+0x1c>
 8007ed0:	42a9      	cmp	r1, r5
 8007ed2:	d904      	bls.n	8007ede <_malloc_r+0x26>
 8007ed4:	230c      	movs	r3, #12
 8007ed6:	6033      	str	r3, [r6, #0]
 8007ed8:	2000      	movs	r0, #0
 8007eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ede:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007fb4 <_malloc_r+0xfc>
 8007ee2:	f000 f869 	bl	8007fb8 <__malloc_lock>
 8007ee6:	f8d8 3000 	ldr.w	r3, [r8]
 8007eea:	461c      	mov	r4, r3
 8007eec:	bb44      	cbnz	r4, 8007f40 <_malloc_r+0x88>
 8007eee:	4629      	mov	r1, r5
 8007ef0:	4630      	mov	r0, r6
 8007ef2:	f7ff ffbf 	bl	8007e74 <sbrk_aligned>
 8007ef6:	1c43      	adds	r3, r0, #1
 8007ef8:	4604      	mov	r4, r0
 8007efa:	d158      	bne.n	8007fae <_malloc_r+0xf6>
 8007efc:	f8d8 4000 	ldr.w	r4, [r8]
 8007f00:	4627      	mov	r7, r4
 8007f02:	2f00      	cmp	r7, #0
 8007f04:	d143      	bne.n	8007f8e <_malloc_r+0xd6>
 8007f06:	2c00      	cmp	r4, #0
 8007f08:	d04b      	beq.n	8007fa2 <_malloc_r+0xea>
 8007f0a:	6823      	ldr	r3, [r4, #0]
 8007f0c:	4639      	mov	r1, r7
 8007f0e:	4630      	mov	r0, r6
 8007f10:	eb04 0903 	add.w	r9, r4, r3
 8007f14:	f001 ff76 	bl	8009e04 <_sbrk_r>
 8007f18:	4581      	cmp	r9, r0
 8007f1a:	d142      	bne.n	8007fa2 <_malloc_r+0xea>
 8007f1c:	6821      	ldr	r1, [r4, #0]
 8007f1e:	1a6d      	subs	r5, r5, r1
 8007f20:	4629      	mov	r1, r5
 8007f22:	4630      	mov	r0, r6
 8007f24:	f7ff ffa6 	bl	8007e74 <sbrk_aligned>
 8007f28:	3001      	adds	r0, #1
 8007f2a:	d03a      	beq.n	8007fa2 <_malloc_r+0xea>
 8007f2c:	6823      	ldr	r3, [r4, #0]
 8007f2e:	442b      	add	r3, r5
 8007f30:	6023      	str	r3, [r4, #0]
 8007f32:	f8d8 3000 	ldr.w	r3, [r8]
 8007f36:	685a      	ldr	r2, [r3, #4]
 8007f38:	bb62      	cbnz	r2, 8007f94 <_malloc_r+0xdc>
 8007f3a:	f8c8 7000 	str.w	r7, [r8]
 8007f3e:	e00f      	b.n	8007f60 <_malloc_r+0xa8>
 8007f40:	6822      	ldr	r2, [r4, #0]
 8007f42:	1b52      	subs	r2, r2, r5
 8007f44:	d420      	bmi.n	8007f88 <_malloc_r+0xd0>
 8007f46:	2a0b      	cmp	r2, #11
 8007f48:	d917      	bls.n	8007f7a <_malloc_r+0xc2>
 8007f4a:	1961      	adds	r1, r4, r5
 8007f4c:	42a3      	cmp	r3, r4
 8007f4e:	6025      	str	r5, [r4, #0]
 8007f50:	bf18      	it	ne
 8007f52:	6059      	strne	r1, [r3, #4]
 8007f54:	6863      	ldr	r3, [r4, #4]
 8007f56:	bf08      	it	eq
 8007f58:	f8c8 1000 	streq.w	r1, [r8]
 8007f5c:	5162      	str	r2, [r4, r5]
 8007f5e:	604b      	str	r3, [r1, #4]
 8007f60:	4630      	mov	r0, r6
 8007f62:	f000 f82f 	bl	8007fc4 <__malloc_unlock>
 8007f66:	f104 000b 	add.w	r0, r4, #11
 8007f6a:	1d23      	adds	r3, r4, #4
 8007f6c:	f020 0007 	bic.w	r0, r0, #7
 8007f70:	1ac2      	subs	r2, r0, r3
 8007f72:	bf1c      	itt	ne
 8007f74:	1a1b      	subne	r3, r3, r0
 8007f76:	50a3      	strne	r3, [r4, r2]
 8007f78:	e7af      	b.n	8007eda <_malloc_r+0x22>
 8007f7a:	6862      	ldr	r2, [r4, #4]
 8007f7c:	42a3      	cmp	r3, r4
 8007f7e:	bf0c      	ite	eq
 8007f80:	f8c8 2000 	streq.w	r2, [r8]
 8007f84:	605a      	strne	r2, [r3, #4]
 8007f86:	e7eb      	b.n	8007f60 <_malloc_r+0xa8>
 8007f88:	4623      	mov	r3, r4
 8007f8a:	6864      	ldr	r4, [r4, #4]
 8007f8c:	e7ae      	b.n	8007eec <_malloc_r+0x34>
 8007f8e:	463c      	mov	r4, r7
 8007f90:	687f      	ldr	r7, [r7, #4]
 8007f92:	e7b6      	b.n	8007f02 <_malloc_r+0x4a>
 8007f94:	461a      	mov	r2, r3
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	42a3      	cmp	r3, r4
 8007f9a:	d1fb      	bne.n	8007f94 <_malloc_r+0xdc>
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	6053      	str	r3, [r2, #4]
 8007fa0:	e7de      	b.n	8007f60 <_malloc_r+0xa8>
 8007fa2:	230c      	movs	r3, #12
 8007fa4:	6033      	str	r3, [r6, #0]
 8007fa6:	4630      	mov	r0, r6
 8007fa8:	f000 f80c 	bl	8007fc4 <__malloc_unlock>
 8007fac:	e794      	b.n	8007ed8 <_malloc_r+0x20>
 8007fae:	6005      	str	r5, [r0, #0]
 8007fb0:	e7d6      	b.n	8007f60 <_malloc_r+0xa8>
 8007fb2:	bf00      	nop
 8007fb4:	200004a8 	.word	0x200004a8

08007fb8 <__malloc_lock>:
 8007fb8:	4801      	ldr	r0, [pc, #4]	@ (8007fc0 <__malloc_lock+0x8>)
 8007fba:	f7ff b8b2 	b.w	8007122 <__retarget_lock_acquire_recursive>
 8007fbe:	bf00      	nop
 8007fc0:	200004a0 	.word	0x200004a0

08007fc4 <__malloc_unlock>:
 8007fc4:	4801      	ldr	r0, [pc, #4]	@ (8007fcc <__malloc_unlock+0x8>)
 8007fc6:	f7ff b8ad 	b.w	8007124 <__retarget_lock_release_recursive>
 8007fca:	bf00      	nop
 8007fcc:	200004a0 	.word	0x200004a0

08007fd0 <_Balloc>:
 8007fd0:	b570      	push	{r4, r5, r6, lr}
 8007fd2:	69c6      	ldr	r6, [r0, #28]
 8007fd4:	4604      	mov	r4, r0
 8007fd6:	460d      	mov	r5, r1
 8007fd8:	b976      	cbnz	r6, 8007ff8 <_Balloc+0x28>
 8007fda:	2010      	movs	r0, #16
 8007fdc:	f7ff ff42 	bl	8007e64 <malloc>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	61e0      	str	r0, [r4, #28]
 8007fe4:	b920      	cbnz	r0, 8007ff0 <_Balloc+0x20>
 8007fe6:	4b18      	ldr	r3, [pc, #96]	@ (8008048 <_Balloc+0x78>)
 8007fe8:	4818      	ldr	r0, [pc, #96]	@ (800804c <_Balloc+0x7c>)
 8007fea:	216b      	movs	r1, #107	@ 0x6b
 8007fec:	f001 ff30 	bl	8009e50 <__assert_func>
 8007ff0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ff4:	6006      	str	r6, [r0, #0]
 8007ff6:	60c6      	str	r6, [r0, #12]
 8007ff8:	69e6      	ldr	r6, [r4, #28]
 8007ffa:	68f3      	ldr	r3, [r6, #12]
 8007ffc:	b183      	cbz	r3, 8008020 <_Balloc+0x50>
 8007ffe:	69e3      	ldr	r3, [r4, #28]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008006:	b9b8      	cbnz	r0, 8008038 <_Balloc+0x68>
 8008008:	2101      	movs	r1, #1
 800800a:	fa01 f605 	lsl.w	r6, r1, r5
 800800e:	1d72      	adds	r2, r6, #5
 8008010:	0092      	lsls	r2, r2, #2
 8008012:	4620      	mov	r0, r4
 8008014:	f001 ff3a 	bl	8009e8c <_calloc_r>
 8008018:	b160      	cbz	r0, 8008034 <_Balloc+0x64>
 800801a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800801e:	e00e      	b.n	800803e <_Balloc+0x6e>
 8008020:	2221      	movs	r2, #33	@ 0x21
 8008022:	2104      	movs	r1, #4
 8008024:	4620      	mov	r0, r4
 8008026:	f001 ff31 	bl	8009e8c <_calloc_r>
 800802a:	69e3      	ldr	r3, [r4, #28]
 800802c:	60f0      	str	r0, [r6, #12]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d1e4      	bne.n	8007ffe <_Balloc+0x2e>
 8008034:	2000      	movs	r0, #0
 8008036:	bd70      	pop	{r4, r5, r6, pc}
 8008038:	6802      	ldr	r2, [r0, #0]
 800803a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800803e:	2300      	movs	r3, #0
 8008040:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008044:	e7f7      	b.n	8008036 <_Balloc+0x66>
 8008046:	bf00      	nop
 8008048:	0800a8ea 	.word	0x0800a8ea
 800804c:	0800a96a 	.word	0x0800a96a

08008050 <_Bfree>:
 8008050:	b570      	push	{r4, r5, r6, lr}
 8008052:	69c6      	ldr	r6, [r0, #28]
 8008054:	4605      	mov	r5, r0
 8008056:	460c      	mov	r4, r1
 8008058:	b976      	cbnz	r6, 8008078 <_Bfree+0x28>
 800805a:	2010      	movs	r0, #16
 800805c:	f7ff ff02 	bl	8007e64 <malloc>
 8008060:	4602      	mov	r2, r0
 8008062:	61e8      	str	r0, [r5, #28]
 8008064:	b920      	cbnz	r0, 8008070 <_Bfree+0x20>
 8008066:	4b09      	ldr	r3, [pc, #36]	@ (800808c <_Bfree+0x3c>)
 8008068:	4809      	ldr	r0, [pc, #36]	@ (8008090 <_Bfree+0x40>)
 800806a:	218f      	movs	r1, #143	@ 0x8f
 800806c:	f001 fef0 	bl	8009e50 <__assert_func>
 8008070:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008074:	6006      	str	r6, [r0, #0]
 8008076:	60c6      	str	r6, [r0, #12]
 8008078:	b13c      	cbz	r4, 800808a <_Bfree+0x3a>
 800807a:	69eb      	ldr	r3, [r5, #28]
 800807c:	6862      	ldr	r2, [r4, #4]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008084:	6021      	str	r1, [r4, #0]
 8008086:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800808a:	bd70      	pop	{r4, r5, r6, pc}
 800808c:	0800a8ea 	.word	0x0800a8ea
 8008090:	0800a96a 	.word	0x0800a96a

08008094 <__multadd>:
 8008094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008098:	690d      	ldr	r5, [r1, #16]
 800809a:	4607      	mov	r7, r0
 800809c:	460c      	mov	r4, r1
 800809e:	461e      	mov	r6, r3
 80080a0:	f101 0c14 	add.w	ip, r1, #20
 80080a4:	2000      	movs	r0, #0
 80080a6:	f8dc 3000 	ldr.w	r3, [ip]
 80080aa:	b299      	uxth	r1, r3
 80080ac:	fb02 6101 	mla	r1, r2, r1, r6
 80080b0:	0c1e      	lsrs	r6, r3, #16
 80080b2:	0c0b      	lsrs	r3, r1, #16
 80080b4:	fb02 3306 	mla	r3, r2, r6, r3
 80080b8:	b289      	uxth	r1, r1
 80080ba:	3001      	adds	r0, #1
 80080bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80080c0:	4285      	cmp	r5, r0
 80080c2:	f84c 1b04 	str.w	r1, [ip], #4
 80080c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80080ca:	dcec      	bgt.n	80080a6 <__multadd+0x12>
 80080cc:	b30e      	cbz	r6, 8008112 <__multadd+0x7e>
 80080ce:	68a3      	ldr	r3, [r4, #8]
 80080d0:	42ab      	cmp	r3, r5
 80080d2:	dc19      	bgt.n	8008108 <__multadd+0x74>
 80080d4:	6861      	ldr	r1, [r4, #4]
 80080d6:	4638      	mov	r0, r7
 80080d8:	3101      	adds	r1, #1
 80080da:	f7ff ff79 	bl	8007fd0 <_Balloc>
 80080de:	4680      	mov	r8, r0
 80080e0:	b928      	cbnz	r0, 80080ee <__multadd+0x5a>
 80080e2:	4602      	mov	r2, r0
 80080e4:	4b0c      	ldr	r3, [pc, #48]	@ (8008118 <__multadd+0x84>)
 80080e6:	480d      	ldr	r0, [pc, #52]	@ (800811c <__multadd+0x88>)
 80080e8:	21ba      	movs	r1, #186	@ 0xba
 80080ea:	f001 feb1 	bl	8009e50 <__assert_func>
 80080ee:	6922      	ldr	r2, [r4, #16]
 80080f0:	3202      	adds	r2, #2
 80080f2:	f104 010c 	add.w	r1, r4, #12
 80080f6:	0092      	lsls	r2, r2, #2
 80080f8:	300c      	adds	r0, #12
 80080fa:	f001 fe93 	bl	8009e24 <memcpy>
 80080fe:	4621      	mov	r1, r4
 8008100:	4638      	mov	r0, r7
 8008102:	f7ff ffa5 	bl	8008050 <_Bfree>
 8008106:	4644      	mov	r4, r8
 8008108:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800810c:	3501      	adds	r5, #1
 800810e:	615e      	str	r6, [r3, #20]
 8008110:	6125      	str	r5, [r4, #16]
 8008112:	4620      	mov	r0, r4
 8008114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008118:	0800a959 	.word	0x0800a959
 800811c:	0800a96a 	.word	0x0800a96a

08008120 <__s2b>:
 8008120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008124:	460c      	mov	r4, r1
 8008126:	4615      	mov	r5, r2
 8008128:	461f      	mov	r7, r3
 800812a:	2209      	movs	r2, #9
 800812c:	3308      	adds	r3, #8
 800812e:	4606      	mov	r6, r0
 8008130:	fb93 f3f2 	sdiv	r3, r3, r2
 8008134:	2100      	movs	r1, #0
 8008136:	2201      	movs	r2, #1
 8008138:	429a      	cmp	r2, r3
 800813a:	db09      	blt.n	8008150 <__s2b+0x30>
 800813c:	4630      	mov	r0, r6
 800813e:	f7ff ff47 	bl	8007fd0 <_Balloc>
 8008142:	b940      	cbnz	r0, 8008156 <__s2b+0x36>
 8008144:	4602      	mov	r2, r0
 8008146:	4b19      	ldr	r3, [pc, #100]	@ (80081ac <__s2b+0x8c>)
 8008148:	4819      	ldr	r0, [pc, #100]	@ (80081b0 <__s2b+0x90>)
 800814a:	21d3      	movs	r1, #211	@ 0xd3
 800814c:	f001 fe80 	bl	8009e50 <__assert_func>
 8008150:	0052      	lsls	r2, r2, #1
 8008152:	3101      	adds	r1, #1
 8008154:	e7f0      	b.n	8008138 <__s2b+0x18>
 8008156:	9b08      	ldr	r3, [sp, #32]
 8008158:	6143      	str	r3, [r0, #20]
 800815a:	2d09      	cmp	r5, #9
 800815c:	f04f 0301 	mov.w	r3, #1
 8008160:	6103      	str	r3, [r0, #16]
 8008162:	dd16      	ble.n	8008192 <__s2b+0x72>
 8008164:	f104 0909 	add.w	r9, r4, #9
 8008168:	46c8      	mov	r8, r9
 800816a:	442c      	add	r4, r5
 800816c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008170:	4601      	mov	r1, r0
 8008172:	3b30      	subs	r3, #48	@ 0x30
 8008174:	220a      	movs	r2, #10
 8008176:	4630      	mov	r0, r6
 8008178:	f7ff ff8c 	bl	8008094 <__multadd>
 800817c:	45a0      	cmp	r8, r4
 800817e:	d1f5      	bne.n	800816c <__s2b+0x4c>
 8008180:	f1a5 0408 	sub.w	r4, r5, #8
 8008184:	444c      	add	r4, r9
 8008186:	1b2d      	subs	r5, r5, r4
 8008188:	1963      	adds	r3, r4, r5
 800818a:	42bb      	cmp	r3, r7
 800818c:	db04      	blt.n	8008198 <__s2b+0x78>
 800818e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008192:	340a      	adds	r4, #10
 8008194:	2509      	movs	r5, #9
 8008196:	e7f6      	b.n	8008186 <__s2b+0x66>
 8008198:	f814 3b01 	ldrb.w	r3, [r4], #1
 800819c:	4601      	mov	r1, r0
 800819e:	3b30      	subs	r3, #48	@ 0x30
 80081a0:	220a      	movs	r2, #10
 80081a2:	4630      	mov	r0, r6
 80081a4:	f7ff ff76 	bl	8008094 <__multadd>
 80081a8:	e7ee      	b.n	8008188 <__s2b+0x68>
 80081aa:	bf00      	nop
 80081ac:	0800a959 	.word	0x0800a959
 80081b0:	0800a96a 	.word	0x0800a96a

080081b4 <__hi0bits>:
 80081b4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80081b8:	4603      	mov	r3, r0
 80081ba:	bf36      	itet	cc
 80081bc:	0403      	lslcc	r3, r0, #16
 80081be:	2000      	movcs	r0, #0
 80081c0:	2010      	movcc	r0, #16
 80081c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80081c6:	bf3c      	itt	cc
 80081c8:	021b      	lslcc	r3, r3, #8
 80081ca:	3008      	addcc	r0, #8
 80081cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081d0:	bf3c      	itt	cc
 80081d2:	011b      	lslcc	r3, r3, #4
 80081d4:	3004      	addcc	r0, #4
 80081d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081da:	bf3c      	itt	cc
 80081dc:	009b      	lslcc	r3, r3, #2
 80081de:	3002      	addcc	r0, #2
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	db05      	blt.n	80081f0 <__hi0bits+0x3c>
 80081e4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80081e8:	f100 0001 	add.w	r0, r0, #1
 80081ec:	bf08      	it	eq
 80081ee:	2020      	moveq	r0, #32
 80081f0:	4770      	bx	lr

080081f2 <__lo0bits>:
 80081f2:	6803      	ldr	r3, [r0, #0]
 80081f4:	4602      	mov	r2, r0
 80081f6:	f013 0007 	ands.w	r0, r3, #7
 80081fa:	d00b      	beq.n	8008214 <__lo0bits+0x22>
 80081fc:	07d9      	lsls	r1, r3, #31
 80081fe:	d421      	bmi.n	8008244 <__lo0bits+0x52>
 8008200:	0798      	lsls	r0, r3, #30
 8008202:	bf49      	itett	mi
 8008204:	085b      	lsrmi	r3, r3, #1
 8008206:	089b      	lsrpl	r3, r3, #2
 8008208:	2001      	movmi	r0, #1
 800820a:	6013      	strmi	r3, [r2, #0]
 800820c:	bf5c      	itt	pl
 800820e:	6013      	strpl	r3, [r2, #0]
 8008210:	2002      	movpl	r0, #2
 8008212:	4770      	bx	lr
 8008214:	b299      	uxth	r1, r3
 8008216:	b909      	cbnz	r1, 800821c <__lo0bits+0x2a>
 8008218:	0c1b      	lsrs	r3, r3, #16
 800821a:	2010      	movs	r0, #16
 800821c:	b2d9      	uxtb	r1, r3
 800821e:	b909      	cbnz	r1, 8008224 <__lo0bits+0x32>
 8008220:	3008      	adds	r0, #8
 8008222:	0a1b      	lsrs	r3, r3, #8
 8008224:	0719      	lsls	r1, r3, #28
 8008226:	bf04      	itt	eq
 8008228:	091b      	lsreq	r3, r3, #4
 800822a:	3004      	addeq	r0, #4
 800822c:	0799      	lsls	r1, r3, #30
 800822e:	bf04      	itt	eq
 8008230:	089b      	lsreq	r3, r3, #2
 8008232:	3002      	addeq	r0, #2
 8008234:	07d9      	lsls	r1, r3, #31
 8008236:	d403      	bmi.n	8008240 <__lo0bits+0x4e>
 8008238:	085b      	lsrs	r3, r3, #1
 800823a:	f100 0001 	add.w	r0, r0, #1
 800823e:	d003      	beq.n	8008248 <__lo0bits+0x56>
 8008240:	6013      	str	r3, [r2, #0]
 8008242:	4770      	bx	lr
 8008244:	2000      	movs	r0, #0
 8008246:	4770      	bx	lr
 8008248:	2020      	movs	r0, #32
 800824a:	4770      	bx	lr

0800824c <__i2b>:
 800824c:	b510      	push	{r4, lr}
 800824e:	460c      	mov	r4, r1
 8008250:	2101      	movs	r1, #1
 8008252:	f7ff febd 	bl	8007fd0 <_Balloc>
 8008256:	4602      	mov	r2, r0
 8008258:	b928      	cbnz	r0, 8008266 <__i2b+0x1a>
 800825a:	4b05      	ldr	r3, [pc, #20]	@ (8008270 <__i2b+0x24>)
 800825c:	4805      	ldr	r0, [pc, #20]	@ (8008274 <__i2b+0x28>)
 800825e:	f240 1145 	movw	r1, #325	@ 0x145
 8008262:	f001 fdf5 	bl	8009e50 <__assert_func>
 8008266:	2301      	movs	r3, #1
 8008268:	6144      	str	r4, [r0, #20]
 800826a:	6103      	str	r3, [r0, #16]
 800826c:	bd10      	pop	{r4, pc}
 800826e:	bf00      	nop
 8008270:	0800a959 	.word	0x0800a959
 8008274:	0800a96a 	.word	0x0800a96a

08008278 <__multiply>:
 8008278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800827c:	4614      	mov	r4, r2
 800827e:	690a      	ldr	r2, [r1, #16]
 8008280:	6923      	ldr	r3, [r4, #16]
 8008282:	429a      	cmp	r2, r3
 8008284:	bfa8      	it	ge
 8008286:	4623      	movge	r3, r4
 8008288:	460f      	mov	r7, r1
 800828a:	bfa4      	itt	ge
 800828c:	460c      	movge	r4, r1
 800828e:	461f      	movge	r7, r3
 8008290:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008294:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008298:	68a3      	ldr	r3, [r4, #8]
 800829a:	6861      	ldr	r1, [r4, #4]
 800829c:	eb0a 0609 	add.w	r6, sl, r9
 80082a0:	42b3      	cmp	r3, r6
 80082a2:	b085      	sub	sp, #20
 80082a4:	bfb8      	it	lt
 80082a6:	3101      	addlt	r1, #1
 80082a8:	f7ff fe92 	bl	8007fd0 <_Balloc>
 80082ac:	b930      	cbnz	r0, 80082bc <__multiply+0x44>
 80082ae:	4602      	mov	r2, r0
 80082b0:	4b44      	ldr	r3, [pc, #272]	@ (80083c4 <__multiply+0x14c>)
 80082b2:	4845      	ldr	r0, [pc, #276]	@ (80083c8 <__multiply+0x150>)
 80082b4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80082b8:	f001 fdca 	bl	8009e50 <__assert_func>
 80082bc:	f100 0514 	add.w	r5, r0, #20
 80082c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80082c4:	462b      	mov	r3, r5
 80082c6:	2200      	movs	r2, #0
 80082c8:	4543      	cmp	r3, r8
 80082ca:	d321      	bcc.n	8008310 <__multiply+0x98>
 80082cc:	f107 0114 	add.w	r1, r7, #20
 80082d0:	f104 0214 	add.w	r2, r4, #20
 80082d4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80082d8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80082dc:	9302      	str	r3, [sp, #8]
 80082de:	1b13      	subs	r3, r2, r4
 80082e0:	3b15      	subs	r3, #21
 80082e2:	f023 0303 	bic.w	r3, r3, #3
 80082e6:	3304      	adds	r3, #4
 80082e8:	f104 0715 	add.w	r7, r4, #21
 80082ec:	42ba      	cmp	r2, r7
 80082ee:	bf38      	it	cc
 80082f0:	2304      	movcc	r3, #4
 80082f2:	9301      	str	r3, [sp, #4]
 80082f4:	9b02      	ldr	r3, [sp, #8]
 80082f6:	9103      	str	r1, [sp, #12]
 80082f8:	428b      	cmp	r3, r1
 80082fa:	d80c      	bhi.n	8008316 <__multiply+0x9e>
 80082fc:	2e00      	cmp	r6, #0
 80082fe:	dd03      	ble.n	8008308 <__multiply+0x90>
 8008300:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008304:	2b00      	cmp	r3, #0
 8008306:	d05b      	beq.n	80083c0 <__multiply+0x148>
 8008308:	6106      	str	r6, [r0, #16]
 800830a:	b005      	add	sp, #20
 800830c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008310:	f843 2b04 	str.w	r2, [r3], #4
 8008314:	e7d8      	b.n	80082c8 <__multiply+0x50>
 8008316:	f8b1 a000 	ldrh.w	sl, [r1]
 800831a:	f1ba 0f00 	cmp.w	sl, #0
 800831e:	d024      	beq.n	800836a <__multiply+0xf2>
 8008320:	f104 0e14 	add.w	lr, r4, #20
 8008324:	46a9      	mov	r9, r5
 8008326:	f04f 0c00 	mov.w	ip, #0
 800832a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800832e:	f8d9 3000 	ldr.w	r3, [r9]
 8008332:	fa1f fb87 	uxth.w	fp, r7
 8008336:	b29b      	uxth	r3, r3
 8008338:	fb0a 330b 	mla	r3, sl, fp, r3
 800833c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008340:	f8d9 7000 	ldr.w	r7, [r9]
 8008344:	4463      	add	r3, ip
 8008346:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800834a:	fb0a c70b 	mla	r7, sl, fp, ip
 800834e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008352:	b29b      	uxth	r3, r3
 8008354:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008358:	4572      	cmp	r2, lr
 800835a:	f849 3b04 	str.w	r3, [r9], #4
 800835e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008362:	d8e2      	bhi.n	800832a <__multiply+0xb2>
 8008364:	9b01      	ldr	r3, [sp, #4]
 8008366:	f845 c003 	str.w	ip, [r5, r3]
 800836a:	9b03      	ldr	r3, [sp, #12]
 800836c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008370:	3104      	adds	r1, #4
 8008372:	f1b9 0f00 	cmp.w	r9, #0
 8008376:	d021      	beq.n	80083bc <__multiply+0x144>
 8008378:	682b      	ldr	r3, [r5, #0]
 800837a:	f104 0c14 	add.w	ip, r4, #20
 800837e:	46ae      	mov	lr, r5
 8008380:	f04f 0a00 	mov.w	sl, #0
 8008384:	f8bc b000 	ldrh.w	fp, [ip]
 8008388:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800838c:	fb09 770b 	mla	r7, r9, fp, r7
 8008390:	4457      	add	r7, sl
 8008392:	b29b      	uxth	r3, r3
 8008394:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008398:	f84e 3b04 	str.w	r3, [lr], #4
 800839c:	f85c 3b04 	ldr.w	r3, [ip], #4
 80083a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80083a4:	f8be 3000 	ldrh.w	r3, [lr]
 80083a8:	fb09 330a 	mla	r3, r9, sl, r3
 80083ac:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80083b0:	4562      	cmp	r2, ip
 80083b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80083b6:	d8e5      	bhi.n	8008384 <__multiply+0x10c>
 80083b8:	9f01      	ldr	r7, [sp, #4]
 80083ba:	51eb      	str	r3, [r5, r7]
 80083bc:	3504      	adds	r5, #4
 80083be:	e799      	b.n	80082f4 <__multiply+0x7c>
 80083c0:	3e01      	subs	r6, #1
 80083c2:	e79b      	b.n	80082fc <__multiply+0x84>
 80083c4:	0800a959 	.word	0x0800a959
 80083c8:	0800a96a 	.word	0x0800a96a

080083cc <__pow5mult>:
 80083cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083d0:	4615      	mov	r5, r2
 80083d2:	f012 0203 	ands.w	r2, r2, #3
 80083d6:	4607      	mov	r7, r0
 80083d8:	460e      	mov	r6, r1
 80083da:	d007      	beq.n	80083ec <__pow5mult+0x20>
 80083dc:	4c25      	ldr	r4, [pc, #148]	@ (8008474 <__pow5mult+0xa8>)
 80083de:	3a01      	subs	r2, #1
 80083e0:	2300      	movs	r3, #0
 80083e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083e6:	f7ff fe55 	bl	8008094 <__multadd>
 80083ea:	4606      	mov	r6, r0
 80083ec:	10ad      	asrs	r5, r5, #2
 80083ee:	d03d      	beq.n	800846c <__pow5mult+0xa0>
 80083f0:	69fc      	ldr	r4, [r7, #28]
 80083f2:	b97c      	cbnz	r4, 8008414 <__pow5mult+0x48>
 80083f4:	2010      	movs	r0, #16
 80083f6:	f7ff fd35 	bl	8007e64 <malloc>
 80083fa:	4602      	mov	r2, r0
 80083fc:	61f8      	str	r0, [r7, #28]
 80083fe:	b928      	cbnz	r0, 800840c <__pow5mult+0x40>
 8008400:	4b1d      	ldr	r3, [pc, #116]	@ (8008478 <__pow5mult+0xac>)
 8008402:	481e      	ldr	r0, [pc, #120]	@ (800847c <__pow5mult+0xb0>)
 8008404:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008408:	f001 fd22 	bl	8009e50 <__assert_func>
 800840c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008410:	6004      	str	r4, [r0, #0]
 8008412:	60c4      	str	r4, [r0, #12]
 8008414:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008418:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800841c:	b94c      	cbnz	r4, 8008432 <__pow5mult+0x66>
 800841e:	f240 2171 	movw	r1, #625	@ 0x271
 8008422:	4638      	mov	r0, r7
 8008424:	f7ff ff12 	bl	800824c <__i2b>
 8008428:	2300      	movs	r3, #0
 800842a:	f8c8 0008 	str.w	r0, [r8, #8]
 800842e:	4604      	mov	r4, r0
 8008430:	6003      	str	r3, [r0, #0]
 8008432:	f04f 0900 	mov.w	r9, #0
 8008436:	07eb      	lsls	r3, r5, #31
 8008438:	d50a      	bpl.n	8008450 <__pow5mult+0x84>
 800843a:	4631      	mov	r1, r6
 800843c:	4622      	mov	r2, r4
 800843e:	4638      	mov	r0, r7
 8008440:	f7ff ff1a 	bl	8008278 <__multiply>
 8008444:	4631      	mov	r1, r6
 8008446:	4680      	mov	r8, r0
 8008448:	4638      	mov	r0, r7
 800844a:	f7ff fe01 	bl	8008050 <_Bfree>
 800844e:	4646      	mov	r6, r8
 8008450:	106d      	asrs	r5, r5, #1
 8008452:	d00b      	beq.n	800846c <__pow5mult+0xa0>
 8008454:	6820      	ldr	r0, [r4, #0]
 8008456:	b938      	cbnz	r0, 8008468 <__pow5mult+0x9c>
 8008458:	4622      	mov	r2, r4
 800845a:	4621      	mov	r1, r4
 800845c:	4638      	mov	r0, r7
 800845e:	f7ff ff0b 	bl	8008278 <__multiply>
 8008462:	6020      	str	r0, [r4, #0]
 8008464:	f8c0 9000 	str.w	r9, [r0]
 8008468:	4604      	mov	r4, r0
 800846a:	e7e4      	b.n	8008436 <__pow5mult+0x6a>
 800846c:	4630      	mov	r0, r6
 800846e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008472:	bf00      	nop
 8008474:	0800a9c4 	.word	0x0800a9c4
 8008478:	0800a8ea 	.word	0x0800a8ea
 800847c:	0800a96a 	.word	0x0800a96a

08008480 <__lshift>:
 8008480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008484:	460c      	mov	r4, r1
 8008486:	6849      	ldr	r1, [r1, #4]
 8008488:	6923      	ldr	r3, [r4, #16]
 800848a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800848e:	68a3      	ldr	r3, [r4, #8]
 8008490:	4607      	mov	r7, r0
 8008492:	4691      	mov	r9, r2
 8008494:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008498:	f108 0601 	add.w	r6, r8, #1
 800849c:	42b3      	cmp	r3, r6
 800849e:	db0b      	blt.n	80084b8 <__lshift+0x38>
 80084a0:	4638      	mov	r0, r7
 80084a2:	f7ff fd95 	bl	8007fd0 <_Balloc>
 80084a6:	4605      	mov	r5, r0
 80084a8:	b948      	cbnz	r0, 80084be <__lshift+0x3e>
 80084aa:	4602      	mov	r2, r0
 80084ac:	4b28      	ldr	r3, [pc, #160]	@ (8008550 <__lshift+0xd0>)
 80084ae:	4829      	ldr	r0, [pc, #164]	@ (8008554 <__lshift+0xd4>)
 80084b0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80084b4:	f001 fccc 	bl	8009e50 <__assert_func>
 80084b8:	3101      	adds	r1, #1
 80084ba:	005b      	lsls	r3, r3, #1
 80084bc:	e7ee      	b.n	800849c <__lshift+0x1c>
 80084be:	2300      	movs	r3, #0
 80084c0:	f100 0114 	add.w	r1, r0, #20
 80084c4:	f100 0210 	add.w	r2, r0, #16
 80084c8:	4618      	mov	r0, r3
 80084ca:	4553      	cmp	r3, sl
 80084cc:	db33      	blt.n	8008536 <__lshift+0xb6>
 80084ce:	6920      	ldr	r0, [r4, #16]
 80084d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084d4:	f104 0314 	add.w	r3, r4, #20
 80084d8:	f019 091f 	ands.w	r9, r9, #31
 80084dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80084e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80084e4:	d02b      	beq.n	800853e <__lshift+0xbe>
 80084e6:	f1c9 0e20 	rsb	lr, r9, #32
 80084ea:	468a      	mov	sl, r1
 80084ec:	2200      	movs	r2, #0
 80084ee:	6818      	ldr	r0, [r3, #0]
 80084f0:	fa00 f009 	lsl.w	r0, r0, r9
 80084f4:	4310      	orrs	r0, r2
 80084f6:	f84a 0b04 	str.w	r0, [sl], #4
 80084fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80084fe:	459c      	cmp	ip, r3
 8008500:	fa22 f20e 	lsr.w	r2, r2, lr
 8008504:	d8f3      	bhi.n	80084ee <__lshift+0x6e>
 8008506:	ebac 0304 	sub.w	r3, ip, r4
 800850a:	3b15      	subs	r3, #21
 800850c:	f023 0303 	bic.w	r3, r3, #3
 8008510:	3304      	adds	r3, #4
 8008512:	f104 0015 	add.w	r0, r4, #21
 8008516:	4584      	cmp	ip, r0
 8008518:	bf38      	it	cc
 800851a:	2304      	movcc	r3, #4
 800851c:	50ca      	str	r2, [r1, r3]
 800851e:	b10a      	cbz	r2, 8008524 <__lshift+0xa4>
 8008520:	f108 0602 	add.w	r6, r8, #2
 8008524:	3e01      	subs	r6, #1
 8008526:	4638      	mov	r0, r7
 8008528:	612e      	str	r6, [r5, #16]
 800852a:	4621      	mov	r1, r4
 800852c:	f7ff fd90 	bl	8008050 <_Bfree>
 8008530:	4628      	mov	r0, r5
 8008532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008536:	f842 0f04 	str.w	r0, [r2, #4]!
 800853a:	3301      	adds	r3, #1
 800853c:	e7c5      	b.n	80084ca <__lshift+0x4a>
 800853e:	3904      	subs	r1, #4
 8008540:	f853 2b04 	ldr.w	r2, [r3], #4
 8008544:	f841 2f04 	str.w	r2, [r1, #4]!
 8008548:	459c      	cmp	ip, r3
 800854a:	d8f9      	bhi.n	8008540 <__lshift+0xc0>
 800854c:	e7ea      	b.n	8008524 <__lshift+0xa4>
 800854e:	bf00      	nop
 8008550:	0800a959 	.word	0x0800a959
 8008554:	0800a96a 	.word	0x0800a96a

08008558 <__mcmp>:
 8008558:	690a      	ldr	r2, [r1, #16]
 800855a:	4603      	mov	r3, r0
 800855c:	6900      	ldr	r0, [r0, #16]
 800855e:	1a80      	subs	r0, r0, r2
 8008560:	b530      	push	{r4, r5, lr}
 8008562:	d10e      	bne.n	8008582 <__mcmp+0x2a>
 8008564:	3314      	adds	r3, #20
 8008566:	3114      	adds	r1, #20
 8008568:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800856c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008570:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008574:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008578:	4295      	cmp	r5, r2
 800857a:	d003      	beq.n	8008584 <__mcmp+0x2c>
 800857c:	d205      	bcs.n	800858a <__mcmp+0x32>
 800857e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008582:	bd30      	pop	{r4, r5, pc}
 8008584:	42a3      	cmp	r3, r4
 8008586:	d3f3      	bcc.n	8008570 <__mcmp+0x18>
 8008588:	e7fb      	b.n	8008582 <__mcmp+0x2a>
 800858a:	2001      	movs	r0, #1
 800858c:	e7f9      	b.n	8008582 <__mcmp+0x2a>
	...

08008590 <__mdiff>:
 8008590:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008594:	4689      	mov	r9, r1
 8008596:	4606      	mov	r6, r0
 8008598:	4611      	mov	r1, r2
 800859a:	4648      	mov	r0, r9
 800859c:	4614      	mov	r4, r2
 800859e:	f7ff ffdb 	bl	8008558 <__mcmp>
 80085a2:	1e05      	subs	r5, r0, #0
 80085a4:	d112      	bne.n	80085cc <__mdiff+0x3c>
 80085a6:	4629      	mov	r1, r5
 80085a8:	4630      	mov	r0, r6
 80085aa:	f7ff fd11 	bl	8007fd0 <_Balloc>
 80085ae:	4602      	mov	r2, r0
 80085b0:	b928      	cbnz	r0, 80085be <__mdiff+0x2e>
 80085b2:	4b3f      	ldr	r3, [pc, #252]	@ (80086b0 <__mdiff+0x120>)
 80085b4:	f240 2137 	movw	r1, #567	@ 0x237
 80085b8:	483e      	ldr	r0, [pc, #248]	@ (80086b4 <__mdiff+0x124>)
 80085ba:	f001 fc49 	bl	8009e50 <__assert_func>
 80085be:	2301      	movs	r3, #1
 80085c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80085c4:	4610      	mov	r0, r2
 80085c6:	b003      	add	sp, #12
 80085c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085cc:	bfbc      	itt	lt
 80085ce:	464b      	movlt	r3, r9
 80085d0:	46a1      	movlt	r9, r4
 80085d2:	4630      	mov	r0, r6
 80085d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80085d8:	bfba      	itte	lt
 80085da:	461c      	movlt	r4, r3
 80085dc:	2501      	movlt	r5, #1
 80085de:	2500      	movge	r5, #0
 80085e0:	f7ff fcf6 	bl	8007fd0 <_Balloc>
 80085e4:	4602      	mov	r2, r0
 80085e6:	b918      	cbnz	r0, 80085f0 <__mdiff+0x60>
 80085e8:	4b31      	ldr	r3, [pc, #196]	@ (80086b0 <__mdiff+0x120>)
 80085ea:	f240 2145 	movw	r1, #581	@ 0x245
 80085ee:	e7e3      	b.n	80085b8 <__mdiff+0x28>
 80085f0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80085f4:	6926      	ldr	r6, [r4, #16]
 80085f6:	60c5      	str	r5, [r0, #12]
 80085f8:	f109 0310 	add.w	r3, r9, #16
 80085fc:	f109 0514 	add.w	r5, r9, #20
 8008600:	f104 0e14 	add.w	lr, r4, #20
 8008604:	f100 0b14 	add.w	fp, r0, #20
 8008608:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800860c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008610:	9301      	str	r3, [sp, #4]
 8008612:	46d9      	mov	r9, fp
 8008614:	f04f 0c00 	mov.w	ip, #0
 8008618:	9b01      	ldr	r3, [sp, #4]
 800861a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800861e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008622:	9301      	str	r3, [sp, #4]
 8008624:	fa1f f38a 	uxth.w	r3, sl
 8008628:	4619      	mov	r1, r3
 800862a:	b283      	uxth	r3, r0
 800862c:	1acb      	subs	r3, r1, r3
 800862e:	0c00      	lsrs	r0, r0, #16
 8008630:	4463      	add	r3, ip
 8008632:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008636:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800863a:	b29b      	uxth	r3, r3
 800863c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008640:	4576      	cmp	r6, lr
 8008642:	f849 3b04 	str.w	r3, [r9], #4
 8008646:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800864a:	d8e5      	bhi.n	8008618 <__mdiff+0x88>
 800864c:	1b33      	subs	r3, r6, r4
 800864e:	3b15      	subs	r3, #21
 8008650:	f023 0303 	bic.w	r3, r3, #3
 8008654:	3415      	adds	r4, #21
 8008656:	3304      	adds	r3, #4
 8008658:	42a6      	cmp	r6, r4
 800865a:	bf38      	it	cc
 800865c:	2304      	movcc	r3, #4
 800865e:	441d      	add	r5, r3
 8008660:	445b      	add	r3, fp
 8008662:	461e      	mov	r6, r3
 8008664:	462c      	mov	r4, r5
 8008666:	4544      	cmp	r4, r8
 8008668:	d30e      	bcc.n	8008688 <__mdiff+0xf8>
 800866a:	f108 0103 	add.w	r1, r8, #3
 800866e:	1b49      	subs	r1, r1, r5
 8008670:	f021 0103 	bic.w	r1, r1, #3
 8008674:	3d03      	subs	r5, #3
 8008676:	45a8      	cmp	r8, r5
 8008678:	bf38      	it	cc
 800867a:	2100      	movcc	r1, #0
 800867c:	440b      	add	r3, r1
 800867e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008682:	b191      	cbz	r1, 80086aa <__mdiff+0x11a>
 8008684:	6117      	str	r7, [r2, #16]
 8008686:	e79d      	b.n	80085c4 <__mdiff+0x34>
 8008688:	f854 1b04 	ldr.w	r1, [r4], #4
 800868c:	46e6      	mov	lr, ip
 800868e:	0c08      	lsrs	r0, r1, #16
 8008690:	fa1c fc81 	uxtah	ip, ip, r1
 8008694:	4471      	add	r1, lr
 8008696:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800869a:	b289      	uxth	r1, r1
 800869c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80086a0:	f846 1b04 	str.w	r1, [r6], #4
 80086a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80086a8:	e7dd      	b.n	8008666 <__mdiff+0xd6>
 80086aa:	3f01      	subs	r7, #1
 80086ac:	e7e7      	b.n	800867e <__mdiff+0xee>
 80086ae:	bf00      	nop
 80086b0:	0800a959 	.word	0x0800a959
 80086b4:	0800a96a 	.word	0x0800a96a

080086b8 <__ulp>:
 80086b8:	b082      	sub	sp, #8
 80086ba:	ed8d 0b00 	vstr	d0, [sp]
 80086be:	9a01      	ldr	r2, [sp, #4]
 80086c0:	4b0f      	ldr	r3, [pc, #60]	@ (8008700 <__ulp+0x48>)
 80086c2:	4013      	ands	r3, r2
 80086c4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	dc08      	bgt.n	80086de <__ulp+0x26>
 80086cc:	425b      	negs	r3, r3
 80086ce:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80086d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80086d6:	da04      	bge.n	80086e2 <__ulp+0x2a>
 80086d8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80086dc:	4113      	asrs	r3, r2
 80086de:	2200      	movs	r2, #0
 80086e0:	e008      	b.n	80086f4 <__ulp+0x3c>
 80086e2:	f1a2 0314 	sub.w	r3, r2, #20
 80086e6:	2b1e      	cmp	r3, #30
 80086e8:	bfda      	itte	le
 80086ea:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80086ee:	40da      	lsrle	r2, r3
 80086f0:	2201      	movgt	r2, #1
 80086f2:	2300      	movs	r3, #0
 80086f4:	4619      	mov	r1, r3
 80086f6:	4610      	mov	r0, r2
 80086f8:	ec41 0b10 	vmov	d0, r0, r1
 80086fc:	b002      	add	sp, #8
 80086fe:	4770      	bx	lr
 8008700:	7ff00000 	.word	0x7ff00000

08008704 <__b2d>:
 8008704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008708:	6906      	ldr	r6, [r0, #16]
 800870a:	f100 0814 	add.w	r8, r0, #20
 800870e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008712:	1f37      	subs	r7, r6, #4
 8008714:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008718:	4610      	mov	r0, r2
 800871a:	f7ff fd4b 	bl	80081b4 <__hi0bits>
 800871e:	f1c0 0320 	rsb	r3, r0, #32
 8008722:	280a      	cmp	r0, #10
 8008724:	600b      	str	r3, [r1, #0]
 8008726:	491b      	ldr	r1, [pc, #108]	@ (8008794 <__b2d+0x90>)
 8008728:	dc15      	bgt.n	8008756 <__b2d+0x52>
 800872a:	f1c0 0c0b 	rsb	ip, r0, #11
 800872e:	fa22 f30c 	lsr.w	r3, r2, ip
 8008732:	45b8      	cmp	r8, r7
 8008734:	ea43 0501 	orr.w	r5, r3, r1
 8008738:	bf34      	ite	cc
 800873a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800873e:	2300      	movcs	r3, #0
 8008740:	3015      	adds	r0, #21
 8008742:	fa02 f000 	lsl.w	r0, r2, r0
 8008746:	fa23 f30c 	lsr.w	r3, r3, ip
 800874a:	4303      	orrs	r3, r0
 800874c:	461c      	mov	r4, r3
 800874e:	ec45 4b10 	vmov	d0, r4, r5
 8008752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008756:	45b8      	cmp	r8, r7
 8008758:	bf3a      	itte	cc
 800875a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800875e:	f1a6 0708 	subcc.w	r7, r6, #8
 8008762:	2300      	movcs	r3, #0
 8008764:	380b      	subs	r0, #11
 8008766:	d012      	beq.n	800878e <__b2d+0x8a>
 8008768:	f1c0 0120 	rsb	r1, r0, #32
 800876c:	fa23 f401 	lsr.w	r4, r3, r1
 8008770:	4082      	lsls	r2, r0
 8008772:	4322      	orrs	r2, r4
 8008774:	4547      	cmp	r7, r8
 8008776:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800877a:	bf8c      	ite	hi
 800877c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008780:	2200      	movls	r2, #0
 8008782:	4083      	lsls	r3, r0
 8008784:	40ca      	lsrs	r2, r1
 8008786:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800878a:	4313      	orrs	r3, r2
 800878c:	e7de      	b.n	800874c <__b2d+0x48>
 800878e:	ea42 0501 	orr.w	r5, r2, r1
 8008792:	e7db      	b.n	800874c <__b2d+0x48>
 8008794:	3ff00000 	.word	0x3ff00000

08008798 <__d2b>:
 8008798:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800879c:	460f      	mov	r7, r1
 800879e:	2101      	movs	r1, #1
 80087a0:	ec59 8b10 	vmov	r8, r9, d0
 80087a4:	4616      	mov	r6, r2
 80087a6:	f7ff fc13 	bl	8007fd0 <_Balloc>
 80087aa:	4604      	mov	r4, r0
 80087ac:	b930      	cbnz	r0, 80087bc <__d2b+0x24>
 80087ae:	4602      	mov	r2, r0
 80087b0:	4b23      	ldr	r3, [pc, #140]	@ (8008840 <__d2b+0xa8>)
 80087b2:	4824      	ldr	r0, [pc, #144]	@ (8008844 <__d2b+0xac>)
 80087b4:	f240 310f 	movw	r1, #783	@ 0x30f
 80087b8:	f001 fb4a 	bl	8009e50 <__assert_func>
 80087bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80087c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087c4:	b10d      	cbz	r5, 80087ca <__d2b+0x32>
 80087c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80087ca:	9301      	str	r3, [sp, #4]
 80087cc:	f1b8 0300 	subs.w	r3, r8, #0
 80087d0:	d023      	beq.n	800881a <__d2b+0x82>
 80087d2:	4668      	mov	r0, sp
 80087d4:	9300      	str	r3, [sp, #0]
 80087d6:	f7ff fd0c 	bl	80081f2 <__lo0bits>
 80087da:	e9dd 1200 	ldrd	r1, r2, [sp]
 80087de:	b1d0      	cbz	r0, 8008816 <__d2b+0x7e>
 80087e0:	f1c0 0320 	rsb	r3, r0, #32
 80087e4:	fa02 f303 	lsl.w	r3, r2, r3
 80087e8:	430b      	orrs	r3, r1
 80087ea:	40c2      	lsrs	r2, r0
 80087ec:	6163      	str	r3, [r4, #20]
 80087ee:	9201      	str	r2, [sp, #4]
 80087f0:	9b01      	ldr	r3, [sp, #4]
 80087f2:	61a3      	str	r3, [r4, #24]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	bf0c      	ite	eq
 80087f8:	2201      	moveq	r2, #1
 80087fa:	2202      	movne	r2, #2
 80087fc:	6122      	str	r2, [r4, #16]
 80087fe:	b1a5      	cbz	r5, 800882a <__d2b+0x92>
 8008800:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008804:	4405      	add	r5, r0
 8008806:	603d      	str	r5, [r7, #0]
 8008808:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800880c:	6030      	str	r0, [r6, #0]
 800880e:	4620      	mov	r0, r4
 8008810:	b003      	add	sp, #12
 8008812:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008816:	6161      	str	r1, [r4, #20]
 8008818:	e7ea      	b.n	80087f0 <__d2b+0x58>
 800881a:	a801      	add	r0, sp, #4
 800881c:	f7ff fce9 	bl	80081f2 <__lo0bits>
 8008820:	9b01      	ldr	r3, [sp, #4]
 8008822:	6163      	str	r3, [r4, #20]
 8008824:	3020      	adds	r0, #32
 8008826:	2201      	movs	r2, #1
 8008828:	e7e8      	b.n	80087fc <__d2b+0x64>
 800882a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800882e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008832:	6038      	str	r0, [r7, #0]
 8008834:	6918      	ldr	r0, [r3, #16]
 8008836:	f7ff fcbd 	bl	80081b4 <__hi0bits>
 800883a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800883e:	e7e5      	b.n	800880c <__d2b+0x74>
 8008840:	0800a959 	.word	0x0800a959
 8008844:	0800a96a 	.word	0x0800a96a

08008848 <__ratio>:
 8008848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800884c:	b085      	sub	sp, #20
 800884e:	e9cd 1000 	strd	r1, r0, [sp]
 8008852:	a902      	add	r1, sp, #8
 8008854:	f7ff ff56 	bl	8008704 <__b2d>
 8008858:	9800      	ldr	r0, [sp, #0]
 800885a:	a903      	add	r1, sp, #12
 800885c:	ec55 4b10 	vmov	r4, r5, d0
 8008860:	f7ff ff50 	bl	8008704 <__b2d>
 8008864:	9b01      	ldr	r3, [sp, #4]
 8008866:	6919      	ldr	r1, [r3, #16]
 8008868:	9b00      	ldr	r3, [sp, #0]
 800886a:	691b      	ldr	r3, [r3, #16]
 800886c:	1ac9      	subs	r1, r1, r3
 800886e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008872:	1a9b      	subs	r3, r3, r2
 8008874:	ec5b ab10 	vmov	sl, fp, d0
 8008878:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800887c:	2b00      	cmp	r3, #0
 800887e:	bfce      	itee	gt
 8008880:	462a      	movgt	r2, r5
 8008882:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008886:	465a      	movle	r2, fp
 8008888:	462f      	mov	r7, r5
 800888a:	46d9      	mov	r9, fp
 800888c:	bfcc      	ite	gt
 800888e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008892:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008896:	464b      	mov	r3, r9
 8008898:	4652      	mov	r2, sl
 800889a:	4620      	mov	r0, r4
 800889c:	4639      	mov	r1, r7
 800889e:	f7f8 f805 	bl	80008ac <__aeabi_ddiv>
 80088a2:	ec41 0b10 	vmov	d0, r0, r1
 80088a6:	b005      	add	sp, #20
 80088a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080088ac <__copybits>:
 80088ac:	3901      	subs	r1, #1
 80088ae:	b570      	push	{r4, r5, r6, lr}
 80088b0:	1149      	asrs	r1, r1, #5
 80088b2:	6914      	ldr	r4, [r2, #16]
 80088b4:	3101      	adds	r1, #1
 80088b6:	f102 0314 	add.w	r3, r2, #20
 80088ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80088be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80088c2:	1f05      	subs	r5, r0, #4
 80088c4:	42a3      	cmp	r3, r4
 80088c6:	d30c      	bcc.n	80088e2 <__copybits+0x36>
 80088c8:	1aa3      	subs	r3, r4, r2
 80088ca:	3b11      	subs	r3, #17
 80088cc:	f023 0303 	bic.w	r3, r3, #3
 80088d0:	3211      	adds	r2, #17
 80088d2:	42a2      	cmp	r2, r4
 80088d4:	bf88      	it	hi
 80088d6:	2300      	movhi	r3, #0
 80088d8:	4418      	add	r0, r3
 80088da:	2300      	movs	r3, #0
 80088dc:	4288      	cmp	r0, r1
 80088de:	d305      	bcc.n	80088ec <__copybits+0x40>
 80088e0:	bd70      	pop	{r4, r5, r6, pc}
 80088e2:	f853 6b04 	ldr.w	r6, [r3], #4
 80088e6:	f845 6f04 	str.w	r6, [r5, #4]!
 80088ea:	e7eb      	b.n	80088c4 <__copybits+0x18>
 80088ec:	f840 3b04 	str.w	r3, [r0], #4
 80088f0:	e7f4      	b.n	80088dc <__copybits+0x30>

080088f2 <__any_on>:
 80088f2:	f100 0214 	add.w	r2, r0, #20
 80088f6:	6900      	ldr	r0, [r0, #16]
 80088f8:	114b      	asrs	r3, r1, #5
 80088fa:	4298      	cmp	r0, r3
 80088fc:	b510      	push	{r4, lr}
 80088fe:	db11      	blt.n	8008924 <__any_on+0x32>
 8008900:	dd0a      	ble.n	8008918 <__any_on+0x26>
 8008902:	f011 011f 	ands.w	r1, r1, #31
 8008906:	d007      	beq.n	8008918 <__any_on+0x26>
 8008908:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800890c:	fa24 f001 	lsr.w	r0, r4, r1
 8008910:	fa00 f101 	lsl.w	r1, r0, r1
 8008914:	428c      	cmp	r4, r1
 8008916:	d10b      	bne.n	8008930 <__any_on+0x3e>
 8008918:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800891c:	4293      	cmp	r3, r2
 800891e:	d803      	bhi.n	8008928 <__any_on+0x36>
 8008920:	2000      	movs	r0, #0
 8008922:	bd10      	pop	{r4, pc}
 8008924:	4603      	mov	r3, r0
 8008926:	e7f7      	b.n	8008918 <__any_on+0x26>
 8008928:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800892c:	2900      	cmp	r1, #0
 800892e:	d0f5      	beq.n	800891c <__any_on+0x2a>
 8008930:	2001      	movs	r0, #1
 8008932:	e7f6      	b.n	8008922 <__any_on+0x30>

08008934 <sulp>:
 8008934:	b570      	push	{r4, r5, r6, lr}
 8008936:	4604      	mov	r4, r0
 8008938:	460d      	mov	r5, r1
 800893a:	ec45 4b10 	vmov	d0, r4, r5
 800893e:	4616      	mov	r6, r2
 8008940:	f7ff feba 	bl	80086b8 <__ulp>
 8008944:	ec51 0b10 	vmov	r0, r1, d0
 8008948:	b17e      	cbz	r6, 800896a <sulp+0x36>
 800894a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800894e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008952:	2b00      	cmp	r3, #0
 8008954:	dd09      	ble.n	800896a <sulp+0x36>
 8008956:	051b      	lsls	r3, r3, #20
 8008958:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800895c:	2400      	movs	r4, #0
 800895e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008962:	4622      	mov	r2, r4
 8008964:	462b      	mov	r3, r5
 8008966:	f7f7 fe77 	bl	8000658 <__aeabi_dmul>
 800896a:	ec41 0b10 	vmov	d0, r0, r1
 800896e:	bd70      	pop	{r4, r5, r6, pc}

08008970 <_strtod_l>:
 8008970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008974:	b09f      	sub	sp, #124	@ 0x7c
 8008976:	460c      	mov	r4, r1
 8008978:	9217      	str	r2, [sp, #92]	@ 0x5c
 800897a:	2200      	movs	r2, #0
 800897c:	921a      	str	r2, [sp, #104]	@ 0x68
 800897e:	9005      	str	r0, [sp, #20]
 8008980:	f04f 0a00 	mov.w	sl, #0
 8008984:	f04f 0b00 	mov.w	fp, #0
 8008988:	460a      	mov	r2, r1
 800898a:	9219      	str	r2, [sp, #100]	@ 0x64
 800898c:	7811      	ldrb	r1, [r2, #0]
 800898e:	292b      	cmp	r1, #43	@ 0x2b
 8008990:	d04a      	beq.n	8008a28 <_strtod_l+0xb8>
 8008992:	d838      	bhi.n	8008a06 <_strtod_l+0x96>
 8008994:	290d      	cmp	r1, #13
 8008996:	d832      	bhi.n	80089fe <_strtod_l+0x8e>
 8008998:	2908      	cmp	r1, #8
 800899a:	d832      	bhi.n	8008a02 <_strtod_l+0x92>
 800899c:	2900      	cmp	r1, #0
 800899e:	d03b      	beq.n	8008a18 <_strtod_l+0xa8>
 80089a0:	2200      	movs	r2, #0
 80089a2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80089a4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80089a6:	782a      	ldrb	r2, [r5, #0]
 80089a8:	2a30      	cmp	r2, #48	@ 0x30
 80089aa:	f040 80b3 	bne.w	8008b14 <_strtod_l+0x1a4>
 80089ae:	786a      	ldrb	r2, [r5, #1]
 80089b0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80089b4:	2a58      	cmp	r2, #88	@ 0x58
 80089b6:	d16e      	bne.n	8008a96 <_strtod_l+0x126>
 80089b8:	9302      	str	r3, [sp, #8]
 80089ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089bc:	9301      	str	r3, [sp, #4]
 80089be:	ab1a      	add	r3, sp, #104	@ 0x68
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	4a8e      	ldr	r2, [pc, #568]	@ (8008bfc <_strtod_l+0x28c>)
 80089c4:	9805      	ldr	r0, [sp, #20]
 80089c6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80089c8:	a919      	add	r1, sp, #100	@ 0x64
 80089ca:	f001 fadb 	bl	8009f84 <__gethex>
 80089ce:	f010 060f 	ands.w	r6, r0, #15
 80089d2:	4604      	mov	r4, r0
 80089d4:	d005      	beq.n	80089e2 <_strtod_l+0x72>
 80089d6:	2e06      	cmp	r6, #6
 80089d8:	d128      	bne.n	8008a2c <_strtod_l+0xbc>
 80089da:	3501      	adds	r5, #1
 80089dc:	2300      	movs	r3, #0
 80089de:	9519      	str	r5, [sp, #100]	@ 0x64
 80089e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80089e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	f040 858e 	bne.w	8009506 <_strtod_l+0xb96>
 80089ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089ec:	b1cb      	cbz	r3, 8008a22 <_strtod_l+0xb2>
 80089ee:	4652      	mov	r2, sl
 80089f0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80089f4:	ec43 2b10 	vmov	d0, r2, r3
 80089f8:	b01f      	add	sp, #124	@ 0x7c
 80089fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089fe:	2920      	cmp	r1, #32
 8008a00:	d1ce      	bne.n	80089a0 <_strtod_l+0x30>
 8008a02:	3201      	adds	r2, #1
 8008a04:	e7c1      	b.n	800898a <_strtod_l+0x1a>
 8008a06:	292d      	cmp	r1, #45	@ 0x2d
 8008a08:	d1ca      	bne.n	80089a0 <_strtod_l+0x30>
 8008a0a:	2101      	movs	r1, #1
 8008a0c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008a0e:	1c51      	adds	r1, r2, #1
 8008a10:	9119      	str	r1, [sp, #100]	@ 0x64
 8008a12:	7852      	ldrb	r2, [r2, #1]
 8008a14:	2a00      	cmp	r2, #0
 8008a16:	d1c5      	bne.n	80089a4 <_strtod_l+0x34>
 8008a18:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008a1a:	9419      	str	r4, [sp, #100]	@ 0x64
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f040 8570 	bne.w	8009502 <_strtod_l+0xb92>
 8008a22:	4652      	mov	r2, sl
 8008a24:	465b      	mov	r3, fp
 8008a26:	e7e5      	b.n	80089f4 <_strtod_l+0x84>
 8008a28:	2100      	movs	r1, #0
 8008a2a:	e7ef      	b.n	8008a0c <_strtod_l+0x9c>
 8008a2c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008a2e:	b13a      	cbz	r2, 8008a40 <_strtod_l+0xd0>
 8008a30:	2135      	movs	r1, #53	@ 0x35
 8008a32:	a81c      	add	r0, sp, #112	@ 0x70
 8008a34:	f7ff ff3a 	bl	80088ac <__copybits>
 8008a38:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a3a:	9805      	ldr	r0, [sp, #20]
 8008a3c:	f7ff fb08 	bl	8008050 <_Bfree>
 8008a40:	3e01      	subs	r6, #1
 8008a42:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008a44:	2e04      	cmp	r6, #4
 8008a46:	d806      	bhi.n	8008a56 <_strtod_l+0xe6>
 8008a48:	e8df f006 	tbb	[pc, r6]
 8008a4c:	201d0314 	.word	0x201d0314
 8008a50:	14          	.byte	0x14
 8008a51:	00          	.byte	0x00
 8008a52:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008a56:	05e1      	lsls	r1, r4, #23
 8008a58:	bf48      	it	mi
 8008a5a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008a5e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008a62:	0d1b      	lsrs	r3, r3, #20
 8008a64:	051b      	lsls	r3, r3, #20
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1bb      	bne.n	80089e2 <_strtod_l+0x72>
 8008a6a:	f7fe fb2f 	bl	80070cc <__errno>
 8008a6e:	2322      	movs	r3, #34	@ 0x22
 8008a70:	6003      	str	r3, [r0, #0]
 8008a72:	e7b6      	b.n	80089e2 <_strtod_l+0x72>
 8008a74:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008a78:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008a7c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008a80:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008a84:	e7e7      	b.n	8008a56 <_strtod_l+0xe6>
 8008a86:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008c04 <_strtod_l+0x294>
 8008a8a:	e7e4      	b.n	8008a56 <_strtod_l+0xe6>
 8008a8c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008a90:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008a94:	e7df      	b.n	8008a56 <_strtod_l+0xe6>
 8008a96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a98:	1c5a      	adds	r2, r3, #1
 8008a9a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a9c:	785b      	ldrb	r3, [r3, #1]
 8008a9e:	2b30      	cmp	r3, #48	@ 0x30
 8008aa0:	d0f9      	beq.n	8008a96 <_strtod_l+0x126>
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d09d      	beq.n	80089e2 <_strtod_l+0x72>
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008aaa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008aac:	930c      	str	r3, [sp, #48]	@ 0x30
 8008aae:	2300      	movs	r3, #0
 8008ab0:	9308      	str	r3, [sp, #32]
 8008ab2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ab4:	461f      	mov	r7, r3
 8008ab6:	220a      	movs	r2, #10
 8008ab8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008aba:	7805      	ldrb	r5, [r0, #0]
 8008abc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008ac0:	b2d9      	uxtb	r1, r3
 8008ac2:	2909      	cmp	r1, #9
 8008ac4:	d928      	bls.n	8008b18 <_strtod_l+0x1a8>
 8008ac6:	494e      	ldr	r1, [pc, #312]	@ (8008c00 <_strtod_l+0x290>)
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f7fe faa3 	bl	8007014 <strncmp>
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	d032      	beq.n	8008b38 <_strtod_l+0x1c8>
 8008ad2:	2000      	movs	r0, #0
 8008ad4:	462a      	mov	r2, r5
 8008ad6:	4681      	mov	r9, r0
 8008ad8:	463d      	mov	r5, r7
 8008ada:	4603      	mov	r3, r0
 8008adc:	2a65      	cmp	r2, #101	@ 0x65
 8008ade:	d001      	beq.n	8008ae4 <_strtod_l+0x174>
 8008ae0:	2a45      	cmp	r2, #69	@ 0x45
 8008ae2:	d114      	bne.n	8008b0e <_strtod_l+0x19e>
 8008ae4:	b91d      	cbnz	r5, 8008aee <_strtod_l+0x17e>
 8008ae6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ae8:	4302      	orrs	r2, r0
 8008aea:	d095      	beq.n	8008a18 <_strtod_l+0xa8>
 8008aec:	2500      	movs	r5, #0
 8008aee:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008af0:	1c62      	adds	r2, r4, #1
 8008af2:	9219      	str	r2, [sp, #100]	@ 0x64
 8008af4:	7862      	ldrb	r2, [r4, #1]
 8008af6:	2a2b      	cmp	r2, #43	@ 0x2b
 8008af8:	d077      	beq.n	8008bea <_strtod_l+0x27a>
 8008afa:	2a2d      	cmp	r2, #45	@ 0x2d
 8008afc:	d07b      	beq.n	8008bf6 <_strtod_l+0x286>
 8008afe:	f04f 0c00 	mov.w	ip, #0
 8008b02:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008b06:	2909      	cmp	r1, #9
 8008b08:	f240 8082 	bls.w	8008c10 <_strtod_l+0x2a0>
 8008b0c:	9419      	str	r4, [sp, #100]	@ 0x64
 8008b0e:	f04f 0800 	mov.w	r8, #0
 8008b12:	e0a2      	b.n	8008c5a <_strtod_l+0x2ea>
 8008b14:	2300      	movs	r3, #0
 8008b16:	e7c7      	b.n	8008aa8 <_strtod_l+0x138>
 8008b18:	2f08      	cmp	r7, #8
 8008b1a:	bfd5      	itete	le
 8008b1c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008b1e:	9908      	ldrgt	r1, [sp, #32]
 8008b20:	fb02 3301 	mlale	r3, r2, r1, r3
 8008b24:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008b28:	f100 0001 	add.w	r0, r0, #1
 8008b2c:	bfd4      	ite	le
 8008b2e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008b30:	9308      	strgt	r3, [sp, #32]
 8008b32:	3701      	adds	r7, #1
 8008b34:	9019      	str	r0, [sp, #100]	@ 0x64
 8008b36:	e7bf      	b.n	8008ab8 <_strtod_l+0x148>
 8008b38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b3a:	1c5a      	adds	r2, r3, #1
 8008b3c:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b3e:	785a      	ldrb	r2, [r3, #1]
 8008b40:	b37f      	cbz	r7, 8008ba2 <_strtod_l+0x232>
 8008b42:	4681      	mov	r9, r0
 8008b44:	463d      	mov	r5, r7
 8008b46:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008b4a:	2b09      	cmp	r3, #9
 8008b4c:	d912      	bls.n	8008b74 <_strtod_l+0x204>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e7c4      	b.n	8008adc <_strtod_l+0x16c>
 8008b52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b54:	1c5a      	adds	r2, r3, #1
 8008b56:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b58:	785a      	ldrb	r2, [r3, #1]
 8008b5a:	3001      	adds	r0, #1
 8008b5c:	2a30      	cmp	r2, #48	@ 0x30
 8008b5e:	d0f8      	beq.n	8008b52 <_strtod_l+0x1e2>
 8008b60:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008b64:	2b08      	cmp	r3, #8
 8008b66:	f200 84d3 	bhi.w	8009510 <_strtod_l+0xba0>
 8008b6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b6c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b6e:	4681      	mov	r9, r0
 8008b70:	2000      	movs	r0, #0
 8008b72:	4605      	mov	r5, r0
 8008b74:	3a30      	subs	r2, #48	@ 0x30
 8008b76:	f100 0301 	add.w	r3, r0, #1
 8008b7a:	d02a      	beq.n	8008bd2 <_strtod_l+0x262>
 8008b7c:	4499      	add	r9, r3
 8008b7e:	eb00 0c05 	add.w	ip, r0, r5
 8008b82:	462b      	mov	r3, r5
 8008b84:	210a      	movs	r1, #10
 8008b86:	4563      	cmp	r3, ip
 8008b88:	d10d      	bne.n	8008ba6 <_strtod_l+0x236>
 8008b8a:	1c69      	adds	r1, r5, #1
 8008b8c:	4401      	add	r1, r0
 8008b8e:	4428      	add	r0, r5
 8008b90:	2808      	cmp	r0, #8
 8008b92:	dc16      	bgt.n	8008bc2 <_strtod_l+0x252>
 8008b94:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008b96:	230a      	movs	r3, #10
 8008b98:	fb03 2300 	mla	r3, r3, r0, r2
 8008b9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	e018      	b.n	8008bd4 <_strtod_l+0x264>
 8008ba2:	4638      	mov	r0, r7
 8008ba4:	e7da      	b.n	8008b5c <_strtod_l+0x1ec>
 8008ba6:	2b08      	cmp	r3, #8
 8008ba8:	f103 0301 	add.w	r3, r3, #1
 8008bac:	dc03      	bgt.n	8008bb6 <_strtod_l+0x246>
 8008bae:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008bb0:	434e      	muls	r6, r1
 8008bb2:	960a      	str	r6, [sp, #40]	@ 0x28
 8008bb4:	e7e7      	b.n	8008b86 <_strtod_l+0x216>
 8008bb6:	2b10      	cmp	r3, #16
 8008bb8:	bfde      	ittt	le
 8008bba:	9e08      	ldrle	r6, [sp, #32]
 8008bbc:	434e      	mulle	r6, r1
 8008bbe:	9608      	strle	r6, [sp, #32]
 8008bc0:	e7e1      	b.n	8008b86 <_strtod_l+0x216>
 8008bc2:	280f      	cmp	r0, #15
 8008bc4:	dceb      	bgt.n	8008b9e <_strtod_l+0x22e>
 8008bc6:	9808      	ldr	r0, [sp, #32]
 8008bc8:	230a      	movs	r3, #10
 8008bca:	fb03 2300 	mla	r3, r3, r0, r2
 8008bce:	9308      	str	r3, [sp, #32]
 8008bd0:	e7e5      	b.n	8008b9e <_strtod_l+0x22e>
 8008bd2:	4629      	mov	r1, r5
 8008bd4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008bd6:	1c50      	adds	r0, r2, #1
 8008bd8:	9019      	str	r0, [sp, #100]	@ 0x64
 8008bda:	7852      	ldrb	r2, [r2, #1]
 8008bdc:	4618      	mov	r0, r3
 8008bde:	460d      	mov	r5, r1
 8008be0:	e7b1      	b.n	8008b46 <_strtod_l+0x1d6>
 8008be2:	f04f 0900 	mov.w	r9, #0
 8008be6:	2301      	movs	r3, #1
 8008be8:	e77d      	b.n	8008ae6 <_strtod_l+0x176>
 8008bea:	f04f 0c00 	mov.w	ip, #0
 8008bee:	1ca2      	adds	r2, r4, #2
 8008bf0:	9219      	str	r2, [sp, #100]	@ 0x64
 8008bf2:	78a2      	ldrb	r2, [r4, #2]
 8008bf4:	e785      	b.n	8008b02 <_strtod_l+0x192>
 8008bf6:	f04f 0c01 	mov.w	ip, #1
 8008bfa:	e7f8      	b.n	8008bee <_strtod_l+0x27e>
 8008bfc:	0800aad8 	.word	0x0800aad8
 8008c00:	0800aac0 	.word	0x0800aac0
 8008c04:	7ff00000 	.word	0x7ff00000
 8008c08:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c0a:	1c51      	adds	r1, r2, #1
 8008c0c:	9119      	str	r1, [sp, #100]	@ 0x64
 8008c0e:	7852      	ldrb	r2, [r2, #1]
 8008c10:	2a30      	cmp	r2, #48	@ 0x30
 8008c12:	d0f9      	beq.n	8008c08 <_strtod_l+0x298>
 8008c14:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008c18:	2908      	cmp	r1, #8
 8008c1a:	f63f af78 	bhi.w	8008b0e <_strtod_l+0x19e>
 8008c1e:	3a30      	subs	r2, #48	@ 0x30
 8008c20:	920e      	str	r2, [sp, #56]	@ 0x38
 8008c22:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c24:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008c26:	f04f 080a 	mov.w	r8, #10
 8008c2a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c2c:	1c56      	adds	r6, r2, #1
 8008c2e:	9619      	str	r6, [sp, #100]	@ 0x64
 8008c30:	7852      	ldrb	r2, [r2, #1]
 8008c32:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008c36:	f1be 0f09 	cmp.w	lr, #9
 8008c3a:	d939      	bls.n	8008cb0 <_strtod_l+0x340>
 8008c3c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008c3e:	1a76      	subs	r6, r6, r1
 8008c40:	2e08      	cmp	r6, #8
 8008c42:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008c46:	dc03      	bgt.n	8008c50 <_strtod_l+0x2e0>
 8008c48:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008c4a:	4588      	cmp	r8, r1
 8008c4c:	bfa8      	it	ge
 8008c4e:	4688      	movge	r8, r1
 8008c50:	f1bc 0f00 	cmp.w	ip, #0
 8008c54:	d001      	beq.n	8008c5a <_strtod_l+0x2ea>
 8008c56:	f1c8 0800 	rsb	r8, r8, #0
 8008c5a:	2d00      	cmp	r5, #0
 8008c5c:	d14e      	bne.n	8008cfc <_strtod_l+0x38c>
 8008c5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c60:	4308      	orrs	r0, r1
 8008c62:	f47f aebe 	bne.w	80089e2 <_strtod_l+0x72>
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	f47f aed6 	bne.w	8008a18 <_strtod_l+0xa8>
 8008c6c:	2a69      	cmp	r2, #105	@ 0x69
 8008c6e:	d028      	beq.n	8008cc2 <_strtod_l+0x352>
 8008c70:	dc25      	bgt.n	8008cbe <_strtod_l+0x34e>
 8008c72:	2a49      	cmp	r2, #73	@ 0x49
 8008c74:	d025      	beq.n	8008cc2 <_strtod_l+0x352>
 8008c76:	2a4e      	cmp	r2, #78	@ 0x4e
 8008c78:	f47f aece 	bne.w	8008a18 <_strtod_l+0xa8>
 8008c7c:	499b      	ldr	r1, [pc, #620]	@ (8008eec <_strtod_l+0x57c>)
 8008c7e:	a819      	add	r0, sp, #100	@ 0x64
 8008c80:	f001 fba2 	bl	800a3c8 <__match>
 8008c84:	2800      	cmp	r0, #0
 8008c86:	f43f aec7 	beq.w	8008a18 <_strtod_l+0xa8>
 8008c8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	2b28      	cmp	r3, #40	@ 0x28
 8008c90:	d12e      	bne.n	8008cf0 <_strtod_l+0x380>
 8008c92:	4997      	ldr	r1, [pc, #604]	@ (8008ef0 <_strtod_l+0x580>)
 8008c94:	aa1c      	add	r2, sp, #112	@ 0x70
 8008c96:	a819      	add	r0, sp, #100	@ 0x64
 8008c98:	f001 fbaa 	bl	800a3f0 <__hexnan>
 8008c9c:	2805      	cmp	r0, #5
 8008c9e:	d127      	bne.n	8008cf0 <_strtod_l+0x380>
 8008ca0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008ca2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008ca6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008caa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008cae:	e698      	b.n	80089e2 <_strtod_l+0x72>
 8008cb0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008cb2:	fb08 2101 	mla	r1, r8, r1, r2
 8008cb6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008cba:	920e      	str	r2, [sp, #56]	@ 0x38
 8008cbc:	e7b5      	b.n	8008c2a <_strtod_l+0x2ba>
 8008cbe:	2a6e      	cmp	r2, #110	@ 0x6e
 8008cc0:	e7da      	b.n	8008c78 <_strtod_l+0x308>
 8008cc2:	498c      	ldr	r1, [pc, #560]	@ (8008ef4 <_strtod_l+0x584>)
 8008cc4:	a819      	add	r0, sp, #100	@ 0x64
 8008cc6:	f001 fb7f 	bl	800a3c8 <__match>
 8008cca:	2800      	cmp	r0, #0
 8008ccc:	f43f aea4 	beq.w	8008a18 <_strtod_l+0xa8>
 8008cd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cd2:	4989      	ldr	r1, [pc, #548]	@ (8008ef8 <_strtod_l+0x588>)
 8008cd4:	3b01      	subs	r3, #1
 8008cd6:	a819      	add	r0, sp, #100	@ 0x64
 8008cd8:	9319      	str	r3, [sp, #100]	@ 0x64
 8008cda:	f001 fb75 	bl	800a3c8 <__match>
 8008cde:	b910      	cbnz	r0, 8008ce6 <_strtod_l+0x376>
 8008ce0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	9319      	str	r3, [sp, #100]	@ 0x64
 8008ce6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008f08 <_strtod_l+0x598>
 8008cea:	f04f 0a00 	mov.w	sl, #0
 8008cee:	e678      	b.n	80089e2 <_strtod_l+0x72>
 8008cf0:	4882      	ldr	r0, [pc, #520]	@ (8008efc <_strtod_l+0x58c>)
 8008cf2:	f001 f8a5 	bl	8009e40 <nan>
 8008cf6:	ec5b ab10 	vmov	sl, fp, d0
 8008cfa:	e672      	b.n	80089e2 <_strtod_l+0x72>
 8008cfc:	eba8 0309 	sub.w	r3, r8, r9
 8008d00:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008d02:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d04:	2f00      	cmp	r7, #0
 8008d06:	bf08      	it	eq
 8008d08:	462f      	moveq	r7, r5
 8008d0a:	2d10      	cmp	r5, #16
 8008d0c:	462c      	mov	r4, r5
 8008d0e:	bfa8      	it	ge
 8008d10:	2410      	movge	r4, #16
 8008d12:	f7f7 fc27 	bl	8000564 <__aeabi_ui2d>
 8008d16:	2d09      	cmp	r5, #9
 8008d18:	4682      	mov	sl, r0
 8008d1a:	468b      	mov	fp, r1
 8008d1c:	dc13      	bgt.n	8008d46 <_strtod_l+0x3d6>
 8008d1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f43f ae5e 	beq.w	80089e2 <_strtod_l+0x72>
 8008d26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d28:	dd78      	ble.n	8008e1c <_strtod_l+0x4ac>
 8008d2a:	2b16      	cmp	r3, #22
 8008d2c:	dc5f      	bgt.n	8008dee <_strtod_l+0x47e>
 8008d2e:	4974      	ldr	r1, [pc, #464]	@ (8008f00 <_strtod_l+0x590>)
 8008d30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d38:	4652      	mov	r2, sl
 8008d3a:	465b      	mov	r3, fp
 8008d3c:	f7f7 fc8c 	bl	8000658 <__aeabi_dmul>
 8008d40:	4682      	mov	sl, r0
 8008d42:	468b      	mov	fp, r1
 8008d44:	e64d      	b.n	80089e2 <_strtod_l+0x72>
 8008d46:	4b6e      	ldr	r3, [pc, #440]	@ (8008f00 <_strtod_l+0x590>)
 8008d48:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d4c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008d50:	f7f7 fc82 	bl	8000658 <__aeabi_dmul>
 8008d54:	4682      	mov	sl, r0
 8008d56:	9808      	ldr	r0, [sp, #32]
 8008d58:	468b      	mov	fp, r1
 8008d5a:	f7f7 fc03 	bl	8000564 <__aeabi_ui2d>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	460b      	mov	r3, r1
 8008d62:	4650      	mov	r0, sl
 8008d64:	4659      	mov	r1, fp
 8008d66:	f7f7 fac1 	bl	80002ec <__adddf3>
 8008d6a:	2d0f      	cmp	r5, #15
 8008d6c:	4682      	mov	sl, r0
 8008d6e:	468b      	mov	fp, r1
 8008d70:	ddd5      	ble.n	8008d1e <_strtod_l+0x3ae>
 8008d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d74:	1b2c      	subs	r4, r5, r4
 8008d76:	441c      	add	r4, r3
 8008d78:	2c00      	cmp	r4, #0
 8008d7a:	f340 8096 	ble.w	8008eaa <_strtod_l+0x53a>
 8008d7e:	f014 030f 	ands.w	r3, r4, #15
 8008d82:	d00a      	beq.n	8008d9a <_strtod_l+0x42a>
 8008d84:	495e      	ldr	r1, [pc, #376]	@ (8008f00 <_strtod_l+0x590>)
 8008d86:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d8a:	4652      	mov	r2, sl
 8008d8c:	465b      	mov	r3, fp
 8008d8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d92:	f7f7 fc61 	bl	8000658 <__aeabi_dmul>
 8008d96:	4682      	mov	sl, r0
 8008d98:	468b      	mov	fp, r1
 8008d9a:	f034 040f 	bics.w	r4, r4, #15
 8008d9e:	d073      	beq.n	8008e88 <_strtod_l+0x518>
 8008da0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008da4:	dd48      	ble.n	8008e38 <_strtod_l+0x4c8>
 8008da6:	2400      	movs	r4, #0
 8008da8:	46a0      	mov	r8, r4
 8008daa:	940a      	str	r4, [sp, #40]	@ 0x28
 8008dac:	46a1      	mov	r9, r4
 8008dae:	9a05      	ldr	r2, [sp, #20]
 8008db0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008f08 <_strtod_l+0x598>
 8008db4:	2322      	movs	r3, #34	@ 0x22
 8008db6:	6013      	str	r3, [r2, #0]
 8008db8:	f04f 0a00 	mov.w	sl, #0
 8008dbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	f43f ae0f 	beq.w	80089e2 <_strtod_l+0x72>
 8008dc4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008dc6:	9805      	ldr	r0, [sp, #20]
 8008dc8:	f7ff f942 	bl	8008050 <_Bfree>
 8008dcc:	9805      	ldr	r0, [sp, #20]
 8008dce:	4649      	mov	r1, r9
 8008dd0:	f7ff f93e 	bl	8008050 <_Bfree>
 8008dd4:	9805      	ldr	r0, [sp, #20]
 8008dd6:	4641      	mov	r1, r8
 8008dd8:	f7ff f93a 	bl	8008050 <_Bfree>
 8008ddc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008dde:	9805      	ldr	r0, [sp, #20]
 8008de0:	f7ff f936 	bl	8008050 <_Bfree>
 8008de4:	9805      	ldr	r0, [sp, #20]
 8008de6:	4621      	mov	r1, r4
 8008de8:	f7ff f932 	bl	8008050 <_Bfree>
 8008dec:	e5f9      	b.n	80089e2 <_strtod_l+0x72>
 8008dee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008df0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008df4:	4293      	cmp	r3, r2
 8008df6:	dbbc      	blt.n	8008d72 <_strtod_l+0x402>
 8008df8:	4c41      	ldr	r4, [pc, #260]	@ (8008f00 <_strtod_l+0x590>)
 8008dfa:	f1c5 050f 	rsb	r5, r5, #15
 8008dfe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008e02:	4652      	mov	r2, sl
 8008e04:	465b      	mov	r3, fp
 8008e06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e0a:	f7f7 fc25 	bl	8000658 <__aeabi_dmul>
 8008e0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e10:	1b5d      	subs	r5, r3, r5
 8008e12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008e16:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008e1a:	e78f      	b.n	8008d3c <_strtod_l+0x3cc>
 8008e1c:	3316      	adds	r3, #22
 8008e1e:	dba8      	blt.n	8008d72 <_strtod_l+0x402>
 8008e20:	4b37      	ldr	r3, [pc, #220]	@ (8008f00 <_strtod_l+0x590>)
 8008e22:	eba9 0808 	sub.w	r8, r9, r8
 8008e26:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008e2a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008e2e:	4650      	mov	r0, sl
 8008e30:	4659      	mov	r1, fp
 8008e32:	f7f7 fd3b 	bl	80008ac <__aeabi_ddiv>
 8008e36:	e783      	b.n	8008d40 <_strtod_l+0x3d0>
 8008e38:	4b32      	ldr	r3, [pc, #200]	@ (8008f04 <_strtod_l+0x594>)
 8008e3a:	9308      	str	r3, [sp, #32]
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	1124      	asrs	r4, r4, #4
 8008e40:	4650      	mov	r0, sl
 8008e42:	4659      	mov	r1, fp
 8008e44:	461e      	mov	r6, r3
 8008e46:	2c01      	cmp	r4, #1
 8008e48:	dc21      	bgt.n	8008e8e <_strtod_l+0x51e>
 8008e4a:	b10b      	cbz	r3, 8008e50 <_strtod_l+0x4e0>
 8008e4c:	4682      	mov	sl, r0
 8008e4e:	468b      	mov	fp, r1
 8008e50:	492c      	ldr	r1, [pc, #176]	@ (8008f04 <_strtod_l+0x594>)
 8008e52:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008e56:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008e5a:	4652      	mov	r2, sl
 8008e5c:	465b      	mov	r3, fp
 8008e5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e62:	f7f7 fbf9 	bl	8000658 <__aeabi_dmul>
 8008e66:	4b28      	ldr	r3, [pc, #160]	@ (8008f08 <_strtod_l+0x598>)
 8008e68:	460a      	mov	r2, r1
 8008e6a:	400b      	ands	r3, r1
 8008e6c:	4927      	ldr	r1, [pc, #156]	@ (8008f0c <_strtod_l+0x59c>)
 8008e6e:	428b      	cmp	r3, r1
 8008e70:	4682      	mov	sl, r0
 8008e72:	d898      	bhi.n	8008da6 <_strtod_l+0x436>
 8008e74:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008e78:	428b      	cmp	r3, r1
 8008e7a:	bf86      	itte	hi
 8008e7c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008f10 <_strtod_l+0x5a0>
 8008e80:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8008e84:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008e88:	2300      	movs	r3, #0
 8008e8a:	9308      	str	r3, [sp, #32]
 8008e8c:	e07a      	b.n	8008f84 <_strtod_l+0x614>
 8008e8e:	07e2      	lsls	r2, r4, #31
 8008e90:	d505      	bpl.n	8008e9e <_strtod_l+0x52e>
 8008e92:	9b08      	ldr	r3, [sp, #32]
 8008e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e98:	f7f7 fbde 	bl	8000658 <__aeabi_dmul>
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	9a08      	ldr	r2, [sp, #32]
 8008ea0:	3208      	adds	r2, #8
 8008ea2:	3601      	adds	r6, #1
 8008ea4:	1064      	asrs	r4, r4, #1
 8008ea6:	9208      	str	r2, [sp, #32]
 8008ea8:	e7cd      	b.n	8008e46 <_strtod_l+0x4d6>
 8008eaa:	d0ed      	beq.n	8008e88 <_strtod_l+0x518>
 8008eac:	4264      	negs	r4, r4
 8008eae:	f014 020f 	ands.w	r2, r4, #15
 8008eb2:	d00a      	beq.n	8008eca <_strtod_l+0x55a>
 8008eb4:	4b12      	ldr	r3, [pc, #72]	@ (8008f00 <_strtod_l+0x590>)
 8008eb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008eba:	4650      	mov	r0, sl
 8008ebc:	4659      	mov	r1, fp
 8008ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec2:	f7f7 fcf3 	bl	80008ac <__aeabi_ddiv>
 8008ec6:	4682      	mov	sl, r0
 8008ec8:	468b      	mov	fp, r1
 8008eca:	1124      	asrs	r4, r4, #4
 8008ecc:	d0dc      	beq.n	8008e88 <_strtod_l+0x518>
 8008ece:	2c1f      	cmp	r4, #31
 8008ed0:	dd20      	ble.n	8008f14 <_strtod_l+0x5a4>
 8008ed2:	2400      	movs	r4, #0
 8008ed4:	46a0      	mov	r8, r4
 8008ed6:	940a      	str	r4, [sp, #40]	@ 0x28
 8008ed8:	46a1      	mov	r9, r4
 8008eda:	9a05      	ldr	r2, [sp, #20]
 8008edc:	2322      	movs	r3, #34	@ 0x22
 8008ede:	f04f 0a00 	mov.w	sl, #0
 8008ee2:	f04f 0b00 	mov.w	fp, #0
 8008ee6:	6013      	str	r3, [r2, #0]
 8008ee8:	e768      	b.n	8008dbc <_strtod_l+0x44c>
 8008eea:	bf00      	nop
 8008eec:	0800a8b1 	.word	0x0800a8b1
 8008ef0:	0800aac4 	.word	0x0800aac4
 8008ef4:	0800a8a9 	.word	0x0800a8a9
 8008ef8:	0800a8e0 	.word	0x0800a8e0
 8008efc:	0800ac6d 	.word	0x0800ac6d
 8008f00:	0800a9f8 	.word	0x0800a9f8
 8008f04:	0800a9d0 	.word	0x0800a9d0
 8008f08:	7ff00000 	.word	0x7ff00000
 8008f0c:	7ca00000 	.word	0x7ca00000
 8008f10:	7fefffff 	.word	0x7fefffff
 8008f14:	f014 0310 	ands.w	r3, r4, #16
 8008f18:	bf18      	it	ne
 8008f1a:	236a      	movne	r3, #106	@ 0x6a
 8008f1c:	4ea9      	ldr	r6, [pc, #676]	@ (80091c4 <_strtod_l+0x854>)
 8008f1e:	9308      	str	r3, [sp, #32]
 8008f20:	4650      	mov	r0, sl
 8008f22:	4659      	mov	r1, fp
 8008f24:	2300      	movs	r3, #0
 8008f26:	07e2      	lsls	r2, r4, #31
 8008f28:	d504      	bpl.n	8008f34 <_strtod_l+0x5c4>
 8008f2a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f2e:	f7f7 fb93 	bl	8000658 <__aeabi_dmul>
 8008f32:	2301      	movs	r3, #1
 8008f34:	1064      	asrs	r4, r4, #1
 8008f36:	f106 0608 	add.w	r6, r6, #8
 8008f3a:	d1f4      	bne.n	8008f26 <_strtod_l+0x5b6>
 8008f3c:	b10b      	cbz	r3, 8008f42 <_strtod_l+0x5d2>
 8008f3e:	4682      	mov	sl, r0
 8008f40:	468b      	mov	fp, r1
 8008f42:	9b08      	ldr	r3, [sp, #32]
 8008f44:	b1b3      	cbz	r3, 8008f74 <_strtod_l+0x604>
 8008f46:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008f4a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	4659      	mov	r1, fp
 8008f52:	dd0f      	ble.n	8008f74 <_strtod_l+0x604>
 8008f54:	2b1f      	cmp	r3, #31
 8008f56:	dd55      	ble.n	8009004 <_strtod_l+0x694>
 8008f58:	2b34      	cmp	r3, #52	@ 0x34
 8008f5a:	bfde      	ittt	le
 8008f5c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8008f60:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008f64:	4093      	lslle	r3, r2
 8008f66:	f04f 0a00 	mov.w	sl, #0
 8008f6a:	bfcc      	ite	gt
 8008f6c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008f70:	ea03 0b01 	andle.w	fp, r3, r1
 8008f74:	2200      	movs	r2, #0
 8008f76:	2300      	movs	r3, #0
 8008f78:	4650      	mov	r0, sl
 8008f7a:	4659      	mov	r1, fp
 8008f7c:	f7f7 fdd4 	bl	8000b28 <__aeabi_dcmpeq>
 8008f80:	2800      	cmp	r0, #0
 8008f82:	d1a6      	bne.n	8008ed2 <_strtod_l+0x562>
 8008f84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f86:	9300      	str	r3, [sp, #0]
 8008f88:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008f8a:	9805      	ldr	r0, [sp, #20]
 8008f8c:	462b      	mov	r3, r5
 8008f8e:	463a      	mov	r2, r7
 8008f90:	f7ff f8c6 	bl	8008120 <__s2b>
 8008f94:	900a      	str	r0, [sp, #40]	@ 0x28
 8008f96:	2800      	cmp	r0, #0
 8008f98:	f43f af05 	beq.w	8008da6 <_strtod_l+0x436>
 8008f9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f9e:	2a00      	cmp	r2, #0
 8008fa0:	eba9 0308 	sub.w	r3, r9, r8
 8008fa4:	bfa8      	it	ge
 8008fa6:	2300      	movge	r3, #0
 8008fa8:	9312      	str	r3, [sp, #72]	@ 0x48
 8008faa:	2400      	movs	r4, #0
 8008fac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008fb0:	9316      	str	r3, [sp, #88]	@ 0x58
 8008fb2:	46a0      	mov	r8, r4
 8008fb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fb6:	9805      	ldr	r0, [sp, #20]
 8008fb8:	6859      	ldr	r1, [r3, #4]
 8008fba:	f7ff f809 	bl	8007fd0 <_Balloc>
 8008fbe:	4681      	mov	r9, r0
 8008fc0:	2800      	cmp	r0, #0
 8008fc2:	f43f aef4 	beq.w	8008dae <_strtod_l+0x43e>
 8008fc6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fc8:	691a      	ldr	r2, [r3, #16]
 8008fca:	3202      	adds	r2, #2
 8008fcc:	f103 010c 	add.w	r1, r3, #12
 8008fd0:	0092      	lsls	r2, r2, #2
 8008fd2:	300c      	adds	r0, #12
 8008fd4:	f000 ff26 	bl	8009e24 <memcpy>
 8008fd8:	ec4b ab10 	vmov	d0, sl, fp
 8008fdc:	9805      	ldr	r0, [sp, #20]
 8008fde:	aa1c      	add	r2, sp, #112	@ 0x70
 8008fe0:	a91b      	add	r1, sp, #108	@ 0x6c
 8008fe2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008fe6:	f7ff fbd7 	bl	8008798 <__d2b>
 8008fea:	901a      	str	r0, [sp, #104]	@ 0x68
 8008fec:	2800      	cmp	r0, #0
 8008fee:	f43f aede 	beq.w	8008dae <_strtod_l+0x43e>
 8008ff2:	9805      	ldr	r0, [sp, #20]
 8008ff4:	2101      	movs	r1, #1
 8008ff6:	f7ff f929 	bl	800824c <__i2b>
 8008ffa:	4680      	mov	r8, r0
 8008ffc:	b948      	cbnz	r0, 8009012 <_strtod_l+0x6a2>
 8008ffe:	f04f 0800 	mov.w	r8, #0
 8009002:	e6d4      	b.n	8008dae <_strtod_l+0x43e>
 8009004:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009008:	fa02 f303 	lsl.w	r3, r2, r3
 800900c:	ea03 0a0a 	and.w	sl, r3, sl
 8009010:	e7b0      	b.n	8008f74 <_strtod_l+0x604>
 8009012:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009014:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009016:	2d00      	cmp	r5, #0
 8009018:	bfab      	itete	ge
 800901a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800901c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800901e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009020:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009022:	bfac      	ite	ge
 8009024:	18ef      	addge	r7, r5, r3
 8009026:	1b5e      	sublt	r6, r3, r5
 8009028:	9b08      	ldr	r3, [sp, #32]
 800902a:	1aed      	subs	r5, r5, r3
 800902c:	4415      	add	r5, r2
 800902e:	4b66      	ldr	r3, [pc, #408]	@ (80091c8 <_strtod_l+0x858>)
 8009030:	3d01      	subs	r5, #1
 8009032:	429d      	cmp	r5, r3
 8009034:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009038:	da50      	bge.n	80090dc <_strtod_l+0x76c>
 800903a:	1b5b      	subs	r3, r3, r5
 800903c:	2b1f      	cmp	r3, #31
 800903e:	eba2 0203 	sub.w	r2, r2, r3
 8009042:	f04f 0101 	mov.w	r1, #1
 8009046:	dc3d      	bgt.n	80090c4 <_strtod_l+0x754>
 8009048:	fa01 f303 	lsl.w	r3, r1, r3
 800904c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800904e:	2300      	movs	r3, #0
 8009050:	9310      	str	r3, [sp, #64]	@ 0x40
 8009052:	18bd      	adds	r5, r7, r2
 8009054:	9b08      	ldr	r3, [sp, #32]
 8009056:	42af      	cmp	r7, r5
 8009058:	4416      	add	r6, r2
 800905a:	441e      	add	r6, r3
 800905c:	463b      	mov	r3, r7
 800905e:	bfa8      	it	ge
 8009060:	462b      	movge	r3, r5
 8009062:	42b3      	cmp	r3, r6
 8009064:	bfa8      	it	ge
 8009066:	4633      	movge	r3, r6
 8009068:	2b00      	cmp	r3, #0
 800906a:	bfc2      	ittt	gt
 800906c:	1aed      	subgt	r5, r5, r3
 800906e:	1af6      	subgt	r6, r6, r3
 8009070:	1aff      	subgt	r7, r7, r3
 8009072:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009074:	2b00      	cmp	r3, #0
 8009076:	dd16      	ble.n	80090a6 <_strtod_l+0x736>
 8009078:	4641      	mov	r1, r8
 800907a:	9805      	ldr	r0, [sp, #20]
 800907c:	461a      	mov	r2, r3
 800907e:	f7ff f9a5 	bl	80083cc <__pow5mult>
 8009082:	4680      	mov	r8, r0
 8009084:	2800      	cmp	r0, #0
 8009086:	d0ba      	beq.n	8008ffe <_strtod_l+0x68e>
 8009088:	4601      	mov	r1, r0
 800908a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800908c:	9805      	ldr	r0, [sp, #20]
 800908e:	f7ff f8f3 	bl	8008278 <__multiply>
 8009092:	900e      	str	r0, [sp, #56]	@ 0x38
 8009094:	2800      	cmp	r0, #0
 8009096:	f43f ae8a 	beq.w	8008dae <_strtod_l+0x43e>
 800909a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800909c:	9805      	ldr	r0, [sp, #20]
 800909e:	f7fe ffd7 	bl	8008050 <_Bfree>
 80090a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80090a6:	2d00      	cmp	r5, #0
 80090a8:	dc1d      	bgt.n	80090e6 <_strtod_l+0x776>
 80090aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	dd23      	ble.n	80090f8 <_strtod_l+0x788>
 80090b0:	4649      	mov	r1, r9
 80090b2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80090b4:	9805      	ldr	r0, [sp, #20]
 80090b6:	f7ff f989 	bl	80083cc <__pow5mult>
 80090ba:	4681      	mov	r9, r0
 80090bc:	b9e0      	cbnz	r0, 80090f8 <_strtod_l+0x788>
 80090be:	f04f 0900 	mov.w	r9, #0
 80090c2:	e674      	b.n	8008dae <_strtod_l+0x43e>
 80090c4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80090c8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80090cc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80090d0:	35e2      	adds	r5, #226	@ 0xe2
 80090d2:	fa01 f305 	lsl.w	r3, r1, r5
 80090d6:	9310      	str	r3, [sp, #64]	@ 0x40
 80090d8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80090da:	e7ba      	b.n	8009052 <_strtod_l+0x6e2>
 80090dc:	2300      	movs	r3, #0
 80090de:	9310      	str	r3, [sp, #64]	@ 0x40
 80090e0:	2301      	movs	r3, #1
 80090e2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80090e4:	e7b5      	b.n	8009052 <_strtod_l+0x6e2>
 80090e6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80090e8:	9805      	ldr	r0, [sp, #20]
 80090ea:	462a      	mov	r2, r5
 80090ec:	f7ff f9c8 	bl	8008480 <__lshift>
 80090f0:	901a      	str	r0, [sp, #104]	@ 0x68
 80090f2:	2800      	cmp	r0, #0
 80090f4:	d1d9      	bne.n	80090aa <_strtod_l+0x73a>
 80090f6:	e65a      	b.n	8008dae <_strtod_l+0x43e>
 80090f8:	2e00      	cmp	r6, #0
 80090fa:	dd07      	ble.n	800910c <_strtod_l+0x79c>
 80090fc:	4649      	mov	r1, r9
 80090fe:	9805      	ldr	r0, [sp, #20]
 8009100:	4632      	mov	r2, r6
 8009102:	f7ff f9bd 	bl	8008480 <__lshift>
 8009106:	4681      	mov	r9, r0
 8009108:	2800      	cmp	r0, #0
 800910a:	d0d8      	beq.n	80090be <_strtod_l+0x74e>
 800910c:	2f00      	cmp	r7, #0
 800910e:	dd08      	ble.n	8009122 <_strtod_l+0x7b2>
 8009110:	4641      	mov	r1, r8
 8009112:	9805      	ldr	r0, [sp, #20]
 8009114:	463a      	mov	r2, r7
 8009116:	f7ff f9b3 	bl	8008480 <__lshift>
 800911a:	4680      	mov	r8, r0
 800911c:	2800      	cmp	r0, #0
 800911e:	f43f ae46 	beq.w	8008dae <_strtod_l+0x43e>
 8009122:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009124:	9805      	ldr	r0, [sp, #20]
 8009126:	464a      	mov	r2, r9
 8009128:	f7ff fa32 	bl	8008590 <__mdiff>
 800912c:	4604      	mov	r4, r0
 800912e:	2800      	cmp	r0, #0
 8009130:	f43f ae3d 	beq.w	8008dae <_strtod_l+0x43e>
 8009134:	68c3      	ldr	r3, [r0, #12]
 8009136:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009138:	2300      	movs	r3, #0
 800913a:	60c3      	str	r3, [r0, #12]
 800913c:	4641      	mov	r1, r8
 800913e:	f7ff fa0b 	bl	8008558 <__mcmp>
 8009142:	2800      	cmp	r0, #0
 8009144:	da46      	bge.n	80091d4 <_strtod_l+0x864>
 8009146:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009148:	ea53 030a 	orrs.w	r3, r3, sl
 800914c:	d16c      	bne.n	8009228 <_strtod_l+0x8b8>
 800914e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009152:	2b00      	cmp	r3, #0
 8009154:	d168      	bne.n	8009228 <_strtod_l+0x8b8>
 8009156:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800915a:	0d1b      	lsrs	r3, r3, #20
 800915c:	051b      	lsls	r3, r3, #20
 800915e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009162:	d961      	bls.n	8009228 <_strtod_l+0x8b8>
 8009164:	6963      	ldr	r3, [r4, #20]
 8009166:	b913      	cbnz	r3, 800916e <_strtod_l+0x7fe>
 8009168:	6923      	ldr	r3, [r4, #16]
 800916a:	2b01      	cmp	r3, #1
 800916c:	dd5c      	ble.n	8009228 <_strtod_l+0x8b8>
 800916e:	4621      	mov	r1, r4
 8009170:	2201      	movs	r2, #1
 8009172:	9805      	ldr	r0, [sp, #20]
 8009174:	f7ff f984 	bl	8008480 <__lshift>
 8009178:	4641      	mov	r1, r8
 800917a:	4604      	mov	r4, r0
 800917c:	f7ff f9ec 	bl	8008558 <__mcmp>
 8009180:	2800      	cmp	r0, #0
 8009182:	dd51      	ble.n	8009228 <_strtod_l+0x8b8>
 8009184:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009188:	9a08      	ldr	r2, [sp, #32]
 800918a:	0d1b      	lsrs	r3, r3, #20
 800918c:	051b      	lsls	r3, r3, #20
 800918e:	2a00      	cmp	r2, #0
 8009190:	d06b      	beq.n	800926a <_strtod_l+0x8fa>
 8009192:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009196:	d868      	bhi.n	800926a <_strtod_l+0x8fa>
 8009198:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800919c:	f67f ae9d 	bls.w	8008eda <_strtod_l+0x56a>
 80091a0:	4b0a      	ldr	r3, [pc, #40]	@ (80091cc <_strtod_l+0x85c>)
 80091a2:	4650      	mov	r0, sl
 80091a4:	4659      	mov	r1, fp
 80091a6:	2200      	movs	r2, #0
 80091a8:	f7f7 fa56 	bl	8000658 <__aeabi_dmul>
 80091ac:	4b08      	ldr	r3, [pc, #32]	@ (80091d0 <_strtod_l+0x860>)
 80091ae:	400b      	ands	r3, r1
 80091b0:	4682      	mov	sl, r0
 80091b2:	468b      	mov	fp, r1
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f47f ae05 	bne.w	8008dc4 <_strtod_l+0x454>
 80091ba:	9a05      	ldr	r2, [sp, #20]
 80091bc:	2322      	movs	r3, #34	@ 0x22
 80091be:	6013      	str	r3, [r2, #0]
 80091c0:	e600      	b.n	8008dc4 <_strtod_l+0x454>
 80091c2:	bf00      	nop
 80091c4:	0800aaf0 	.word	0x0800aaf0
 80091c8:	fffffc02 	.word	0xfffffc02
 80091cc:	39500000 	.word	0x39500000
 80091d0:	7ff00000 	.word	0x7ff00000
 80091d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80091d8:	d165      	bne.n	80092a6 <_strtod_l+0x936>
 80091da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80091dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091e0:	b35a      	cbz	r2, 800923a <_strtod_l+0x8ca>
 80091e2:	4a9f      	ldr	r2, [pc, #636]	@ (8009460 <_strtod_l+0xaf0>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d12b      	bne.n	8009240 <_strtod_l+0x8d0>
 80091e8:	9b08      	ldr	r3, [sp, #32]
 80091ea:	4651      	mov	r1, sl
 80091ec:	b303      	cbz	r3, 8009230 <_strtod_l+0x8c0>
 80091ee:	4b9d      	ldr	r3, [pc, #628]	@ (8009464 <_strtod_l+0xaf4>)
 80091f0:	465a      	mov	r2, fp
 80091f2:	4013      	ands	r3, r2
 80091f4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80091f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80091fc:	d81b      	bhi.n	8009236 <_strtod_l+0x8c6>
 80091fe:	0d1b      	lsrs	r3, r3, #20
 8009200:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009204:	fa02 f303 	lsl.w	r3, r2, r3
 8009208:	4299      	cmp	r1, r3
 800920a:	d119      	bne.n	8009240 <_strtod_l+0x8d0>
 800920c:	4b96      	ldr	r3, [pc, #600]	@ (8009468 <_strtod_l+0xaf8>)
 800920e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009210:	429a      	cmp	r2, r3
 8009212:	d102      	bne.n	800921a <_strtod_l+0x8aa>
 8009214:	3101      	adds	r1, #1
 8009216:	f43f adca 	beq.w	8008dae <_strtod_l+0x43e>
 800921a:	4b92      	ldr	r3, [pc, #584]	@ (8009464 <_strtod_l+0xaf4>)
 800921c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800921e:	401a      	ands	r2, r3
 8009220:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009224:	f04f 0a00 	mov.w	sl, #0
 8009228:	9b08      	ldr	r3, [sp, #32]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d1b8      	bne.n	80091a0 <_strtod_l+0x830>
 800922e:	e5c9      	b.n	8008dc4 <_strtod_l+0x454>
 8009230:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009234:	e7e8      	b.n	8009208 <_strtod_l+0x898>
 8009236:	4613      	mov	r3, r2
 8009238:	e7e6      	b.n	8009208 <_strtod_l+0x898>
 800923a:	ea53 030a 	orrs.w	r3, r3, sl
 800923e:	d0a1      	beq.n	8009184 <_strtod_l+0x814>
 8009240:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009242:	b1db      	cbz	r3, 800927c <_strtod_l+0x90c>
 8009244:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009246:	4213      	tst	r3, r2
 8009248:	d0ee      	beq.n	8009228 <_strtod_l+0x8b8>
 800924a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800924c:	9a08      	ldr	r2, [sp, #32]
 800924e:	4650      	mov	r0, sl
 8009250:	4659      	mov	r1, fp
 8009252:	b1bb      	cbz	r3, 8009284 <_strtod_l+0x914>
 8009254:	f7ff fb6e 	bl	8008934 <sulp>
 8009258:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800925c:	ec53 2b10 	vmov	r2, r3, d0
 8009260:	f7f7 f844 	bl	80002ec <__adddf3>
 8009264:	4682      	mov	sl, r0
 8009266:	468b      	mov	fp, r1
 8009268:	e7de      	b.n	8009228 <_strtod_l+0x8b8>
 800926a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800926e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009272:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009276:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800927a:	e7d5      	b.n	8009228 <_strtod_l+0x8b8>
 800927c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800927e:	ea13 0f0a 	tst.w	r3, sl
 8009282:	e7e1      	b.n	8009248 <_strtod_l+0x8d8>
 8009284:	f7ff fb56 	bl	8008934 <sulp>
 8009288:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800928c:	ec53 2b10 	vmov	r2, r3, d0
 8009290:	f7f7 f82a 	bl	80002e8 <__aeabi_dsub>
 8009294:	2200      	movs	r2, #0
 8009296:	2300      	movs	r3, #0
 8009298:	4682      	mov	sl, r0
 800929a:	468b      	mov	fp, r1
 800929c:	f7f7 fc44 	bl	8000b28 <__aeabi_dcmpeq>
 80092a0:	2800      	cmp	r0, #0
 80092a2:	d0c1      	beq.n	8009228 <_strtod_l+0x8b8>
 80092a4:	e619      	b.n	8008eda <_strtod_l+0x56a>
 80092a6:	4641      	mov	r1, r8
 80092a8:	4620      	mov	r0, r4
 80092aa:	f7ff facd 	bl	8008848 <__ratio>
 80092ae:	ec57 6b10 	vmov	r6, r7, d0
 80092b2:	2200      	movs	r2, #0
 80092b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80092b8:	4630      	mov	r0, r6
 80092ba:	4639      	mov	r1, r7
 80092bc:	f7f7 fc48 	bl	8000b50 <__aeabi_dcmple>
 80092c0:	2800      	cmp	r0, #0
 80092c2:	d06f      	beq.n	80093a4 <_strtod_l+0xa34>
 80092c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d17a      	bne.n	80093c0 <_strtod_l+0xa50>
 80092ca:	f1ba 0f00 	cmp.w	sl, #0
 80092ce:	d158      	bne.n	8009382 <_strtod_l+0xa12>
 80092d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d15a      	bne.n	8009390 <_strtod_l+0xa20>
 80092da:	4b64      	ldr	r3, [pc, #400]	@ (800946c <_strtod_l+0xafc>)
 80092dc:	2200      	movs	r2, #0
 80092de:	4630      	mov	r0, r6
 80092e0:	4639      	mov	r1, r7
 80092e2:	f7f7 fc2b 	bl	8000b3c <__aeabi_dcmplt>
 80092e6:	2800      	cmp	r0, #0
 80092e8:	d159      	bne.n	800939e <_strtod_l+0xa2e>
 80092ea:	4630      	mov	r0, r6
 80092ec:	4639      	mov	r1, r7
 80092ee:	4b60      	ldr	r3, [pc, #384]	@ (8009470 <_strtod_l+0xb00>)
 80092f0:	2200      	movs	r2, #0
 80092f2:	f7f7 f9b1 	bl	8000658 <__aeabi_dmul>
 80092f6:	4606      	mov	r6, r0
 80092f8:	460f      	mov	r7, r1
 80092fa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80092fe:	9606      	str	r6, [sp, #24]
 8009300:	9307      	str	r3, [sp, #28]
 8009302:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009306:	4d57      	ldr	r5, [pc, #348]	@ (8009464 <_strtod_l+0xaf4>)
 8009308:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800930c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800930e:	401d      	ands	r5, r3
 8009310:	4b58      	ldr	r3, [pc, #352]	@ (8009474 <_strtod_l+0xb04>)
 8009312:	429d      	cmp	r5, r3
 8009314:	f040 80b2 	bne.w	800947c <_strtod_l+0xb0c>
 8009318:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800931a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800931e:	ec4b ab10 	vmov	d0, sl, fp
 8009322:	f7ff f9c9 	bl	80086b8 <__ulp>
 8009326:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800932a:	ec51 0b10 	vmov	r0, r1, d0
 800932e:	f7f7 f993 	bl	8000658 <__aeabi_dmul>
 8009332:	4652      	mov	r2, sl
 8009334:	465b      	mov	r3, fp
 8009336:	f7f6 ffd9 	bl	80002ec <__adddf3>
 800933a:	460b      	mov	r3, r1
 800933c:	4949      	ldr	r1, [pc, #292]	@ (8009464 <_strtod_l+0xaf4>)
 800933e:	4a4e      	ldr	r2, [pc, #312]	@ (8009478 <_strtod_l+0xb08>)
 8009340:	4019      	ands	r1, r3
 8009342:	4291      	cmp	r1, r2
 8009344:	4682      	mov	sl, r0
 8009346:	d942      	bls.n	80093ce <_strtod_l+0xa5e>
 8009348:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800934a:	4b47      	ldr	r3, [pc, #284]	@ (8009468 <_strtod_l+0xaf8>)
 800934c:	429a      	cmp	r2, r3
 800934e:	d103      	bne.n	8009358 <_strtod_l+0x9e8>
 8009350:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009352:	3301      	adds	r3, #1
 8009354:	f43f ad2b 	beq.w	8008dae <_strtod_l+0x43e>
 8009358:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009468 <_strtod_l+0xaf8>
 800935c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009360:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009362:	9805      	ldr	r0, [sp, #20]
 8009364:	f7fe fe74 	bl	8008050 <_Bfree>
 8009368:	9805      	ldr	r0, [sp, #20]
 800936a:	4649      	mov	r1, r9
 800936c:	f7fe fe70 	bl	8008050 <_Bfree>
 8009370:	9805      	ldr	r0, [sp, #20]
 8009372:	4641      	mov	r1, r8
 8009374:	f7fe fe6c 	bl	8008050 <_Bfree>
 8009378:	9805      	ldr	r0, [sp, #20]
 800937a:	4621      	mov	r1, r4
 800937c:	f7fe fe68 	bl	8008050 <_Bfree>
 8009380:	e618      	b.n	8008fb4 <_strtod_l+0x644>
 8009382:	f1ba 0f01 	cmp.w	sl, #1
 8009386:	d103      	bne.n	8009390 <_strtod_l+0xa20>
 8009388:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800938a:	2b00      	cmp	r3, #0
 800938c:	f43f ada5 	beq.w	8008eda <_strtod_l+0x56a>
 8009390:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009440 <_strtod_l+0xad0>
 8009394:	4f35      	ldr	r7, [pc, #212]	@ (800946c <_strtod_l+0xafc>)
 8009396:	ed8d 7b06 	vstr	d7, [sp, #24]
 800939a:	2600      	movs	r6, #0
 800939c:	e7b1      	b.n	8009302 <_strtod_l+0x992>
 800939e:	4f34      	ldr	r7, [pc, #208]	@ (8009470 <_strtod_l+0xb00>)
 80093a0:	2600      	movs	r6, #0
 80093a2:	e7aa      	b.n	80092fa <_strtod_l+0x98a>
 80093a4:	4b32      	ldr	r3, [pc, #200]	@ (8009470 <_strtod_l+0xb00>)
 80093a6:	4630      	mov	r0, r6
 80093a8:	4639      	mov	r1, r7
 80093aa:	2200      	movs	r2, #0
 80093ac:	f7f7 f954 	bl	8000658 <__aeabi_dmul>
 80093b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093b2:	4606      	mov	r6, r0
 80093b4:	460f      	mov	r7, r1
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d09f      	beq.n	80092fa <_strtod_l+0x98a>
 80093ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80093be:	e7a0      	b.n	8009302 <_strtod_l+0x992>
 80093c0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009448 <_strtod_l+0xad8>
 80093c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80093c8:	ec57 6b17 	vmov	r6, r7, d7
 80093cc:	e799      	b.n	8009302 <_strtod_l+0x992>
 80093ce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80093d2:	9b08      	ldr	r3, [sp, #32]
 80093d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d1c1      	bne.n	8009360 <_strtod_l+0x9f0>
 80093dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80093e0:	0d1b      	lsrs	r3, r3, #20
 80093e2:	051b      	lsls	r3, r3, #20
 80093e4:	429d      	cmp	r5, r3
 80093e6:	d1bb      	bne.n	8009360 <_strtod_l+0x9f0>
 80093e8:	4630      	mov	r0, r6
 80093ea:	4639      	mov	r1, r7
 80093ec:	f7f7 fce4 	bl	8000db8 <__aeabi_d2lz>
 80093f0:	f7f7 f904 	bl	80005fc <__aeabi_l2d>
 80093f4:	4602      	mov	r2, r0
 80093f6:	460b      	mov	r3, r1
 80093f8:	4630      	mov	r0, r6
 80093fa:	4639      	mov	r1, r7
 80093fc:	f7f6 ff74 	bl	80002e8 <__aeabi_dsub>
 8009400:	460b      	mov	r3, r1
 8009402:	4602      	mov	r2, r0
 8009404:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009408:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800940c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800940e:	ea46 060a 	orr.w	r6, r6, sl
 8009412:	431e      	orrs	r6, r3
 8009414:	d06f      	beq.n	80094f6 <_strtod_l+0xb86>
 8009416:	a30e      	add	r3, pc, #56	@ (adr r3, 8009450 <_strtod_l+0xae0>)
 8009418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941c:	f7f7 fb8e 	bl	8000b3c <__aeabi_dcmplt>
 8009420:	2800      	cmp	r0, #0
 8009422:	f47f accf 	bne.w	8008dc4 <_strtod_l+0x454>
 8009426:	a30c      	add	r3, pc, #48	@ (adr r3, 8009458 <_strtod_l+0xae8>)
 8009428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009430:	f7f7 fba2 	bl	8000b78 <__aeabi_dcmpgt>
 8009434:	2800      	cmp	r0, #0
 8009436:	d093      	beq.n	8009360 <_strtod_l+0x9f0>
 8009438:	e4c4      	b.n	8008dc4 <_strtod_l+0x454>
 800943a:	bf00      	nop
 800943c:	f3af 8000 	nop.w
 8009440:	00000000 	.word	0x00000000
 8009444:	bff00000 	.word	0xbff00000
 8009448:	00000000 	.word	0x00000000
 800944c:	3ff00000 	.word	0x3ff00000
 8009450:	94a03595 	.word	0x94a03595
 8009454:	3fdfffff 	.word	0x3fdfffff
 8009458:	35afe535 	.word	0x35afe535
 800945c:	3fe00000 	.word	0x3fe00000
 8009460:	000fffff 	.word	0x000fffff
 8009464:	7ff00000 	.word	0x7ff00000
 8009468:	7fefffff 	.word	0x7fefffff
 800946c:	3ff00000 	.word	0x3ff00000
 8009470:	3fe00000 	.word	0x3fe00000
 8009474:	7fe00000 	.word	0x7fe00000
 8009478:	7c9fffff 	.word	0x7c9fffff
 800947c:	9b08      	ldr	r3, [sp, #32]
 800947e:	b323      	cbz	r3, 80094ca <_strtod_l+0xb5a>
 8009480:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009484:	d821      	bhi.n	80094ca <_strtod_l+0xb5a>
 8009486:	a328      	add	r3, pc, #160	@ (adr r3, 8009528 <_strtod_l+0xbb8>)
 8009488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948c:	4630      	mov	r0, r6
 800948e:	4639      	mov	r1, r7
 8009490:	f7f7 fb5e 	bl	8000b50 <__aeabi_dcmple>
 8009494:	b1a0      	cbz	r0, 80094c0 <_strtod_l+0xb50>
 8009496:	4639      	mov	r1, r7
 8009498:	4630      	mov	r0, r6
 800949a:	f7f7 fbb5 	bl	8000c08 <__aeabi_d2uiz>
 800949e:	2801      	cmp	r0, #1
 80094a0:	bf38      	it	cc
 80094a2:	2001      	movcc	r0, #1
 80094a4:	f7f7 f85e 	bl	8000564 <__aeabi_ui2d>
 80094a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094aa:	4606      	mov	r6, r0
 80094ac:	460f      	mov	r7, r1
 80094ae:	b9fb      	cbnz	r3, 80094f0 <_strtod_l+0xb80>
 80094b0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80094b4:	9014      	str	r0, [sp, #80]	@ 0x50
 80094b6:	9315      	str	r3, [sp, #84]	@ 0x54
 80094b8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80094bc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80094c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80094c2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80094c6:	1b5b      	subs	r3, r3, r5
 80094c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80094ca:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80094ce:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80094d2:	f7ff f8f1 	bl	80086b8 <__ulp>
 80094d6:	4650      	mov	r0, sl
 80094d8:	ec53 2b10 	vmov	r2, r3, d0
 80094dc:	4659      	mov	r1, fp
 80094de:	f7f7 f8bb 	bl	8000658 <__aeabi_dmul>
 80094e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80094e6:	f7f6 ff01 	bl	80002ec <__adddf3>
 80094ea:	4682      	mov	sl, r0
 80094ec:	468b      	mov	fp, r1
 80094ee:	e770      	b.n	80093d2 <_strtod_l+0xa62>
 80094f0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80094f4:	e7e0      	b.n	80094b8 <_strtod_l+0xb48>
 80094f6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009530 <_strtod_l+0xbc0>)
 80094f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fc:	f7f7 fb1e 	bl	8000b3c <__aeabi_dcmplt>
 8009500:	e798      	b.n	8009434 <_strtod_l+0xac4>
 8009502:	2300      	movs	r3, #0
 8009504:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009506:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009508:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800950a:	6013      	str	r3, [r2, #0]
 800950c:	f7ff ba6d 	b.w	80089ea <_strtod_l+0x7a>
 8009510:	2a65      	cmp	r2, #101	@ 0x65
 8009512:	f43f ab66 	beq.w	8008be2 <_strtod_l+0x272>
 8009516:	2a45      	cmp	r2, #69	@ 0x45
 8009518:	f43f ab63 	beq.w	8008be2 <_strtod_l+0x272>
 800951c:	2301      	movs	r3, #1
 800951e:	f7ff bb9e 	b.w	8008c5e <_strtod_l+0x2ee>
 8009522:	bf00      	nop
 8009524:	f3af 8000 	nop.w
 8009528:	ffc00000 	.word	0xffc00000
 800952c:	41dfffff 	.word	0x41dfffff
 8009530:	94a03595 	.word	0x94a03595
 8009534:	3fcfffff 	.word	0x3fcfffff

08009538 <_strtod_r>:
 8009538:	4b01      	ldr	r3, [pc, #4]	@ (8009540 <_strtod_r+0x8>)
 800953a:	f7ff ba19 	b.w	8008970 <_strtod_l>
 800953e:	bf00      	nop
 8009540:	2000006c 	.word	0x2000006c

08009544 <_strtol_l.constprop.0>:
 8009544:	2b24      	cmp	r3, #36	@ 0x24
 8009546:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800954a:	4686      	mov	lr, r0
 800954c:	4690      	mov	r8, r2
 800954e:	d801      	bhi.n	8009554 <_strtol_l.constprop.0+0x10>
 8009550:	2b01      	cmp	r3, #1
 8009552:	d106      	bne.n	8009562 <_strtol_l.constprop.0+0x1e>
 8009554:	f7fd fdba 	bl	80070cc <__errno>
 8009558:	2316      	movs	r3, #22
 800955a:	6003      	str	r3, [r0, #0]
 800955c:	2000      	movs	r0, #0
 800955e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009562:	4834      	ldr	r0, [pc, #208]	@ (8009634 <_strtol_l.constprop.0+0xf0>)
 8009564:	460d      	mov	r5, r1
 8009566:	462a      	mov	r2, r5
 8009568:	f815 4b01 	ldrb.w	r4, [r5], #1
 800956c:	5d06      	ldrb	r6, [r0, r4]
 800956e:	f016 0608 	ands.w	r6, r6, #8
 8009572:	d1f8      	bne.n	8009566 <_strtol_l.constprop.0+0x22>
 8009574:	2c2d      	cmp	r4, #45	@ 0x2d
 8009576:	d12d      	bne.n	80095d4 <_strtol_l.constprop.0+0x90>
 8009578:	782c      	ldrb	r4, [r5, #0]
 800957a:	2601      	movs	r6, #1
 800957c:	1c95      	adds	r5, r2, #2
 800957e:	f033 0210 	bics.w	r2, r3, #16
 8009582:	d109      	bne.n	8009598 <_strtol_l.constprop.0+0x54>
 8009584:	2c30      	cmp	r4, #48	@ 0x30
 8009586:	d12a      	bne.n	80095de <_strtol_l.constprop.0+0x9a>
 8009588:	782a      	ldrb	r2, [r5, #0]
 800958a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800958e:	2a58      	cmp	r2, #88	@ 0x58
 8009590:	d125      	bne.n	80095de <_strtol_l.constprop.0+0x9a>
 8009592:	786c      	ldrb	r4, [r5, #1]
 8009594:	2310      	movs	r3, #16
 8009596:	3502      	adds	r5, #2
 8009598:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800959c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80095a0:	2200      	movs	r2, #0
 80095a2:	fbbc f9f3 	udiv	r9, ip, r3
 80095a6:	4610      	mov	r0, r2
 80095a8:	fb03 ca19 	mls	sl, r3, r9, ip
 80095ac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80095b0:	2f09      	cmp	r7, #9
 80095b2:	d81b      	bhi.n	80095ec <_strtol_l.constprop.0+0xa8>
 80095b4:	463c      	mov	r4, r7
 80095b6:	42a3      	cmp	r3, r4
 80095b8:	dd27      	ble.n	800960a <_strtol_l.constprop.0+0xc6>
 80095ba:	1c57      	adds	r7, r2, #1
 80095bc:	d007      	beq.n	80095ce <_strtol_l.constprop.0+0x8a>
 80095be:	4581      	cmp	r9, r0
 80095c0:	d320      	bcc.n	8009604 <_strtol_l.constprop.0+0xc0>
 80095c2:	d101      	bne.n	80095c8 <_strtol_l.constprop.0+0x84>
 80095c4:	45a2      	cmp	sl, r4
 80095c6:	db1d      	blt.n	8009604 <_strtol_l.constprop.0+0xc0>
 80095c8:	fb00 4003 	mla	r0, r0, r3, r4
 80095cc:	2201      	movs	r2, #1
 80095ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095d2:	e7eb      	b.n	80095ac <_strtol_l.constprop.0+0x68>
 80095d4:	2c2b      	cmp	r4, #43	@ 0x2b
 80095d6:	bf04      	itt	eq
 80095d8:	782c      	ldrbeq	r4, [r5, #0]
 80095da:	1c95      	addeq	r5, r2, #2
 80095dc:	e7cf      	b.n	800957e <_strtol_l.constprop.0+0x3a>
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d1da      	bne.n	8009598 <_strtol_l.constprop.0+0x54>
 80095e2:	2c30      	cmp	r4, #48	@ 0x30
 80095e4:	bf0c      	ite	eq
 80095e6:	2308      	moveq	r3, #8
 80095e8:	230a      	movne	r3, #10
 80095ea:	e7d5      	b.n	8009598 <_strtol_l.constprop.0+0x54>
 80095ec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80095f0:	2f19      	cmp	r7, #25
 80095f2:	d801      	bhi.n	80095f8 <_strtol_l.constprop.0+0xb4>
 80095f4:	3c37      	subs	r4, #55	@ 0x37
 80095f6:	e7de      	b.n	80095b6 <_strtol_l.constprop.0+0x72>
 80095f8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80095fc:	2f19      	cmp	r7, #25
 80095fe:	d804      	bhi.n	800960a <_strtol_l.constprop.0+0xc6>
 8009600:	3c57      	subs	r4, #87	@ 0x57
 8009602:	e7d8      	b.n	80095b6 <_strtol_l.constprop.0+0x72>
 8009604:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009608:	e7e1      	b.n	80095ce <_strtol_l.constprop.0+0x8a>
 800960a:	1c53      	adds	r3, r2, #1
 800960c:	d108      	bne.n	8009620 <_strtol_l.constprop.0+0xdc>
 800960e:	2322      	movs	r3, #34	@ 0x22
 8009610:	f8ce 3000 	str.w	r3, [lr]
 8009614:	4660      	mov	r0, ip
 8009616:	f1b8 0f00 	cmp.w	r8, #0
 800961a:	d0a0      	beq.n	800955e <_strtol_l.constprop.0+0x1a>
 800961c:	1e69      	subs	r1, r5, #1
 800961e:	e006      	b.n	800962e <_strtol_l.constprop.0+0xea>
 8009620:	b106      	cbz	r6, 8009624 <_strtol_l.constprop.0+0xe0>
 8009622:	4240      	negs	r0, r0
 8009624:	f1b8 0f00 	cmp.w	r8, #0
 8009628:	d099      	beq.n	800955e <_strtol_l.constprop.0+0x1a>
 800962a:	2a00      	cmp	r2, #0
 800962c:	d1f6      	bne.n	800961c <_strtol_l.constprop.0+0xd8>
 800962e:	f8c8 1000 	str.w	r1, [r8]
 8009632:	e794      	b.n	800955e <_strtol_l.constprop.0+0x1a>
 8009634:	0800ab19 	.word	0x0800ab19

08009638 <_strtol_r>:
 8009638:	f7ff bf84 	b.w	8009544 <_strtol_l.constprop.0>

0800963c <__ssputs_r>:
 800963c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009640:	688e      	ldr	r6, [r1, #8]
 8009642:	461f      	mov	r7, r3
 8009644:	42be      	cmp	r6, r7
 8009646:	680b      	ldr	r3, [r1, #0]
 8009648:	4682      	mov	sl, r0
 800964a:	460c      	mov	r4, r1
 800964c:	4690      	mov	r8, r2
 800964e:	d82d      	bhi.n	80096ac <__ssputs_r+0x70>
 8009650:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009654:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009658:	d026      	beq.n	80096a8 <__ssputs_r+0x6c>
 800965a:	6965      	ldr	r5, [r4, #20]
 800965c:	6909      	ldr	r1, [r1, #16]
 800965e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009662:	eba3 0901 	sub.w	r9, r3, r1
 8009666:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800966a:	1c7b      	adds	r3, r7, #1
 800966c:	444b      	add	r3, r9
 800966e:	106d      	asrs	r5, r5, #1
 8009670:	429d      	cmp	r5, r3
 8009672:	bf38      	it	cc
 8009674:	461d      	movcc	r5, r3
 8009676:	0553      	lsls	r3, r2, #21
 8009678:	d527      	bpl.n	80096ca <__ssputs_r+0x8e>
 800967a:	4629      	mov	r1, r5
 800967c:	f7fe fc1c 	bl	8007eb8 <_malloc_r>
 8009680:	4606      	mov	r6, r0
 8009682:	b360      	cbz	r0, 80096de <__ssputs_r+0xa2>
 8009684:	6921      	ldr	r1, [r4, #16]
 8009686:	464a      	mov	r2, r9
 8009688:	f000 fbcc 	bl	8009e24 <memcpy>
 800968c:	89a3      	ldrh	r3, [r4, #12]
 800968e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009696:	81a3      	strh	r3, [r4, #12]
 8009698:	6126      	str	r6, [r4, #16]
 800969a:	6165      	str	r5, [r4, #20]
 800969c:	444e      	add	r6, r9
 800969e:	eba5 0509 	sub.w	r5, r5, r9
 80096a2:	6026      	str	r6, [r4, #0]
 80096a4:	60a5      	str	r5, [r4, #8]
 80096a6:	463e      	mov	r6, r7
 80096a8:	42be      	cmp	r6, r7
 80096aa:	d900      	bls.n	80096ae <__ssputs_r+0x72>
 80096ac:	463e      	mov	r6, r7
 80096ae:	6820      	ldr	r0, [r4, #0]
 80096b0:	4632      	mov	r2, r6
 80096b2:	4641      	mov	r1, r8
 80096b4:	f000 fb6a 	bl	8009d8c <memmove>
 80096b8:	68a3      	ldr	r3, [r4, #8]
 80096ba:	1b9b      	subs	r3, r3, r6
 80096bc:	60a3      	str	r3, [r4, #8]
 80096be:	6823      	ldr	r3, [r4, #0]
 80096c0:	4433      	add	r3, r6
 80096c2:	6023      	str	r3, [r4, #0]
 80096c4:	2000      	movs	r0, #0
 80096c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ca:	462a      	mov	r2, r5
 80096cc:	f000 ff3d 	bl	800a54a <_realloc_r>
 80096d0:	4606      	mov	r6, r0
 80096d2:	2800      	cmp	r0, #0
 80096d4:	d1e0      	bne.n	8009698 <__ssputs_r+0x5c>
 80096d6:	6921      	ldr	r1, [r4, #16]
 80096d8:	4650      	mov	r0, sl
 80096da:	f7fe fb79 	bl	8007dd0 <_free_r>
 80096de:	230c      	movs	r3, #12
 80096e0:	f8ca 3000 	str.w	r3, [sl]
 80096e4:	89a3      	ldrh	r3, [r4, #12]
 80096e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096ea:	81a3      	strh	r3, [r4, #12]
 80096ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80096f0:	e7e9      	b.n	80096c6 <__ssputs_r+0x8a>
	...

080096f4 <_svfiprintf_r>:
 80096f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f8:	4698      	mov	r8, r3
 80096fa:	898b      	ldrh	r3, [r1, #12]
 80096fc:	061b      	lsls	r3, r3, #24
 80096fe:	b09d      	sub	sp, #116	@ 0x74
 8009700:	4607      	mov	r7, r0
 8009702:	460d      	mov	r5, r1
 8009704:	4614      	mov	r4, r2
 8009706:	d510      	bpl.n	800972a <_svfiprintf_r+0x36>
 8009708:	690b      	ldr	r3, [r1, #16]
 800970a:	b973      	cbnz	r3, 800972a <_svfiprintf_r+0x36>
 800970c:	2140      	movs	r1, #64	@ 0x40
 800970e:	f7fe fbd3 	bl	8007eb8 <_malloc_r>
 8009712:	6028      	str	r0, [r5, #0]
 8009714:	6128      	str	r0, [r5, #16]
 8009716:	b930      	cbnz	r0, 8009726 <_svfiprintf_r+0x32>
 8009718:	230c      	movs	r3, #12
 800971a:	603b      	str	r3, [r7, #0]
 800971c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009720:	b01d      	add	sp, #116	@ 0x74
 8009722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009726:	2340      	movs	r3, #64	@ 0x40
 8009728:	616b      	str	r3, [r5, #20]
 800972a:	2300      	movs	r3, #0
 800972c:	9309      	str	r3, [sp, #36]	@ 0x24
 800972e:	2320      	movs	r3, #32
 8009730:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009734:	f8cd 800c 	str.w	r8, [sp, #12]
 8009738:	2330      	movs	r3, #48	@ 0x30
 800973a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80098d8 <_svfiprintf_r+0x1e4>
 800973e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009742:	f04f 0901 	mov.w	r9, #1
 8009746:	4623      	mov	r3, r4
 8009748:	469a      	mov	sl, r3
 800974a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800974e:	b10a      	cbz	r2, 8009754 <_svfiprintf_r+0x60>
 8009750:	2a25      	cmp	r2, #37	@ 0x25
 8009752:	d1f9      	bne.n	8009748 <_svfiprintf_r+0x54>
 8009754:	ebba 0b04 	subs.w	fp, sl, r4
 8009758:	d00b      	beq.n	8009772 <_svfiprintf_r+0x7e>
 800975a:	465b      	mov	r3, fp
 800975c:	4622      	mov	r2, r4
 800975e:	4629      	mov	r1, r5
 8009760:	4638      	mov	r0, r7
 8009762:	f7ff ff6b 	bl	800963c <__ssputs_r>
 8009766:	3001      	adds	r0, #1
 8009768:	f000 80a7 	beq.w	80098ba <_svfiprintf_r+0x1c6>
 800976c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800976e:	445a      	add	r2, fp
 8009770:	9209      	str	r2, [sp, #36]	@ 0x24
 8009772:	f89a 3000 	ldrb.w	r3, [sl]
 8009776:	2b00      	cmp	r3, #0
 8009778:	f000 809f 	beq.w	80098ba <_svfiprintf_r+0x1c6>
 800977c:	2300      	movs	r3, #0
 800977e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009782:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009786:	f10a 0a01 	add.w	sl, sl, #1
 800978a:	9304      	str	r3, [sp, #16]
 800978c:	9307      	str	r3, [sp, #28]
 800978e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009792:	931a      	str	r3, [sp, #104]	@ 0x68
 8009794:	4654      	mov	r4, sl
 8009796:	2205      	movs	r2, #5
 8009798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800979c:	484e      	ldr	r0, [pc, #312]	@ (80098d8 <_svfiprintf_r+0x1e4>)
 800979e:	f7f6 fd47 	bl	8000230 <memchr>
 80097a2:	9a04      	ldr	r2, [sp, #16]
 80097a4:	b9d8      	cbnz	r0, 80097de <_svfiprintf_r+0xea>
 80097a6:	06d0      	lsls	r0, r2, #27
 80097a8:	bf44      	itt	mi
 80097aa:	2320      	movmi	r3, #32
 80097ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097b0:	0711      	lsls	r1, r2, #28
 80097b2:	bf44      	itt	mi
 80097b4:	232b      	movmi	r3, #43	@ 0x2b
 80097b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097ba:	f89a 3000 	ldrb.w	r3, [sl]
 80097be:	2b2a      	cmp	r3, #42	@ 0x2a
 80097c0:	d015      	beq.n	80097ee <_svfiprintf_r+0xfa>
 80097c2:	9a07      	ldr	r2, [sp, #28]
 80097c4:	4654      	mov	r4, sl
 80097c6:	2000      	movs	r0, #0
 80097c8:	f04f 0c0a 	mov.w	ip, #10
 80097cc:	4621      	mov	r1, r4
 80097ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097d2:	3b30      	subs	r3, #48	@ 0x30
 80097d4:	2b09      	cmp	r3, #9
 80097d6:	d94b      	bls.n	8009870 <_svfiprintf_r+0x17c>
 80097d8:	b1b0      	cbz	r0, 8009808 <_svfiprintf_r+0x114>
 80097da:	9207      	str	r2, [sp, #28]
 80097dc:	e014      	b.n	8009808 <_svfiprintf_r+0x114>
 80097de:	eba0 0308 	sub.w	r3, r0, r8
 80097e2:	fa09 f303 	lsl.w	r3, r9, r3
 80097e6:	4313      	orrs	r3, r2
 80097e8:	9304      	str	r3, [sp, #16]
 80097ea:	46a2      	mov	sl, r4
 80097ec:	e7d2      	b.n	8009794 <_svfiprintf_r+0xa0>
 80097ee:	9b03      	ldr	r3, [sp, #12]
 80097f0:	1d19      	adds	r1, r3, #4
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	9103      	str	r1, [sp, #12]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	bfbb      	ittet	lt
 80097fa:	425b      	neglt	r3, r3
 80097fc:	f042 0202 	orrlt.w	r2, r2, #2
 8009800:	9307      	strge	r3, [sp, #28]
 8009802:	9307      	strlt	r3, [sp, #28]
 8009804:	bfb8      	it	lt
 8009806:	9204      	strlt	r2, [sp, #16]
 8009808:	7823      	ldrb	r3, [r4, #0]
 800980a:	2b2e      	cmp	r3, #46	@ 0x2e
 800980c:	d10a      	bne.n	8009824 <_svfiprintf_r+0x130>
 800980e:	7863      	ldrb	r3, [r4, #1]
 8009810:	2b2a      	cmp	r3, #42	@ 0x2a
 8009812:	d132      	bne.n	800987a <_svfiprintf_r+0x186>
 8009814:	9b03      	ldr	r3, [sp, #12]
 8009816:	1d1a      	adds	r2, r3, #4
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	9203      	str	r2, [sp, #12]
 800981c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009820:	3402      	adds	r4, #2
 8009822:	9305      	str	r3, [sp, #20]
 8009824:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80098e8 <_svfiprintf_r+0x1f4>
 8009828:	7821      	ldrb	r1, [r4, #0]
 800982a:	2203      	movs	r2, #3
 800982c:	4650      	mov	r0, sl
 800982e:	f7f6 fcff 	bl	8000230 <memchr>
 8009832:	b138      	cbz	r0, 8009844 <_svfiprintf_r+0x150>
 8009834:	9b04      	ldr	r3, [sp, #16]
 8009836:	eba0 000a 	sub.w	r0, r0, sl
 800983a:	2240      	movs	r2, #64	@ 0x40
 800983c:	4082      	lsls	r2, r0
 800983e:	4313      	orrs	r3, r2
 8009840:	3401      	adds	r4, #1
 8009842:	9304      	str	r3, [sp, #16]
 8009844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009848:	4824      	ldr	r0, [pc, #144]	@ (80098dc <_svfiprintf_r+0x1e8>)
 800984a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800984e:	2206      	movs	r2, #6
 8009850:	f7f6 fcee 	bl	8000230 <memchr>
 8009854:	2800      	cmp	r0, #0
 8009856:	d036      	beq.n	80098c6 <_svfiprintf_r+0x1d2>
 8009858:	4b21      	ldr	r3, [pc, #132]	@ (80098e0 <_svfiprintf_r+0x1ec>)
 800985a:	bb1b      	cbnz	r3, 80098a4 <_svfiprintf_r+0x1b0>
 800985c:	9b03      	ldr	r3, [sp, #12]
 800985e:	3307      	adds	r3, #7
 8009860:	f023 0307 	bic.w	r3, r3, #7
 8009864:	3308      	adds	r3, #8
 8009866:	9303      	str	r3, [sp, #12]
 8009868:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800986a:	4433      	add	r3, r6
 800986c:	9309      	str	r3, [sp, #36]	@ 0x24
 800986e:	e76a      	b.n	8009746 <_svfiprintf_r+0x52>
 8009870:	fb0c 3202 	mla	r2, ip, r2, r3
 8009874:	460c      	mov	r4, r1
 8009876:	2001      	movs	r0, #1
 8009878:	e7a8      	b.n	80097cc <_svfiprintf_r+0xd8>
 800987a:	2300      	movs	r3, #0
 800987c:	3401      	adds	r4, #1
 800987e:	9305      	str	r3, [sp, #20]
 8009880:	4619      	mov	r1, r3
 8009882:	f04f 0c0a 	mov.w	ip, #10
 8009886:	4620      	mov	r0, r4
 8009888:	f810 2b01 	ldrb.w	r2, [r0], #1
 800988c:	3a30      	subs	r2, #48	@ 0x30
 800988e:	2a09      	cmp	r2, #9
 8009890:	d903      	bls.n	800989a <_svfiprintf_r+0x1a6>
 8009892:	2b00      	cmp	r3, #0
 8009894:	d0c6      	beq.n	8009824 <_svfiprintf_r+0x130>
 8009896:	9105      	str	r1, [sp, #20]
 8009898:	e7c4      	b.n	8009824 <_svfiprintf_r+0x130>
 800989a:	fb0c 2101 	mla	r1, ip, r1, r2
 800989e:	4604      	mov	r4, r0
 80098a0:	2301      	movs	r3, #1
 80098a2:	e7f0      	b.n	8009886 <_svfiprintf_r+0x192>
 80098a4:	ab03      	add	r3, sp, #12
 80098a6:	9300      	str	r3, [sp, #0]
 80098a8:	462a      	mov	r2, r5
 80098aa:	4b0e      	ldr	r3, [pc, #56]	@ (80098e4 <_svfiprintf_r+0x1f0>)
 80098ac:	a904      	add	r1, sp, #16
 80098ae:	4638      	mov	r0, r7
 80098b0:	f7fc fbb2 	bl	8006018 <_printf_float>
 80098b4:	1c42      	adds	r2, r0, #1
 80098b6:	4606      	mov	r6, r0
 80098b8:	d1d6      	bne.n	8009868 <_svfiprintf_r+0x174>
 80098ba:	89ab      	ldrh	r3, [r5, #12]
 80098bc:	065b      	lsls	r3, r3, #25
 80098be:	f53f af2d 	bmi.w	800971c <_svfiprintf_r+0x28>
 80098c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098c4:	e72c      	b.n	8009720 <_svfiprintf_r+0x2c>
 80098c6:	ab03      	add	r3, sp, #12
 80098c8:	9300      	str	r3, [sp, #0]
 80098ca:	462a      	mov	r2, r5
 80098cc:	4b05      	ldr	r3, [pc, #20]	@ (80098e4 <_svfiprintf_r+0x1f0>)
 80098ce:	a904      	add	r1, sp, #16
 80098d0:	4638      	mov	r0, r7
 80098d2:	f7fc fe39 	bl	8006548 <_printf_i>
 80098d6:	e7ed      	b.n	80098b4 <_svfiprintf_r+0x1c0>
 80098d8:	0800ac19 	.word	0x0800ac19
 80098dc:	0800ac23 	.word	0x0800ac23
 80098e0:	08006019 	.word	0x08006019
 80098e4:	0800963d 	.word	0x0800963d
 80098e8:	0800ac1f 	.word	0x0800ac1f

080098ec <__sfputc_r>:
 80098ec:	6893      	ldr	r3, [r2, #8]
 80098ee:	3b01      	subs	r3, #1
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	b410      	push	{r4}
 80098f4:	6093      	str	r3, [r2, #8]
 80098f6:	da08      	bge.n	800990a <__sfputc_r+0x1e>
 80098f8:	6994      	ldr	r4, [r2, #24]
 80098fa:	42a3      	cmp	r3, r4
 80098fc:	db01      	blt.n	8009902 <__sfputc_r+0x16>
 80098fe:	290a      	cmp	r1, #10
 8009900:	d103      	bne.n	800990a <__sfputc_r+0x1e>
 8009902:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009906:	f7fd bae8 	b.w	8006eda <__swbuf_r>
 800990a:	6813      	ldr	r3, [r2, #0]
 800990c:	1c58      	adds	r0, r3, #1
 800990e:	6010      	str	r0, [r2, #0]
 8009910:	7019      	strb	r1, [r3, #0]
 8009912:	4608      	mov	r0, r1
 8009914:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009918:	4770      	bx	lr

0800991a <__sfputs_r>:
 800991a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800991c:	4606      	mov	r6, r0
 800991e:	460f      	mov	r7, r1
 8009920:	4614      	mov	r4, r2
 8009922:	18d5      	adds	r5, r2, r3
 8009924:	42ac      	cmp	r4, r5
 8009926:	d101      	bne.n	800992c <__sfputs_r+0x12>
 8009928:	2000      	movs	r0, #0
 800992a:	e007      	b.n	800993c <__sfputs_r+0x22>
 800992c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009930:	463a      	mov	r2, r7
 8009932:	4630      	mov	r0, r6
 8009934:	f7ff ffda 	bl	80098ec <__sfputc_r>
 8009938:	1c43      	adds	r3, r0, #1
 800993a:	d1f3      	bne.n	8009924 <__sfputs_r+0xa>
 800993c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009940 <_vfiprintf_r>:
 8009940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009944:	460d      	mov	r5, r1
 8009946:	b09d      	sub	sp, #116	@ 0x74
 8009948:	4614      	mov	r4, r2
 800994a:	4698      	mov	r8, r3
 800994c:	4606      	mov	r6, r0
 800994e:	b118      	cbz	r0, 8009958 <_vfiprintf_r+0x18>
 8009950:	6a03      	ldr	r3, [r0, #32]
 8009952:	b90b      	cbnz	r3, 8009958 <_vfiprintf_r+0x18>
 8009954:	f7fd f9b8 	bl	8006cc8 <__sinit>
 8009958:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800995a:	07d9      	lsls	r1, r3, #31
 800995c:	d405      	bmi.n	800996a <_vfiprintf_r+0x2a>
 800995e:	89ab      	ldrh	r3, [r5, #12]
 8009960:	059a      	lsls	r2, r3, #22
 8009962:	d402      	bmi.n	800996a <_vfiprintf_r+0x2a>
 8009964:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009966:	f7fd fbdc 	bl	8007122 <__retarget_lock_acquire_recursive>
 800996a:	89ab      	ldrh	r3, [r5, #12]
 800996c:	071b      	lsls	r3, r3, #28
 800996e:	d501      	bpl.n	8009974 <_vfiprintf_r+0x34>
 8009970:	692b      	ldr	r3, [r5, #16]
 8009972:	b99b      	cbnz	r3, 800999c <_vfiprintf_r+0x5c>
 8009974:	4629      	mov	r1, r5
 8009976:	4630      	mov	r0, r6
 8009978:	f7fd faee 	bl	8006f58 <__swsetup_r>
 800997c:	b170      	cbz	r0, 800999c <_vfiprintf_r+0x5c>
 800997e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009980:	07dc      	lsls	r4, r3, #31
 8009982:	d504      	bpl.n	800998e <_vfiprintf_r+0x4e>
 8009984:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009988:	b01d      	add	sp, #116	@ 0x74
 800998a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800998e:	89ab      	ldrh	r3, [r5, #12]
 8009990:	0598      	lsls	r0, r3, #22
 8009992:	d4f7      	bmi.n	8009984 <_vfiprintf_r+0x44>
 8009994:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009996:	f7fd fbc5 	bl	8007124 <__retarget_lock_release_recursive>
 800999a:	e7f3      	b.n	8009984 <_vfiprintf_r+0x44>
 800999c:	2300      	movs	r3, #0
 800999e:	9309      	str	r3, [sp, #36]	@ 0x24
 80099a0:	2320      	movs	r3, #32
 80099a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80099a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80099aa:	2330      	movs	r3, #48	@ 0x30
 80099ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009b5c <_vfiprintf_r+0x21c>
 80099b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80099b4:	f04f 0901 	mov.w	r9, #1
 80099b8:	4623      	mov	r3, r4
 80099ba:	469a      	mov	sl, r3
 80099bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099c0:	b10a      	cbz	r2, 80099c6 <_vfiprintf_r+0x86>
 80099c2:	2a25      	cmp	r2, #37	@ 0x25
 80099c4:	d1f9      	bne.n	80099ba <_vfiprintf_r+0x7a>
 80099c6:	ebba 0b04 	subs.w	fp, sl, r4
 80099ca:	d00b      	beq.n	80099e4 <_vfiprintf_r+0xa4>
 80099cc:	465b      	mov	r3, fp
 80099ce:	4622      	mov	r2, r4
 80099d0:	4629      	mov	r1, r5
 80099d2:	4630      	mov	r0, r6
 80099d4:	f7ff ffa1 	bl	800991a <__sfputs_r>
 80099d8:	3001      	adds	r0, #1
 80099da:	f000 80a7 	beq.w	8009b2c <_vfiprintf_r+0x1ec>
 80099de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099e0:	445a      	add	r2, fp
 80099e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80099e4:	f89a 3000 	ldrb.w	r3, [sl]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f000 809f 	beq.w	8009b2c <_vfiprintf_r+0x1ec>
 80099ee:	2300      	movs	r3, #0
 80099f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80099f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099f8:	f10a 0a01 	add.w	sl, sl, #1
 80099fc:	9304      	str	r3, [sp, #16]
 80099fe:	9307      	str	r3, [sp, #28]
 8009a00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a04:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a06:	4654      	mov	r4, sl
 8009a08:	2205      	movs	r2, #5
 8009a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a0e:	4853      	ldr	r0, [pc, #332]	@ (8009b5c <_vfiprintf_r+0x21c>)
 8009a10:	f7f6 fc0e 	bl	8000230 <memchr>
 8009a14:	9a04      	ldr	r2, [sp, #16]
 8009a16:	b9d8      	cbnz	r0, 8009a50 <_vfiprintf_r+0x110>
 8009a18:	06d1      	lsls	r1, r2, #27
 8009a1a:	bf44      	itt	mi
 8009a1c:	2320      	movmi	r3, #32
 8009a1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a22:	0713      	lsls	r3, r2, #28
 8009a24:	bf44      	itt	mi
 8009a26:	232b      	movmi	r3, #43	@ 0x2b
 8009a28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a2c:	f89a 3000 	ldrb.w	r3, [sl]
 8009a30:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a32:	d015      	beq.n	8009a60 <_vfiprintf_r+0x120>
 8009a34:	9a07      	ldr	r2, [sp, #28]
 8009a36:	4654      	mov	r4, sl
 8009a38:	2000      	movs	r0, #0
 8009a3a:	f04f 0c0a 	mov.w	ip, #10
 8009a3e:	4621      	mov	r1, r4
 8009a40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a44:	3b30      	subs	r3, #48	@ 0x30
 8009a46:	2b09      	cmp	r3, #9
 8009a48:	d94b      	bls.n	8009ae2 <_vfiprintf_r+0x1a2>
 8009a4a:	b1b0      	cbz	r0, 8009a7a <_vfiprintf_r+0x13a>
 8009a4c:	9207      	str	r2, [sp, #28]
 8009a4e:	e014      	b.n	8009a7a <_vfiprintf_r+0x13a>
 8009a50:	eba0 0308 	sub.w	r3, r0, r8
 8009a54:	fa09 f303 	lsl.w	r3, r9, r3
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	9304      	str	r3, [sp, #16]
 8009a5c:	46a2      	mov	sl, r4
 8009a5e:	e7d2      	b.n	8009a06 <_vfiprintf_r+0xc6>
 8009a60:	9b03      	ldr	r3, [sp, #12]
 8009a62:	1d19      	adds	r1, r3, #4
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	9103      	str	r1, [sp, #12]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	bfbb      	ittet	lt
 8009a6c:	425b      	neglt	r3, r3
 8009a6e:	f042 0202 	orrlt.w	r2, r2, #2
 8009a72:	9307      	strge	r3, [sp, #28]
 8009a74:	9307      	strlt	r3, [sp, #28]
 8009a76:	bfb8      	it	lt
 8009a78:	9204      	strlt	r2, [sp, #16]
 8009a7a:	7823      	ldrb	r3, [r4, #0]
 8009a7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a7e:	d10a      	bne.n	8009a96 <_vfiprintf_r+0x156>
 8009a80:	7863      	ldrb	r3, [r4, #1]
 8009a82:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a84:	d132      	bne.n	8009aec <_vfiprintf_r+0x1ac>
 8009a86:	9b03      	ldr	r3, [sp, #12]
 8009a88:	1d1a      	adds	r2, r3, #4
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	9203      	str	r2, [sp, #12]
 8009a8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a92:	3402      	adds	r4, #2
 8009a94:	9305      	str	r3, [sp, #20]
 8009a96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009b6c <_vfiprintf_r+0x22c>
 8009a9a:	7821      	ldrb	r1, [r4, #0]
 8009a9c:	2203      	movs	r2, #3
 8009a9e:	4650      	mov	r0, sl
 8009aa0:	f7f6 fbc6 	bl	8000230 <memchr>
 8009aa4:	b138      	cbz	r0, 8009ab6 <_vfiprintf_r+0x176>
 8009aa6:	9b04      	ldr	r3, [sp, #16]
 8009aa8:	eba0 000a 	sub.w	r0, r0, sl
 8009aac:	2240      	movs	r2, #64	@ 0x40
 8009aae:	4082      	lsls	r2, r0
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	3401      	adds	r4, #1
 8009ab4:	9304      	str	r3, [sp, #16]
 8009ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aba:	4829      	ldr	r0, [pc, #164]	@ (8009b60 <_vfiprintf_r+0x220>)
 8009abc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ac0:	2206      	movs	r2, #6
 8009ac2:	f7f6 fbb5 	bl	8000230 <memchr>
 8009ac6:	2800      	cmp	r0, #0
 8009ac8:	d03f      	beq.n	8009b4a <_vfiprintf_r+0x20a>
 8009aca:	4b26      	ldr	r3, [pc, #152]	@ (8009b64 <_vfiprintf_r+0x224>)
 8009acc:	bb1b      	cbnz	r3, 8009b16 <_vfiprintf_r+0x1d6>
 8009ace:	9b03      	ldr	r3, [sp, #12]
 8009ad0:	3307      	adds	r3, #7
 8009ad2:	f023 0307 	bic.w	r3, r3, #7
 8009ad6:	3308      	adds	r3, #8
 8009ad8:	9303      	str	r3, [sp, #12]
 8009ada:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009adc:	443b      	add	r3, r7
 8009ade:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ae0:	e76a      	b.n	80099b8 <_vfiprintf_r+0x78>
 8009ae2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ae6:	460c      	mov	r4, r1
 8009ae8:	2001      	movs	r0, #1
 8009aea:	e7a8      	b.n	8009a3e <_vfiprintf_r+0xfe>
 8009aec:	2300      	movs	r3, #0
 8009aee:	3401      	adds	r4, #1
 8009af0:	9305      	str	r3, [sp, #20]
 8009af2:	4619      	mov	r1, r3
 8009af4:	f04f 0c0a 	mov.w	ip, #10
 8009af8:	4620      	mov	r0, r4
 8009afa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009afe:	3a30      	subs	r2, #48	@ 0x30
 8009b00:	2a09      	cmp	r2, #9
 8009b02:	d903      	bls.n	8009b0c <_vfiprintf_r+0x1cc>
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d0c6      	beq.n	8009a96 <_vfiprintf_r+0x156>
 8009b08:	9105      	str	r1, [sp, #20]
 8009b0a:	e7c4      	b.n	8009a96 <_vfiprintf_r+0x156>
 8009b0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b10:	4604      	mov	r4, r0
 8009b12:	2301      	movs	r3, #1
 8009b14:	e7f0      	b.n	8009af8 <_vfiprintf_r+0x1b8>
 8009b16:	ab03      	add	r3, sp, #12
 8009b18:	9300      	str	r3, [sp, #0]
 8009b1a:	462a      	mov	r2, r5
 8009b1c:	4b12      	ldr	r3, [pc, #72]	@ (8009b68 <_vfiprintf_r+0x228>)
 8009b1e:	a904      	add	r1, sp, #16
 8009b20:	4630      	mov	r0, r6
 8009b22:	f7fc fa79 	bl	8006018 <_printf_float>
 8009b26:	4607      	mov	r7, r0
 8009b28:	1c78      	adds	r0, r7, #1
 8009b2a:	d1d6      	bne.n	8009ada <_vfiprintf_r+0x19a>
 8009b2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b2e:	07d9      	lsls	r1, r3, #31
 8009b30:	d405      	bmi.n	8009b3e <_vfiprintf_r+0x1fe>
 8009b32:	89ab      	ldrh	r3, [r5, #12]
 8009b34:	059a      	lsls	r2, r3, #22
 8009b36:	d402      	bmi.n	8009b3e <_vfiprintf_r+0x1fe>
 8009b38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b3a:	f7fd faf3 	bl	8007124 <__retarget_lock_release_recursive>
 8009b3e:	89ab      	ldrh	r3, [r5, #12]
 8009b40:	065b      	lsls	r3, r3, #25
 8009b42:	f53f af1f 	bmi.w	8009984 <_vfiprintf_r+0x44>
 8009b46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b48:	e71e      	b.n	8009988 <_vfiprintf_r+0x48>
 8009b4a:	ab03      	add	r3, sp, #12
 8009b4c:	9300      	str	r3, [sp, #0]
 8009b4e:	462a      	mov	r2, r5
 8009b50:	4b05      	ldr	r3, [pc, #20]	@ (8009b68 <_vfiprintf_r+0x228>)
 8009b52:	a904      	add	r1, sp, #16
 8009b54:	4630      	mov	r0, r6
 8009b56:	f7fc fcf7 	bl	8006548 <_printf_i>
 8009b5a:	e7e4      	b.n	8009b26 <_vfiprintf_r+0x1e6>
 8009b5c:	0800ac19 	.word	0x0800ac19
 8009b60:	0800ac23 	.word	0x0800ac23
 8009b64:	08006019 	.word	0x08006019
 8009b68:	0800991b 	.word	0x0800991b
 8009b6c:	0800ac1f 	.word	0x0800ac1f

08009b70 <__sflush_r>:
 8009b70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b78:	0716      	lsls	r6, r2, #28
 8009b7a:	4605      	mov	r5, r0
 8009b7c:	460c      	mov	r4, r1
 8009b7e:	d454      	bmi.n	8009c2a <__sflush_r+0xba>
 8009b80:	684b      	ldr	r3, [r1, #4]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	dc02      	bgt.n	8009b8c <__sflush_r+0x1c>
 8009b86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	dd48      	ble.n	8009c1e <__sflush_r+0xae>
 8009b8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009b8e:	2e00      	cmp	r6, #0
 8009b90:	d045      	beq.n	8009c1e <__sflush_r+0xae>
 8009b92:	2300      	movs	r3, #0
 8009b94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009b98:	682f      	ldr	r7, [r5, #0]
 8009b9a:	6a21      	ldr	r1, [r4, #32]
 8009b9c:	602b      	str	r3, [r5, #0]
 8009b9e:	d030      	beq.n	8009c02 <__sflush_r+0x92>
 8009ba0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009ba2:	89a3      	ldrh	r3, [r4, #12]
 8009ba4:	0759      	lsls	r1, r3, #29
 8009ba6:	d505      	bpl.n	8009bb4 <__sflush_r+0x44>
 8009ba8:	6863      	ldr	r3, [r4, #4]
 8009baa:	1ad2      	subs	r2, r2, r3
 8009bac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009bae:	b10b      	cbz	r3, 8009bb4 <__sflush_r+0x44>
 8009bb0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009bb2:	1ad2      	subs	r2, r2, r3
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009bb8:	6a21      	ldr	r1, [r4, #32]
 8009bba:	4628      	mov	r0, r5
 8009bbc:	47b0      	blx	r6
 8009bbe:	1c43      	adds	r3, r0, #1
 8009bc0:	89a3      	ldrh	r3, [r4, #12]
 8009bc2:	d106      	bne.n	8009bd2 <__sflush_r+0x62>
 8009bc4:	6829      	ldr	r1, [r5, #0]
 8009bc6:	291d      	cmp	r1, #29
 8009bc8:	d82b      	bhi.n	8009c22 <__sflush_r+0xb2>
 8009bca:	4a2a      	ldr	r2, [pc, #168]	@ (8009c74 <__sflush_r+0x104>)
 8009bcc:	410a      	asrs	r2, r1
 8009bce:	07d6      	lsls	r6, r2, #31
 8009bd0:	d427      	bmi.n	8009c22 <__sflush_r+0xb2>
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	6062      	str	r2, [r4, #4]
 8009bd6:	04d9      	lsls	r1, r3, #19
 8009bd8:	6922      	ldr	r2, [r4, #16]
 8009bda:	6022      	str	r2, [r4, #0]
 8009bdc:	d504      	bpl.n	8009be8 <__sflush_r+0x78>
 8009bde:	1c42      	adds	r2, r0, #1
 8009be0:	d101      	bne.n	8009be6 <__sflush_r+0x76>
 8009be2:	682b      	ldr	r3, [r5, #0]
 8009be4:	b903      	cbnz	r3, 8009be8 <__sflush_r+0x78>
 8009be6:	6560      	str	r0, [r4, #84]	@ 0x54
 8009be8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009bea:	602f      	str	r7, [r5, #0]
 8009bec:	b1b9      	cbz	r1, 8009c1e <__sflush_r+0xae>
 8009bee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009bf2:	4299      	cmp	r1, r3
 8009bf4:	d002      	beq.n	8009bfc <__sflush_r+0x8c>
 8009bf6:	4628      	mov	r0, r5
 8009bf8:	f7fe f8ea 	bl	8007dd0 <_free_r>
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c00:	e00d      	b.n	8009c1e <__sflush_r+0xae>
 8009c02:	2301      	movs	r3, #1
 8009c04:	4628      	mov	r0, r5
 8009c06:	47b0      	blx	r6
 8009c08:	4602      	mov	r2, r0
 8009c0a:	1c50      	adds	r0, r2, #1
 8009c0c:	d1c9      	bne.n	8009ba2 <__sflush_r+0x32>
 8009c0e:	682b      	ldr	r3, [r5, #0]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d0c6      	beq.n	8009ba2 <__sflush_r+0x32>
 8009c14:	2b1d      	cmp	r3, #29
 8009c16:	d001      	beq.n	8009c1c <__sflush_r+0xac>
 8009c18:	2b16      	cmp	r3, #22
 8009c1a:	d11e      	bne.n	8009c5a <__sflush_r+0xea>
 8009c1c:	602f      	str	r7, [r5, #0]
 8009c1e:	2000      	movs	r0, #0
 8009c20:	e022      	b.n	8009c68 <__sflush_r+0xf8>
 8009c22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c26:	b21b      	sxth	r3, r3
 8009c28:	e01b      	b.n	8009c62 <__sflush_r+0xf2>
 8009c2a:	690f      	ldr	r7, [r1, #16]
 8009c2c:	2f00      	cmp	r7, #0
 8009c2e:	d0f6      	beq.n	8009c1e <__sflush_r+0xae>
 8009c30:	0793      	lsls	r3, r2, #30
 8009c32:	680e      	ldr	r6, [r1, #0]
 8009c34:	bf08      	it	eq
 8009c36:	694b      	ldreq	r3, [r1, #20]
 8009c38:	600f      	str	r7, [r1, #0]
 8009c3a:	bf18      	it	ne
 8009c3c:	2300      	movne	r3, #0
 8009c3e:	eba6 0807 	sub.w	r8, r6, r7
 8009c42:	608b      	str	r3, [r1, #8]
 8009c44:	f1b8 0f00 	cmp.w	r8, #0
 8009c48:	dde9      	ble.n	8009c1e <__sflush_r+0xae>
 8009c4a:	6a21      	ldr	r1, [r4, #32]
 8009c4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009c4e:	4643      	mov	r3, r8
 8009c50:	463a      	mov	r2, r7
 8009c52:	4628      	mov	r0, r5
 8009c54:	47b0      	blx	r6
 8009c56:	2800      	cmp	r0, #0
 8009c58:	dc08      	bgt.n	8009c6c <__sflush_r+0xfc>
 8009c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c62:	81a3      	strh	r3, [r4, #12]
 8009c64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c6c:	4407      	add	r7, r0
 8009c6e:	eba8 0800 	sub.w	r8, r8, r0
 8009c72:	e7e7      	b.n	8009c44 <__sflush_r+0xd4>
 8009c74:	dfbffffe 	.word	0xdfbffffe

08009c78 <_fflush_r>:
 8009c78:	b538      	push	{r3, r4, r5, lr}
 8009c7a:	690b      	ldr	r3, [r1, #16]
 8009c7c:	4605      	mov	r5, r0
 8009c7e:	460c      	mov	r4, r1
 8009c80:	b913      	cbnz	r3, 8009c88 <_fflush_r+0x10>
 8009c82:	2500      	movs	r5, #0
 8009c84:	4628      	mov	r0, r5
 8009c86:	bd38      	pop	{r3, r4, r5, pc}
 8009c88:	b118      	cbz	r0, 8009c92 <_fflush_r+0x1a>
 8009c8a:	6a03      	ldr	r3, [r0, #32]
 8009c8c:	b90b      	cbnz	r3, 8009c92 <_fflush_r+0x1a>
 8009c8e:	f7fd f81b 	bl	8006cc8 <__sinit>
 8009c92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d0f3      	beq.n	8009c82 <_fflush_r+0xa>
 8009c9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009c9c:	07d0      	lsls	r0, r2, #31
 8009c9e:	d404      	bmi.n	8009caa <_fflush_r+0x32>
 8009ca0:	0599      	lsls	r1, r3, #22
 8009ca2:	d402      	bmi.n	8009caa <_fflush_r+0x32>
 8009ca4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ca6:	f7fd fa3c 	bl	8007122 <__retarget_lock_acquire_recursive>
 8009caa:	4628      	mov	r0, r5
 8009cac:	4621      	mov	r1, r4
 8009cae:	f7ff ff5f 	bl	8009b70 <__sflush_r>
 8009cb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009cb4:	07da      	lsls	r2, r3, #31
 8009cb6:	4605      	mov	r5, r0
 8009cb8:	d4e4      	bmi.n	8009c84 <_fflush_r+0xc>
 8009cba:	89a3      	ldrh	r3, [r4, #12]
 8009cbc:	059b      	lsls	r3, r3, #22
 8009cbe:	d4e1      	bmi.n	8009c84 <_fflush_r+0xc>
 8009cc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cc2:	f7fd fa2f 	bl	8007124 <__retarget_lock_release_recursive>
 8009cc6:	e7dd      	b.n	8009c84 <_fflush_r+0xc>

08009cc8 <__swhatbuf_r>:
 8009cc8:	b570      	push	{r4, r5, r6, lr}
 8009cca:	460c      	mov	r4, r1
 8009ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cd0:	2900      	cmp	r1, #0
 8009cd2:	b096      	sub	sp, #88	@ 0x58
 8009cd4:	4615      	mov	r5, r2
 8009cd6:	461e      	mov	r6, r3
 8009cd8:	da0d      	bge.n	8009cf6 <__swhatbuf_r+0x2e>
 8009cda:	89a3      	ldrh	r3, [r4, #12]
 8009cdc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009ce0:	f04f 0100 	mov.w	r1, #0
 8009ce4:	bf14      	ite	ne
 8009ce6:	2340      	movne	r3, #64	@ 0x40
 8009ce8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009cec:	2000      	movs	r0, #0
 8009cee:	6031      	str	r1, [r6, #0]
 8009cf0:	602b      	str	r3, [r5, #0]
 8009cf2:	b016      	add	sp, #88	@ 0x58
 8009cf4:	bd70      	pop	{r4, r5, r6, pc}
 8009cf6:	466a      	mov	r2, sp
 8009cf8:	f000 f862 	bl	8009dc0 <_fstat_r>
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	dbec      	blt.n	8009cda <__swhatbuf_r+0x12>
 8009d00:	9901      	ldr	r1, [sp, #4]
 8009d02:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009d06:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009d0a:	4259      	negs	r1, r3
 8009d0c:	4159      	adcs	r1, r3
 8009d0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d12:	e7eb      	b.n	8009cec <__swhatbuf_r+0x24>

08009d14 <__smakebuf_r>:
 8009d14:	898b      	ldrh	r3, [r1, #12]
 8009d16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d18:	079d      	lsls	r5, r3, #30
 8009d1a:	4606      	mov	r6, r0
 8009d1c:	460c      	mov	r4, r1
 8009d1e:	d507      	bpl.n	8009d30 <__smakebuf_r+0x1c>
 8009d20:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009d24:	6023      	str	r3, [r4, #0]
 8009d26:	6123      	str	r3, [r4, #16]
 8009d28:	2301      	movs	r3, #1
 8009d2a:	6163      	str	r3, [r4, #20]
 8009d2c:	b003      	add	sp, #12
 8009d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d30:	ab01      	add	r3, sp, #4
 8009d32:	466a      	mov	r2, sp
 8009d34:	f7ff ffc8 	bl	8009cc8 <__swhatbuf_r>
 8009d38:	9f00      	ldr	r7, [sp, #0]
 8009d3a:	4605      	mov	r5, r0
 8009d3c:	4639      	mov	r1, r7
 8009d3e:	4630      	mov	r0, r6
 8009d40:	f7fe f8ba 	bl	8007eb8 <_malloc_r>
 8009d44:	b948      	cbnz	r0, 8009d5a <__smakebuf_r+0x46>
 8009d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d4a:	059a      	lsls	r2, r3, #22
 8009d4c:	d4ee      	bmi.n	8009d2c <__smakebuf_r+0x18>
 8009d4e:	f023 0303 	bic.w	r3, r3, #3
 8009d52:	f043 0302 	orr.w	r3, r3, #2
 8009d56:	81a3      	strh	r3, [r4, #12]
 8009d58:	e7e2      	b.n	8009d20 <__smakebuf_r+0xc>
 8009d5a:	89a3      	ldrh	r3, [r4, #12]
 8009d5c:	6020      	str	r0, [r4, #0]
 8009d5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d62:	81a3      	strh	r3, [r4, #12]
 8009d64:	9b01      	ldr	r3, [sp, #4]
 8009d66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009d6a:	b15b      	cbz	r3, 8009d84 <__smakebuf_r+0x70>
 8009d6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d70:	4630      	mov	r0, r6
 8009d72:	f000 f837 	bl	8009de4 <_isatty_r>
 8009d76:	b128      	cbz	r0, 8009d84 <__smakebuf_r+0x70>
 8009d78:	89a3      	ldrh	r3, [r4, #12]
 8009d7a:	f023 0303 	bic.w	r3, r3, #3
 8009d7e:	f043 0301 	orr.w	r3, r3, #1
 8009d82:	81a3      	strh	r3, [r4, #12]
 8009d84:	89a3      	ldrh	r3, [r4, #12]
 8009d86:	431d      	orrs	r5, r3
 8009d88:	81a5      	strh	r5, [r4, #12]
 8009d8a:	e7cf      	b.n	8009d2c <__smakebuf_r+0x18>

08009d8c <memmove>:
 8009d8c:	4288      	cmp	r0, r1
 8009d8e:	b510      	push	{r4, lr}
 8009d90:	eb01 0402 	add.w	r4, r1, r2
 8009d94:	d902      	bls.n	8009d9c <memmove+0x10>
 8009d96:	4284      	cmp	r4, r0
 8009d98:	4623      	mov	r3, r4
 8009d9a:	d807      	bhi.n	8009dac <memmove+0x20>
 8009d9c:	1e43      	subs	r3, r0, #1
 8009d9e:	42a1      	cmp	r1, r4
 8009da0:	d008      	beq.n	8009db4 <memmove+0x28>
 8009da2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009da6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009daa:	e7f8      	b.n	8009d9e <memmove+0x12>
 8009dac:	4402      	add	r2, r0
 8009dae:	4601      	mov	r1, r0
 8009db0:	428a      	cmp	r2, r1
 8009db2:	d100      	bne.n	8009db6 <memmove+0x2a>
 8009db4:	bd10      	pop	{r4, pc}
 8009db6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009dba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009dbe:	e7f7      	b.n	8009db0 <memmove+0x24>

08009dc0 <_fstat_r>:
 8009dc0:	b538      	push	{r3, r4, r5, lr}
 8009dc2:	4d07      	ldr	r5, [pc, #28]	@ (8009de0 <_fstat_r+0x20>)
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	4604      	mov	r4, r0
 8009dc8:	4608      	mov	r0, r1
 8009dca:	4611      	mov	r1, r2
 8009dcc:	602b      	str	r3, [r5, #0]
 8009dce:	f7f8 fbb9 	bl	8002544 <_fstat>
 8009dd2:	1c43      	adds	r3, r0, #1
 8009dd4:	d102      	bne.n	8009ddc <_fstat_r+0x1c>
 8009dd6:	682b      	ldr	r3, [r5, #0]
 8009dd8:	b103      	cbz	r3, 8009ddc <_fstat_r+0x1c>
 8009dda:	6023      	str	r3, [r4, #0]
 8009ddc:	bd38      	pop	{r3, r4, r5, pc}
 8009dde:	bf00      	nop
 8009de0:	2000049c 	.word	0x2000049c

08009de4 <_isatty_r>:
 8009de4:	b538      	push	{r3, r4, r5, lr}
 8009de6:	4d06      	ldr	r5, [pc, #24]	@ (8009e00 <_isatty_r+0x1c>)
 8009de8:	2300      	movs	r3, #0
 8009dea:	4604      	mov	r4, r0
 8009dec:	4608      	mov	r0, r1
 8009dee:	602b      	str	r3, [r5, #0]
 8009df0:	f7f8 fbb8 	bl	8002564 <_isatty>
 8009df4:	1c43      	adds	r3, r0, #1
 8009df6:	d102      	bne.n	8009dfe <_isatty_r+0x1a>
 8009df8:	682b      	ldr	r3, [r5, #0]
 8009dfa:	b103      	cbz	r3, 8009dfe <_isatty_r+0x1a>
 8009dfc:	6023      	str	r3, [r4, #0]
 8009dfe:	bd38      	pop	{r3, r4, r5, pc}
 8009e00:	2000049c 	.word	0x2000049c

08009e04 <_sbrk_r>:
 8009e04:	b538      	push	{r3, r4, r5, lr}
 8009e06:	4d06      	ldr	r5, [pc, #24]	@ (8009e20 <_sbrk_r+0x1c>)
 8009e08:	2300      	movs	r3, #0
 8009e0a:	4604      	mov	r4, r0
 8009e0c:	4608      	mov	r0, r1
 8009e0e:	602b      	str	r3, [r5, #0]
 8009e10:	f7f8 fbc0 	bl	8002594 <_sbrk>
 8009e14:	1c43      	adds	r3, r0, #1
 8009e16:	d102      	bne.n	8009e1e <_sbrk_r+0x1a>
 8009e18:	682b      	ldr	r3, [r5, #0]
 8009e1a:	b103      	cbz	r3, 8009e1e <_sbrk_r+0x1a>
 8009e1c:	6023      	str	r3, [r4, #0]
 8009e1e:	bd38      	pop	{r3, r4, r5, pc}
 8009e20:	2000049c 	.word	0x2000049c

08009e24 <memcpy>:
 8009e24:	440a      	add	r2, r1
 8009e26:	4291      	cmp	r1, r2
 8009e28:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009e2c:	d100      	bne.n	8009e30 <memcpy+0xc>
 8009e2e:	4770      	bx	lr
 8009e30:	b510      	push	{r4, lr}
 8009e32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e3a:	4291      	cmp	r1, r2
 8009e3c:	d1f9      	bne.n	8009e32 <memcpy+0xe>
 8009e3e:	bd10      	pop	{r4, pc}

08009e40 <nan>:
 8009e40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009e48 <nan+0x8>
 8009e44:	4770      	bx	lr
 8009e46:	bf00      	nop
 8009e48:	00000000 	.word	0x00000000
 8009e4c:	7ff80000 	.word	0x7ff80000

08009e50 <__assert_func>:
 8009e50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e52:	4614      	mov	r4, r2
 8009e54:	461a      	mov	r2, r3
 8009e56:	4b09      	ldr	r3, [pc, #36]	@ (8009e7c <__assert_func+0x2c>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4605      	mov	r5, r0
 8009e5c:	68d8      	ldr	r0, [r3, #12]
 8009e5e:	b954      	cbnz	r4, 8009e76 <__assert_func+0x26>
 8009e60:	4b07      	ldr	r3, [pc, #28]	@ (8009e80 <__assert_func+0x30>)
 8009e62:	461c      	mov	r4, r3
 8009e64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e68:	9100      	str	r1, [sp, #0]
 8009e6a:	462b      	mov	r3, r5
 8009e6c:	4905      	ldr	r1, [pc, #20]	@ (8009e84 <__assert_func+0x34>)
 8009e6e:	f000 fba7 	bl	800a5c0 <fiprintf>
 8009e72:	f000 fbb7 	bl	800a5e4 <abort>
 8009e76:	4b04      	ldr	r3, [pc, #16]	@ (8009e88 <__assert_func+0x38>)
 8009e78:	e7f4      	b.n	8009e64 <__assert_func+0x14>
 8009e7a:	bf00      	nop
 8009e7c:	2000001c 	.word	0x2000001c
 8009e80:	0800ac6d 	.word	0x0800ac6d
 8009e84:	0800ac3f 	.word	0x0800ac3f
 8009e88:	0800ac32 	.word	0x0800ac32

08009e8c <_calloc_r>:
 8009e8c:	b570      	push	{r4, r5, r6, lr}
 8009e8e:	fba1 5402 	umull	r5, r4, r1, r2
 8009e92:	b93c      	cbnz	r4, 8009ea4 <_calloc_r+0x18>
 8009e94:	4629      	mov	r1, r5
 8009e96:	f7fe f80f 	bl	8007eb8 <_malloc_r>
 8009e9a:	4606      	mov	r6, r0
 8009e9c:	b928      	cbnz	r0, 8009eaa <_calloc_r+0x1e>
 8009e9e:	2600      	movs	r6, #0
 8009ea0:	4630      	mov	r0, r6
 8009ea2:	bd70      	pop	{r4, r5, r6, pc}
 8009ea4:	220c      	movs	r2, #12
 8009ea6:	6002      	str	r2, [r0, #0]
 8009ea8:	e7f9      	b.n	8009e9e <_calloc_r+0x12>
 8009eaa:	462a      	mov	r2, r5
 8009eac:	4621      	mov	r1, r4
 8009eae:	f7fd f8a9 	bl	8007004 <memset>
 8009eb2:	e7f5      	b.n	8009ea0 <_calloc_r+0x14>

08009eb4 <rshift>:
 8009eb4:	6903      	ldr	r3, [r0, #16]
 8009eb6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009eba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ebe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009ec2:	f100 0414 	add.w	r4, r0, #20
 8009ec6:	dd45      	ble.n	8009f54 <rshift+0xa0>
 8009ec8:	f011 011f 	ands.w	r1, r1, #31
 8009ecc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009ed0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009ed4:	d10c      	bne.n	8009ef0 <rshift+0x3c>
 8009ed6:	f100 0710 	add.w	r7, r0, #16
 8009eda:	4629      	mov	r1, r5
 8009edc:	42b1      	cmp	r1, r6
 8009ede:	d334      	bcc.n	8009f4a <rshift+0x96>
 8009ee0:	1a9b      	subs	r3, r3, r2
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	1eea      	subs	r2, r5, #3
 8009ee6:	4296      	cmp	r6, r2
 8009ee8:	bf38      	it	cc
 8009eea:	2300      	movcc	r3, #0
 8009eec:	4423      	add	r3, r4
 8009eee:	e015      	b.n	8009f1c <rshift+0x68>
 8009ef0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009ef4:	f1c1 0820 	rsb	r8, r1, #32
 8009ef8:	40cf      	lsrs	r7, r1
 8009efa:	f105 0e04 	add.w	lr, r5, #4
 8009efe:	46a1      	mov	r9, r4
 8009f00:	4576      	cmp	r6, lr
 8009f02:	46f4      	mov	ip, lr
 8009f04:	d815      	bhi.n	8009f32 <rshift+0x7e>
 8009f06:	1a9a      	subs	r2, r3, r2
 8009f08:	0092      	lsls	r2, r2, #2
 8009f0a:	3a04      	subs	r2, #4
 8009f0c:	3501      	adds	r5, #1
 8009f0e:	42ae      	cmp	r6, r5
 8009f10:	bf38      	it	cc
 8009f12:	2200      	movcc	r2, #0
 8009f14:	18a3      	adds	r3, r4, r2
 8009f16:	50a7      	str	r7, [r4, r2]
 8009f18:	b107      	cbz	r7, 8009f1c <rshift+0x68>
 8009f1a:	3304      	adds	r3, #4
 8009f1c:	1b1a      	subs	r2, r3, r4
 8009f1e:	42a3      	cmp	r3, r4
 8009f20:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009f24:	bf08      	it	eq
 8009f26:	2300      	moveq	r3, #0
 8009f28:	6102      	str	r2, [r0, #16]
 8009f2a:	bf08      	it	eq
 8009f2c:	6143      	streq	r3, [r0, #20]
 8009f2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f32:	f8dc c000 	ldr.w	ip, [ip]
 8009f36:	fa0c fc08 	lsl.w	ip, ip, r8
 8009f3a:	ea4c 0707 	orr.w	r7, ip, r7
 8009f3e:	f849 7b04 	str.w	r7, [r9], #4
 8009f42:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009f46:	40cf      	lsrs	r7, r1
 8009f48:	e7da      	b.n	8009f00 <rshift+0x4c>
 8009f4a:	f851 cb04 	ldr.w	ip, [r1], #4
 8009f4e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009f52:	e7c3      	b.n	8009edc <rshift+0x28>
 8009f54:	4623      	mov	r3, r4
 8009f56:	e7e1      	b.n	8009f1c <rshift+0x68>

08009f58 <__hexdig_fun>:
 8009f58:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009f5c:	2b09      	cmp	r3, #9
 8009f5e:	d802      	bhi.n	8009f66 <__hexdig_fun+0xe>
 8009f60:	3820      	subs	r0, #32
 8009f62:	b2c0      	uxtb	r0, r0
 8009f64:	4770      	bx	lr
 8009f66:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009f6a:	2b05      	cmp	r3, #5
 8009f6c:	d801      	bhi.n	8009f72 <__hexdig_fun+0x1a>
 8009f6e:	3847      	subs	r0, #71	@ 0x47
 8009f70:	e7f7      	b.n	8009f62 <__hexdig_fun+0xa>
 8009f72:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009f76:	2b05      	cmp	r3, #5
 8009f78:	d801      	bhi.n	8009f7e <__hexdig_fun+0x26>
 8009f7a:	3827      	subs	r0, #39	@ 0x27
 8009f7c:	e7f1      	b.n	8009f62 <__hexdig_fun+0xa>
 8009f7e:	2000      	movs	r0, #0
 8009f80:	4770      	bx	lr
	...

08009f84 <__gethex>:
 8009f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f88:	b085      	sub	sp, #20
 8009f8a:	468a      	mov	sl, r1
 8009f8c:	9302      	str	r3, [sp, #8]
 8009f8e:	680b      	ldr	r3, [r1, #0]
 8009f90:	9001      	str	r0, [sp, #4]
 8009f92:	4690      	mov	r8, r2
 8009f94:	1c9c      	adds	r4, r3, #2
 8009f96:	46a1      	mov	r9, r4
 8009f98:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009f9c:	2830      	cmp	r0, #48	@ 0x30
 8009f9e:	d0fa      	beq.n	8009f96 <__gethex+0x12>
 8009fa0:	eba9 0303 	sub.w	r3, r9, r3
 8009fa4:	f1a3 0b02 	sub.w	fp, r3, #2
 8009fa8:	f7ff ffd6 	bl	8009f58 <__hexdig_fun>
 8009fac:	4605      	mov	r5, r0
 8009fae:	2800      	cmp	r0, #0
 8009fb0:	d168      	bne.n	800a084 <__gethex+0x100>
 8009fb2:	49a0      	ldr	r1, [pc, #640]	@ (800a234 <__gethex+0x2b0>)
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	4648      	mov	r0, r9
 8009fb8:	f7fd f82c 	bl	8007014 <strncmp>
 8009fbc:	4607      	mov	r7, r0
 8009fbe:	2800      	cmp	r0, #0
 8009fc0:	d167      	bne.n	800a092 <__gethex+0x10e>
 8009fc2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009fc6:	4626      	mov	r6, r4
 8009fc8:	f7ff ffc6 	bl	8009f58 <__hexdig_fun>
 8009fcc:	2800      	cmp	r0, #0
 8009fce:	d062      	beq.n	800a096 <__gethex+0x112>
 8009fd0:	4623      	mov	r3, r4
 8009fd2:	7818      	ldrb	r0, [r3, #0]
 8009fd4:	2830      	cmp	r0, #48	@ 0x30
 8009fd6:	4699      	mov	r9, r3
 8009fd8:	f103 0301 	add.w	r3, r3, #1
 8009fdc:	d0f9      	beq.n	8009fd2 <__gethex+0x4e>
 8009fde:	f7ff ffbb 	bl	8009f58 <__hexdig_fun>
 8009fe2:	fab0 f580 	clz	r5, r0
 8009fe6:	096d      	lsrs	r5, r5, #5
 8009fe8:	f04f 0b01 	mov.w	fp, #1
 8009fec:	464a      	mov	r2, r9
 8009fee:	4616      	mov	r6, r2
 8009ff0:	3201      	adds	r2, #1
 8009ff2:	7830      	ldrb	r0, [r6, #0]
 8009ff4:	f7ff ffb0 	bl	8009f58 <__hexdig_fun>
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	d1f8      	bne.n	8009fee <__gethex+0x6a>
 8009ffc:	498d      	ldr	r1, [pc, #564]	@ (800a234 <__gethex+0x2b0>)
 8009ffe:	2201      	movs	r2, #1
 800a000:	4630      	mov	r0, r6
 800a002:	f7fd f807 	bl	8007014 <strncmp>
 800a006:	2800      	cmp	r0, #0
 800a008:	d13f      	bne.n	800a08a <__gethex+0x106>
 800a00a:	b944      	cbnz	r4, 800a01e <__gethex+0x9a>
 800a00c:	1c74      	adds	r4, r6, #1
 800a00e:	4622      	mov	r2, r4
 800a010:	4616      	mov	r6, r2
 800a012:	3201      	adds	r2, #1
 800a014:	7830      	ldrb	r0, [r6, #0]
 800a016:	f7ff ff9f 	bl	8009f58 <__hexdig_fun>
 800a01a:	2800      	cmp	r0, #0
 800a01c:	d1f8      	bne.n	800a010 <__gethex+0x8c>
 800a01e:	1ba4      	subs	r4, r4, r6
 800a020:	00a7      	lsls	r7, r4, #2
 800a022:	7833      	ldrb	r3, [r6, #0]
 800a024:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a028:	2b50      	cmp	r3, #80	@ 0x50
 800a02a:	d13e      	bne.n	800a0aa <__gethex+0x126>
 800a02c:	7873      	ldrb	r3, [r6, #1]
 800a02e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a030:	d033      	beq.n	800a09a <__gethex+0x116>
 800a032:	2b2d      	cmp	r3, #45	@ 0x2d
 800a034:	d034      	beq.n	800a0a0 <__gethex+0x11c>
 800a036:	1c71      	adds	r1, r6, #1
 800a038:	2400      	movs	r4, #0
 800a03a:	7808      	ldrb	r0, [r1, #0]
 800a03c:	f7ff ff8c 	bl	8009f58 <__hexdig_fun>
 800a040:	1e43      	subs	r3, r0, #1
 800a042:	b2db      	uxtb	r3, r3
 800a044:	2b18      	cmp	r3, #24
 800a046:	d830      	bhi.n	800a0aa <__gethex+0x126>
 800a048:	f1a0 0210 	sub.w	r2, r0, #16
 800a04c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a050:	f7ff ff82 	bl	8009f58 <__hexdig_fun>
 800a054:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800a058:	fa5f fc8c 	uxtb.w	ip, ip
 800a05c:	f1bc 0f18 	cmp.w	ip, #24
 800a060:	f04f 030a 	mov.w	r3, #10
 800a064:	d91e      	bls.n	800a0a4 <__gethex+0x120>
 800a066:	b104      	cbz	r4, 800a06a <__gethex+0xe6>
 800a068:	4252      	negs	r2, r2
 800a06a:	4417      	add	r7, r2
 800a06c:	f8ca 1000 	str.w	r1, [sl]
 800a070:	b1ed      	cbz	r5, 800a0ae <__gethex+0x12a>
 800a072:	f1bb 0f00 	cmp.w	fp, #0
 800a076:	bf0c      	ite	eq
 800a078:	2506      	moveq	r5, #6
 800a07a:	2500      	movne	r5, #0
 800a07c:	4628      	mov	r0, r5
 800a07e:	b005      	add	sp, #20
 800a080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a084:	2500      	movs	r5, #0
 800a086:	462c      	mov	r4, r5
 800a088:	e7b0      	b.n	8009fec <__gethex+0x68>
 800a08a:	2c00      	cmp	r4, #0
 800a08c:	d1c7      	bne.n	800a01e <__gethex+0x9a>
 800a08e:	4627      	mov	r7, r4
 800a090:	e7c7      	b.n	800a022 <__gethex+0x9e>
 800a092:	464e      	mov	r6, r9
 800a094:	462f      	mov	r7, r5
 800a096:	2501      	movs	r5, #1
 800a098:	e7c3      	b.n	800a022 <__gethex+0x9e>
 800a09a:	2400      	movs	r4, #0
 800a09c:	1cb1      	adds	r1, r6, #2
 800a09e:	e7cc      	b.n	800a03a <__gethex+0xb6>
 800a0a0:	2401      	movs	r4, #1
 800a0a2:	e7fb      	b.n	800a09c <__gethex+0x118>
 800a0a4:	fb03 0002 	mla	r0, r3, r2, r0
 800a0a8:	e7ce      	b.n	800a048 <__gethex+0xc4>
 800a0aa:	4631      	mov	r1, r6
 800a0ac:	e7de      	b.n	800a06c <__gethex+0xe8>
 800a0ae:	eba6 0309 	sub.w	r3, r6, r9
 800a0b2:	3b01      	subs	r3, #1
 800a0b4:	4629      	mov	r1, r5
 800a0b6:	2b07      	cmp	r3, #7
 800a0b8:	dc0a      	bgt.n	800a0d0 <__gethex+0x14c>
 800a0ba:	9801      	ldr	r0, [sp, #4]
 800a0bc:	f7fd ff88 	bl	8007fd0 <_Balloc>
 800a0c0:	4604      	mov	r4, r0
 800a0c2:	b940      	cbnz	r0, 800a0d6 <__gethex+0x152>
 800a0c4:	4b5c      	ldr	r3, [pc, #368]	@ (800a238 <__gethex+0x2b4>)
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	21e4      	movs	r1, #228	@ 0xe4
 800a0ca:	485c      	ldr	r0, [pc, #368]	@ (800a23c <__gethex+0x2b8>)
 800a0cc:	f7ff fec0 	bl	8009e50 <__assert_func>
 800a0d0:	3101      	adds	r1, #1
 800a0d2:	105b      	asrs	r3, r3, #1
 800a0d4:	e7ef      	b.n	800a0b6 <__gethex+0x132>
 800a0d6:	f100 0a14 	add.w	sl, r0, #20
 800a0da:	2300      	movs	r3, #0
 800a0dc:	4655      	mov	r5, sl
 800a0de:	469b      	mov	fp, r3
 800a0e0:	45b1      	cmp	r9, r6
 800a0e2:	d337      	bcc.n	800a154 <__gethex+0x1d0>
 800a0e4:	f845 bb04 	str.w	fp, [r5], #4
 800a0e8:	eba5 050a 	sub.w	r5, r5, sl
 800a0ec:	10ad      	asrs	r5, r5, #2
 800a0ee:	6125      	str	r5, [r4, #16]
 800a0f0:	4658      	mov	r0, fp
 800a0f2:	f7fe f85f 	bl	80081b4 <__hi0bits>
 800a0f6:	016d      	lsls	r5, r5, #5
 800a0f8:	f8d8 6000 	ldr.w	r6, [r8]
 800a0fc:	1a2d      	subs	r5, r5, r0
 800a0fe:	42b5      	cmp	r5, r6
 800a100:	dd54      	ble.n	800a1ac <__gethex+0x228>
 800a102:	1bad      	subs	r5, r5, r6
 800a104:	4629      	mov	r1, r5
 800a106:	4620      	mov	r0, r4
 800a108:	f7fe fbf3 	bl	80088f2 <__any_on>
 800a10c:	4681      	mov	r9, r0
 800a10e:	b178      	cbz	r0, 800a130 <__gethex+0x1ac>
 800a110:	1e6b      	subs	r3, r5, #1
 800a112:	1159      	asrs	r1, r3, #5
 800a114:	f003 021f 	and.w	r2, r3, #31
 800a118:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a11c:	f04f 0901 	mov.w	r9, #1
 800a120:	fa09 f202 	lsl.w	r2, r9, r2
 800a124:	420a      	tst	r2, r1
 800a126:	d003      	beq.n	800a130 <__gethex+0x1ac>
 800a128:	454b      	cmp	r3, r9
 800a12a:	dc36      	bgt.n	800a19a <__gethex+0x216>
 800a12c:	f04f 0902 	mov.w	r9, #2
 800a130:	4629      	mov	r1, r5
 800a132:	4620      	mov	r0, r4
 800a134:	f7ff febe 	bl	8009eb4 <rshift>
 800a138:	442f      	add	r7, r5
 800a13a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a13e:	42bb      	cmp	r3, r7
 800a140:	da42      	bge.n	800a1c8 <__gethex+0x244>
 800a142:	9801      	ldr	r0, [sp, #4]
 800a144:	4621      	mov	r1, r4
 800a146:	f7fd ff83 	bl	8008050 <_Bfree>
 800a14a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a14c:	2300      	movs	r3, #0
 800a14e:	6013      	str	r3, [r2, #0]
 800a150:	25a3      	movs	r5, #163	@ 0xa3
 800a152:	e793      	b.n	800a07c <__gethex+0xf8>
 800a154:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a158:	2a2e      	cmp	r2, #46	@ 0x2e
 800a15a:	d012      	beq.n	800a182 <__gethex+0x1fe>
 800a15c:	2b20      	cmp	r3, #32
 800a15e:	d104      	bne.n	800a16a <__gethex+0x1e6>
 800a160:	f845 bb04 	str.w	fp, [r5], #4
 800a164:	f04f 0b00 	mov.w	fp, #0
 800a168:	465b      	mov	r3, fp
 800a16a:	7830      	ldrb	r0, [r6, #0]
 800a16c:	9303      	str	r3, [sp, #12]
 800a16e:	f7ff fef3 	bl	8009f58 <__hexdig_fun>
 800a172:	9b03      	ldr	r3, [sp, #12]
 800a174:	f000 000f 	and.w	r0, r0, #15
 800a178:	4098      	lsls	r0, r3
 800a17a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a17e:	3304      	adds	r3, #4
 800a180:	e7ae      	b.n	800a0e0 <__gethex+0x15c>
 800a182:	45b1      	cmp	r9, r6
 800a184:	d8ea      	bhi.n	800a15c <__gethex+0x1d8>
 800a186:	492b      	ldr	r1, [pc, #172]	@ (800a234 <__gethex+0x2b0>)
 800a188:	9303      	str	r3, [sp, #12]
 800a18a:	2201      	movs	r2, #1
 800a18c:	4630      	mov	r0, r6
 800a18e:	f7fc ff41 	bl	8007014 <strncmp>
 800a192:	9b03      	ldr	r3, [sp, #12]
 800a194:	2800      	cmp	r0, #0
 800a196:	d1e1      	bne.n	800a15c <__gethex+0x1d8>
 800a198:	e7a2      	b.n	800a0e0 <__gethex+0x15c>
 800a19a:	1ea9      	subs	r1, r5, #2
 800a19c:	4620      	mov	r0, r4
 800a19e:	f7fe fba8 	bl	80088f2 <__any_on>
 800a1a2:	2800      	cmp	r0, #0
 800a1a4:	d0c2      	beq.n	800a12c <__gethex+0x1a8>
 800a1a6:	f04f 0903 	mov.w	r9, #3
 800a1aa:	e7c1      	b.n	800a130 <__gethex+0x1ac>
 800a1ac:	da09      	bge.n	800a1c2 <__gethex+0x23e>
 800a1ae:	1b75      	subs	r5, r6, r5
 800a1b0:	4621      	mov	r1, r4
 800a1b2:	9801      	ldr	r0, [sp, #4]
 800a1b4:	462a      	mov	r2, r5
 800a1b6:	f7fe f963 	bl	8008480 <__lshift>
 800a1ba:	1b7f      	subs	r7, r7, r5
 800a1bc:	4604      	mov	r4, r0
 800a1be:	f100 0a14 	add.w	sl, r0, #20
 800a1c2:	f04f 0900 	mov.w	r9, #0
 800a1c6:	e7b8      	b.n	800a13a <__gethex+0x1b6>
 800a1c8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a1cc:	42bd      	cmp	r5, r7
 800a1ce:	dd6f      	ble.n	800a2b0 <__gethex+0x32c>
 800a1d0:	1bed      	subs	r5, r5, r7
 800a1d2:	42ae      	cmp	r6, r5
 800a1d4:	dc34      	bgt.n	800a240 <__gethex+0x2bc>
 800a1d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a1da:	2b02      	cmp	r3, #2
 800a1dc:	d022      	beq.n	800a224 <__gethex+0x2a0>
 800a1de:	2b03      	cmp	r3, #3
 800a1e0:	d024      	beq.n	800a22c <__gethex+0x2a8>
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	d115      	bne.n	800a212 <__gethex+0x28e>
 800a1e6:	42ae      	cmp	r6, r5
 800a1e8:	d113      	bne.n	800a212 <__gethex+0x28e>
 800a1ea:	2e01      	cmp	r6, #1
 800a1ec:	d10b      	bne.n	800a206 <__gethex+0x282>
 800a1ee:	9a02      	ldr	r2, [sp, #8]
 800a1f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a1f4:	6013      	str	r3, [r2, #0]
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	6123      	str	r3, [r4, #16]
 800a1fa:	f8ca 3000 	str.w	r3, [sl]
 800a1fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a200:	2562      	movs	r5, #98	@ 0x62
 800a202:	601c      	str	r4, [r3, #0]
 800a204:	e73a      	b.n	800a07c <__gethex+0xf8>
 800a206:	1e71      	subs	r1, r6, #1
 800a208:	4620      	mov	r0, r4
 800a20a:	f7fe fb72 	bl	80088f2 <__any_on>
 800a20e:	2800      	cmp	r0, #0
 800a210:	d1ed      	bne.n	800a1ee <__gethex+0x26a>
 800a212:	9801      	ldr	r0, [sp, #4]
 800a214:	4621      	mov	r1, r4
 800a216:	f7fd ff1b 	bl	8008050 <_Bfree>
 800a21a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a21c:	2300      	movs	r3, #0
 800a21e:	6013      	str	r3, [r2, #0]
 800a220:	2550      	movs	r5, #80	@ 0x50
 800a222:	e72b      	b.n	800a07c <__gethex+0xf8>
 800a224:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a226:	2b00      	cmp	r3, #0
 800a228:	d1f3      	bne.n	800a212 <__gethex+0x28e>
 800a22a:	e7e0      	b.n	800a1ee <__gethex+0x26a>
 800a22c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d1dd      	bne.n	800a1ee <__gethex+0x26a>
 800a232:	e7ee      	b.n	800a212 <__gethex+0x28e>
 800a234:	0800aac0 	.word	0x0800aac0
 800a238:	0800a959 	.word	0x0800a959
 800a23c:	0800ac6e 	.word	0x0800ac6e
 800a240:	1e6f      	subs	r7, r5, #1
 800a242:	f1b9 0f00 	cmp.w	r9, #0
 800a246:	d130      	bne.n	800a2aa <__gethex+0x326>
 800a248:	b127      	cbz	r7, 800a254 <__gethex+0x2d0>
 800a24a:	4639      	mov	r1, r7
 800a24c:	4620      	mov	r0, r4
 800a24e:	f7fe fb50 	bl	80088f2 <__any_on>
 800a252:	4681      	mov	r9, r0
 800a254:	117a      	asrs	r2, r7, #5
 800a256:	2301      	movs	r3, #1
 800a258:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a25c:	f007 071f 	and.w	r7, r7, #31
 800a260:	40bb      	lsls	r3, r7
 800a262:	4213      	tst	r3, r2
 800a264:	4629      	mov	r1, r5
 800a266:	4620      	mov	r0, r4
 800a268:	bf18      	it	ne
 800a26a:	f049 0902 	orrne.w	r9, r9, #2
 800a26e:	f7ff fe21 	bl	8009eb4 <rshift>
 800a272:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a276:	1b76      	subs	r6, r6, r5
 800a278:	2502      	movs	r5, #2
 800a27a:	f1b9 0f00 	cmp.w	r9, #0
 800a27e:	d047      	beq.n	800a310 <__gethex+0x38c>
 800a280:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a284:	2b02      	cmp	r3, #2
 800a286:	d015      	beq.n	800a2b4 <__gethex+0x330>
 800a288:	2b03      	cmp	r3, #3
 800a28a:	d017      	beq.n	800a2bc <__gethex+0x338>
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d109      	bne.n	800a2a4 <__gethex+0x320>
 800a290:	f019 0f02 	tst.w	r9, #2
 800a294:	d006      	beq.n	800a2a4 <__gethex+0x320>
 800a296:	f8da 3000 	ldr.w	r3, [sl]
 800a29a:	ea49 0903 	orr.w	r9, r9, r3
 800a29e:	f019 0f01 	tst.w	r9, #1
 800a2a2:	d10e      	bne.n	800a2c2 <__gethex+0x33e>
 800a2a4:	f045 0510 	orr.w	r5, r5, #16
 800a2a8:	e032      	b.n	800a310 <__gethex+0x38c>
 800a2aa:	f04f 0901 	mov.w	r9, #1
 800a2ae:	e7d1      	b.n	800a254 <__gethex+0x2d0>
 800a2b0:	2501      	movs	r5, #1
 800a2b2:	e7e2      	b.n	800a27a <__gethex+0x2f6>
 800a2b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2b6:	f1c3 0301 	rsb	r3, r3, #1
 800a2ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a2bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d0f0      	beq.n	800a2a4 <__gethex+0x320>
 800a2c2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a2c6:	f104 0314 	add.w	r3, r4, #20
 800a2ca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a2ce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a2d2:	f04f 0c00 	mov.w	ip, #0
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2dc:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800a2e0:	d01b      	beq.n	800a31a <__gethex+0x396>
 800a2e2:	3201      	adds	r2, #1
 800a2e4:	6002      	str	r2, [r0, #0]
 800a2e6:	2d02      	cmp	r5, #2
 800a2e8:	f104 0314 	add.w	r3, r4, #20
 800a2ec:	d13c      	bne.n	800a368 <__gethex+0x3e4>
 800a2ee:	f8d8 2000 	ldr.w	r2, [r8]
 800a2f2:	3a01      	subs	r2, #1
 800a2f4:	42b2      	cmp	r2, r6
 800a2f6:	d109      	bne.n	800a30c <__gethex+0x388>
 800a2f8:	1171      	asrs	r1, r6, #5
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a300:	f006 061f 	and.w	r6, r6, #31
 800a304:	fa02 f606 	lsl.w	r6, r2, r6
 800a308:	421e      	tst	r6, r3
 800a30a:	d13a      	bne.n	800a382 <__gethex+0x3fe>
 800a30c:	f045 0520 	orr.w	r5, r5, #32
 800a310:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a312:	601c      	str	r4, [r3, #0]
 800a314:	9b02      	ldr	r3, [sp, #8]
 800a316:	601f      	str	r7, [r3, #0]
 800a318:	e6b0      	b.n	800a07c <__gethex+0xf8>
 800a31a:	4299      	cmp	r1, r3
 800a31c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a320:	d8d9      	bhi.n	800a2d6 <__gethex+0x352>
 800a322:	68a3      	ldr	r3, [r4, #8]
 800a324:	459b      	cmp	fp, r3
 800a326:	db17      	blt.n	800a358 <__gethex+0x3d4>
 800a328:	6861      	ldr	r1, [r4, #4]
 800a32a:	9801      	ldr	r0, [sp, #4]
 800a32c:	3101      	adds	r1, #1
 800a32e:	f7fd fe4f 	bl	8007fd0 <_Balloc>
 800a332:	4681      	mov	r9, r0
 800a334:	b918      	cbnz	r0, 800a33e <__gethex+0x3ba>
 800a336:	4b1a      	ldr	r3, [pc, #104]	@ (800a3a0 <__gethex+0x41c>)
 800a338:	4602      	mov	r2, r0
 800a33a:	2184      	movs	r1, #132	@ 0x84
 800a33c:	e6c5      	b.n	800a0ca <__gethex+0x146>
 800a33e:	6922      	ldr	r2, [r4, #16]
 800a340:	3202      	adds	r2, #2
 800a342:	f104 010c 	add.w	r1, r4, #12
 800a346:	0092      	lsls	r2, r2, #2
 800a348:	300c      	adds	r0, #12
 800a34a:	f7ff fd6b 	bl	8009e24 <memcpy>
 800a34e:	4621      	mov	r1, r4
 800a350:	9801      	ldr	r0, [sp, #4]
 800a352:	f7fd fe7d 	bl	8008050 <_Bfree>
 800a356:	464c      	mov	r4, r9
 800a358:	6923      	ldr	r3, [r4, #16]
 800a35a:	1c5a      	adds	r2, r3, #1
 800a35c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a360:	6122      	str	r2, [r4, #16]
 800a362:	2201      	movs	r2, #1
 800a364:	615a      	str	r2, [r3, #20]
 800a366:	e7be      	b.n	800a2e6 <__gethex+0x362>
 800a368:	6922      	ldr	r2, [r4, #16]
 800a36a:	455a      	cmp	r2, fp
 800a36c:	dd0b      	ble.n	800a386 <__gethex+0x402>
 800a36e:	2101      	movs	r1, #1
 800a370:	4620      	mov	r0, r4
 800a372:	f7ff fd9f 	bl	8009eb4 <rshift>
 800a376:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a37a:	3701      	adds	r7, #1
 800a37c:	42bb      	cmp	r3, r7
 800a37e:	f6ff aee0 	blt.w	800a142 <__gethex+0x1be>
 800a382:	2501      	movs	r5, #1
 800a384:	e7c2      	b.n	800a30c <__gethex+0x388>
 800a386:	f016 061f 	ands.w	r6, r6, #31
 800a38a:	d0fa      	beq.n	800a382 <__gethex+0x3fe>
 800a38c:	4453      	add	r3, sl
 800a38e:	f1c6 0620 	rsb	r6, r6, #32
 800a392:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a396:	f7fd ff0d 	bl	80081b4 <__hi0bits>
 800a39a:	42b0      	cmp	r0, r6
 800a39c:	dbe7      	blt.n	800a36e <__gethex+0x3ea>
 800a39e:	e7f0      	b.n	800a382 <__gethex+0x3fe>
 800a3a0:	0800a959 	.word	0x0800a959

0800a3a4 <L_shift>:
 800a3a4:	f1c2 0208 	rsb	r2, r2, #8
 800a3a8:	0092      	lsls	r2, r2, #2
 800a3aa:	b570      	push	{r4, r5, r6, lr}
 800a3ac:	f1c2 0620 	rsb	r6, r2, #32
 800a3b0:	6843      	ldr	r3, [r0, #4]
 800a3b2:	6804      	ldr	r4, [r0, #0]
 800a3b4:	fa03 f506 	lsl.w	r5, r3, r6
 800a3b8:	432c      	orrs	r4, r5
 800a3ba:	40d3      	lsrs	r3, r2
 800a3bc:	6004      	str	r4, [r0, #0]
 800a3be:	f840 3f04 	str.w	r3, [r0, #4]!
 800a3c2:	4288      	cmp	r0, r1
 800a3c4:	d3f4      	bcc.n	800a3b0 <L_shift+0xc>
 800a3c6:	bd70      	pop	{r4, r5, r6, pc}

0800a3c8 <__match>:
 800a3c8:	b530      	push	{r4, r5, lr}
 800a3ca:	6803      	ldr	r3, [r0, #0]
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3d2:	b914      	cbnz	r4, 800a3da <__match+0x12>
 800a3d4:	6003      	str	r3, [r0, #0]
 800a3d6:	2001      	movs	r0, #1
 800a3d8:	bd30      	pop	{r4, r5, pc}
 800a3da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3de:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a3e2:	2d19      	cmp	r5, #25
 800a3e4:	bf98      	it	ls
 800a3e6:	3220      	addls	r2, #32
 800a3e8:	42a2      	cmp	r2, r4
 800a3ea:	d0f0      	beq.n	800a3ce <__match+0x6>
 800a3ec:	2000      	movs	r0, #0
 800a3ee:	e7f3      	b.n	800a3d8 <__match+0x10>

0800a3f0 <__hexnan>:
 800a3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f4:	680b      	ldr	r3, [r1, #0]
 800a3f6:	6801      	ldr	r1, [r0, #0]
 800a3f8:	115e      	asrs	r6, r3, #5
 800a3fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a3fe:	f013 031f 	ands.w	r3, r3, #31
 800a402:	b087      	sub	sp, #28
 800a404:	bf18      	it	ne
 800a406:	3604      	addne	r6, #4
 800a408:	2500      	movs	r5, #0
 800a40a:	1f37      	subs	r7, r6, #4
 800a40c:	4682      	mov	sl, r0
 800a40e:	4690      	mov	r8, r2
 800a410:	9301      	str	r3, [sp, #4]
 800a412:	f846 5c04 	str.w	r5, [r6, #-4]
 800a416:	46b9      	mov	r9, r7
 800a418:	463c      	mov	r4, r7
 800a41a:	9502      	str	r5, [sp, #8]
 800a41c:	46ab      	mov	fp, r5
 800a41e:	784a      	ldrb	r2, [r1, #1]
 800a420:	1c4b      	adds	r3, r1, #1
 800a422:	9303      	str	r3, [sp, #12]
 800a424:	b342      	cbz	r2, 800a478 <__hexnan+0x88>
 800a426:	4610      	mov	r0, r2
 800a428:	9105      	str	r1, [sp, #20]
 800a42a:	9204      	str	r2, [sp, #16]
 800a42c:	f7ff fd94 	bl	8009f58 <__hexdig_fun>
 800a430:	2800      	cmp	r0, #0
 800a432:	d151      	bne.n	800a4d8 <__hexnan+0xe8>
 800a434:	9a04      	ldr	r2, [sp, #16]
 800a436:	9905      	ldr	r1, [sp, #20]
 800a438:	2a20      	cmp	r2, #32
 800a43a:	d818      	bhi.n	800a46e <__hexnan+0x7e>
 800a43c:	9b02      	ldr	r3, [sp, #8]
 800a43e:	459b      	cmp	fp, r3
 800a440:	dd13      	ble.n	800a46a <__hexnan+0x7a>
 800a442:	454c      	cmp	r4, r9
 800a444:	d206      	bcs.n	800a454 <__hexnan+0x64>
 800a446:	2d07      	cmp	r5, #7
 800a448:	dc04      	bgt.n	800a454 <__hexnan+0x64>
 800a44a:	462a      	mov	r2, r5
 800a44c:	4649      	mov	r1, r9
 800a44e:	4620      	mov	r0, r4
 800a450:	f7ff ffa8 	bl	800a3a4 <L_shift>
 800a454:	4544      	cmp	r4, r8
 800a456:	d952      	bls.n	800a4fe <__hexnan+0x10e>
 800a458:	2300      	movs	r3, #0
 800a45a:	f1a4 0904 	sub.w	r9, r4, #4
 800a45e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a462:	f8cd b008 	str.w	fp, [sp, #8]
 800a466:	464c      	mov	r4, r9
 800a468:	461d      	mov	r5, r3
 800a46a:	9903      	ldr	r1, [sp, #12]
 800a46c:	e7d7      	b.n	800a41e <__hexnan+0x2e>
 800a46e:	2a29      	cmp	r2, #41	@ 0x29
 800a470:	d157      	bne.n	800a522 <__hexnan+0x132>
 800a472:	3102      	adds	r1, #2
 800a474:	f8ca 1000 	str.w	r1, [sl]
 800a478:	f1bb 0f00 	cmp.w	fp, #0
 800a47c:	d051      	beq.n	800a522 <__hexnan+0x132>
 800a47e:	454c      	cmp	r4, r9
 800a480:	d206      	bcs.n	800a490 <__hexnan+0xa0>
 800a482:	2d07      	cmp	r5, #7
 800a484:	dc04      	bgt.n	800a490 <__hexnan+0xa0>
 800a486:	462a      	mov	r2, r5
 800a488:	4649      	mov	r1, r9
 800a48a:	4620      	mov	r0, r4
 800a48c:	f7ff ff8a 	bl	800a3a4 <L_shift>
 800a490:	4544      	cmp	r4, r8
 800a492:	d936      	bls.n	800a502 <__hexnan+0x112>
 800a494:	f1a8 0204 	sub.w	r2, r8, #4
 800a498:	4623      	mov	r3, r4
 800a49a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a49e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a4a2:	429f      	cmp	r7, r3
 800a4a4:	d2f9      	bcs.n	800a49a <__hexnan+0xaa>
 800a4a6:	1b3b      	subs	r3, r7, r4
 800a4a8:	f023 0303 	bic.w	r3, r3, #3
 800a4ac:	3304      	adds	r3, #4
 800a4ae:	3401      	adds	r4, #1
 800a4b0:	3e03      	subs	r6, #3
 800a4b2:	42b4      	cmp	r4, r6
 800a4b4:	bf88      	it	hi
 800a4b6:	2304      	movhi	r3, #4
 800a4b8:	4443      	add	r3, r8
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f843 2b04 	str.w	r2, [r3], #4
 800a4c0:	429f      	cmp	r7, r3
 800a4c2:	d2fb      	bcs.n	800a4bc <__hexnan+0xcc>
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	b91b      	cbnz	r3, 800a4d0 <__hexnan+0xe0>
 800a4c8:	4547      	cmp	r7, r8
 800a4ca:	d128      	bne.n	800a51e <__hexnan+0x12e>
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	603b      	str	r3, [r7, #0]
 800a4d0:	2005      	movs	r0, #5
 800a4d2:	b007      	add	sp, #28
 800a4d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4d8:	3501      	adds	r5, #1
 800a4da:	2d08      	cmp	r5, #8
 800a4dc:	f10b 0b01 	add.w	fp, fp, #1
 800a4e0:	dd06      	ble.n	800a4f0 <__hexnan+0x100>
 800a4e2:	4544      	cmp	r4, r8
 800a4e4:	d9c1      	bls.n	800a46a <__hexnan+0x7a>
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	f844 3c04 	str.w	r3, [r4, #-4]
 800a4ec:	2501      	movs	r5, #1
 800a4ee:	3c04      	subs	r4, #4
 800a4f0:	6822      	ldr	r2, [r4, #0]
 800a4f2:	f000 000f 	and.w	r0, r0, #15
 800a4f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a4fa:	6020      	str	r0, [r4, #0]
 800a4fc:	e7b5      	b.n	800a46a <__hexnan+0x7a>
 800a4fe:	2508      	movs	r5, #8
 800a500:	e7b3      	b.n	800a46a <__hexnan+0x7a>
 800a502:	9b01      	ldr	r3, [sp, #4]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d0dd      	beq.n	800a4c4 <__hexnan+0xd4>
 800a508:	f1c3 0320 	rsb	r3, r3, #32
 800a50c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a510:	40da      	lsrs	r2, r3
 800a512:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a516:	4013      	ands	r3, r2
 800a518:	f846 3c04 	str.w	r3, [r6, #-4]
 800a51c:	e7d2      	b.n	800a4c4 <__hexnan+0xd4>
 800a51e:	3f04      	subs	r7, #4
 800a520:	e7d0      	b.n	800a4c4 <__hexnan+0xd4>
 800a522:	2004      	movs	r0, #4
 800a524:	e7d5      	b.n	800a4d2 <__hexnan+0xe2>

0800a526 <__ascii_mbtowc>:
 800a526:	b082      	sub	sp, #8
 800a528:	b901      	cbnz	r1, 800a52c <__ascii_mbtowc+0x6>
 800a52a:	a901      	add	r1, sp, #4
 800a52c:	b142      	cbz	r2, 800a540 <__ascii_mbtowc+0x1a>
 800a52e:	b14b      	cbz	r3, 800a544 <__ascii_mbtowc+0x1e>
 800a530:	7813      	ldrb	r3, [r2, #0]
 800a532:	600b      	str	r3, [r1, #0]
 800a534:	7812      	ldrb	r2, [r2, #0]
 800a536:	1e10      	subs	r0, r2, #0
 800a538:	bf18      	it	ne
 800a53a:	2001      	movne	r0, #1
 800a53c:	b002      	add	sp, #8
 800a53e:	4770      	bx	lr
 800a540:	4610      	mov	r0, r2
 800a542:	e7fb      	b.n	800a53c <__ascii_mbtowc+0x16>
 800a544:	f06f 0001 	mvn.w	r0, #1
 800a548:	e7f8      	b.n	800a53c <__ascii_mbtowc+0x16>

0800a54a <_realloc_r>:
 800a54a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a54e:	4680      	mov	r8, r0
 800a550:	4615      	mov	r5, r2
 800a552:	460c      	mov	r4, r1
 800a554:	b921      	cbnz	r1, 800a560 <_realloc_r+0x16>
 800a556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a55a:	4611      	mov	r1, r2
 800a55c:	f7fd bcac 	b.w	8007eb8 <_malloc_r>
 800a560:	b92a      	cbnz	r2, 800a56e <_realloc_r+0x24>
 800a562:	f7fd fc35 	bl	8007dd0 <_free_r>
 800a566:	2400      	movs	r4, #0
 800a568:	4620      	mov	r0, r4
 800a56a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a56e:	f000 f840 	bl	800a5f2 <_malloc_usable_size_r>
 800a572:	4285      	cmp	r5, r0
 800a574:	4606      	mov	r6, r0
 800a576:	d802      	bhi.n	800a57e <_realloc_r+0x34>
 800a578:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a57c:	d8f4      	bhi.n	800a568 <_realloc_r+0x1e>
 800a57e:	4629      	mov	r1, r5
 800a580:	4640      	mov	r0, r8
 800a582:	f7fd fc99 	bl	8007eb8 <_malloc_r>
 800a586:	4607      	mov	r7, r0
 800a588:	2800      	cmp	r0, #0
 800a58a:	d0ec      	beq.n	800a566 <_realloc_r+0x1c>
 800a58c:	42b5      	cmp	r5, r6
 800a58e:	462a      	mov	r2, r5
 800a590:	4621      	mov	r1, r4
 800a592:	bf28      	it	cs
 800a594:	4632      	movcs	r2, r6
 800a596:	f7ff fc45 	bl	8009e24 <memcpy>
 800a59a:	4621      	mov	r1, r4
 800a59c:	4640      	mov	r0, r8
 800a59e:	f7fd fc17 	bl	8007dd0 <_free_r>
 800a5a2:	463c      	mov	r4, r7
 800a5a4:	e7e0      	b.n	800a568 <_realloc_r+0x1e>

0800a5a6 <__ascii_wctomb>:
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	4608      	mov	r0, r1
 800a5aa:	b141      	cbz	r1, 800a5be <__ascii_wctomb+0x18>
 800a5ac:	2aff      	cmp	r2, #255	@ 0xff
 800a5ae:	d904      	bls.n	800a5ba <__ascii_wctomb+0x14>
 800a5b0:	228a      	movs	r2, #138	@ 0x8a
 800a5b2:	601a      	str	r2, [r3, #0]
 800a5b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a5b8:	4770      	bx	lr
 800a5ba:	700a      	strb	r2, [r1, #0]
 800a5bc:	2001      	movs	r0, #1
 800a5be:	4770      	bx	lr

0800a5c0 <fiprintf>:
 800a5c0:	b40e      	push	{r1, r2, r3}
 800a5c2:	b503      	push	{r0, r1, lr}
 800a5c4:	4601      	mov	r1, r0
 800a5c6:	ab03      	add	r3, sp, #12
 800a5c8:	4805      	ldr	r0, [pc, #20]	@ (800a5e0 <fiprintf+0x20>)
 800a5ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5ce:	6800      	ldr	r0, [r0, #0]
 800a5d0:	9301      	str	r3, [sp, #4]
 800a5d2:	f7ff f9b5 	bl	8009940 <_vfiprintf_r>
 800a5d6:	b002      	add	sp, #8
 800a5d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5dc:	b003      	add	sp, #12
 800a5de:	4770      	bx	lr
 800a5e0:	2000001c 	.word	0x2000001c

0800a5e4 <abort>:
 800a5e4:	b508      	push	{r3, lr}
 800a5e6:	2006      	movs	r0, #6
 800a5e8:	f000 f834 	bl	800a654 <raise>
 800a5ec:	2001      	movs	r0, #1
 800a5ee:	f7f7 ff59 	bl	80024a4 <_exit>

0800a5f2 <_malloc_usable_size_r>:
 800a5f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5f6:	1f18      	subs	r0, r3, #4
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	bfbc      	itt	lt
 800a5fc:	580b      	ldrlt	r3, [r1, r0]
 800a5fe:	18c0      	addlt	r0, r0, r3
 800a600:	4770      	bx	lr

0800a602 <_raise_r>:
 800a602:	291f      	cmp	r1, #31
 800a604:	b538      	push	{r3, r4, r5, lr}
 800a606:	4605      	mov	r5, r0
 800a608:	460c      	mov	r4, r1
 800a60a:	d904      	bls.n	800a616 <_raise_r+0x14>
 800a60c:	2316      	movs	r3, #22
 800a60e:	6003      	str	r3, [r0, #0]
 800a610:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a614:	bd38      	pop	{r3, r4, r5, pc}
 800a616:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a618:	b112      	cbz	r2, 800a620 <_raise_r+0x1e>
 800a61a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a61e:	b94b      	cbnz	r3, 800a634 <_raise_r+0x32>
 800a620:	4628      	mov	r0, r5
 800a622:	f000 f831 	bl	800a688 <_getpid_r>
 800a626:	4622      	mov	r2, r4
 800a628:	4601      	mov	r1, r0
 800a62a:	4628      	mov	r0, r5
 800a62c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a630:	f000 b818 	b.w	800a664 <_kill_r>
 800a634:	2b01      	cmp	r3, #1
 800a636:	d00a      	beq.n	800a64e <_raise_r+0x4c>
 800a638:	1c59      	adds	r1, r3, #1
 800a63a:	d103      	bne.n	800a644 <_raise_r+0x42>
 800a63c:	2316      	movs	r3, #22
 800a63e:	6003      	str	r3, [r0, #0]
 800a640:	2001      	movs	r0, #1
 800a642:	e7e7      	b.n	800a614 <_raise_r+0x12>
 800a644:	2100      	movs	r1, #0
 800a646:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a64a:	4620      	mov	r0, r4
 800a64c:	4798      	blx	r3
 800a64e:	2000      	movs	r0, #0
 800a650:	e7e0      	b.n	800a614 <_raise_r+0x12>
	...

0800a654 <raise>:
 800a654:	4b02      	ldr	r3, [pc, #8]	@ (800a660 <raise+0xc>)
 800a656:	4601      	mov	r1, r0
 800a658:	6818      	ldr	r0, [r3, #0]
 800a65a:	f7ff bfd2 	b.w	800a602 <_raise_r>
 800a65e:	bf00      	nop
 800a660:	2000001c 	.word	0x2000001c

0800a664 <_kill_r>:
 800a664:	b538      	push	{r3, r4, r5, lr}
 800a666:	4d07      	ldr	r5, [pc, #28]	@ (800a684 <_kill_r+0x20>)
 800a668:	2300      	movs	r3, #0
 800a66a:	4604      	mov	r4, r0
 800a66c:	4608      	mov	r0, r1
 800a66e:	4611      	mov	r1, r2
 800a670:	602b      	str	r3, [r5, #0]
 800a672:	f7f7 ff07 	bl	8002484 <_kill>
 800a676:	1c43      	adds	r3, r0, #1
 800a678:	d102      	bne.n	800a680 <_kill_r+0x1c>
 800a67a:	682b      	ldr	r3, [r5, #0]
 800a67c:	b103      	cbz	r3, 800a680 <_kill_r+0x1c>
 800a67e:	6023      	str	r3, [r4, #0]
 800a680:	bd38      	pop	{r3, r4, r5, pc}
 800a682:	bf00      	nop
 800a684:	2000049c 	.word	0x2000049c

0800a688 <_getpid_r>:
 800a688:	f7f7 bef4 	b.w	8002474 <_getpid>

0800a68c <_init>:
 800a68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a68e:	bf00      	nop
 800a690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a692:	bc08      	pop	{r3}
 800a694:	469e      	mov	lr, r3
 800a696:	4770      	bx	lr

0800a698 <_fini>:
 800a698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a69a:	bf00      	nop
 800a69c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a69e:	bc08      	pop	{r3}
 800a6a0:	469e      	mov	lr, r3
 800a6a2:	4770      	bx	lr
